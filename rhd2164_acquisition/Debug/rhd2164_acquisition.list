
rhd2164_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed78  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  0800f048  0800f048  00010048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080111d8  080111d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080111e0  080111e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080111e4  080111e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080111e8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000099c  24000070  08011254  00013070  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000a0c  08011254  00013a0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bd1f  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003313  00000000  00000000  0002edb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001528  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000108a  00000000  00000000  000335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f10  00000000  00000000  00034682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c3a5  00000000  00000000  00068592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151452  00000000  00000000  00084937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d5d89  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006190  00000000  00000000  001d5dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001dbf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f030 	.word	0x0800f030

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800f030 	.word	0x0800f030

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	4619      	mov	r1, r3
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f006 fca2 	bl	8006f60 <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fb76 	bl	8003d20 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <enable_interrupt_timer+0x16>
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <enable_interrupt_timer+0x24>)
 800064c:	f00a f988 	bl	800a960 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000650:	e002      	b.n	8000658 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <enable_interrupt_timer+0x24>)
 8000654:	f00a fa0a 	bl	800aa6c <HAL_TIM_Base_Stop_IT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000324 	.word	0x24000324

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ea      	sub	sp, #424	@ 0x1a8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f003 fac7 	bl	8003bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f87d 	bl	800076c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000672:	f000 f8e9 	bl	8000848 <PeriphCommonClock_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067a:	f7ff ffd3 	bl	8000624 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fcbf 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8000682:	f000 fc8d 	bl	8000fa0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000686:	f000 f9b7 	bl	80009f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800068a:	f000 fa87 	bl	8000b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800068e:	f000 fb0d 	bl	8000cac <MX_TIM3_Init>
  MX_SPI3_Init();
 8000692:	f000 f959 	bl	8000948 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000696:	f000 f907 	bl	80008a8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800069a:	f000 fc33 	bl	8000f04 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 800069e:	f000 fb5d 	bl	8000d5c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  TIM1->EGR |= TIM_EGR_UG;  // update event
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <main+0xf0>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <main+0xf0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6153      	str	r3, [r2, #20]


  // Write register values to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1LFZ1, 0b10); // enable pausing TIM3 during debug
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <main+0xf4>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006b2:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <main+0xf4>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB1LFZ1, 0b1); // enable pausing TIM2 during debug
 80006ba:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <main+0xf4>)
 80006bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006be:	4a26      	ldr	r2, [pc, #152]	@ (8000758 <main+0xf4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB2FZ1, 0b1); // enable pausing TIM1 during debug
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <main+0xf4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <main+0xf4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	64d3      	str	r3, [r2, #76]	@ 0x4c

  // Allocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 80006d2:	f000 fec5 	bl	8001460 <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 80006d6:	f000 fef1 	bl	80014bc <initialize_spi_with_dma>

  // Set up timers used to generate 32-bit SCLK used to read DDR MISO to trigger once TRANSMIT_SPI CS goes low.
  initialize_ddr_sclk_timers();
 80006da:	f000 fefd 	bl	80014d8 <initialize_ddr_sclk_timers>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fa11 	bl	8003b08 <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 80006e6:	f003 fa1a 	bl	8003b1e <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 80006ea:	463b      	mov	r3, r7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fa1d 	bl	8003b2c <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2101      	movs	r1, #1
 80006f6:	4819      	ldr	r0, [pc, #100]	@ (800075c <main+0xf8>)
 80006f8:	f7ff ff82 	bl	8000600 <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <main+0xfc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff9a 	bl	800063c <enable_interrupt_timer>
  main_loop_active = 1;
 8000708:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <main+0x100>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 800070e:	f003 f92f 	bl	8003970 <loop_escape>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <main+0xc2>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071e:	4812      	ldr	r0, [pc, #72]	@ (8000768 <main+0x104>)
 8000720:	f7ff ff6e 	bl	8000600 <write_pin>
	  if (loop_escape()) break;
 8000724:	e7f3      	b.n	800070e <main+0xaa>
 8000726:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff87 	bl	800063c <enable_interrupt_timer>
  main_loop_active = 0;
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <main+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]

  // Disable 32-bit SCLK timers.
  end_ddr_sclk_timers();
 8000734:	f000 fee0 	bl	80014f8 <end_ddr_sclk_timers>

  // Disable SPI DMA.
  end_spi_with_dma();
 8000738:	f000 fec7 	bl	80014ca <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 800073c:	f003 f978 	bl	8003a30 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 8000740:	f000 feb0 	bl	80014a4 <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2101      	movs	r1, #1
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <main+0xf8>)
 800074a:	f7ff ff59 	bl	8000600 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0xea>
 8000752:	bf00      	nop
 8000754:	40010000 	.word	0x40010000
 8000758:	5c001000 	.word	0x5c001000
 800075c:	58020400 	.word	0x58020400
 8000760:	2400059c 	.word	0x2400059c
 8000764:	240008a6 	.word	0x240008a6
 8000768:	58020800 	.word	0x58020800

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00d ff0c 	bl	800e598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00d ff06 	bl	800e598 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f006 fc25 	bl	8006fdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <SystemClock_Config+0xd8>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <SystemClock_Config+0xd8>)
 800079c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <SystemClock_Config+0xd8>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ae:	bf00      	nop
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <SystemClock_Config+0xd8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007bc:	d1f8      	bne.n	80007b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007be:	2301      	movs	r3, #1
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 132;
 80007d4:	2384      	movs	r3, #132	@ 0x84
 80007d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007e4:	2308      	movs	r3, #8
 80007e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f006 fc2b 	bl	8007050 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000800:	f000 fd90 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	233f      	movs	r3, #63	@ 0x3f
 8000806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2303      	movs	r3, #3
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000810:	2308      	movs	r3, #8
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000814:	2340      	movs	r3, #64	@ 0x40
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000818:	2340      	movs	r3, #64	@ 0x40
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000822:	2340      	movs	r3, #64	@ 0x40
 8000824:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2103      	movs	r1, #3
 800082a:	4618      	mov	r0, r3
 800082c:	f006 ffea 	bl	8007804 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000836:	f000 fd75 	bl	8001324 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3770      	adds	r7, #112	@ 0x70
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0ae      	sub	sp, #184	@ 0xb8
 800084c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	22b8      	movs	r2, #184	@ 0xb8
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f00d fe9f 	bl	800e598 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 800085a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 33;
 800086a:	2321      	movs	r3, #33	@ 0x21
 800086c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800086e:	2303      	movs	r3, #3
 8000870:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800087a:	23c0      	movs	r3, #192	@ 0xc0
 800087c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4618      	mov	r0, r3
 8000890:	f007 fb44 	bl	8007f1c <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800089a:	f000 fd43 	bl	8001324 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	37b8      	adds	r7, #184	@ 0xb8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ae:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <MX_SPI1_Init+0x9c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008c2:	221f      	movs	r2, #31
 80008c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_SPI1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_SPI1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_SPI1_Init+0x98>)
 800092e:	f009 f8b7 	bl	8009aa0 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000938:	f000 fcf4 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2400008c 	.word	0x2400008c
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800094e:	4a29      	ldr	r2, [pc, #164]	@ (80009f4 <MX_SPI3_Init+0xac>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000958:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800095c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000960:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000964:	220f      	movs	r2, #15
 8000966:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000976:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800097a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000982:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_06CYCLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009c4:	2260      	movs	r2, #96	@ 0x60
 80009c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009dc:	f009 f860 	bl	8009aa0 <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80009e6:	f000 fc9d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000114 	.word	0x24000114
 80009f4:	40003c00 	.word	0x40003c00

080009f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0a0      	sub	sp, #128	@ 0x80
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2234      	movs	r2, #52	@ 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00d fda8 	bl	800e598 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a48:	4b52      	ldr	r3, [pc, #328]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a4a:	4a53      	ldr	r2, [pc, #332]	@ (8000b98 <MX_TIM1_Init+0x1a0>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000a4e:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b4c      	ldr	r3, [pc, #304]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 31;
 8000a66:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a68:	221f      	movs	r2, #31
 8000a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b49      	ldr	r3, [pc, #292]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a72:	4848      	ldr	r0, [pc, #288]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a74:	f009 ff1d 	bl	800a8b2 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a7e:	f000 fc51 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4841      	ldr	r0, [pc, #260]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a90:	f00a fd74 	bl	800b57c <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a9a:	f000 fc43 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a9e:	483d      	ldr	r0, [pc, #244]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000aa0:	f00a fa1c 	bl	800aedc <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000aaa:	f000 fc3b 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4838      	ldr	r0, [pc, #224]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000ab2:	f00a fa74 	bl	800af9e <HAL_TIM_OnePulse_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000abc:	f000 fc32 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ac8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000acc:	4619      	mov	r1, r3
 8000ace:	4831      	ldr	r0, [pc, #196]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000ad0:	f00a fe4c 	bl	800b76c <HAL_TIM_SlaveConfigSynchro>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000ada:	f000 fc23 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000aee:	4619      	mov	r1, r3
 8000af0:	4828      	ldr	r0, [pc, #160]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000af2:	f00b fbdb 	bl	800c2ac <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000afc:	f000 fc12 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	@ 0x60
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000b04:	2303      	movs	r3, #3
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b10:	2304      	movs	r3, #4
 8000b12:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	481b      	ldr	r0, [pc, #108]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b28:	f00a fc14 	bl	800b354 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000b32:	f000 fbf7 	bl	8001324 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	699a      	ldr	r2, [r3, #24]
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0208 	bic.w	r2, r2, #8
 8000b44:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b78:	f00b fc34 	bl	800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8000b82:	f000 fbcf 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b86:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b88:	f002 fc50 	bl	800342c <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3780      	adds	r7, #128	@ 0x80
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2400028c 	.word	0x2400028c
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b090      	sub	sp, #64	@ 0x40
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd0:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400;
 8000be4:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000be6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf8:	482b      	ldr	r0, [pc, #172]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bfa:	f009 fe5a 	bl	800a8b2 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c04:	f000 fb8e 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c08:	4827      	ldr	r0, [pc, #156]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c0a:	f00a f967 	bl	800aedc <HAL_TIM_PWM_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c14:	f000 fb86 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c1c:	f00a f9bf 	bl	800af9e <HAL_TIM_OnePulse_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c26:	f000 fb7d 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c2e:	2370      	movs	r3, #112	@ 0x70
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c48:	f00a fd90 	bl	800b76c <HAL_TIM_SlaveConfigSynchro>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c52:	f000 fb67 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000c56:	2360      	movs	r3, #96	@ 0x60
 8000c58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	4619      	mov	r1, r3
 8000c64:	4810      	ldr	r0, [pc, #64]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c66:	f00b fb21 	bl	800c2ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c70:	f000 fb58 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c74:	2370      	movs	r3, #112	@ 0x70
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000c78:	2332      	movs	r3, #50	@ 0x32
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2208      	movs	r2, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c8c:	f00a fb62 	bl	800b354 <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000c96:	f000 fb45 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c9a:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c9c:	f002 fbc6 	bl	800342c <HAL_TIM_MspPostInit>

}
 8000ca0:	bf00      	nop
 8000ca2:	3740      	adds	r7, #64	@ 0x40
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	240002d8 	.word	0x240002d8

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cd2:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <MX_TIM3_Init+0xac>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 13750;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000ce4:	f243 52b6 	movw	r2, #13750	@ 0x35b6
 8000ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cf2:	2280      	movs	r2, #128	@ 0x80
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000cf6:	4817      	ldr	r0, [pc, #92]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cf8:	f009 fee7 	bl	800aaca <HAL_TIM_OC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d02:	f000 fb0f 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000d16:	f00b fac9 	bl	800c2ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d20:	f000 fb00 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000d3c:	f00a fa90 	bl	800b260 <HAL_TIM_OC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d46:	f000 faed 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000324 	.word	0x24000324
 8000d58:	40000400 	.word	0x40000400

08000d5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0a0      	sub	sp, #128	@ 0x80
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2234      	movs	r2, #52	@ 0x34
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00d fbf6 	bl	800e598 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dac:	4b53      	ldr	r3, [pc, #332]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dae:	4a54      	ldr	r2, [pc, #336]	@ (8000f00 <MX_TIM8_Init+0x1a4>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8000db2:	4b52      	ldr	r3, [pc, #328]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5;
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 31;
 8000dca:	4b4c      	ldr	r3, [pc, #304]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dcc:	221f      	movs	r2, #31
 8000dce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dd6:	4849      	ldr	r0, [pc, #292]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dd8:	f009 fd6b 	bl	800a8b2 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000de2:	f000 fa9f 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dea:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000df0:	4619      	mov	r1, r3
 8000df2:	4842      	ldr	r0, [pc, #264]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000df4:	f00a fbc2 	bl	800b57c <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000dfe:	f000 fa91 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e02:	483e      	ldr	r0, [pc, #248]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e04:	f00a f86a 	bl	800aedc <HAL_TIM_PWM_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000e0e:	f000 fa89 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e12:	2108      	movs	r1, #8
 8000e14:	4839      	ldr	r0, [pc, #228]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e16:	f00a f8c2 	bl	800af9e <HAL_TIM_OnePulse_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000e20:	f000 fa80 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000e2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4832      	ldr	r0, [pc, #200]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e34:	f00a fc9a 	bl	800b76c <HAL_TIM_SlaveConfigSynchro>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000e3e:	f000 fa71 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e52:	4619      	mov	r1, r3
 8000e54:	4829      	ldr	r0, [pc, #164]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e56:	f00b fa29 	bl	800c2ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000e60:	f000 fa60 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e64:	2370      	movs	r3, #112	@ 0x70
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e74:	2304      	movs	r3, #4
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481c      	ldr	r0, [pc, #112]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e8c:	f00a fa62 	bl	800b354 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000e96:	f000 fa45 	bl	8001324 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0208 	bic.w	r2, r2, #8
 8000ea8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000ee0:	f00b fa80 	bl	800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM8_Init+0x192>
  {
    Error_Handler();
 8000eea:	f000 fa1b 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000eee:	4803      	ldr	r0, [pc, #12]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000ef0:	f002 fa9c 	bl	800342c <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3780      	adds	r7, #128	@ 0x80
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000370 	.word	0x24000370
 8000f00:	40010400 	.word	0x40010400

08000f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0a:	4a24      	ldr	r2, [pc, #144]	@ (8000f9c <MX_USART3_UART_Init+0x98>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f10:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f36:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f3a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4e:	4812      	ldr	r0, [pc, #72]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f50:	f00b faf2 	bl	800c538 <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000f5a:	f000 f9e3 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f62:	f00d f990 	bl	800e286 <HAL_UARTEx_SetTxFifoThreshold>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000f6c:	f000 f9da 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f74:	f00d f9c5 	bl	800e302 <HAL_UARTEx_SetRxFifoThreshold>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000f7e:	f000 f9d1 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f84:	f00d f946 	bl	800e214 <HAL_UARTEx_DisableFifoMode>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000f8e:	f000 f9c9 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	240003bc 	.word	0x240003bc
 8000f9c:	40004800 	.word	0x40004800

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_DMA_Init+0x5c>)
 8000fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fac:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <MX_DMA_Init+0x5c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_DMA_Init+0x5c>)
 8000fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	200b      	movs	r0, #11
 8000fca:	f002 ffa8 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f002 ffbf 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	200c      	movs	r0, #12
 8000fda:	f002 ffa0 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f002 ffb7 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200d      	movs	r0, #13
 8000fea:	f002 ff98 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f002 ffaf 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	58024400 	.word	0x58024400

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	4bbc      	ldr	r3, [pc, #752]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	4aba      	ldr	r2, [pc, #744]	@ (8001308 <MX_GPIO_Init+0x308>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001026:	4bb8      	ldr	r3, [pc, #736]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4bb4      	ldr	r3, [pc, #720]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	4ab3      	ldr	r2, [pc, #716]	@ (8001308 <MX_GPIO_Init+0x308>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001044:	4bb0      	ldr	r3, [pc, #704]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	4bad      	ldr	r3, [pc, #692]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	4aab      	ldr	r2, [pc, #684]	@ (8001308 <MX_GPIO_Init+0x308>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001062:	4ba9      	ldr	r3, [pc, #676]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4ba5      	ldr	r3, [pc, #660]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4aa4      	ldr	r2, [pc, #656]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4ba1      	ldr	r3, [pc, #644]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b9e      	ldr	r3, [pc, #632]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	4a9c      	ldr	r2, [pc, #624]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109e:	4b9a      	ldr	r3, [pc, #616]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b96      	ldr	r3, [pc, #600]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	4a95      	ldr	r2, [pc, #596]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010bc:	4b92      	ldr	r3, [pc, #584]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	4a8d      	ldr	r2, [pc, #564]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010da:	4b8b      	ldr	r3, [pc, #556]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010ee:	4887      	ldr	r0, [pc, #540]	@ (800130c <MX_GPIO_Init+0x30c>)
 80010f0:	f005 ff36 	bl	8006f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fa:	4885      	ldr	r0, [pc, #532]	@ (8001310 <MX_GPIO_Init+0x310>)
 80010fc:	f005 ff30 	bl	8006f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001106:	4882      	ldr	r0, [pc, #520]	@ (8001310 <MX_GPIO_Init+0x310>)
 8001108:	f005 ff2a 	bl	8006f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8001112:	4880      	ldr	r0, [pc, #512]	@ (8001314 <MX_GPIO_Init+0x314>)
 8001114:	f005 ff24 	bl	8006f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111e:	487e      	ldr	r0, [pc, #504]	@ (8001318 <MX_GPIO_Init+0x318>)
 8001120:	f005 ff1e 	bl	8006f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ErrorCode_Bit_3_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2103      	movs	r1, #3
 8001128:	487c      	ldr	r0, [pc, #496]	@ (800131c <MX_GPIO_Init+0x31c>)
 800112a:	f005 ff19 	bl	8006f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800112e:	2304      	movs	r3, #4
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001132:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4876      	ldr	r0, [pc, #472]	@ (800131c <MX_GPIO_Init+0x31c>)
 8001144:	f005 fd64 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	486e      	ldr	r0, [pc, #440]	@ (8001318 <MX_GPIO_Init+0x318>)
 800115e:	f005 fd57 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001162:	2332      	movs	r3, #50	@ 0x32
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4866      	ldr	r0, [pc, #408]	@ (8001318 <MX_GPIO_Init+0x318>)
 800117e:	f005 fd47 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001182:	2386      	movs	r3, #134	@ 0x86
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001192:	230b      	movs	r3, #11
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4860      	ldr	r0, [pc, #384]	@ (8001320 <MX_GPIO_Init+0x320>)
 800119e:	f005 fd37 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80011a2:	f244 0301 	movw	r3, #16385	@ 0x4001
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4854      	ldr	r0, [pc, #336]	@ (800130c <MX_GPIO_Init+0x30c>)
 80011bc:	f005 fd28 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d2:	230b      	movs	r3, #11
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	484b      	ldr	r0, [pc, #300]	@ (800130c <MX_GPIO_Init+0x30c>)
 80011de:	f005 fd17 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 80011e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4845      	ldr	r0, [pc, #276]	@ (8001310 <MX_GPIO_Init+0x310>)
 80011fc:	f005 fd08 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	483d      	ldr	r0, [pc, #244]	@ (8001310 <MX_GPIO_Init+0x310>)
 800121a:	f005 fcf9 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 800121e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4837      	ldr	r0, [pc, #220]	@ (8001314 <MX_GPIO_Init+0x314>)
 8001238:	f005 fcea 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4830      	ldr	r0, [pc, #192]	@ (8001314 <MX_GPIO_Init+0x314>)
 8001252:	f005 fcdd 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 8001256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	482a      	ldr	r0, [pc, #168]	@ (8001318 <MX_GPIO_Init+0x318>)
 8001270:	f005 fcce 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001286:	230a      	movs	r3, #10
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4823      	ldr	r0, [pc, #140]	@ (8001320 <MX_GPIO_Init+0x320>)
 8001292:	f005 fcbd 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001296:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4818      	ldr	r0, [pc, #96]	@ (8001314 <MX_GPIO_Init+0x314>)
 80012b4:	f005 fcac 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_GPIO_Init+0x31c>)
 80012d0:	f005 fc9e 	bl	8006c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_GPIO_Init+0x31c>)
 80012ec:	f005 fc90 	bl	8006c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2008      	movs	r0, #8
 80012f6:	f002 fe12 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012fa:	2008      	movs	r0, #8
 80012fc:	f002 fe29 	bl	8003f52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	@ 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024400 	.word	0x58024400
 800130c:	58020400 	.word	0x58020400
 8001310:	58020c00 	.word	0x58020c00
 8001314:	58021800 	.word	0x58021800
 8001318:	58020800 	.word	0x58020800
 800131c:	58021000 	.word	0x58021000
 8001320:	58020000 	.word	0x58020000

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <Error_Handler+0x8>

08001330 <write_pin>:
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	b29b      	uxth	r3, r3
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f005 fe0a 	bl	8006f60 <HAL_GPIO_WritePin>
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 8001358:	f002 fb0a 	bl	8003970 <loop_escape>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d120      	bne.n	80013a4 <sample_interrupt_routine+0x50>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <sample_interrupt_routine+0x54>)
 800136a:	f7ff ffe1 	bl	8001330 <write_pin>

	// Write aux commands to command_sequence_MOSI, advancing one sample through aux_command_list.
	cycle_aux_commands();
 800136e:	f000 f821 	bl	80013b4 <cycle_aux_commands>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <sample_interrupt_routine+0x58>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <sample_interrupt_routine+0x2c>
		handle_comm_error(ITClip);
 800137a:	2005      	movs	r0, #5
 800137c:	f000 f8cc 	bl	8001518 <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001386:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <sample_interrupt_routine+0x5c>)
 8001388:	f7ff ffd2 	bl	8001330 <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <sample_interrupt_routine+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 8001392:	f000 f845 	bl	8001420 <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <sample_interrupt_routine+0x5c>)
 800139e:	f7ff ffc7 	bl	8001330 <write_pin>
 80013a2:	e000      	b.n	80013a6 <sample_interrupt_routine+0x52>
	if (loop_escape()) return;
 80013a4:	bf00      	nop
}
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58020800 	.word	0x58020800
 80013ac:	24000004 	.word	0x24000004
 80013b0:	58020c00 	.word	0x58020c00

080013b4 <cycle_aux_commands>:


// Every sample period, cycle circularly through aux_command_list, adding this sample's AUX commands to the end of
// command_sequence_MOSI array which will be transmitted via SPI.
void cycle_aux_commands()
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e012      	b.n	80013e6 <cycle_aux_commands+0x32>
		command_sequence_MOSI[CONVERT_COMMANDS_PER_SEQUENCE + i] = aux_command_list[i][aux_command_index];
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <cycle_aux_commands+0x60>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3320      	adds	r3, #32
 80013cc:	4912      	ldr	r1, [pc, #72]	@ (8001418 <cycle_aux_commands+0x64>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	01d2      	lsls	r2, r2, #7
 80013d2:	4402      	add	r2, r0
 80013d4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013d8:	b291      	uxth	r1, r2
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <cycle_aux_commands+0x68>)
 80013dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3301      	adds	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	dde9      	ble.n	80013c0 <cycle_aux_commands+0xc>
	}
	if (++aux_command_index >= AUX_COMMAND_LIST_LENGTH) {
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <cycle_aux_commands+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <cycle_aux_commands+0x60>)
 80013f8:	4611      	mov	r1, r2
 80013fa:	7019      	strb	r1, [r3, #0]
 80013fc:	b253      	sxtb	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da02      	bge.n	8001408 <cycle_aux_commands+0x54>
		aux_command_index = 0;
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <cycle_aux_commands+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	// Note that if any command(s) are to be used with a command list different from AUX_COMMAND_LIST_LENGTH,
	// the above code should be commented out, and the last AUX_COMMANDS_PER_SEQUENCE of command_sequence_MOSI
	// should be written here. For example, if impedance check DAC control is used, zcheck_DAC_command_list_length
	// should replace AUX_COMMAND_LIST_LENGTH and zcheck_DAC_command_slot_position should be used to correctly index
	// commands from the proper aux_command_list slot.
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	240008a4 	.word	0x240008a4
 8001418:	240005a4 	.word	0x240005a4
 800141c:	240004c8 	.word	0x240004c8

08001420 <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*)command_sequence_MISO,
 8001424:	2223      	movs	r2, #35	@ 0x23
 8001426:	490a      	ldr	r1, [pc, #40]	@ (8001450 <transfer_sequence_spi_dma+0x30>)
 8001428:	480a      	ldr	r0, [pc, #40]	@ (8001454 <transfer_sequence_spi_dma+0x34>)
 800142a:	f008 fd9f 	bl	8009f6c <HAL_SPI_Receive_DMA>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <transfer_sequence_spi_dma+0x18>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001434:	f7ff ff76 	bl	8001324 <Error_Handler>
	}


	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*)command_sequence_MOSI,
 8001438:	2223      	movs	r2, #35	@ 0x23
 800143a:	4907      	ldr	r1, [pc, #28]	@ (8001458 <transfer_sequence_spi_dma+0x38>)
 800143c:	4807      	ldr	r0, [pc, #28]	@ (800145c <transfer_sequence_spi_dma+0x3c>)
 800143e:	f008 fc53 	bl	8009ce8 <HAL_SPI_Transmit_DMA>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <transfer_sequence_spi_dma+0x2c>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001448:	f7ff ff6c 	bl	8001324 <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	24000510 	.word	0x24000510
 8001454:	2400008c 	.word	0x2400008c
 8001458:	240004c8 	.word	0x240004c8
 800145c:	24000114 	.word	0x24000114

08001460 <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8001466:	f000 f983 	bl	8001770 <calculate_sample_rate>
 800146a:	eeb0 7b40 	vmov.f64	d7, d0
 800146e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001472:	ee17 2a90 	vmov	r2, s15
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <allocate_sample_memory+0x3c>)
 8001478:	601a      	str	r2, [r3, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * 2 * per_channel_sample_memory_capacity;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <allocate_sample_memory+0x3c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f00c ffc8 	bl	800e41c <malloc>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <allocate_sample_memory+0x40>)
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24000000 	.word	0x24000000
 80014a0:	240005a0 	.word	0x240005a0

080014a4 <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	free(sample_memory);
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <free_sample_memory+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c ffbd 	bl	800e42c <free>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	240005a0 	.word	0x240005a0

080014bc <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 80014c0:	bf00      	nop
	LL_DMA_SetDataLength(DMA, DMA_RX_CHANNEL, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);

	// Assign RX DMA stream to correct DMAMUX request
	LL_DMA_SetPeriphRequest(DMA, DMA_RX_CHANNEL, LL_DMAMUX1_REQ_SPI1_RX);
#endif
}
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implementation.
void end_spi_with_dma()
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <initialize_ddr_sclk_timers>:


// Start timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void initialize_ddr_sclk_timers()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Start(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 80014dc:	2100      	movs	r1, #0
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <initialize_ddr_sclk_timers+0x18>)
 80014e0:	f009 fb4a 	bl	800ab78 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&CS_DELAY_TIM, TIM_CHANNEL_3);
 80014e4:	2108      	movs	r1, #8
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <initialize_ddr_sclk_timers+0x1c>)
 80014e8:	f009 fb46 	bl	800ab78 <HAL_TIM_OC_Start>
  LL_TIM_EnableCounter(RECEIVE_SCLK_TIM);

  LL_TIM_CC_EnableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
  LL_TIM_EnableCounter(CS_DELAY_TIM);
#endif
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2400028c 	.word	0x2400028c
 80014f4:	240002d8 	.word	0x240002d8

080014f8 <end_ddr_sclk_timers>:

// End timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void end_ddr_sclk_timers()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Stop(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4804      	ldr	r0, [pc, #16]	@ (8001510 <end_ddr_sclk_timers+0x18>)
 8001500:	f009 fc56 	bl	800adb0 <HAL_TIM_OC_Stop>
  HAL_TIM_OC_Stop(&CS_DELAY_TIM, TIM_CHANNEL_3);
 8001504:	2108      	movs	r1, #8
 8001506:	4803      	ldr	r0, [pc, #12]	@ (8001514 <end_ddr_sclk_timers+0x1c>)
 8001508:	f009 fc52 	bl	800adb0 <HAL_TIM_OC_Stop>
  LL_TIM_CC_DisableChannel(RECEIVE_SCLK_TIM, LL_TIM_CHANNEL_CH1);

  LL_TIM_DisableCounter(CS_DELAY_TIM);
  LL_TIM_CC_DisableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
#endif
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2400028c 	.word	0x2400028c
 8001514:	240002d8 	.word	0x240002d8

08001518 <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03f      	beq.n	80015a8 <handle_comm_error+0x90>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800152e:	4820      	ldr	r0, [pc, #128]	@ (80015b0 <handle_comm_error+0x98>)
 8001530:	f7ff fefe 	bl	8001330 <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	109b      	asrs	r3, r3, #2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	10db      	asrs	r3, r3, #3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <handle_comm_error+0x58>
 8001566:	2201      	movs	r2, #1
 8001568:	2140      	movs	r1, #64	@ 0x40
 800156a:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <handle_comm_error+0x9c>)
 800156c:	f7ff fee0 	bl	8001330 <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <handle_comm_error+0x68>
 8001576:	2201      	movs	r2, #1
 8001578:	2120      	movs	r1, #32
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <handle_comm_error+0x9c>)
 800157c:	f7ff fed8 	bl	8001330 <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 8001580:	7b7b      	ldrb	r3, [r7, #13]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <handle_comm_error+0x7a>
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <handle_comm_error+0x9c>)
 800158e:	f7ff fecf 	bl	8001330 <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <handle_comm_error+0x8c>
 8001598:	2201      	movs	r2, #1
 800159a:	2101      	movs	r1, #1
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <handle_comm_error+0xa0>)
 800159e:	f7ff fec7 	bl	8001330 <write_pin>

	// Enter infinite loop.
	while(1);
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <handle_comm_error+0x8c>
	if (error_code == 0) return;
 80015a8:	bf00      	nop
}
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58020400 	.word	0x58020400
 80015b4:	58021800 	.word	0x58021800
 80015b8:	58021000 	.word	0x58021000

080015bc <spi_rx_cplt_callback>:


// Callback function that executes when Reception of SPI has completed.
void spi_rx_cplt_callback()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <spi_rx_cplt_callback+0x34>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00d      	beq.n	80015e6 <spi_rx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <spi_rx_cplt_callback+0x38>)
 80015d2:	f7ff fead 	bl	8001330 <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 80015d6:	f002 f9d3 	bl	8003980 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 80015da:	f002 f9d9 	bl	8003990 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <spi_rx_cplt_callback+0x3c>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 80015e4:	e002      	b.n	80015ec <spi_rx_cplt_callback+0x30>
		reception_in_progress = 0;
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <spi_rx_cplt_callback+0x40>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	240008a6 	.word	0x240008a6
 80015f4:	58020800 	.word	0x58020800
 80015f8:	24000004 	.word	0x24000004
 80015fc:	240008a5 	.word	0x240008a5

08001600 <morton_deinterleave>:

// Use 'magic bits' de interleave method inspired by Jeroen Baert's blog post:
// "Morton encoding/decoding through bit interleaving: Implementations" to achieve
// high performance method of separate every other bit from a 32-bit input.
uint16_t morton_deinterleave(uint32_t x)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    x = x & 0x55555555; // Use mask to clear all even bits
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800160e:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 1)) & 0x33333333; // Shift-right by 1, duplicate, and mask data so that valid data is grouped into 2s (00xx00xx00xx...)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	085a      	lsrs	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800161c:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 2)) & 0x0F0F0F0F; // Shift-right by 2, duplicate, and mask data so that valid data is grouped into 4s (0000xxxx0000xxxx...)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	089a      	lsrs	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800162a:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 4)) & 0x00FF00FF; // Shift-right by 4, duplicate, and mask data so that valid data is grouped into 8s (00000000xxxxxxxx00000000xxxxxxxx...)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	091a      	lsrs	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8001638:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 8)) & 0x0000FFFF; // Shift-right by 8, duplicate, and mask data so that 16 MSB data is 0s, 16 LSB data is valid data
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0a1a      	lsrs	r2, r3, #8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	607b      	str	r3, [r7, #4]
    return (uint16_t) x; // Cast 32-bit 0000_0000_0000_0000_xxxx_xxxx_xxxx_xxxx data into 16-bit xxxx_xxxx_xxxx_xxxx data
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	b29b      	uxth	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <extract_ddr_words>:


// Separate a 32-bit merged word (interleaved stream A and stream B data) into 2 distinct 16-bit words.
void extract_ddr_words(uint32_t merged_word, volatile uint16_t *word_A, volatile uint16_t *word_B)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
//		*word_B |= bit_B << i;
//	}

	// A much faster, but less obvious method uses 'magic bit' masks to copy, shift, and mask bits in several steps
	// to achieve the same result in fewer operations.
	*word_A = morton_deinterleave(merged_word); // Data stream A is all add
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff ffcc 	bl	8001600 <morton_deinterleave>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	801a      	strh	r2, [r3, #0]
	*word_B = morton_deinterleave(merged_word >> 1);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffc3 	bl	8001600 <morton_deinterleave>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	801a      	strh	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <spi_error_callback+0x14>)
 8001692:	2202      	movs	r2, #2
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	24000004 	.word	0x24000004

080016a4 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b090      	sub	sp, #64	@ 0x40
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 80016ac:	f000 f860 	bl	8001770 <calculate_sample_rate>
 80016b0:	eeb0 7b40 	vmov.f64	d7, d0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 f8e4 	bl	8002888 <set_default_rhd_settings>

	uint16_t registers[22];
	for (int i = 0; i < 22; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016c4:	e00e      	b.n	80016e4 <write_initial_reg_values+0x40>
		registers[i] = get_register_value(p, i);
 80016c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 fa25 	bl	8002b18 <get_register_value>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	3340      	adds	r3, #64	@ 0x40
 80016d8:	443b      	add	r3, r7
 80016da:	f823 2c38 	strh.w	r2, [r3, #-56]
	for (int i = 0; i < 22; i++) {
 80016de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e0:	3301      	adds	r3, #1
 80016e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e6:	2b15      	cmp	r3, #21
 80016e8:	dded      	ble.n	80016c6 <write_initial_reg_values+0x22>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 80016ea:	203f      	movs	r0, #63	@ 0x3f
 80016ec:	f001 fc83 	bl	8002ff6 <read_command>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fa4d 	bl	8001b92 <send_spi_command>
	send_spi_command(read_command(63));
 80016f8:	203f      	movs	r0, #63	@ 0x3f
 80016fa:	f001 fc7c 	bl	8002ff6 <read_command>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fa46 	bl	8001b92 <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 22; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800170a:	e013      	b.n	8001734 <write_initial_reg_values+0x90>
		send_spi_command(write_command(i, registers[i]));
 800170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800170e:	b2da      	uxtb	r2, r3
 8001710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	3340      	adds	r3, #64	@ 0x40
 8001716:	443b      	add	r3, r7
 8001718:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f001 fc4b 	bl	8002fbc <write_command>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fa32 	bl	8001b92 <send_spi_command>
	for (int i = 0; i < 22; i++) {
 800172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001730:	3301      	adds	r3, #1
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001736:	2b15      	cmp	r3, #21
 8001738:	dde8      	ble.n	800170c <write_initial_reg_values+0x68>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 800173a:	f001 fc36 	bl	8002faa <calibrate_command>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fa26 	bl	8001b92 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	@ 0x34
 800174a:	e009      	b.n	8001760 <write_initial_reg_values+0xbc>
		send_spi_command(read_command(40));
 800174c:	2028      	movs	r0, #40	@ 0x28
 800174e:	f001 fc52 	bl	8002ff6 <read_command>
 8001752:	4603      	mov	r3, r0
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa1c 	bl	8001b92 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 800175a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800175c:	3301      	adds	r3, #1
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001762:	2b08      	cmp	r3, #8
 8001764:	ddf2      	ble.n	800174c <write_initial_reg_values+0xa8>
	}
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	3740      	adds	r7, #64	@ 0x40
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq() * 2; // Timer clock inputs on the H7 are multiplied x2 from peripheral clock frequency, which this function reports.
 8001776:	f006 fba5 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <calculate_sample_rate+0xa0>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <calculate_sample_rate+0xa0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <calculate_sample_rate+0xa0>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <calculate_sample_rate+0xa4>)
 8001798:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <calculate_sample_rate+0x40>
		ckd_factor = 2;
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017ae:	e007      	b.n	80017c0 <calculate_sample_rate+0x50>
	} else if (ckd_value == 0b10) {
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d104      	bne.n	80017c0 <calculate_sample_rate+0x50>
		ckd_factor = 4;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <calculate_sample_rate+0xa8>)
 80017bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017cc:	ed87 7b02 	vstr	d7, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80017da:	ed97 6b08 	vldr	d6, [r7, #32]
 80017de:	ed97 7b02 	vldr	d7, [r7, #8]
 80017e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017ea:	ed87 7b00 	vstr	d7, [r7]
	return input_frequency / counter_period;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017f8:	ed97 6b00 	vldr	d6, [r7]
 80017fc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001800:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001804:	eeb0 0b47 	vmov.f64	d0, d7
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000324 	.word	0x24000324
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	40100000 	.word	0x40100000

0800181c <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e00e      	b.n	800184e <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fb9a 	bl	8002f70 <convert_command>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <create_convert_sequence+0x70>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b1f      	cmp	r3, #31
 8001852:	dded      	ble.n	8001830 <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 8001854:	e016      	b.n	8001884 <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	e010      	b.n	800187e <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fb82 	bl	8002f70 <convert_command>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4a06      	ldr	r2, [pc, #24]	@ (800188c <create_convert_sequence+0x70>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3301      	adds	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b1f      	cmp	r3, #31
 8001882:	ddeb      	ble.n	800185c <create_convert_sequence+0x40>
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	240004c8 	.word	0x240004c8

08001890 <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	61fa      	str	r2, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	18d4      	adds	r4, r2, r3
 80018b0:	203f      	movs	r0, #63	@ 0x3f
 80018b2:	f001 fba0 	bl	8002ff6 <read_command>
 80018b6:	4603      	mov	r3, r0
 80018b8:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	61fa      	str	r2, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	18d4      	adds	r4, r2, r3
 80018c6:	203f      	movs	r0, #63	@ 0x3f
 80018c8:	f001 fb95 	bl	8002ff6 <read_command>
 80018cc:	4603      	mov	r3, r0
 80018ce:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 22; ++reg) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	e01d      	b.n	8001912 <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d016      	beq.n	800190a <create_command_list_RHD_register_config+0x7a>
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d013      	beq.n	800190a <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	b2dd      	uxtb	r5, r3
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f001 f915 	bl	8002b18 <get_register_value>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b2d9      	uxtb	r1, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	61fa      	str	r2, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	18d4      	adds	r4, r2, r3
 80018fe:	4628      	mov	r0, r5
 8001900:	f001 fb5c 	bl	8002fbc <write_command>
 8001904:	4603      	mov	r3, r0
 8001906:	8023      	strh	r3, [r4, #0]
 8001908:	e000      	b.n	800190c <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 800190a:	bf00      	nop
	for (int reg = 0; reg < 22; ++reg) {
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	3301      	adds	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b15      	cmp	r3, #21
 8001916:	ddde      	ble.n	80018d6 <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	61fa      	str	r2, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	18d4      	adds	r4, r2, r3
 8001924:	203f      	movs	r0, #63	@ 0x3f
 8001926:	f001 fb66 	bl	8002ff6 <read_command>
 800192a:	4603      	mov	r3, r0
 800192c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	61fa      	str	r2, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	18d4      	adds	r4, r2, r3
 800193a:	203e      	movs	r0, #62	@ 0x3e
 800193c:	f001 fb5b 	bl	8002ff6 <read_command>
 8001940:	4603      	mov	r3, r0
 8001942:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	61fa      	str	r2, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	18d4      	adds	r4, r2, r3
 8001950:	203d      	movs	r0, #61	@ 0x3d
 8001952:	f001 fb50 	bl	8002ff6 <read_command>
 8001956:	4603      	mov	r3, r0
 8001958:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	61fa      	str	r2, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	18d4      	adds	r4, r2, r3
 8001966:	203c      	movs	r0, #60	@ 0x3c
 8001968:	f001 fb45 	bl	8002ff6 <read_command>
 800196c:	4603      	mov	r3, r0
 800196e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	61fa      	str	r2, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	18d4      	adds	r4, r2, r3
 800197c:	203b      	movs	r0, #59	@ 0x3b
 800197e:	f001 fb3a 	bl	8002ff6 <read_command>
 8001982:	4603      	mov	r3, r0
 8001984:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	61fa      	str	r2, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	18d4      	adds	r4, r2, r3
 8001992:	2030      	movs	r0, #48	@ 0x30
 8001994:	f001 fb2f 	bl	8002ff6 <read_command>
 8001998:	4603      	mov	r3, r0
 800199a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	61fa      	str	r2, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	18d4      	adds	r4, r2, r3
 80019a8:	2031      	movs	r0, #49	@ 0x31
 80019aa:	f001 fb24 	bl	8002ff6 <read_command>
 80019ae:	4603      	mov	r3, r0
 80019b0:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	61fa      	str	r2, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	18d4      	adds	r4, r2, r3
 80019be:	2032      	movs	r0, #50	@ 0x32
 80019c0:	f001 fb19 	bl	8002ff6 <read_command>
 80019c4:	4603      	mov	r3, r0
 80019c6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	61fa      	str	r2, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	18d4      	adds	r4, r2, r3
 80019d4:	2033      	movs	r0, #51	@ 0x33
 80019d6:	f001 fb0e 	bl	8002ff6 <read_command>
 80019da:	4603      	mov	r3, r0
 80019dc:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	61fa      	str	r2, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	18d4      	adds	r4, r2, r3
 80019ea:	2034      	movs	r0, #52	@ 0x34
 80019ec:	f001 fb03 	bl	8002ff6 <read_command>
 80019f0:	4603      	mov	r3, r0
 80019f2:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	61fa      	str	r2, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	18d4      	adds	r4, r2, r3
 8001a00:	2035      	movs	r0, #53	@ 0x35
 8001a02:	f001 faf8 	bl	8002ff6 <read_command>
 8001a06:	4603      	mov	r3, r0
 8001a08:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	61fa      	str	r2, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	18d4      	adds	r4, r2, r3
 8001a16:	2036      	movs	r0, #54	@ 0x36
 8001a18:	f001 faed 	bl	8002ff6 <read_command>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	61fa      	str	r2, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	18d4      	adds	r4, r2, r3
 8001a2c:	2037      	movs	r0, #55	@ 0x37
 8001a2e:	f001 fae2 	bl	8002ff6 <read_command>
 8001a32:	4603      	mov	r3, r0
 8001a34:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	61fa      	str	r2, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	18d4      	adds	r4, r2, r3
 8001a42:	2028      	movs	r0, #40	@ 0x28
 8001a44:	f001 fad7 	bl	8002ff6 <read_command>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	61fa      	str	r2, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	18d4      	adds	r4, r2, r3
 8001a58:	2029      	movs	r0, #41	@ 0x29
 8001a5a:	f001 facc 	bl	8002ff6 <read_command>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	61fa      	str	r2, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	18d4      	adds	r4, r2, r3
 8001a6e:	202a      	movs	r0, #42	@ 0x2a
 8001a70:	f001 fac1 	bl	8002ff6 <read_command>
 8001a74:	4603      	mov	r3, r0
 8001a76:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	61fa      	str	r2, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	18d4      	adds	r4, r2, r3
 8001a84:	202b      	movs	r0, #43	@ 0x2b
 8001a86:	f001 fab6 	bl	8002ff6 <read_command>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	61fa      	str	r2, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	18d4      	adds	r4, r2, r3
 8001a9a:	202c      	movs	r0, #44	@ 0x2c
 8001a9c:	f001 faab 	bl	8002ff6 <read_command>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 22; ++reg) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00f      	b.n	8001aca <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	18d4      	adds	r4, r2, r3
 8001aba:	4608      	mov	r0, r1
 8001abc:	f001 fa9b 	bl	8002ff6 <read_command>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 22; ++reg) {
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b15      	cmp	r3, #21
 8001ace:	ddec      	ble.n	8001aaa <create_command_list_RHD_register_config+0x21a>
		// Note that registers 18-21 are only 'visible' on MISO B, so if register values are being used, be sure to use MISO B read values.
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	18d4      	adds	r4, r2, r3
 8001ae2:	f001 fa62 	bl	8002faa <calibrate_command>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	8023      	strh	r3, [r4, #0]
 8001aea:	e00a      	b.n	8001b02 <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	61fa      	str	r2, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	18d4      	adds	r4, r2, r3
 8001af8:	203f      	movs	r0, #63	@ 0x3f
 8001afa:	f001 fa7c 	bl	8002ff6 <read_command>
 8001afe:	4603      	mov	r3, r0
 8001b00:	8023      	strh	r3, [r4, #0]
	}

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	61fa      	str	r2, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	18d4      	adds	r4, r2, r3
 8001b0e:	203f      	movs	r0, #63	@ 0x3f
 8001b10:	f001 fa71 	bl	8002ff6 <read_command>
 8001b14:	4603      	mov	r3, r0
 8001b16:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 64); ++i) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	e00d      	b.n	8001b3a <create_command_list_RHD_register_config+0x2aa>
		command_list[command_index++] = read_command(63);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	61fa      	str	r2, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	18d4      	adds	r4, r2, r3
 8001b2a:	203f      	movs	r0, #63	@ 0x3f
 8001b2c:	f001 fa63 	bl	8002ff6 <read_command>
 8001b30:	4603      	mov	r3, r0
 8001b32:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 64); ++i) {
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	3301      	adds	r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3b40      	subs	r3, #64	@ 0x40
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbec      	blt.n	8001b1e <create_command_list_RHD_register_config+0x28e>
	}
	return command_index;
 8001b44:	69fb      	ldr	r3, [r7, #28]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}

08001b4e <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	e00a      	b.n	8001b7c <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	617a      	str	r2, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf0      	blt.n	8001b66 <create_command_list_dummy+0x18>
	}

	return command_index;
 8001b84:	697b      	ldr	r3, [r7, #20]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data_A = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	81fb      	strh	r3, [r7, #14]
	uint16_t dummy_data_B = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	81bb      	strh	r3, [r7, #12]
	send_receive_spi_command(tx_data, &dummy_data_A, &dummy_data_B);
 8001ba4:	f107 020c 	add.w	r2, r7, #12
 8001ba8:	f107 010e 	add.w	r1, r7, #14
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f804 	bl	8001bbc <send_receive_spi_command>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained results correspond to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data_A, uint16_t *rx_data_B)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	81fb      	strh	r3, [r7, #14]
	uint32_t rx_data = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
	reception_in_progress = 1;
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <send_receive_spi_command+0x6c>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]

#ifdef USE_HAL
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*) &rx_data, 1) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4813      	ldr	r0, [pc, #76]	@ (8001c2c <send_receive_spi_command+0x70>)
 8001bde:	f008 f9c5 	bl	8009f6c <HAL_SPI_Receive_DMA>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <send_receive_spi_command+0x30>
	{
		Error_Handler();
 8001be8:	f7ff fb9c 	bl	8001324 <Error_Handler>
	}

	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*) &tx_data, 1) != HAL_OK)
 8001bec:	f107 030e 	add.w	r3, r7, #14
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480e      	ldr	r0, [pc, #56]	@ (8001c30 <send_receive_spi_command+0x74>)
 8001bf6:	f008 f877 	bl	8009ce8 <HAL_SPI_Transmit_DMA>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <send_receive_spi_command+0x48>
	{
		Error_Handler();
 8001c00:	f7ff fb90 	bl	8001324 <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &rx_data, 1);
	begin_spi_tx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001c04:	bf00      	nop
 8001c06:	4b08      	ldr	r3, [pc, #32]	@ (8001c28 <send_receive_spi_command+0x6c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d0fa      	beq.n	8001c06 <send_receive_spi_command+0x4a>
	extract_ddr_words(rx_data, rx_data_A, rx_data_B);
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fd1d 	bl	8001656 <extract_ddr_words>
	int32_t stall = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	240008a5 	.word	0x240008a5
 8001c2c:	2400008c 	.word	0x2400008c
 8001c30:	24000114 	.word	0x24000114

08001c34 <HAL_SPI_RxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when Rx has completed.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if (hspi == &RECEIVE_SPI) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <HAL_SPI_RxCpltCallback+0x1c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_SPI_RxCpltCallback+0x14>
		spi_rx_cplt_callback();
 8001c44:	f7ff fcba 	bl	80015bc <spi_rx_cplt_callback>
	}
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2400008c 	.word	0x2400008c

08001c54 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001c5c:	f7ff fd16 	bl	800168c <spi_error_callback>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_UART_TxCpltCallback+0x1c>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	24000008 	.word	0x24000008

08001c88 <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	ed2d 8b02 	vpush	{d8}
 8001cae:	b0b0      	sub	sp, #192	@ 0xc0
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2280      	movs	r2, #128	@ 0x80
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00c fc69 	bl	800e598 <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001ccc:	e033      	b.n	8001d36 <set_DSP_cutoff_freq+0x8e>
		double x = pow(2.0, (double) n);
 8001cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cda:	eeb0 1b47 	vmov.f64	d1, d7
 8001cde:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001ce2:	f00c fe45 	bl	800e970 <pow>
 8001ce6:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 8b00 	vldr	d8, [r3]
 8001cf0:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8001cf4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001cf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cfc:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001d00:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001d04:	eeb0 0b45 	vmov.f64	d0, d5
 8001d08:	f00c fcd6 	bl	800e6b8 <log>
 8001d0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001d10:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001d14:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 8001e20 <set_DSP_cutoff_freq+0x178>
 8001d18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	33c0      	adds	r3, #192	@ 0xc0
 8001d24:	443b      	add	r3, r7
 8001d26:	3bb0      	subs	r3, #176	@ 0xb0
 8001d28:	ed83 7b00 	vstr	d7, [r3]
	for (int n = 1; n < 16; ++n) {
 8001d2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d30:	3301      	adds	r3, #1
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	ddc7      	ble.n	8001cce <set_DSP_cutoff_freq+0x26>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8001d3e:	ed97 0b00 	vldr	d0, [r7]
 8001d42:	f00c fdad 	bl	800e8a0 <log10>
 8001d46:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 8001d4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d4e:	ed97 6b00 	vldr	d6, [r7]
 8001d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	dd03      	ble.n	8001d64 <set_DSP_cutoff_freq+0xbc>
		p->DSP_cutoff_freq = 1;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d62:	e049      	b.n	8001df8 <set_DSP_cutoff_freq+0x150>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 8001d64:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8001d68:	ed97 6b00 	vldr	d6, [r7]
 8001d6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d503      	bpl.n	8001d7e <set_DSP_cutoff_freq+0xd6>
		p->DSP_cutoff_freq = 15;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	220f      	movs	r2, #15
 8001d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d7c:	e03c      	b.n	8001df8 <set_DSP_cutoff_freq+0x150>
	} else {
		double min_log_diff = 10000000.0;
 8001d7e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001e28 <set_DSP_cutoff_freq+0x180>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001d8e:	e02f      	b.n	8001df0 <set_DSP_cutoff_freq+0x148>
			double log_f_cutoff = log10(f_cutoff[n]);
 8001d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	33c0      	adds	r3, #192	@ 0xc0
 8001d98:	443b      	add	r3, r7
 8001d9a:	3bb0      	subs	r3, #176	@ 0xb0
 8001d9c:	ed93 7b00 	vldr	d7, [r3]
 8001da0:	eeb0 0b47 	vmov.f64	d0, d7
 8001da4:	f00c fd7c 	bl	800e8a0 <log10>
 8001da8:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 8001dac:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001db0:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001db4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001db8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dbc:	ed97 6b2c 	vldr	d6, [r7, #176]	@ 0xb0
 8001dc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	dd0d      	ble.n	8001de6 <set_DSP_cutoff_freq+0x13e>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 8001dca:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001dce:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001dd2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001dd6:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dda:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0
				p->DSP_cutoff_freq = n;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001de4:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8001de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dea:	3301      	adds	r3, #1
 8001dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	ddcb      	ble.n	8001d90 <set_DSP_cutoff_freq+0xe8>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	33c0      	adds	r3, #192	@ 0xc0
 8001e00:	443b      	add	r3, r7
 8001e02:	3bb0      	subs	r3, #176	@ 0xb0
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e10:	37c0      	adds	r7, #192	@ 0xc0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	ecbd 8b02 	vpop	{d8}
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	54442d18 	.word	0x54442d18
 8001e24:	401921fb 	.word	0x401921fb
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	416312d0 	.word	0x416312d0

08001e30 <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d00e      	beq.n	8001e60 <set_zcheck_scale+0x30>
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	dc10      	bgt.n	8001e68 <set_zcheck_scale+0x38>
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <set_zcheck_scale+0x20>
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d004      	beq.n	8001e58 <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 8001e4e:	e00b      	b.n	8001e68 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e56:	e007      	b.n	8001e68 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e5e:	e003      	b.n	8001e68 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e66:	bf00      	nop
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db05      	blt.n	8001eba <set_zcheck_channel+0x1c>
 8001eae:	f000 fce3 	bl	8002878 <max_num_channels_per_chip>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	db02      	blt.n	8001ec0 <set_zcheck_channel+0x22>
		return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ebe:	e004      	b.n	8001eca <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e008      	b.n	8001ef2 <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	3228      	adds	r2, #40	@ 0x28
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	f000 fcc1 	bl	8002878 <max_num_channels_per_chip>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dbf0      	blt.n	8001ee0 <power_up_all_amps+0xe>
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0a6      	sub	sp, #152	@ 0x98
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 8001f14:	a3a1      	add	r3, pc, #644	@ (adr r3, 800219c <set_upper_bandwidth+0x294>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b9b      	ldr	r3, [pc, #620]	@ (8002190 <set_upper_bandwidth+0x288>)
 8001f24:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8001f28:	a393      	add	r3, pc, #588	@ (adr r3, 8002178 <set_upper_bandwidth+0x270>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 8001f32:	233f      	movs	r3, #63	@ 0x3f
 8001f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 8001f36:	231f      	movs	r3, #31
 8001f38:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 8001f3a:	a391      	add	r3, pc, #580	@ (adr r3, 8002180 <set_upper_bandwidth+0x278>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4b92      	ldr	r3, [pc, #584]	@ (8002194 <set_upper_bandwidth+0x28c>)
 8001f4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b91      	ldr	r3, [pc, #580]	@ (8002198 <set_upper_bandwidth+0x290>)
 8001f54:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 8001f58:	233f      	movs	r3, #63	@ 0x3f
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 8001f60:	ed97 7b00 	vldr	d7, [r7]
 8001f64:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8002188 <set_upper_bandwidth+0x280>
 8001f68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	dd04      	ble.n	8001f7c <set_upper_bandwidth+0x74>
		upper_bandwidth = 30000.0;
 8001f72:	a385      	add	r3, pc, #532	@ (adr r3, 8002188 <set_upper_bandwidth+0x280>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 8001f7c:	ed97 0b00 	vldr	d0, [r7]
 8001f80:	f000 f9ee 	bl	8002360 <rH1_from_upper_bandwidth>
 8001f84:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 8001f98:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f9c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001fa6:	e028      	b.n	8001ffa <set_upper_bandwidth+0xf2>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 8001fa8:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8001fac:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fb4:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8001fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fbc:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8001fc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fc4:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001fc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	d50e      	bpl.n	8001ff0 <set_upper_bandwidth+0xe8>
			rH1_actual += RH1Dac2Unit;
 8001fd2:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001fd6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001fda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fde:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ffa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002000:	429a      	cmp	r2, r3
 8002002:	dbd1      	blt.n	8001fa8 <set_upper_bandwidth+0xa0>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800200a:	e024      	b.n	8002056 <set_upper_bandwidth+0x14e>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 800200c:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8002010:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8002014:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002018:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 800201c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002020:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d50e      	bpl.n	800204c <set_upper_bandwidth+0x144>
			rH1_actual += RH1Dac1Unit;
 800202e:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002032:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8002036:	ee36 7b07 	vadd.f64	d7, d6, d7
 800203a:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 800204c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002050:	3301      	adds	r3, #1
 8002052:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002056:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800205a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800205c:	429a      	cmp	r2, r3
 800205e:	dbd5      	blt.n	800200c <set_upper_bandwidth+0x104>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 8002060:	ed97 0b00 	vldr	d0, [r7]
 8002064:	f000 f9c0 	bl	80023e8 <rH2_from_upper_bandwidth>
 8002068:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 800207c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002080:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8002084:	2300      	movs	r3, #0
 8002086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002088:	e026      	b.n	80020d8 <set_upper_bandwidth+0x1d0>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 800208a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800208e:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8002092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002096:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 800209a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800209e:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80020a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020a6:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d50e      	bpl.n	80020d2 <set_upper_bandwidth+0x1ca>
			rH2_actual += RH2Dac2Unit;
 80020b4:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020b8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80020bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020c0:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 80020d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020d4:	3301      	adds	r3, #1
 80020d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80020da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbd4      	blt.n	800208a <set_upper_bandwidth+0x182>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020e4:	e022      	b.n	800212c <set_upper_bandwidth+0x224>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 80020e6:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80020ea:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80020ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80020f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020fa:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d50e      	bpl.n	8002126 <set_upper_bandwidth+0x21e>
			rH2_actual += RH2Dac1Unit;
 8002108:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 800210c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002110:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002114:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002128:	3301      	adds	r3, #1
 800212a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800212c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800212e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002130:	429a      	cmp	r2, r3
 8002132:	dbd8      	blt.n	80020e6 <set_upper_bandwidth+0x1de>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 8002134:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8002138:	f000 fa2a 	bl	8002590 <upper_bandwidth_from_rH1>
 800213c:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 8002140:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002144:	f000 fa88 	bl	8002658 <upper_bandwidth_from_rH2>
 8002148:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 800214c:	ed97 6b08 	vldr	d6, [r7, #32]
 8002150:	ed97 7b06 	vldr	d7, [r7, #24]
 8002154:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002158:	eeb0 0b47 	vmov.f64	d0, d7
 800215c:	f00c fe58 	bl	800ee10 <sqrt>
 8002160:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 8002164:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002168:	ec43 2b17 	vmov	d7, r2, r3
}
 800216c:	eeb0 0b47 	vmov.f64	d0, d7
 8002170:	3798      	adds	r7, #152	@ 0x98
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	00000000 	.word	0x00000000
 800217c:	40dcb600 	.word	0x40dcb600
 8002180:	00000000 	.word	0x00000000
 8002184:	40c0fe00 	.word	0x40c0fe00
 8002188:	00000000 	.word	0x00000000
 800218c:	40dd4c00 	.word	0x40dd4c00
 8002190:	4082c000 	.word	0x4082c000
 8002194:	4087d800 	.word	0x4087d800
 8002198:	40e2c000 	.word	0x40e2c000
 800219c:	00000000 	.word	0x00000000
 80021a0:	40a13000 	.word	0x40a13000
 80021a4:	00000000 	.word	0x00000000

080021a8 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	@ 0x58
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 80021b4:	a362      	add	r3, pc, #392	@ (adr r3, 8002340 <set_lower_bandwidth+0x198>)
 80021b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 80021be:	a362      	add	r3, pc, #392	@ (adr r3, 8002348 <set_lower_bandwidth+0x1a0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 80021c8:	a361      	add	r3, pc, #388	@ (adr r3, 8002350 <set_lower_bandwidth+0x1a8>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 80021d2:	a361      	add	r3, pc, #388	@ (adr r3, 8002358 <set_lower_bandwidth+0x1b0>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 80021dc:	237f      	movs	r3, #127	@ 0x7f
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 80021e0:	233f      	movs	r3, #63	@ 0x3f
 80021e2:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 80021e4:	ed97 7b00 	vldr	d7, [r7]
 80021e8:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8002330 <set_lower_bandwidth+0x188>
 80021ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dd04      	ble.n	8002200 <set_lower_bandwidth+0x58>
    	lower_bandwidth = 1500.0;
 80021f6:	a34e      	add	r3, pc, #312	@ (adr r3, 8002330 <set_lower_bandwidth+0x188>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 8002200:	ed97 0b00 	vldr	d0, [r7]
 8002204:	f000 f934 	bl	8002470 <rL_from_lower_bandwidth>
 8002208:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 8002224:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002228:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 800222c:	ed97 7b00 	vldr	d7, [r7]
 8002230:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002338 <set_lower_bandwidth+0x190>
 8002234:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d50e      	bpl.n	800225c <set_lower_bandwidth+0xb4>
    	rL_actual += RLDac3Unit;
 800223e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002242:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002246:	ee36 7b07 	vadd.f64	d7, d6, d7
 800224a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 800225c:	2300      	movs	r3, #0
 800225e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002260:	e026      	b.n	80022b0 <set_lower_bandwidth+0x108>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 8002262:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8002266:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800226a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800226e:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8002272:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002276:	ed97 6b06 	vldr	d6, [r7, #24]
 800227a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800227e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002282:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	d50e      	bpl.n	80022aa <set_lower_bandwidth+0x102>
    		rL_actual += RLDac2Unit;
 800228c:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002290:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002298:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 80022aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ac:	3301      	adds	r3, #1
 80022ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbd4      	blt.n	8002262 <set_lower_bandwidth+0xba>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022bc:	e022      	b.n	8002304 <set_lower_bandwidth+0x15c>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 80022be:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80022c2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80022c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022ca:	ed97 6b06 	vldr	d6, [r7, #24]
 80022ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022d2:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80022d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	d50e      	bpl.n	80022fe <set_lower_bandwidth+0x156>
    		rL_actual += RLDac1Unit;
 80022e0:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80022e4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80022e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022ec:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 80022fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002300:	3301      	adds	r3, #1
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	429a      	cmp	r2, r3
 800230a:	dbd8      	blt.n	80022be <set_lower_bandwidth+0x116>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 800230c:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002310:	f000 fa06 	bl	8002720 <lower_bandwidth_from_rL>
 8002314:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 8002318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800231c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002320:	eeb0 0b47 	vmov.f64	d0, d7
 8002324:	3758      	adds	r7, #88	@ 0x58
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	f3af 8000 	nop.w
 8002330:	00000000 	.word	0x00000000
 8002334:	40977000 	.word	0x40977000
 8002338:	33333333 	.word	0x33333333
 800233c:	3fc33333 	.word	0x3fc33333
 8002340:	00000000 	.word	0x00000000
 8002344:	40ab5800 	.word	0x40ab5800
 8002348:	00000000 	.word	0x00000000
 800234c:	4065e000 	.word	0x4065e000
 8002350:	00000000 	.word	0x00000000
 8002354:	40c8ce00 	.word	0x40c8ce00
 8002358:	00000000 	.word	0x00000000
 800235c:	4146e360 	.word	0x4146e360

08002360 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 800236a:	ed97 0b00 	vldr	d0, [r7]
 800236e:	f00c fa97 	bl	800e8a0 <log10>
 8002372:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 8002376:	ed97 7b02 	vldr	d7, [r7, #8]
 800237a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80023c8 <rH1_from_upper_bandwidth+0x68>
 800237e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002382:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80023d0 <rH1_from_upper_bandwidth+0x70>
 8002386:	ee36 6b47 	vsub.f64	d6, d6, d7
 800238a:	ed97 7b02 	vldr	d7, [r7, #8]
 800238e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80023d8 <rH1_from_upper_bandwidth+0x78>
 8002392:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002396:	ed97 7b02 	vldr	d7, [r7, #8]
 800239a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800239e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023a2:	eeb0 1b47 	vmov.f64	d1, d7
 80023a6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80023aa:	f00c fae1 	bl	800e970 <pow>
 80023ae:	eeb0 7b40 	vmov.f64	d7, d0
 80023b2:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80023e0 <rH1_from_upper_bandwidth+0x80>
 80023b6:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 80023ba:	eeb0 0b47 	vmov.f64	d0, d7
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	94467382 	.word	0x94467382
 80023cc:	3ff306f6 	.word	0x3ff306f6
 80023d0:	c504816f 	.word	0xc504816f
 80023d4:	4020318f 	.word	0x4020318f
 80023d8:	c60029f1 	.word	0xc60029f1
 80023dc:	3fa86833 	.word	0x3fa86833
 80023e0:	e5604189 	.word	0xe5604189
 80023e4:	3fef22d0 	.word	0x3fef22d0

080023e8 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 80023f2:	ed97 0b00 	vldr	d0, [r7]
 80023f6:	f00c fa53 	bl	800e8a0 <log10>
 80023fa:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 80023fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002402:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002450 <rH2_from_upper_bandwidth+0x68>
 8002406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800240a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002458 <rH2_from_upper_bandwidth+0x70>
 800240e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002412:	ed97 7b02 	vldr	d7, [r7, #8]
 8002416:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002460 <rH2_from_upper_bandwidth+0x78>
 800241a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800241e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002422:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800242a:	eeb0 1b47 	vmov.f64	d1, d7
 800242e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002432:	f00c fa9d 	bl	800e970 <pow>
 8002436:	eeb0 7b40 	vmov.f64	d7, d0
 800243a:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002468 <rH2_from_upper_bandwidth+0x80>
 800243e:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 8002442:	eeb0 0b47 	vmov.f64	d0, d7
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f3af 8000 	nop.w
 8002450:	16f0068e 	.word	0x16f0068e
 8002454:	3ff15048 	.word	0x3ff15048
 8002458:	2a305532 	.word	0x2a305532
 800245c:	402033a9 	.word	0x402033a9
 8002460:	6f3f52fc 	.word	0x6f3f52fc
 8002464:	3fa1522a 	.word	0x3fa1522a
 8002468:	cd35a858 	.word	0xcd35a858
 800246c:	3ff04e3b 	.word	0x3ff04e3b

08002470 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 800247a:	ed97 0b00 	vldr	d0, [r7]
 800247e:	f00c fa0f 	bl	800e8a0 <log10>
 8002482:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 8002486:	ed97 7b00 	vldr	d7, [r7]
 800248a:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 800248e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d532      	bpl.n	80024fe <rL_from_lower_bandwidth+0x8e>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 8002498:	ed97 7b02 	vldr	d7, [r7, #8]
 800249c:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002550 <rL_from_lower_bandwidth+0xe0>
 80024a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024a4:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002558 <rL_from_lower_bandwidth+0xe8>
 80024a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80024ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80024b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8002560 <rL_from_lower_bandwidth+0xf0>
 80024b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80024b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80024bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024c0:	ee36 6b07 	vadd.f64	d6, d6, d7
            0.1442 * log10f * log10f * log10f));
 80024c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80024c8:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8002568 <rL_from_lower_bandwidth+0xf8>
 80024cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80024d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80024d4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80024d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80024dc:	ee25 7b07 	vmul.f64	d7, d5, d7
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80024e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e4:	eeb0 1b47 	vmov.f64	d1, d7
 80024e8:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80024ec:	f00c fa40 	bl	800e970 <pow>
 80024f0:	eeb0 7b40 	vmov.f64	d7, d0
 80024f4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8002570 <rL_from_lower_bandwidth+0x100>
 80024f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024fc:	e021      	b.n	8002542 <rL_from_lower_bandwidth+0xd2>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 80024fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002502:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002578 <rL_from_lower_bandwidth+0x108>
 8002506:	ee27 7b06 	vmul.f64	d7, d7, d6
 800250a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002580 <rL_from_lower_bandwidth+0x110>
 800250e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002512:	ed97 7b02 	vldr	d7, [r7, #8]
 8002516:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8002588 <rL_from_lower_bandwidth+0x118>
 800251a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800251e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002522:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002526:	ee36 7b07 	vadd.f64	d7, d6, d7
 800252a:	eeb0 1b47 	vmov.f64	d1, d7
 800252e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002532:	f00c fa1d 	bl	800e970 <pow>
 8002536:	eeb0 7b40 	vmov.f64	d7, d0
 800253a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8002570 <rL_from_lower_bandwidth+0x100>
 800253e:	ee27 7b06 	vmul.f64	d7, d7, d6
    }
}
 8002542:	eeb0 0b47 	vmov.f64	d0, d7
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	f3af 8000 	nop.w
 8002550:	ab367a10 	.word	0xab367a10
 8002554:	3ff3573e 	.word	0x3ff3573e
 8002558:	6e2eb1c4 	.word	0x6e2eb1c4
 800255c:	4013c1a3 	.word	0x4013c1a3
 8002560:	35a85879 	.word	0x35a85879
 8002564:	3fe23bcd 	.word	0x3fe23bcd
 8002568:	460aa64c 	.word	0x460aa64c
 800256c:	3fc27525 	.word	0x3fc27525
 8002570:	504816f0 	.word	0x504816f0
 8002574:	3ff018fc 	.word	0x3ff018fc
 8002578:	1f8a0903 	.word	0x1f8a0903
 800257c:	3fe2ee63 	.word	0x3fe2ee63
 8002580:	0ded288d 	.word	0x0ded288d
 8002584:	4012f0be 	.word	0x4012f0be
 8002588:	760bf5d8 	.word	0x760bf5d8
 800258c:	3fb5b6c3 	.word	0x3fb5b6c3

08002590 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	ed2d 8b02 	vpush	{d8}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 800259e:	a32a      	add	r3, pc, #168	@ (adr r3, 8002648 <upper_bandwidth_from_rH1+0xb8>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 80025a8:	a329      	add	r3, pc, #164	@ (adr r3, 8002650 <upper_bandwidth_from_rH1+0xc0>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 80025b2:	ed97 7b00 	vldr	d7, [r7]
 80025b6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002638 <upper_bandwidth_from_rH1+0xa8>
 80025ba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025be:	eeb0 0b46 	vmov.f64	d0, d6
 80025c2:	f00c f96d 	bl	800e8a0 <log10>
 80025c6:	eeb0 7b40 	vmov.f64	d7, d0
 80025ca:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002640 <upper_bandwidth_from_rH1+0xb0>
 80025ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025d2:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 80025d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80025da:	eeb1 8b47 	vneg.f64	d8, d7
 80025de:	ed97 7b04 	vldr	d7, [r7, #16]
 80025e2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80025e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80025ea:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80025ee:	ee27 5b05 	vmul.f64	d5, d7, d5
 80025f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80025f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002602:	f00c fc05 	bl	800ee10 <sqrt>
 8002606:	eeb0 7b40 	vmov.f64	d7, d0
 800260a:	ee38 6b47 	vsub.f64	d6, d8, d7
 800260e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002612:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002616:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800261a:	eeb0 1b45 	vmov.f64	d1, d5
 800261e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002622:	f00c f9a5 	bl	800e970 <pow>
 8002626:	eeb0 7b40 	vmov.f64	d7, d0
}
 800262a:	eeb0 0b47 	vmov.f64	d0, d7
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	ecbd 8b02 	vpop	{d8}
 8002636:	bd80      	pop	{r7, pc}
 8002638:	e5604189 	.word	0xe5604189
 800263c:	3fef22d0 	.word	0x3fef22d0
 8002640:	c504816f 	.word	0xc504816f
 8002644:	4020318f 	.word	0x4020318f
 8002648:	c60029f1 	.word	0xc60029f1
 800264c:	3fa86833 	.word	0x3fa86833
 8002650:	94467382 	.word	0x94467382
 8002654:	bff306f6 	.word	0xbff306f6

08002658 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	ed2d 8b02 	vpush	{d8}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 8002666:	a32a      	add	r3, pc, #168	@ (adr r3, 8002710 <upper_bandwidth_from_rH2+0xb8>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 8002670:	a329      	add	r3, pc, #164	@ (adr r3, 8002718 <upper_bandwidth_from_rH2+0xc0>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 800267a:	ed97 7b00 	vldr	d7, [r7]
 800267e:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002700 <upper_bandwidth_from_rH2+0xa8>
 8002682:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002686:	eeb0 0b46 	vmov.f64	d0, d6
 800268a:	f00c f909 	bl	800e8a0 <log10>
 800268e:	eeb0 7b40 	vmov.f64	d7, d0
 8002692:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002708 <upper_bandwidth_from_rH2+0xb0>
 8002696:	ee36 7b47 	vsub.f64	d7, d6, d7
 800269a:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 800269e:	ed97 7b04 	vldr	d7, [r7, #16]
 80026a2:	eeb1 8b47 	vneg.f64	d8, d7
 80026a6:	ed97 7b04 	vldr	d7, [r7, #16]
 80026aa:	ee27 6b07 	vmul.f64	d6, d7, d7
 80026ae:	ed97 7b06 	vldr	d7, [r7, #24]
 80026b2:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80026b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80026be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026c6:	eeb0 0b47 	vmov.f64	d0, d7
 80026ca:	f00c fba1 	bl	800ee10 <sqrt>
 80026ce:	eeb0 7b40 	vmov.f64	d7, d0
 80026d2:	ee38 6b47 	vsub.f64	d6, d8, d7
 80026d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80026da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80026de:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80026e2:	eeb0 1b45 	vmov.f64	d1, d5
 80026e6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80026ea:	f00c f941 	bl	800e970 <pow>
 80026ee:	eeb0 7b40 	vmov.f64	d7, d0
}
 80026f2:	eeb0 0b47 	vmov.f64	d0, d7
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	ecbd 8b02 	vpop	{d8}
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	cd35a858 	.word	0xcd35a858
 8002704:	3ff04e3b 	.word	0x3ff04e3b
 8002708:	2a305532 	.word	0x2a305532
 800270c:	402033a9 	.word	0x402033a9
 8002710:	6f3f52fc 	.word	0x6f3f52fc
 8002714:	3fa1522a 	.word	0x3fa1522a
 8002718:	16f0068e 	.word	0x16f0068e
 800271c:	bff15048 	.word	0xbff15048

08002720 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	ed2d 8b02 	vpush	{d8}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 800272e:	ed97 7b00 	vldr	d7, [r7]
 8002732:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8002830 <lower_bandwidth_from_rL+0x110>
 8002736:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d504      	bpl.n	800274a <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002740:	a33b      	add	r3, pc, #236	@ (adr r3, 8002830 <lower_bandwidth_from_rL+0x110>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 800274a:	ed97 7b00 	vldr	d7, [r7]
 800274e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8002838 <lower_bandwidth_from_rL+0x118>
 8002752:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d51c      	bpl.n	8002796 <lower_bandwidth_from_rL+0x76>
        a = 0.08482;
 800275c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002858 <lower_bandwidth_from_rL+0x138>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 8002766:	a33e      	add	r3, pc, #248	@ (adr r3, 8002860 <lower_bandwidth_from_rL+0x140>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 8002770:	ed97 7b00 	vldr	d7, [r7]
 8002774:	ed9f 5b32 	vldr	d5, [pc, #200]	@ 8002840 <lower_bandwidth_from_rL+0x120>
 8002778:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800277c:	eeb0 0b46 	vmov.f64	d0, d6
 8002780:	f00c f88e 	bl	800e8a0 <log10>
 8002784:	eeb0 7b40 	vmov.f64	d7, d0
 8002788:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002848 <lower_bandwidth_from_rL+0x128>
 800278c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002790:	ed87 7b02 	vstr	d7, [r7, #8]
 8002794:	e01b      	b.n	80027ce <lower_bandwidth_from_rL+0xae>
    } else {
        a = 0.3303;
 8002796:	a334      	add	r3, pc, #208	@ (adr r3, 8002868 <lower_bandwidth_from_rL+0x148>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 80027a0:	a333      	add	r3, pc, #204	@ (adr r3, 8002870 <lower_bandwidth_from_rL+0x150>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 80027aa:	ed97 7b00 	vldr	d7, [r7]
 80027ae:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8002840 <lower_bandwidth_from_rL+0x120>
 80027b2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80027b6:	eeb0 0b46 	vmov.f64	d0, d6
 80027ba:	f00c f871 	bl	800e8a0 <log10>
 80027be:	eeb0 7b40 	vmov.f64	d7, d0
 80027c2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002850 <lower_bandwidth_from_rL+0x130>
 80027c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027ca:	ed87 7b02 	vstr	d7, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 80027ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80027d2:	eeb1 8b47 	vneg.f64	d8, d7
 80027d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80027da:	ee27 6b07 	vmul.f64	d6, d7, d7
 80027de:	ed97 7b06 	vldr	d7, [r7, #24]
 80027e2:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80027e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80027ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80027ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027f6:	eeb0 0b47 	vmov.f64	d0, d7
 80027fa:	f00c fb09 	bl	800ee10 <sqrt>
 80027fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002802:	ee38 6b47 	vsub.f64	d6, d8, d7
 8002806:	ed97 7b06 	vldr	d7, [r7, #24]
 800280a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800280e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002812:	eeb0 1b45 	vmov.f64	d1, d5
 8002816:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800281a:	f00c f8a9 	bl	800e970 <pow>
 800281e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8002822:	eeb0 0b47 	vmov.f64	d0, d7
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	ecbd 8b02 	vpop	{d8}
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00000000 	.word	0x00000000
 8002834:	40b3ec00 	.word	0x40b3ec00
 8002838:	00000000 	.word	0x00000000
 800283c:	40dd4c00 	.word	0x40dd4c00
 8002840:	504816f0 	.word	0x504816f0
 8002844:	3ff018fc 	.word	0x3ff018fc
 8002848:	0ded288d 	.word	0x0ded288d
 800284c:	4012f0be 	.word	0x4012f0be
 8002850:	c56d5cfb 	.word	0xc56d5cfb
 8002854:	4013f2fe 	.word	0x4013f2fe
 8002858:	760bf5d8 	.word	0x760bf5d8
 800285c:	3fb5b6c3 	.word	0x3fb5b6c3
 8002860:	1f8a0903 	.word	0x1f8a0903
 8002864:	bfe2ee63 	.word	0xbfe2ee63
 8002868:	9c779a6b 	.word	0x9c779a6b
 800286c:	3fd523a2 	.word	0x3fd523a2
 8002870:	f5c28f5c 	.word	0xf5c28f5c
 8002874:	bff35c28 	.word	0xbff35c28

08002878 <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	return 64;
 800287c:	2340      	movs	r3, #64	@ 0x40
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	p->amp_vref_enable = 1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2203      	movs	r2, #3
 80028a8:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 021c 	add.w	r2, r3, #28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0120 	add.w	r1, r3, #32
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	ed93 7b00 	vldr	d7, [r3]
 80028c8:	eeb0 0b47 	vmov.f64	d0, d7
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 f863 	bl	8002998 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff f9cc 	bl	8001c88 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002908:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff f9cb 	bl	8001ca8 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 800291e:	2100      	movs	r1, #0
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fa85 	bl	8001e30 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 800292c:	2100      	movs	r1, #0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff faa0 	bl	8001e74 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 800293a:	2100      	movs	r1, #0
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff faae 	bl	8001e9e <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 8002968:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8002990 <set_default_rhd_settings+0x108>
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff facb 	bl	8001f08 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 8002972:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fc16 	bl	80021a8 <set_lower_bandwidth>
	// R[17]D[7:0]: apwr[31:0]
	// R[18]D[7:0] = apwr[39:32]
	// R[19]D[7:0] = apwr[47:40]
	// R[20]D[7:0] = apwr[55:48]
	// R[21]D[7:0] = apwr[63:56]
	power_up_all_amps(p);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff faa8 	bl	8001ed2 <power_up_all_amps>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	f3af 8000 	nop.w
 8002990:	00000000 	.word	0x00000000
 8002994:	40bd4c00 	.word	0x40bd4c00

08002998 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 80029a6:	ed97 7b00 	vldr	d7, [r7]
 80029aa:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8002ad0 <set_biases_based_on_sample_rate+0x138>
 80029ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029b2:	ed87 7b04 	vstr	d7, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 80029b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029ba:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8002ad8 <set_biases_based_on_sample_rate+0x140>
 80029be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d806      	bhi.n	80029d6 <set_biases_based_on_sample_rate+0x3e>
		*adc_buffer_bias = 32;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2228      	movs	r2, #40	@ 0x28
 80029d2:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 80029d4:	e075      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 140000.0) {
 80029d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029da:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002ae0 <set_biases_based_on_sample_rate+0x148>
 80029de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d806      	bhi.n	80029f6 <set_biases_based_on_sample_rate+0x5e>
		*adc_buffer_bias = 16;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2210      	movs	r2, #16
 80029ec:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2228      	movs	r2, #40	@ 0x28
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	e065      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 175000.0) {
 80029f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8002ae8 <set_biases_based_on_sample_rate+0x150>
 80029fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d806      	bhi.n	8002a16 <set_biases_based_on_sample_rate+0x7e>
		*adc_buffer_bias = 8;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2228      	movs	r2, #40	@ 0x28
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	e055      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 220000.0) {
 8002a16:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a1a:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8002af0 <set_biases_based_on_sample_rate+0x158>
 8002a1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	d806      	bhi.n	8002a36 <set_biases_based_on_sample_rate+0x9e>
		*adc_buffer_bias = 8;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2220      	movs	r2, #32
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	e045      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 280000.0) {
 8002a36:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a3a:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002af8 <set_biases_based_on_sample_rate+0x160>
 8002a3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d806      	bhi.n	8002a56 <set_biases_based_on_sample_rate+0xbe>
		*adc_buffer_bias = 8;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	221a      	movs	r2, #26
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	e035      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 350000.0) {
 8002a56:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a5a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8002b00 <set_biases_based_on_sample_rate+0x168>
 8002a5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d806      	bhi.n	8002a76 <set_biases_based_on_sample_rate+0xde>
		*adc_buffer_bias = 4;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2212      	movs	r2, #18
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	e025      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 440000.0) {
 8002a76:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002b08 <set_biases_based_on_sample_rate+0x170>
 8002a7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	d806      	bhi.n	8002a96 <set_biases_based_on_sample_rate+0xfe>
		*adc_buffer_bias = 3;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2210      	movs	r2, #16
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	e015      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 525000.0) {
 8002a96:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a9a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002b10 <set_biases_based_on_sample_rate+0x178>
 8002a9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	d806      	bhi.n	8002ab6 <set_biases_based_on_sample_rate+0x11e>
		*adc_buffer_bias = 3;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	e005      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
		*adc_buffer_bias = 2;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	00000000 	.word	0x00000000
 8002ad4:	40418000 	.word	0x40418000
 8002ad8:	00000000 	.word	0x00000000
 8002adc:	40fd4c00 	.word	0x40fd4c00
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	41011700 	.word	0x41011700
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	41055cc0 	.word	0x41055cc0
 8002af0:	00000000 	.word	0x00000000
 8002af4:	410adb00 	.word	0x410adb00
 8002af8:	00000000 	.word	0x00000000
 8002afc:	41111700 	.word	0x41111700
 8002b00:	00000000 	.word	0x00000000
 8002b04:	41155cc0 	.word	0x41155cc0
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	411adb00 	.word	0x411adb00
 8002b10:	00000000 	.word	0x00000000
 8002b14:	41200590 	.word	0x41200590

08002b18 <get_register_value>:


// Return the value of a selected RAM register (0-21) on the RHD2164 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b15      	cmp	r3, #21
 8002b2a:	f200 8217 	bhi.w	8002f5c <get_register_value+0x444>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <get_register_value+0x1c>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b8d 	.word	0x08002b8d
 8002b38:	08002bb7 	.word	0x08002bb7
 8002b3c:	08002bc7 	.word	0x08002bc7
 8002b40:	08002bcf 	.word	0x08002bcf
 8002b44:	08002bff 	.word	0x08002bff
 8002b48:	08002c27 	.word	0x08002c27
 8002b4c:	08002c57 	.word	0x08002c57
 8002b50:	08002c5d 	.word	0x08002c5d
 8002b54:	08002c65 	.word	0x08002c65
 8002b58:	08002c77 	.word	0x08002c77
 8002b5c:	08002c89 	.word	0x08002c89
 8002b60:	08002c9b 	.word	0x08002c9b
 8002b64:	08002cad 	.word	0x08002cad
 8002b68:	08002cbf 	.word	0x08002cbf
 8002b6c:	08002cdd 	.word	0x08002cdd
 8002b70:	08002d2d 	.word	0x08002d2d
 8002b74:	08002d7d 	.word	0x08002d7d
 8002b78:	08002dcd 	.word	0x08002dcd
 8002b7c:	08002e1d 	.word	0x08002e1d
 8002b80:	08002e6d 	.word	0x08002e6d
 8002b84:	08002ebd 	.word	0x08002ebd
 8002b88:	08002f0d 	.word	0x08002f0d
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002b98:	015b      	lsls	r3, r3, #5
 8002b9a:	441a      	add	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002baa:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
		break;
 8002bb4:	e1d4      	b.n	8002f60 <get_register_value+0x448>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	019a      	lsls	r2, r3, #6
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
		break;
 8002bc4:	e1cc      	b.n	8002f60 <get_register_value+0x448>

	case 2:
		regout = p->mux_bias;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	60fb      	str	r3, [r7, #12]
		break;
 8002bcc:	e1c8      	b.n	8002f60 <get_register_value+0x448>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002bf2:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
		break;
 8002bfc:	e1b0      	b.n	8002f60 <get_register_value+0x448>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	01da      	lsls	r2, r3, #7
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	015b      	lsls	r3, r3, #5
 8002c12:	441a      	add	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
		break;
 8002c24:	e19c      	b.n	8002f60 <get_register_value+0x448>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	019a      	lsls	r2, r3, #6
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	015b      	lsls	r3, r3, #5
 8002c32:	441a      	add	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c42:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	441a      	add	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c50:	4413      	add	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
		break;
 8002c54:	e184      	b.n	8002f60 <get_register_value+0x448>

	case 6:
		regout = ZcheckDac;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	60fb      	str	r3, [r7, #12]
		break;
 8002c5a:	e181      	b.n	8002f60 <get_register_value+0x448>

	case 7:
		regout = p->zcheck_select;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c60:	60fb      	str	r3, [r7, #12]
		break;
 8002c62:	e17d      	b.n	8002f60 <get_register_value+0x448>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c68:	01da      	lsls	r2, r3, #7
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c70:	4413      	add	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
		break;
 8002c74:	e174      	b.n	8002f60 <get_register_value+0x448>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c7a:	01da      	lsls	r2, r3, #7
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
		break;
 8002c86:	e16b      	b.n	8002f60 <get_register_value+0x448>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	01da      	lsls	r2, r3, #7
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c94:	4413      	add	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
		break;
 8002c98:	e162      	b.n	8002f60 <get_register_value+0x448>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9e:	01da      	lsls	r2, r3, #7
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	4413      	add	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
		break;
 8002caa:	e159      	b.n	8002f60 <get_register_value+0x448>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb0:	01da      	lsls	r2, r3, #7
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
		break;
 8002cbc:	e150      	b.n	8002f60 <get_register_value+0x448>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc4:	01da      	lsls	r2, r3, #7
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	441a      	add	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
		break;
 8002cda:	e141      	b.n	8002f60 <get_register_value+0x448>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002ce2:	01da      	lsls	r2, r3, #7
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002cea:	019b      	lsls	r3, r3, #6
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cf4:	015b      	lsls	r3, r3, #5
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d08:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d0a:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	441a      	add	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d26:	4413      	add	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
		break;
 8002d2a:	e119      	b.n	8002f60 <get_register_value+0x448>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002d32:	01da      	lsls	r2, r3, #7
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d3a:	019b      	lsls	r3, r3, #6
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002d44:	015b      	lsls	r3, r3, #5
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002d58:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d5a:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
		break;
 8002d7a:	e0f1      	b.n	8002f60 <get_register_value+0x448>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8002d82:	01da      	lsls	r2, r3, #7
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002da8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002daa:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	441a      	add	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
		break;
 8002dca:	e0c9      	b.n	8002f60 <get_register_value+0x448>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002dd2:	01da      	lsls	r2, r3, #7
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002dda:	019b      	lsls	r3, r3, #6
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002de4:	015b      	lsls	r3, r3, #5
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002df8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002dfa:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	441a      	add	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
		break;
 8002e1a:	e0a1      	b.n	8002f60 <get_register_value+0x448>

	case 18:
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e22:	01da      	lsls	r2, r3, #7
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002e2a:	019b      	lsls	r3, r3, #6
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002e34:	015b      	lsls	r3, r3, #5
 8002e36:	441a      	add	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8002e48:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e4a:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
		break;
 8002e6a:	e079      	b.n	8002f60 <get_register_value+0x448>

	case 19:
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8002e72:	01da      	lsls	r2, r3, #7
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002e7a:	019b      	lsls	r3, r3, #6
 8002e7c:	441a      	add	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	441a      	add	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002e98:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002e9a:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	441a      	add	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
		break;
 8002eba:	e051      	b.n	8002f60 <get_register_value+0x448>

	case 20:
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8002ec2:	01da      	lsls	r2, r3, #7
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002eca:	019b      	lsls	r3, r3, #6
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	441a      	add	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8002ee8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002eea:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
		break;
 8002f0a:	e029      	b.n	8002f60 <get_register_value+0x448>

	case 21:
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002f12:	01da      	lsls	r2, r3, #7
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002f24:	015b      	lsls	r3, r3, #5
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002f38:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f3a:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
		break;
 8002f5a:	e001      	b.n	8002f60 <get_register_value+0x448>

	default:
		regout = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	b29b      	uxth	r3, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	460a      	mov	r2, r1
 8002f7a:	71fb      	strb	r3, [r7, #7]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 8002f80:	2300      	movs	r3, #0
 8002f82:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 8002f8c:	79bb      	ldrb	r3, [r7, #6]
 8002f8e:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 8002f90:	89fa      	ldrh	r2, [r7, #14]
 8002f92:	89bb      	ldrh	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 8002fae:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 8002fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fd0:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 8002fda:	89fa      	ldrh	r2, [r7, #14]
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003000:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003004:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	b29b      	uxth	r3, r3
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 800300e:	89fa      	ldrh	r2, [r7, #14]
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	b29b      	uxth	r3, r3
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <HAL_MspInit+0x30>)
 800302c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003030:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <HAL_MspInit+0x30>)
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_MspInit+0x30>)
 800303c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	58024400 	.word	0x58024400

08003058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	@ 0x38
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a94      	ldr	r2, [pc, #592]	@ (80032c8 <HAL_SPI_MspInit+0x270>)
 8003076:	4293      	cmp	r3, r2
 8003078:	f040 8087 	bne.w	800318a <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307c:	4b93      	ldr	r3, [pc, #588]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003082:	4a92      	ldr	r2, [pc, #584]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 8003084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003088:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800308c:	4b8f      	ldr	r3, [pc, #572]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 800308e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b8c      	ldr	r3, [pc, #560]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a0:	4a8a      	ldr	r2, [pc, #552]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030aa:	4b88      	ldr	r3, [pc, #544]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80030ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b8:	4b84      	ldr	r3, [pc, #528]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030be:	4a83      	ldr	r2, [pc, #524]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c8:	4b80      	ldr	r3, [pc, #512]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80030ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80030d6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030e8:	2305      	movs	r3, #5
 80030ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f0:	4619      	mov	r1, r3
 80030f2:	4877      	ldr	r0, [pc, #476]	@ (80032d0 <HAL_SPI_MspInit+0x278>)
 80030f4:	f003 fd8c 	bl	8006c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003108:	2305      	movs	r3, #5
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	4870      	ldr	r0, [pc, #448]	@ (80032d4 <HAL_SPI_MspInit+0x27c>)
 8003114:	f003 fd7c 	bl	8006c10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8003118:	4b6f      	ldr	r3, [pc, #444]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 800311a:	4a70      	ldr	r2, [pc, #448]	@ (80032dc <HAL_SPI_MspInit+0x284>)
 800311c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800311e:	4b6e      	ldr	r3, [pc, #440]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003120:	2225      	movs	r2, #37	@ 0x25
 8003122:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003124:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312a:	4b6b      	ldr	r3, [pc, #428]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003130:	4b69      	ldr	r3, [pc, #420]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003136:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003138:	4b67      	ldr	r3, [pc, #412]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 800313a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800313e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003140:	4b65      	ldr	r3, [pc, #404]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003142:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003146:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003148:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800314e:	4b62      	ldr	r3, [pc, #392]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003150:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003154:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003156:	4b60      	ldr	r3, [pc, #384]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003158:	2200      	movs	r2, #0
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800315c:	485e      	ldr	r0, [pc, #376]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 800315e:	f000 ff13 	bl	8003f88 <HAL_DMA_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8003168:	f7fe f8dc 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a5a      	ldr	r2, [pc, #360]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003170:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003172:	4a59      	ldr	r2, [pc, #356]	@ (80032d8 <HAL_SPI_MspInit+0x280>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2100      	movs	r1, #0
 800317c:	2023      	movs	r0, #35	@ 0x23
 800317e:	f000 fece 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003182:	2023      	movs	r0, #35	@ 0x23
 8003184:	f000 fee5 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003188:	e09a      	b.n	80032c0 <HAL_SPI_MspInit+0x268>
  else if(hspi->Instance==SPI3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a54      	ldr	r2, [pc, #336]	@ (80032e0 <HAL_SPI_MspInit+0x288>)
 8003190:	4293      	cmp	r3, r2
 8003192:	f040 8095 	bne.w	80032c0 <HAL_SPI_MspInit+0x268>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003196:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800319c:	4a4b      	ldr	r2, [pc, #300]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 800319e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031a6:	4b49      	ldr	r3, [pc, #292]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	4b45      	ldr	r3, [pc, #276]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ba:	4a44      	ldr	r2, [pc, #272]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c4:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	4b3e      	ldr	r3, [pc, #248]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d8:	4a3c      	ldr	r2, [pc, #240]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e2:	4b3a      	ldr	r3, [pc, #232]	@ (80032cc <HAL_SPI_MspInit+0x274>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031f0:	2310      	movs	r3, #16
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003200:	2306      	movs	r3, #6
 8003202:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003208:	4619      	mov	r1, r3
 800320a:	4831      	ldr	r0, [pc, #196]	@ (80032d0 <HAL_SPI_MspInit+0x278>)
 800320c:	f003 fd00 	bl	8006c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003210:	2304      	movs	r3, #4
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003220:	2307      	movs	r3, #7
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003228:	4619      	mov	r1, r3
 800322a:	482e      	ldr	r0, [pc, #184]	@ (80032e4 <HAL_SPI_MspInit+0x28c>)
 800322c:	f003 fcf0 	bl	8006c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003230:	2308      	movs	r3, #8
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003240:	2306      	movs	r3, #6
 8003242:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003248:	4619      	mov	r1, r3
 800324a:	4826      	ldr	r0, [pc, #152]	@ (80032e4 <HAL_SPI_MspInit+0x28c>)
 800324c:	f003 fce0 	bl	8006c10 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream1;
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003252:	4a26      	ldr	r2, [pc, #152]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 8003254:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003258:	223e      	movs	r2, #62	@ 0x3e
 800325a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800325c:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 800325e:	2240      	movs	r2, #64	@ 0x40
 8003260:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003262:	4b21      	ldr	r3, [pc, #132]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003268:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 800326a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800326e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003270:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003276:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003278:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 800327a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800327e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003286:	4b18      	ldr	r3, [pc, #96]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003288:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800328c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800328e:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003290:	2200      	movs	r2, #0
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003294:	4814      	ldr	r0, [pc, #80]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003296:	f000 fe77 	bl	8003f88 <HAL_DMA_Init>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_SPI_MspInit+0x24c>
      Error_Handler();
 80032a0:	f7fe f840 	bl	8001324 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a10      	ldr	r2, [pc, #64]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 80032a8:	679a      	str	r2, [r3, #120]	@ 0x78
 80032aa:	4a0f      	ldr	r2, [pc, #60]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2100      	movs	r1, #0
 80032b4:	2033      	movs	r0, #51	@ 0x33
 80032b6:	f000 fe32 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80032ba:	2033      	movs	r0, #51	@ 0x33
 80032bc:	f000 fe49 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 80032c0:	bf00      	nop
 80032c2:	3738      	adds	r7, #56	@ 0x38
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013000 	.word	0x40013000
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58020000 	.word	0x58020000
 80032d4:	58020c00 	.word	0x58020c00
 80032d8:	2400019c 	.word	0x2400019c
 80032dc:	40020010 	.word	0x40020010
 80032e0:	40003c00 	.word	0x40003c00
 80032e4:	58020400 	.word	0x58020400
 80032e8:	24000214 	.word	0x24000214
 80032ec:	40020028 	.word	0x40020028

080032f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	@ 0x30
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a2f      	ldr	r2, [pc, #188]	@ (80033cc <HAL_TIM_Base_MspInit+0xdc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d10f      	bne.n	8003332 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003312:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 8003314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003318:	4a2d      	ldr	r2, [pc, #180]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003322:	4b2b      	ldr	r3, [pc, #172]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 8003324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003330:	e047      	b.n	80033c2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333a:	d12e      	bne.n	800339a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 800333e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003342:	4a23      	ldr	r2, [pc, #140]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800334c:	4b20      	ldr	r3, [pc, #128]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 800334e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 800336c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003388:	2301      	movs	r3, #1
 800338a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	4619      	mov	r1, r3
 8003392:	4810      	ldr	r0, [pc, #64]	@ (80033d4 <HAL_TIM_Base_MspInit+0xe4>)
 8003394:	f003 fc3c 	bl	8006c10 <HAL_GPIO_Init>
}
 8003398:	e013      	b.n	80033c2 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a0e      	ldr	r2, [pc, #56]	@ (80033d8 <HAL_TIM_Base_MspInit+0xe8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10e      	bne.n	80033c2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033a4:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 80033a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 80033ac:	f043 0302 	orr.w	r3, r3, #2
 80033b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_TIM_Base_MspInit+0xe0>)
 80033b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
}
 80033c2:	bf00      	nop
 80033c4:	3730      	adds	r7, #48	@ 0x30
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000
 80033d0:	58024400 	.word	0x58024400
 80033d4:	58020000 	.word	0x58020000
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003424 <HAL_TIM_OC_MspInit+0x48>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d116      	bne.n	800341c <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_TIM_OC_MspInit+0x4c>)
 80033f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <HAL_TIM_OC_MspInit+0x4c>)
 80033f6:	f043 0302 	orr.w	r3, r3, #2
 80033fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_TIM_OC_MspInit+0x4c>)
 8003400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2101      	movs	r1, #1
 8003410:	201d      	movs	r0, #29
 8003412:	f000 fd84 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003416:	201d      	movs	r0, #29
 8003418:	f000 fd9b 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40000400 	.word	0x40000400
 8003428:	58024400 	.word	0x58024400

0800342c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08a      	sub	sp, #40	@ 0x28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a38      	ldr	r2, [pc, #224]	@ (800352c <HAL_TIM_MspPostInit+0x100>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d120      	bne.n	8003490 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800344e:	4b38      	ldr	r3, [pc, #224]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 8003450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003454:	4a36      	ldr	r2, [pc, #216]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 8003456:	f043 0310 	orr.w	r3, r3, #16
 800345a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800345e:	4b34      	ldr	r3, [pc, #208]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 8003460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800346c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800347e:	2301      	movs	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	482a      	ldr	r0, [pc, #168]	@ (8003534 <HAL_TIM_MspPostInit+0x108>)
 800348a:	f003 fbc1 	bl	8006c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800348e:	e049      	b.n	8003524 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003498:	d120      	bne.n	80034dc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800349a:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 800349c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a0:	4a23      	ldr	r2, [pc, #140]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034aa:	4b21      	ldr	r3, [pc, #132]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 80034ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034be:	2302      	movs	r3, #2
 80034c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ca:	2301      	movs	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	4619      	mov	r1, r3
 80034d4:	4818      	ldr	r0, [pc, #96]	@ (8003538 <HAL_TIM_MspPostInit+0x10c>)
 80034d6:	f003 fb9b 	bl	8006c10 <HAL_GPIO_Init>
}
 80034da:	e023      	b.n	8003524 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_TIM_MspPostInit+0x110>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11e      	bne.n	8003524 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034e6:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 80034e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034ec:	4a10      	ldr	r2, [pc, #64]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003530 <HAL_TIM_MspPostInit+0x104>)
 80034f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003504:	2340      	movs	r3, #64	@ 0x40
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003514:	2303      	movs	r3, #3
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	4808      	ldr	r0, [pc, #32]	@ (8003540 <HAL_TIM_MspPostInit+0x114>)
 8003520:	f003 fb76 	bl	8006c10 <HAL_GPIO_Init>
}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	@ 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010000 	.word	0x40010000
 8003530:	58024400 	.word	0x58024400
 8003534:	58021000 	.word	0x58021000
 8003538:	58020400 	.word	0x58020400
 800353c:	40010400 	.word	0x40010400
 8003540:	58020800 	.word	0x58020800

08003544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b0ba      	sub	sp, #232	@ 0xe8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	22b8      	movs	r2, #184	@ 0xb8
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f00b f817 	bl	800e598 <memset>
  if(huart->Instance==USART3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a55      	ldr	r2, [pc, #340]	@ (80036c4 <HAL_UART_MspInit+0x180>)
 8003570:	4293      	cmp	r3, r2
 8003572:	f040 80a2 	bne.w	80036ba <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003576:	f04f 0202 	mov.w	r2, #2
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003582:	2300      	movs	r3, #0
 8003584:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003588:	f107 0318 	add.w	r3, r7, #24
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fcc5 	bl	8007f1c <HAL_RCCEx_PeriphCLKConfig>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003598:	f7fd fec4 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800359c:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 800359e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035a2:	4a49      	ldr	r2, [pc, #292]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035ac:	4b46      	ldr	r3, [pc, #280]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	4b43      	ldr	r3, [pc, #268]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035c0:	4a41      	ldr	r2, [pc, #260]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035ca:	4b3f      	ldr	r3, [pc, #252]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d8:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035de:	4a3a      	ldr	r2, [pc, #232]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035e0:	f043 0304 	orr.w	r3, r3, #4
 80035e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035e8:	4b37      	ldr	r3, [pc, #220]	@ (80036c8 <HAL_UART_MspInit+0x184>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360a:	2303      	movs	r3, #3
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003610:	2307      	movs	r3, #7
 8003612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003616:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800361a:	4619      	mov	r1, r3
 800361c:	482b      	ldr	r0, [pc, #172]	@ (80036cc <HAL_UART_MspInit+0x188>)
 800361e:	f003 faf7 	bl	8006c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin;
 8003622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003626:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003636:	2303      	movs	r3, #3
 8003638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800363c:	2307      	movs	r3, #7
 800363e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(STLK_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003642:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003646:	4619      	mov	r1, r3
 8003648:	4821      	ldr	r0, [pc, #132]	@ (80036d0 <HAL_UART_MspInit+0x18c>)
 800364a:	f003 fae1 	bl	8006c10 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800364e:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003650:	4a21      	ldr	r2, [pc, #132]	@ (80036d8 <HAL_UART_MspInit+0x194>)
 8003652:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003654:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003656:	222e      	movs	r2, #46	@ 0x2e
 8003658:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 800365c:	2240      	movs	r2, #64	@ 0x40
 800365e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003660:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003666:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800366c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800366e:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003670:	2200      	movs	r2, #0
 8003672:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003674:	4b17      	ldr	r3, [pc, #92]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 800367c:	2200      	movs	r2, #0
 800367e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003682:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003686:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 800368a:	2200      	movs	r2, #0
 800368c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800368e:	4811      	ldr	r0, [pc, #68]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 8003690:	f000 fc7a 	bl	8003f88 <HAL_DMA_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 800369a:	f7fd fe43 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a0c      	ldr	r2, [pc, #48]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 80036a2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036a4:	4a0b      	ldr	r2, [pc, #44]	@ (80036d4 <HAL_UART_MspInit+0x190>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2027      	movs	r0, #39	@ 0x27
 80036b0:	f000 fc35 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036b4:	2027      	movs	r0, #39	@ 0x27
 80036b6:	f000 fc4c 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80036ba:	bf00      	nop
 80036bc:	37e8      	adds	r7, #232	@ 0xe8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40004800 	.word	0x40004800
 80036c8:	58024400 	.word	0x58024400
 80036cc:	58020400 	.word	0x58020400
 80036d0:	58020800 	.word	0x58020800
 80036d4:	24000450 	.word	0x24000450
 80036d8:	40020040 	.word	0x40020040

080036dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036e0:	bf00      	nop
 80036e2:	e7fd      	b.n	80036e0 <NMI_Handler+0x4>

080036e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <HardFault_Handler+0x4>

080036ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <MemManage_Handler+0x4>

080036f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <BusFault_Handler+0x4>

080036fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <UsageFault_Handler+0x4>

08003704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_counter++;
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <SysTick_Handler+0x20>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	1c50      	adds	r0, r2, #1
 800373c:	f143 0100 	adc.w	r1, r3, #0
 8003740:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <SysTick_Handler+0x20>)
 8003742:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003746:	f000 facb 	bl	8003ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	240008a8 	.word	0x240008a8

08003754 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  TIM2->CR1 |= TIM_CR1_CEN;
 8003758:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003768:	2004      	movs	r0, #4
 800376a:	f003 fc12 	bl	8006f92 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <DMA1_Stream0_IRQHandler+0x10>)
 800377a:	f001 ff2b 	bl	80055d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2400019c 	.word	0x2400019c

08003788 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800378c:	4802      	ldr	r0, [pc, #8]	@ (8003798 <DMA1_Stream1_IRQHandler+0x10>)
 800378e:	f001 ff21 	bl	80055d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	24000214 	.word	0x24000214

0800379c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037a0:	4802      	ldr	r0, [pc, #8]	@ (80037ac <DMA1_Stream2_IRQHandler+0x10>)
 80037a2:	f001 ff17 	bl	80055d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	24000450 	.word	0x24000450

080037b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <TIM3_IRQHandler+0x10>)
 80037b6:	f007 fc4c 	bl	800b052 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	24000324 	.word	0x24000324

080037c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_rx();
#endif
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <SPI1_IRQHandler+0x10>)
 80037ca:	f006 fd17 	bl	800a1fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2400008c 	.word	0x2400008c

080037d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <USART3_IRQHandler+0x10>)
 80037de:	f008 ff7b 	bl	800c6d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	240003bc 	.word	0x240003bc

080037ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_tx();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <SPI3_IRQHandler+0x10>)
 80037f2:	f006 fd03 	bl	800a1fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	24000114 	.word	0x24000114

08003800 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 8003808:	f7fd fda4 	bl	8001354 <sample_interrupt_routine>
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <_sbrk+0x5c>)
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <_sbrk+0x60>)
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <_sbrk+0x64>)
 8003832:	4a12      	ldr	r2, [pc, #72]	@ (800387c <_sbrk+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <_sbrk+0x64>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d207      	bcs.n	8003854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003844:	f00a fec0 	bl	800e5c8 <__errno>
 8003848:	4603      	mov	r3, r0
 800384a:	220c      	movs	r2, #12
 800384c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003852:	e009      	b.n	8003868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003854:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <_sbrk+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <_sbrk+0x64>)
 8003864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	24050000 	.word	0x24050000
 8003874:	00000400 	.word	0x00000400
 8003878:	240008b0 	.word	0x240008b0
 800387c:	24000a10 	.word	0x24000a10

08003880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003884:	4b32      	ldr	r3, [pc, #200]	@ (8003950 <SystemInit+0xd0>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	4a31      	ldr	r2, [pc, #196]	@ (8003950 <SystemInit+0xd0>)
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003894:	4b2f      	ldr	r3, [pc, #188]	@ (8003954 <SystemInit+0xd4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	2b06      	cmp	r3, #6
 800389e:	d807      	bhi.n	80038b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <SystemInit+0xd4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 030f 	bic.w	r3, r3, #15
 80038a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003954 <SystemInit+0xd4>)
 80038aa:	f043 0307 	orr.w	r3, r3, #7
 80038ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038b0:	4b29      	ldr	r3, [pc, #164]	@ (8003958 <SystemInit+0xd8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a28      	ldr	r2, [pc, #160]	@ (8003958 <SystemInit+0xd8>)
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038bc:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <SystemInit+0xd8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038c2:	4b25      	ldr	r3, [pc, #148]	@ (8003958 <SystemInit+0xd8>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4924      	ldr	r1, [pc, #144]	@ (8003958 <SystemInit+0xd8>)
 80038c8:	4b24      	ldr	r3, [pc, #144]	@ (800395c <SystemInit+0xdc>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038ce:	4b21      	ldr	r3, [pc, #132]	@ (8003954 <SystemInit+0xd4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038da:	4b1e      	ldr	r3, [pc, #120]	@ (8003954 <SystemInit+0xd4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 030f 	bic.w	r3, r3, #15
 80038e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <SystemInit+0xd4>)
 80038e4:	f043 0307 	orr.w	r3, r3, #7
 80038e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80038ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003958 <SystemInit+0xd8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80038f0:	4b19      	ldr	r3, [pc, #100]	@ (8003958 <SystemInit+0xd8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <SystemInit+0xd8>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038fc:	4b16      	ldr	r3, [pc, #88]	@ (8003958 <SystemInit+0xd8>)
 80038fe:	4a18      	ldr	r2, [pc, #96]	@ (8003960 <SystemInit+0xe0>)
 8003900:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003902:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <SystemInit+0xd8>)
 8003904:	4a17      	ldr	r2, [pc, #92]	@ (8003964 <SystemInit+0xe4>)
 8003906:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003908:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <SystemInit+0xd8>)
 800390a:	4a17      	ldr	r2, [pc, #92]	@ (8003968 <SystemInit+0xe8>)
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800390e:	4b12      	ldr	r3, [pc, #72]	@ (8003958 <SystemInit+0xd8>)
 8003910:	2200      	movs	r2, #0
 8003912:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003914:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <SystemInit+0xd8>)
 8003916:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <SystemInit+0xe8>)
 8003918:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800391a:	4b0f      	ldr	r3, [pc, #60]	@ (8003958 <SystemInit+0xd8>)
 800391c:	2200      	movs	r2, #0
 800391e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003920:	4b0d      	ldr	r3, [pc, #52]	@ (8003958 <SystemInit+0xd8>)
 8003922:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <SystemInit+0xe8>)
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <SystemInit+0xd8>)
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800392c:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <SystemInit+0xd8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a09      	ldr	r2, [pc, #36]	@ (8003958 <SystemInit+0xd8>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003938:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <SystemInit+0xd8>)
 800393a:	2200      	movs	r2, #0
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <SystemInit+0xec>)
 8003940:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003944:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00
 8003954:	52002000 	.word	0x52002000
 8003958:	58024400 	.word	0x58024400
 800395c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003960:	02020200 	.word	0x02020200
 8003964:	01ff0000 	.word	0x01ff0000
 8003968:	01010280 	.word	0x01010280
 800396c:	52004000 	.word	0x52004000

08003970 <loop_escape>:
static uint16_t counter = 0;

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
#else
	return 0;
 8003974:	2300      	movs	r3, #0
#endif
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
//	uint16_t aux2_result_A, aux2_result_B;
//	extract_ddr_words(command_sequence_MISO[34], &aux0_result_A, &aux0_result_B); // Result of AUX SLOT 1 from this command sequence
//	extract_ddr_words(command_sequence_MISO[0],  &aux1_result_A, &aux1_result_B); // Result of AUX SLOT 2 from the previous command sequence
//	extract_ddr_words(command_sequence_MISO[1],  &aux2_result_A, &aux2_result_B); // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
	// Data corruption is more likely to occur with larger NUM_CHANNELS_TO_TRANSMIT, slower USART Baud rate, and faster SPI Baud rate.
//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
//		command_sequence_MISO[i] = i;
//	}

	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	e013      	b.n	80039c4 <transmit_data_realtime+0x34>
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3302      	adds	r3, #2
 80039a0:	4a20      	ldr	r2, [pc, #128]	@ (8003a24 <transmit_data_realtime+0x94>)
 80039a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
				&samples[i],
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003a28 <transmit_data_realtime+0x98>)
 80039ac:	1899      	adds	r1, r3, r2
				&samples[i + NUM_SAMPLED_CHANNELS]);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3302      	adds	r3, #2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a28 <transmit_data_realtime+0x98>)
 80039b6:	4413      	add	r3, r2
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80039b8:	461a      	mov	r2, r3
 80039ba:	f7fd fe4c 	bl	8001656 <extract_ddr_words>
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3301      	adds	r3, #1
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	dde8      	ble.n	800399c <transmit_data_realtime+0xc>
	}

	counter++;
 80039ca:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <transmit_data_realtime+0x9c>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <transmit_data_realtime+0x9c>)
 80039d4:	801a      	strh	r2, [r3, #0]

	if(counter>=2000){
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <transmit_data_realtime+0x9c>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80039de:	d318      	bcc.n	8003a12 <transmit_data_realtime+0x82>
		samples[0] = 1000;
 80039e0:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <transmit_data_realtime+0x98>)
 80039e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80039e6:	801a      	strh	r2, [r3, #0]
		samples[1] = 2000;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <transmit_data_realtime+0x98>)
 80039ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039ee:	805a      	strh	r2, [r3, #2]
		samples[2] = 3000;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <transmit_data_realtime+0x98>)
 80039f2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80039f6:	809a      	strh	r2, [r3, #4]
		samples[3] = 4000;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <transmit_data_realtime+0x98>)
 80039fa:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80039fe:	80da      	strh	r2, [r3, #6]

		if(counter==2500)
 8003a00:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <transmit_data_realtime+0x9c>)
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <transmit_data_realtime+0x82>
		{
			counter = 0;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	@ (8003a2c <transmit_data_realtime+0x9c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
		}

	}


	transmit_dma_to_usart(samples, NUM_SAMPLED_CHANNELS * 2 * sizeof(uint16_t));
 8003a12:	2108      	movs	r1, #8
 8003a14:	4804      	ldr	r0, [pc, #16]	@ (8003a28 <transmit_data_realtime+0x98>)
 8003a16:	f000 f8af 	bl	8003b78 <transmit_dma_to_usart>
#endif
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	24000510 	.word	0x24000510
 8003a28:	240008b4 	.word	0x240008b4
 8003a2c:	240008bc 	.word	0x240008bc

08003a30 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * 2 * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8003a3a:	f7fd fe99 	bl	8001770 <calculate_sample_rate>
 8003a3e:	eeb0 7b40 	vmov.f64	d7, d0
 8003a42:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8003a46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a4e:	ee17 3a90 	vmov	r3, s15
 8003a52:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8003a54:	8a7b      	ldrh	r3, [r7, #18]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003a64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a68:	ee17 3a90 	vmov	r3, s15
 8003a6c:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 8003a6e:	8a7a      	ldrh	r2, [r7, #18]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a76:	fb01 f202 	mul.w	r2, r1, r2
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e01a      	b.n	8003aba <transmit_data_offline+0x8a>
		uart_ready = 0;
 8003a84:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <transmit_data_offline+0xd0>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <transmit_data_offline+0xd4>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	8a7b      	ldrh	r3, [r7, #18]
 8003a90:	6979      	ldr	r1, [r7, #20]
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	441a      	add	r2, r3
 8003a9a:	8a7b      	ldrh	r3, [r7, #18]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f000 f868 	bl	8003b78 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003aa8:	bf00      	nop
 8003aaa:	4b15      	ldr	r3, [pc, #84]	@ (8003b00 <transmit_data_offline+0xd0>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d1fa      	bne.n	8003aaa <transmit_data_offline+0x7a>
	for (int i = 0; i < num_chunks; i++) {
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d8e0      	bhi.n	8003a84 <transmit_data_offline+0x54>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <transmit_data_offline+0xc8>
		uart_ready = 0;
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <transmit_data_offline+0xd0>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 8003ace:	4b0d      	ldr	r3, [pc, #52]	@ (8003b04 <transmit_data_offline+0xd4>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	8a7b      	ldrh	r3, [r7, #18]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	441a      	add	r2, r3
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 f846 	bl	8003b78 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003aec:	bf00      	nop
 8003aee:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <transmit_data_offline+0xd0>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d1fa      	bne.n	8003aee <transmit_data_offline+0xbe>
	}
}
 8003af8:	bf00      	nop
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	24000008 	.word	0x24000008
 8003b04:	240005a0 	.word	0x240005a0

08003b08 <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fd fdc7 	bl	80016a4 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fd fe7a 	bl	800181c <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence(channel_numbers);
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	2200      	movs	r2, #0
 8003b38:	490c      	ldr	r1, [pc, #48]	@ (8003b6c <configure_aux_commands+0x40>)
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fea8 	bl	8001890 <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003b40:	2028      	movs	r0, #40	@ 0x28
 8003b42:	f7ff fa58 	bl	8002ff6 <read_command>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	4909      	ldr	r1, [pc, #36]	@ (8003b70 <configure_aux_commands+0x44>)
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fd fffe 	bl	8001b4e <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 8003b52:	2029      	movs	r0, #41	@ 0x29
 8003b54:	f7ff fa4f 	bl	8002ff6 <read_command>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2280      	movs	r2, #128	@ 0x80
 8003b5c:	4905      	ldr	r1, [pc, #20]	@ (8003b74 <configure_aux_commands+0x48>)
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd fff5 	bl	8001b4e <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	240005a4 	.word	0x240005a4
 8003b70:	240006a4 	.word	0x240006a4
 8003b74:	240007a4 	.word	0x240007a4

08003b78 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4806      	ldr	r0, [pc, #24]	@ (8003ba4 <transmit_dma_to_usart+0x2c>)
 8003b8c:	f008 fd24 	bl	800c5d8 <HAL_UART_Transmit_DMA>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003b96:	f7fd fbc5 	bl	8001324 <Error_Handler>
	LL_DMA_EnableStream(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	240003bc 	.word	0x240003bc

08003ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003be0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bac:	f7ff fe68 	bl	8003880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bb0:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bb2:	490d      	ldr	r1, [pc, #52]	@ (8003be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb8:	e002      	b.n	8003bc0 <LoopCopyDataInit>

08003bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bbe:	3304      	adds	r3, #4

08003bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc4:	d3f9      	bcc.n	8003bba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bcc:	e001      	b.n	8003bd2 <LoopFillZerobss>

08003bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd0:	3204      	adds	r2, #4

08003bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd4:	d3fb      	bcc.n	8003bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bd6:	f00a fcfd 	bl	800e5d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bda:	f7fc fd43 	bl	8000664 <main>
  bx  lr
 8003bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003be0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003be4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003be8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003bec:	080111e8 	.word	0x080111e8
  ldr r2, =_sbss
 8003bf0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003bf4:	24000a0c 	.word	0x24000a0c

08003bf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf8:	e7fe      	b.n	8003bf8 <ADC3_IRQHandler>
	...

08003bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c02:	2003      	movs	r0, #3
 8003c04:	f000 f980 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c08:	f003 ffb2 	bl	8007b70 <HAL_RCC_GetSysClockFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <HAL_Init+0x68>)
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	4913      	ldr	r1, [pc, #76]	@ (8003c68 <HAL_Init+0x6c>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
 8003c24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c26:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <HAL_Init+0x68>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c68 <HAL_Init+0x6c>)
 8003c30:	5cd3      	ldrb	r3, [r2, r3]
 8003c32:	f003 031f 	and.w	r3, r3, #31
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c6c <HAL_Init+0x70>)
 8003c3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c40:	4a0b      	ldr	r2, [pc, #44]	@ (8003c70 <HAL_Init+0x74>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c46:	2000      	movs	r0, #0
 8003c48:	f000 f814 	bl	8003c74 <HAL_InitTick>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e002      	b.n	8003c5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c56:	f7ff f9e5 	bl	8003024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	58024400 	.word	0x58024400
 8003c68:	0800f048 	.word	0x0800f048
 8003c6c:	24000010 	.word	0x24000010
 8003c70:	2400000c 	.word	0x2400000c

08003c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c7c:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <HAL_InitTick+0x60>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e021      	b.n	8003ccc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c88:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <HAL_InitTick+0x64>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b11      	ldr	r3, [pc, #68]	@ (8003cd4 <HAL_InitTick+0x60>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f965 	bl	8003f6e <HAL_SYSTICK_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00e      	b.n	8003ccc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d80a      	bhi.n	8003cca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cbc:	f000 f92f 	bl	8003f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc0:	4a06      	ldr	r2, [pc, #24]	@ (8003cdc <HAL_InitTick+0x68>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	24000018 	.word	0x24000018
 8003cd8:	2400000c 	.word	0x2400000c
 8003cdc:	24000014 	.word	0x24000014

08003ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_IncTick+0x20>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_IncTick+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	@ (8003d04 <HAL_IncTick+0x24>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	24000018 	.word	0x24000018
 8003d04:	240008c0 	.word	0x240008c0

08003d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_GetTick+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	240008c0 	.word	0x240008c0

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff ffee 	bl	8003d08 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <HAL_Delay+0x44>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	24000018 	.word	0x24000018

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <__NVIC_SetPriorityGrouping+0x40>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d96:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <__NVIC_SetPriorityGrouping+0x40>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	60d3      	str	r3, [r2, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00
 8003dac:	05fa0000 	.word	0x05fa0000

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4907      	ldr	r1, [pc, #28]	@ (8003e04 <__NVIC_EnableIRQ+0x38>)
 8003de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db0a      	blt.n	8003e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	490c      	ldr	r1, [pc, #48]	@ (8003e54 <__NVIC_SetPriority+0x4c>)
 8003e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e26:	0112      	lsls	r2, r2, #4
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e30:	e00a      	b.n	8003e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4908      	ldr	r1, [pc, #32]	@ (8003e58 <__NVIC_SetPriority+0x50>)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	440b      	add	r3, r1
 8003e46:	761a      	strb	r2, [r3, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	@ 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f1c3 0307 	rsb	r3, r3, #7
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf28      	it	cs
 8003e7a:	2304      	movcs	r3, #4
 8003e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <NVIC_EncodePriority+0x30>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b03      	subs	r3, #3
 8003e8a:	e000      	b.n	8003e8e <NVIC_EncodePriority+0x32>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	4313      	orrs	r3, r2
         );
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	@ 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed4:	d301      	bcc.n	8003eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00f      	b.n	8003efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <SysTick_Config+0x40>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ee8:	f7ff ff8e 	bl	8003e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <SysTick_Config+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <SysTick_Config+0x40>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff29 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff40 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff90 	bl	8003e5c <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5f 	bl	8003e08 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff33 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa4 	bl	8003ec4 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff feba 	bl	8003d08 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e312      	b.n	80045c6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a66      	ldr	r2, [pc, #408]	@ (8004140 <HAL_DMA_Init+0x1b8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d04a      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a65      	ldr	r2, [pc, #404]	@ (8004144 <HAL_DMA_Init+0x1bc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d045      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a63      	ldr	r2, [pc, #396]	@ (8004148 <HAL_DMA_Init+0x1c0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d040      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a62      	ldr	r2, [pc, #392]	@ (800414c <HAL_DMA_Init+0x1c4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d03b      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a60      	ldr	r2, [pc, #384]	@ (8004150 <HAL_DMA_Init+0x1c8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d036      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8004154 <HAL_DMA_Init+0x1cc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8004158 <HAL_DMA_Init+0x1d0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02c      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5c      	ldr	r2, [pc, #368]	@ (800415c <HAL_DMA_Init+0x1d4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d027      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8004160 <HAL_DMA_Init+0x1d8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d022      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a59      	ldr	r2, [pc, #356]	@ (8004164 <HAL_DMA_Init+0x1dc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d01d      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a57      	ldr	r2, [pc, #348]	@ (8004168 <HAL_DMA_Init+0x1e0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d018      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a56      	ldr	r2, [pc, #344]	@ (800416c <HAL_DMA_Init+0x1e4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a54      	ldr	r2, [pc, #336]	@ (8004170 <HAL_DMA_Init+0x1e8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00e      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a53      	ldr	r2, [pc, #332]	@ (8004174 <HAL_DMA_Init+0x1ec>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d009      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a51      	ldr	r2, [pc, #324]	@ (8004178 <HAL_DMA_Init+0x1f0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_DMA_Init+0xb8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a50      	ldr	r2, [pc, #320]	@ (800417c <HAL_DMA_Init+0x1f4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_DMA_Init+0xbc>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_DMA_Init+0xbe>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 813c 	beq.w	80042c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a37      	ldr	r2, [pc, #220]	@ (8004140 <HAL_DMA_Init+0x1b8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d04a      	beq.n	80040fc <HAL_DMA_Init+0x174>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a36      	ldr	r2, [pc, #216]	@ (8004144 <HAL_DMA_Init+0x1bc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d045      	beq.n	80040fc <HAL_DMA_Init+0x174>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a34      	ldr	r2, [pc, #208]	@ (8004148 <HAL_DMA_Init+0x1c0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d040      	beq.n	80040fc <HAL_DMA_Init+0x174>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a33      	ldr	r2, [pc, #204]	@ (800414c <HAL_DMA_Init+0x1c4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d03b      	beq.n	80040fc <HAL_DMA_Init+0x174>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a31      	ldr	r2, [pc, #196]	@ (8004150 <HAL_DMA_Init+0x1c8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d036      	beq.n	80040fc <HAL_DMA_Init+0x174>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a30      	ldr	r2, [pc, #192]	@ (8004154 <HAL_DMA_Init+0x1cc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d031      	beq.n	80040fc <HAL_DMA_Init+0x174>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2e      	ldr	r2, [pc, #184]	@ (8004158 <HAL_DMA_Init+0x1d0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d02c      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2d      	ldr	r2, [pc, #180]	@ (800415c <HAL_DMA_Init+0x1d4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d027      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004160 <HAL_DMA_Init+0x1d8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004164 <HAL_DMA_Init+0x1dc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d01d      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a28      	ldr	r2, [pc, #160]	@ (8004168 <HAL_DMA_Init+0x1e0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a27      	ldr	r2, [pc, #156]	@ (800416c <HAL_DMA_Init+0x1e4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a25      	ldr	r2, [pc, #148]	@ (8004170 <HAL_DMA_Init+0x1e8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a24      	ldr	r2, [pc, #144]	@ (8004174 <HAL_DMA_Init+0x1ec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a22      	ldr	r2, [pc, #136]	@ (8004178 <HAL_DMA_Init+0x1f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_DMA_Init+0x174>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	@ (800417c <HAL_DMA_Init+0x1f4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <HAL_DMA_Init+0x186>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0201 	bic.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e007      	b.n	800411e <HAL_DMA_Init+0x196>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800411e:	e02f      	b.n	8004180 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004120:	f7ff fdf2 	bl	8003d08 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b05      	cmp	r3, #5
 800412c:	d928      	bls.n	8004180 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2203      	movs	r2, #3
 8004138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e242      	b.n	80045c6 <HAL_DMA_Init+0x63e>
 8004140:	40020010 	.word	0x40020010
 8004144:	40020028 	.word	0x40020028
 8004148:	40020040 	.word	0x40020040
 800414c:	40020058 	.word	0x40020058
 8004150:	40020070 	.word	0x40020070
 8004154:	40020088 	.word	0x40020088
 8004158:	400200a0 	.word	0x400200a0
 800415c:	400200b8 	.word	0x400200b8
 8004160:	40020410 	.word	0x40020410
 8004164:	40020428 	.word	0x40020428
 8004168:	40020440 	.word	0x40020440
 800416c:	40020458 	.word	0x40020458
 8004170:	40020470 	.word	0x40020470
 8004174:	40020488 	.word	0x40020488
 8004178:	400204a0 	.word	0x400204a0
 800417c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1c8      	bne.n	8004120 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4b83      	ldr	r3, [pc, #524]	@ (80043a8 <HAL_DMA_Init+0x420>)
 800419a:	4013      	ands	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	4313      	orrs	r3, r2
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b28      	cmp	r3, #40	@ 0x28
 80041ea:	d903      	bls.n	80041f4 <HAL_DMA_Init+0x26c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80041f2:	d91f      	bls.n	8004234 <HAL_DMA_Init+0x2ac>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80041fa:	d903      	bls.n	8004204 <HAL_DMA_Init+0x27c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b42      	cmp	r3, #66	@ 0x42
 8004202:	d917      	bls.n	8004234 <HAL_DMA_Init+0x2ac>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b46      	cmp	r3, #70	@ 0x46
 800420a:	d903      	bls.n	8004214 <HAL_DMA_Init+0x28c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b48      	cmp	r3, #72	@ 0x48
 8004212:	d90f      	bls.n	8004234 <HAL_DMA_Init+0x2ac>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b4e      	cmp	r3, #78	@ 0x4e
 800421a:	d903      	bls.n	8004224 <HAL_DMA_Init+0x29c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b52      	cmp	r3, #82	@ 0x52
 8004222:	d907      	bls.n	8004234 <HAL_DMA_Init+0x2ac>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b73      	cmp	r3, #115	@ 0x73
 800422a:	d905      	bls.n	8004238 <HAL_DMA_Init+0x2b0>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b77      	cmp	r3, #119	@ 0x77
 8004232:	d801      	bhi.n	8004238 <HAL_DMA_Init+0x2b0>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_DMA_Init+0x2b2>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004244:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 0307 	bic.w	r3, r3, #7
 800425c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	2b04      	cmp	r3, #4
 800426e:	d117      	bne.n	80042a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00e      	beq.n	80042a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f002 fb3a 	bl	80068fc <DMA_CheckFifoParam>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2240      	movs	r2, #64	@ 0x40
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e192      	b.n	80045c6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f002 fa75 	bl	8006798 <DMA_CalcBaseAndBitshift>
 80042ae:	4603      	mov	r3, r0
 80042b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	223f      	movs	r2, #63	@ 0x3f
 80042bc:	409a      	lsls	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	e0c8      	b.n	8004456 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <HAL_DMA_Init+0x424>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d022      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a37      	ldr	r2, [pc, #220]	@ (80043b0 <HAL_DMA_Init+0x428>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d01d      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a35      	ldr	r2, [pc, #212]	@ (80043b4 <HAL_DMA_Init+0x42c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d018      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a34      	ldr	r2, [pc, #208]	@ (80043b8 <HAL_DMA_Init+0x430>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d013      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a32      	ldr	r2, [pc, #200]	@ (80043bc <HAL_DMA_Init+0x434>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00e      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a31      	ldr	r2, [pc, #196]	@ (80043c0 <HAL_DMA_Init+0x438>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d009      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2f      	ldr	r2, [pc, #188]	@ (80043c4 <HAL_DMA_Init+0x43c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_DMA_Init+0x38c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2e      	ldr	r2, [pc, #184]	@ (80043c8 <HAL_DMA_Init+0x440>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_DMA_Init+0x390>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_DMA_Init+0x392>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8092 	beq.w	8004444 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a21      	ldr	r2, [pc, #132]	@ (80043ac <HAL_DMA_Init+0x424>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d021      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a20      	ldr	r2, [pc, #128]	@ (80043b0 <HAL_DMA_Init+0x428>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d01c      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <HAL_DMA_Init+0x42c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d017      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <HAL_DMA_Init+0x430>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d012      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1b      	ldr	r2, [pc, #108]	@ (80043bc <HAL_DMA_Init+0x434>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00d      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <HAL_DMA_Init+0x438>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d008      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <HAL_DMA_Init+0x43c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d003      	beq.n	800436e <HAL_DMA_Init+0x3e6>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <HAL_DMA_Init+0x440>)
 800436c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <HAL_DMA_Init+0x444>)
 800438a:	4013      	ands	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d01c      	beq.n	80043d0 <HAL_DMA_Init+0x448>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b80      	cmp	r3, #128	@ 0x80
 800439c:	d102      	bne.n	80043a4 <HAL_DMA_Init+0x41c>
 800439e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043a2:	e016      	b.n	80043d2 <HAL_DMA_Init+0x44a>
 80043a4:	2300      	movs	r3, #0
 80043a6:	e014      	b.n	80043d2 <HAL_DMA_Init+0x44a>
 80043a8:	fe10803f 	.word	0xfe10803f
 80043ac:	58025408 	.word	0x58025408
 80043b0:	5802541c 	.word	0x5802541c
 80043b4:	58025430 	.word	0x58025430
 80043b8:	58025444 	.word	0x58025444
 80043bc:	58025458 	.word	0x58025458
 80043c0:	5802546c 	.word	0x5802546c
 80043c4:	58025480 	.word	0x58025480
 80043c8:	58025494 	.word	0x58025494
 80043cc:	fffe000f 	.word	0xfffe000f
 80043d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68d2      	ldr	r2, [r2, #12]
 80043d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004400:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	4b6e      	ldr	r3, [pc, #440]	@ (80045d0 <HAL_DMA_Init+0x648>)
 8004418:	4413      	add	r3, r2
 800441a:	4a6e      	ldr	r2, [pc, #440]	@ (80045d4 <HAL_DMA_Init+0x64c>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	009a      	lsls	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f002 f9b5 	bl	8006798 <DMA_CalcBaseAndBitshift>
 800442e:	4603      	mov	r3, r0
 8004430:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2201      	movs	r2, #1
 800443c:	409a      	lsls	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e008      	b.n	8004456 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2240      	movs	r2, #64	@ 0x40
 8004448:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0b7      	b.n	80045c6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a5f      	ldr	r2, [pc, #380]	@ (80045d8 <HAL_DMA_Init+0x650>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d072      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a5d      	ldr	r2, [pc, #372]	@ (80045dc <HAL_DMA_Init+0x654>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d06d      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a5c      	ldr	r2, [pc, #368]	@ (80045e0 <HAL_DMA_Init+0x658>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d068      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a5a      	ldr	r2, [pc, #360]	@ (80045e4 <HAL_DMA_Init+0x65c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d063      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a59      	ldr	r2, [pc, #356]	@ (80045e8 <HAL_DMA_Init+0x660>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d05e      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a57      	ldr	r2, [pc, #348]	@ (80045ec <HAL_DMA_Init+0x664>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d059      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a56      	ldr	r2, [pc, #344]	@ (80045f0 <HAL_DMA_Init+0x668>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d054      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a54      	ldr	r2, [pc, #336]	@ (80045f4 <HAL_DMA_Init+0x66c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d04f      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a53      	ldr	r2, [pc, #332]	@ (80045f8 <HAL_DMA_Init+0x670>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d04a      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a51      	ldr	r2, [pc, #324]	@ (80045fc <HAL_DMA_Init+0x674>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d045      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a50      	ldr	r2, [pc, #320]	@ (8004600 <HAL_DMA_Init+0x678>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d040      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004604 <HAL_DMA_Init+0x67c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d03b      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4d      	ldr	r2, [pc, #308]	@ (8004608 <HAL_DMA_Init+0x680>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d036      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a4b      	ldr	r2, [pc, #300]	@ (800460c <HAL_DMA_Init+0x684>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d031      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004610 <HAL_DMA_Init+0x688>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d02c      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a48      	ldr	r2, [pc, #288]	@ (8004614 <HAL_DMA_Init+0x68c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d027      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a47      	ldr	r2, [pc, #284]	@ (8004618 <HAL_DMA_Init+0x690>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d022      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a45      	ldr	r2, [pc, #276]	@ (800461c <HAL_DMA_Init+0x694>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a44      	ldr	r2, [pc, #272]	@ (8004620 <HAL_DMA_Init+0x698>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a42      	ldr	r2, [pc, #264]	@ (8004624 <HAL_DMA_Init+0x69c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a41      	ldr	r2, [pc, #260]	@ (8004628 <HAL_DMA_Init+0x6a0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3f      	ldr	r2, [pc, #252]	@ (800462c <HAL_DMA_Init+0x6a4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3e      	ldr	r2, [pc, #248]	@ (8004630 <HAL_DMA_Init+0x6a8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_DMA_Init+0x5be>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a3c      	ldr	r2, [pc, #240]	@ (8004634 <HAL_DMA_Init+0x6ac>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_DMA_Init+0x5c2>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <HAL_DMA_Init+0x5c4>
 800454a:	2300      	movs	r3, #0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d032      	beq.n	80045b6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f002 fa4f 	bl	80069f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b80      	cmp	r3, #128	@ 0x80
 800455c:	d102      	bne.n	8004564 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004578:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <HAL_DMA_Init+0x61c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b08      	cmp	r3, #8
 8004588:	d80c      	bhi.n	80045a4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f002 facc 	bl	8006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	e008      	b.n	80045b6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	a7fdabf8 	.word	0xa7fdabf8
 80045d4:	cccccccd 	.word	0xcccccccd
 80045d8:	40020010 	.word	0x40020010
 80045dc:	40020028 	.word	0x40020028
 80045e0:	40020040 	.word	0x40020040
 80045e4:	40020058 	.word	0x40020058
 80045e8:	40020070 	.word	0x40020070
 80045ec:	40020088 	.word	0x40020088
 80045f0:	400200a0 	.word	0x400200a0
 80045f4:	400200b8 	.word	0x400200b8
 80045f8:	40020410 	.word	0x40020410
 80045fc:	40020428 	.word	0x40020428
 8004600:	40020440 	.word	0x40020440
 8004604:	40020458 	.word	0x40020458
 8004608:	40020470 	.word	0x40020470
 800460c:	40020488 	.word	0x40020488
 8004610:	400204a0 	.word	0x400204a0
 8004614:	400204b8 	.word	0x400204b8
 8004618:	58025408 	.word	0x58025408
 800461c:	5802541c 	.word	0x5802541c
 8004620:	58025430 	.word	0x58025430
 8004624:	58025444 	.word	0x58025444
 8004628:	58025458 	.word	0x58025458
 800462c:	5802546c 	.word	0x5802546c
 8004630:	58025480 	.word	0x58025480
 8004634:	58025494 	.word	0x58025494

08004638 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e226      	b.n	8004aa2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_DMA_Start_IT+0x2a>
 800465e:	2302      	movs	r3, #2
 8004660:	e21f      	b.n	8004aa2 <HAL_DMA_Start_IT+0x46a>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b01      	cmp	r3, #1
 8004674:	f040 820a 	bne.w	8004a8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a68      	ldr	r2, [pc, #416]	@ (800482c <HAL_DMA_Start_IT+0x1f4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d04a      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a66      	ldr	r2, [pc, #408]	@ (8004830 <HAL_DMA_Start_IT+0x1f8>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d045      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a65      	ldr	r2, [pc, #404]	@ (8004834 <HAL_DMA_Start_IT+0x1fc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d040      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a63      	ldr	r2, [pc, #396]	@ (8004838 <HAL_DMA_Start_IT+0x200>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d03b      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a62      	ldr	r2, [pc, #392]	@ (800483c <HAL_DMA_Start_IT+0x204>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d036      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a60      	ldr	r2, [pc, #384]	@ (8004840 <HAL_DMA_Start_IT+0x208>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d031      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a5f      	ldr	r2, [pc, #380]	@ (8004844 <HAL_DMA_Start_IT+0x20c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d02c      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004848 <HAL_DMA_Start_IT+0x210>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d027      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a5c      	ldr	r2, [pc, #368]	@ (800484c <HAL_DMA_Start_IT+0x214>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a5a      	ldr	r2, [pc, #360]	@ (8004850 <HAL_DMA_Start_IT+0x218>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01d      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a59      	ldr	r2, [pc, #356]	@ (8004854 <HAL_DMA_Start_IT+0x21c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a57      	ldr	r2, [pc, #348]	@ (8004858 <HAL_DMA_Start_IT+0x220>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a56      	ldr	r2, [pc, #344]	@ (800485c <HAL_DMA_Start_IT+0x224>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a54      	ldr	r2, [pc, #336]	@ (8004860 <HAL_DMA_Start_IT+0x228>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a53      	ldr	r2, [pc, #332]	@ (8004864 <HAL_DMA_Start_IT+0x22c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_DMA_Start_IT+0xee>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a51      	ldr	r2, [pc, #324]	@ (8004868 <HAL_DMA_Start_IT+0x230>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <HAL_DMA_Start_IT+0x100>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e007      	b.n	8004748 <HAL_DMA_Start_IT+0x110>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f001 fe76 	bl	8006440 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a34      	ldr	r2, [pc, #208]	@ (800482c <HAL_DMA_Start_IT+0x1f4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d04a      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a33      	ldr	r2, [pc, #204]	@ (8004830 <HAL_DMA_Start_IT+0x1f8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d045      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a31      	ldr	r2, [pc, #196]	@ (8004834 <HAL_DMA_Start_IT+0x1fc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d040      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a30      	ldr	r2, [pc, #192]	@ (8004838 <HAL_DMA_Start_IT+0x200>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d03b      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2e      	ldr	r2, [pc, #184]	@ (800483c <HAL_DMA_Start_IT+0x204>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d036      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a2d      	ldr	r2, [pc, #180]	@ (8004840 <HAL_DMA_Start_IT+0x208>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d031      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2b      	ldr	r2, [pc, #172]	@ (8004844 <HAL_DMA_Start_IT+0x20c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d02c      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2a      	ldr	r2, [pc, #168]	@ (8004848 <HAL_DMA_Start_IT+0x210>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d027      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a28      	ldr	r2, [pc, #160]	@ (800484c <HAL_DMA_Start_IT+0x214>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d022      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a27      	ldr	r2, [pc, #156]	@ (8004850 <HAL_DMA_Start_IT+0x218>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d01d      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a25      	ldr	r2, [pc, #148]	@ (8004854 <HAL_DMA_Start_IT+0x21c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d018      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a24      	ldr	r2, [pc, #144]	@ (8004858 <HAL_DMA_Start_IT+0x220>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a22      	ldr	r2, [pc, #136]	@ (800485c <HAL_DMA_Start_IT+0x224>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00e      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a21      	ldr	r2, [pc, #132]	@ (8004860 <HAL_DMA_Start_IT+0x228>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d009      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004864 <HAL_DMA_Start_IT+0x22c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d004      	beq.n	80047f4 <HAL_DMA_Start_IT+0x1bc>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004868 <HAL_DMA_Start_IT+0x230>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d101      	bne.n	80047f8 <HAL_DMA_Start_IT+0x1c0>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_DMA_Start_IT+0x1c2>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d036      	beq.n	800486c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 021e 	bic.w	r2, r3, #30
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0216 	orr.w	r2, r2, #22
 8004810:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d03e      	beq.n	8004898 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0208 	orr.w	r2, r2, #8
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e035      	b.n	8004898 <HAL_DMA_Start_IT+0x260>
 800482c:	40020010 	.word	0x40020010
 8004830:	40020028 	.word	0x40020028
 8004834:	40020040 	.word	0x40020040
 8004838:	40020058 	.word	0x40020058
 800483c:	40020070 	.word	0x40020070
 8004840:	40020088 	.word	0x40020088
 8004844:	400200a0 	.word	0x400200a0
 8004848:	400200b8 	.word	0x400200b8
 800484c:	40020410 	.word	0x40020410
 8004850:	40020428 	.word	0x40020428
 8004854:	40020440 	.word	0x40020440
 8004858:	40020458 	.word	0x40020458
 800485c:	40020470 	.word	0x40020470
 8004860:	40020488 	.word	0x40020488
 8004864:	400204a0 	.word	0x400204a0
 8004868:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 020e 	bic.w	r2, r3, #14
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 020a 	orr.w	r2, r2, #10
 800487e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0204 	orr.w	r2, r2, #4
 8004896:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a83      	ldr	r2, [pc, #524]	@ (8004aac <HAL_DMA_Start_IT+0x474>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d072      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a82      	ldr	r2, [pc, #520]	@ (8004ab0 <HAL_DMA_Start_IT+0x478>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d06d      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a80      	ldr	r2, [pc, #512]	@ (8004ab4 <HAL_DMA_Start_IT+0x47c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d068      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a7f      	ldr	r2, [pc, #508]	@ (8004ab8 <HAL_DMA_Start_IT+0x480>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d063      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7d      	ldr	r2, [pc, #500]	@ (8004abc <HAL_DMA_Start_IT+0x484>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d05e      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7c      	ldr	r2, [pc, #496]	@ (8004ac0 <HAL_DMA_Start_IT+0x488>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d059      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ac4 <HAL_DMA_Start_IT+0x48c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d054      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a79      	ldr	r2, [pc, #484]	@ (8004ac8 <HAL_DMA_Start_IT+0x490>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d04f      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a77      	ldr	r2, [pc, #476]	@ (8004acc <HAL_DMA_Start_IT+0x494>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d04a      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a76      	ldr	r2, [pc, #472]	@ (8004ad0 <HAL_DMA_Start_IT+0x498>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d045      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a74      	ldr	r2, [pc, #464]	@ (8004ad4 <HAL_DMA_Start_IT+0x49c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d040      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a73      	ldr	r2, [pc, #460]	@ (8004ad8 <HAL_DMA_Start_IT+0x4a0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d03b      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a71      	ldr	r2, [pc, #452]	@ (8004adc <HAL_DMA_Start_IT+0x4a4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d036      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a70      	ldr	r2, [pc, #448]	@ (8004ae0 <HAL_DMA_Start_IT+0x4a8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d031      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6e      	ldr	r2, [pc, #440]	@ (8004ae4 <HAL_DMA_Start_IT+0x4ac>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d02c      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a6d      	ldr	r2, [pc, #436]	@ (8004ae8 <HAL_DMA_Start_IT+0x4b0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d027      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a6b      	ldr	r2, [pc, #428]	@ (8004aec <HAL_DMA_Start_IT+0x4b4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d022      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a6a      	ldr	r2, [pc, #424]	@ (8004af0 <HAL_DMA_Start_IT+0x4b8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d01d      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	@ (8004af4 <HAL_DMA_Start_IT+0x4bc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d018      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a67      	ldr	r2, [pc, #412]	@ (8004af8 <HAL_DMA_Start_IT+0x4c0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a65      	ldr	r2, [pc, #404]	@ (8004afc <HAL_DMA_Start_IT+0x4c4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00e      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a64      	ldr	r2, [pc, #400]	@ (8004b00 <HAL_DMA_Start_IT+0x4c8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a62      	ldr	r2, [pc, #392]	@ (8004b04 <HAL_DMA_Start_IT+0x4cc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_DMA_Start_IT+0x350>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a61      	ldr	r2, [pc, #388]	@ (8004b08 <HAL_DMA_Start_IT+0x4d0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_DMA_Start_IT+0x354>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_DMA_Start_IT+0x356>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01a      	beq.n	80049c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a37      	ldr	r2, [pc, #220]	@ (8004aac <HAL_DMA_Start_IT+0x474>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d04a      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a36      	ldr	r2, [pc, #216]	@ (8004ab0 <HAL_DMA_Start_IT+0x478>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d045      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a34      	ldr	r2, [pc, #208]	@ (8004ab4 <HAL_DMA_Start_IT+0x47c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d040      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a33      	ldr	r2, [pc, #204]	@ (8004ab8 <HAL_DMA_Start_IT+0x480>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d03b      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a31      	ldr	r2, [pc, #196]	@ (8004abc <HAL_DMA_Start_IT+0x484>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d036      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a30      	ldr	r2, [pc, #192]	@ (8004ac0 <HAL_DMA_Start_IT+0x488>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d031      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac4 <HAL_DMA_Start_IT+0x48c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d02c      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac8 <HAL_DMA_Start_IT+0x490>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d027      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004acc <HAL_DMA_Start_IT+0x494>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad0 <HAL_DMA_Start_IT+0x498>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d01d      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a28      	ldr	r2, [pc, #160]	@ (8004ad4 <HAL_DMA_Start_IT+0x49c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <HAL_DMA_Start_IT+0x4a0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a25      	ldr	r2, [pc, #148]	@ (8004adc <HAL_DMA_Start_IT+0x4a4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a24      	ldr	r2, [pc, #144]	@ (8004ae0 <HAL_DMA_Start_IT+0x4a8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a22      	ldr	r2, [pc, #136]	@ (8004ae4 <HAL_DMA_Start_IT+0x4ac>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_DMA_Start_IT+0x430>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a21      	ldr	r2, [pc, #132]	@ (8004ae8 <HAL_DMA_Start_IT+0x4b0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <HAL_DMA_Start_IT+0x442>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e012      	b.n	8004aa0 <HAL_DMA_Start_IT+0x468>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e009      	b.n	8004aa0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	40020040 	.word	0x40020040
 8004ab8:	40020058 	.word	0x40020058
 8004abc:	40020070 	.word	0x40020070
 8004ac0:	40020088 	.word	0x40020088
 8004ac4:	400200a0 	.word	0x400200a0
 8004ac8:	400200b8 	.word	0x400200b8
 8004acc:	40020410 	.word	0x40020410
 8004ad0:	40020428 	.word	0x40020428
 8004ad4:	40020440 	.word	0x40020440
 8004ad8:	40020458 	.word	0x40020458
 8004adc:	40020470 	.word	0x40020470
 8004ae0:	40020488 	.word	0x40020488
 8004ae4:	400204a0 	.word	0x400204a0
 8004ae8:	400204b8 	.word	0x400204b8
 8004aec:	58025408 	.word	0x58025408
 8004af0:	5802541c 	.word	0x5802541c
 8004af4:	58025430 	.word	0x58025430
 8004af8:	58025444 	.word	0x58025444
 8004afc:	58025458 	.word	0x58025458
 8004b00:	5802546c 	.word	0x5802546c
 8004b04:	58025480 	.word	0x58025480
 8004b08:	58025494 	.word	0x58025494

08004b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b14:	f7ff f8f8 	bl	8003d08 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e2dc      	b.n	80050de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d008      	beq.n	8004b42 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2280      	movs	r2, #128	@ 0x80
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e2cd      	b.n	80050de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a76      	ldr	r2, [pc, #472]	@ (8004d20 <HAL_DMA_Abort+0x214>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d04a      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a74      	ldr	r2, [pc, #464]	@ (8004d24 <HAL_DMA_Abort+0x218>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d045      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a73      	ldr	r2, [pc, #460]	@ (8004d28 <HAL_DMA_Abort+0x21c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d040      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a71      	ldr	r2, [pc, #452]	@ (8004d2c <HAL_DMA_Abort+0x220>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d03b      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a70      	ldr	r2, [pc, #448]	@ (8004d30 <HAL_DMA_Abort+0x224>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d036      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6e      	ldr	r2, [pc, #440]	@ (8004d34 <HAL_DMA_Abort+0x228>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d031      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6d      	ldr	r2, [pc, #436]	@ (8004d38 <HAL_DMA_Abort+0x22c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d02c      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d3c <HAL_DMA_Abort+0x230>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d027      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a6a      	ldr	r2, [pc, #424]	@ (8004d40 <HAL_DMA_Abort+0x234>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d022      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a68      	ldr	r2, [pc, #416]	@ (8004d44 <HAL_DMA_Abort+0x238>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a67      	ldr	r2, [pc, #412]	@ (8004d48 <HAL_DMA_Abort+0x23c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d018      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a65      	ldr	r2, [pc, #404]	@ (8004d4c <HAL_DMA_Abort+0x240>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a64      	ldr	r2, [pc, #400]	@ (8004d50 <HAL_DMA_Abort+0x244>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a62      	ldr	r2, [pc, #392]	@ (8004d54 <HAL_DMA_Abort+0x248>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a61      	ldr	r2, [pc, #388]	@ (8004d58 <HAL_DMA_Abort+0x24c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_DMA_Abort+0xd6>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5f      	ldr	r2, [pc, #380]	@ (8004d5c <HAL_DMA_Abort+0x250>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <HAL_DMA_Abort+0xda>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_DMA_Abort+0xdc>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 021e 	bic.w	r2, r2, #30
 8004bfa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e00a      	b.n	8004c2a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 020e 	bic.w	r2, r2, #14
 8004c22:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8004d20 <HAL_DMA_Abort+0x214>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d072      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a3a      	ldr	r2, [pc, #232]	@ (8004d24 <HAL_DMA_Abort+0x218>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d06d      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a39      	ldr	r2, [pc, #228]	@ (8004d28 <HAL_DMA_Abort+0x21c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d068      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a37      	ldr	r2, [pc, #220]	@ (8004d2c <HAL_DMA_Abort+0x220>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d063      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a36      	ldr	r2, [pc, #216]	@ (8004d30 <HAL_DMA_Abort+0x224>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d05e      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a34      	ldr	r2, [pc, #208]	@ (8004d34 <HAL_DMA_Abort+0x228>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d059      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a33      	ldr	r2, [pc, #204]	@ (8004d38 <HAL_DMA_Abort+0x22c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d054      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a31      	ldr	r2, [pc, #196]	@ (8004d3c <HAL_DMA_Abort+0x230>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04f      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a30      	ldr	r2, [pc, #192]	@ (8004d40 <HAL_DMA_Abort+0x234>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d04a      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2e      	ldr	r2, [pc, #184]	@ (8004d44 <HAL_DMA_Abort+0x238>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d045      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2d      	ldr	r2, [pc, #180]	@ (8004d48 <HAL_DMA_Abort+0x23c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d040      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d4c <HAL_DMA_Abort+0x240>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d03b      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8004d50 <HAL_DMA_Abort+0x244>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d036      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a28      	ldr	r2, [pc, #160]	@ (8004d54 <HAL_DMA_Abort+0x248>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d031      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a27      	ldr	r2, [pc, #156]	@ (8004d58 <HAL_DMA_Abort+0x24c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d02c      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	@ (8004d5c <HAL_DMA_Abort+0x250>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d027      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a24      	ldr	r2, [pc, #144]	@ (8004d60 <HAL_DMA_Abort+0x254>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a22      	ldr	r2, [pc, #136]	@ (8004d64 <HAL_DMA_Abort+0x258>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01d      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a21      	ldr	r2, [pc, #132]	@ (8004d68 <HAL_DMA_Abort+0x25c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	@ (8004d6c <HAL_DMA_Abort+0x260>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d70 <HAL_DMA_Abort+0x264>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1c      	ldr	r2, [pc, #112]	@ (8004d74 <HAL_DMA_Abort+0x268>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d78 <HAL_DMA_Abort+0x26c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMA_Abort+0x20e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a19      	ldr	r2, [pc, #100]	@ (8004d7c <HAL_DMA_Abort+0x270>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d132      	bne.n	8004d80 <HAL_DMA_Abort+0x274>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e031      	b.n	8004d82 <HAL_DMA_Abort+0x276>
 8004d1e:	bf00      	nop
 8004d20:	40020010 	.word	0x40020010
 8004d24:	40020028 	.word	0x40020028
 8004d28:	40020040 	.word	0x40020040
 8004d2c:	40020058 	.word	0x40020058
 8004d30:	40020070 	.word	0x40020070
 8004d34:	40020088 	.word	0x40020088
 8004d38:	400200a0 	.word	0x400200a0
 8004d3c:	400200b8 	.word	0x400200b8
 8004d40:	40020410 	.word	0x40020410
 8004d44:	40020428 	.word	0x40020428
 8004d48:	40020440 	.word	0x40020440
 8004d4c:	40020458 	.word	0x40020458
 8004d50:	40020470 	.word	0x40020470
 8004d54:	40020488 	.word	0x40020488
 8004d58:	400204a0 	.word	0x400204a0
 8004d5c:	400204b8 	.word	0x400204b8
 8004d60:	58025408 	.word	0x58025408
 8004d64:	5802541c 	.word	0x5802541c
 8004d68:	58025430 	.word	0x58025430
 8004d6c:	58025444 	.word	0x58025444
 8004d70:	58025458 	.word	0x58025458
 8004d74:	5802546c 	.word	0x5802546c
 8004d78:	58025480 	.word	0x58025480
 8004d7c:	58025494 	.word	0x58025494
 8004d80:	2300      	movs	r3, #0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a6d      	ldr	r2, [pc, #436]	@ (8004f50 <HAL_DMA_Abort+0x444>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a6b      	ldr	r2, [pc, #428]	@ (8004f54 <HAL_DMA_Abort+0x448>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6a      	ldr	r2, [pc, #424]	@ (8004f58 <HAL_DMA_Abort+0x44c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a68      	ldr	r2, [pc, #416]	@ (8004f5c <HAL_DMA_Abort+0x450>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a67      	ldr	r2, [pc, #412]	@ (8004f60 <HAL_DMA_Abort+0x454>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a65      	ldr	r2, [pc, #404]	@ (8004f64 <HAL_DMA_Abort+0x458>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a64      	ldr	r2, [pc, #400]	@ (8004f68 <HAL_DMA_Abort+0x45c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a62      	ldr	r2, [pc, #392]	@ (8004f6c <HAL_DMA_Abort+0x460>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a61      	ldr	r2, [pc, #388]	@ (8004f70 <HAL_DMA_Abort+0x464>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f74 <HAL_DMA_Abort+0x468>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8004f78 <HAL_DMA_Abort+0x46c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5c      	ldr	r2, [pc, #368]	@ (8004f7c <HAL_DMA_Abort+0x470>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5b      	ldr	r2, [pc, #364]	@ (8004f80 <HAL_DMA_Abort+0x474>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a59      	ldr	r2, [pc, #356]	@ (8004f84 <HAL_DMA_Abort+0x478>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a58      	ldr	r2, [pc, #352]	@ (8004f88 <HAL_DMA_Abort+0x47c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_DMA_Abort+0x32a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a56      	ldr	r2, [pc, #344]	@ (8004f8c <HAL_DMA_Abort+0x480>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d108      	bne.n	8004e48 <HAL_DMA_Abort+0x33c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0201 	bic.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e007      	b.n	8004e58 <HAL_DMA_Abort+0x34c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e58:	e013      	b.n	8004e82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5a:	f7fe ff55 	bl	8003d08 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b05      	cmp	r3, #5
 8004e66:	d90c      	bls.n	8004e82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2203      	movs	r2, #3
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e12d      	b.n	80050de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e5      	bne.n	8004e5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2f      	ldr	r2, [pc, #188]	@ (8004f50 <HAL_DMA_Abort+0x444>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d04a      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f54 <HAL_DMA_Abort+0x448>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d045      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f58 <HAL_DMA_Abort+0x44c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d040      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8004f5c <HAL_DMA_Abort+0x450>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d03b      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a29      	ldr	r2, [pc, #164]	@ (8004f60 <HAL_DMA_Abort+0x454>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d036      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a27      	ldr	r2, [pc, #156]	@ (8004f64 <HAL_DMA_Abort+0x458>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d031      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a26      	ldr	r2, [pc, #152]	@ (8004f68 <HAL_DMA_Abort+0x45c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d02c      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a24      	ldr	r2, [pc, #144]	@ (8004f6c <HAL_DMA_Abort+0x460>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d027      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a23      	ldr	r2, [pc, #140]	@ (8004f70 <HAL_DMA_Abort+0x464>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <HAL_DMA_Abort+0x468>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01d      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a20      	ldr	r2, [pc, #128]	@ (8004f78 <HAL_DMA_Abort+0x46c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1e      	ldr	r2, [pc, #120]	@ (8004f7c <HAL_DMA_Abort+0x470>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004f80 <HAL_DMA_Abort+0x474>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	@ (8004f84 <HAL_DMA_Abort+0x478>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f88 <HAL_DMA_Abort+0x47c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_DMA_Abort+0x422>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <HAL_DMA_Abort+0x480>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <HAL_DMA_Abort+0x426>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_DMA_Abort+0x428>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02b      	beq.n	8004f90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	223f      	movs	r2, #63	@ 0x3f
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	e02a      	b.n	8004fa6 <HAL_DMA_Abort+0x49a>
 8004f50:	40020010 	.word	0x40020010
 8004f54:	40020028 	.word	0x40020028
 8004f58:	40020040 	.word	0x40020040
 8004f5c:	40020058 	.word	0x40020058
 8004f60:	40020070 	.word	0x40020070
 8004f64:	40020088 	.word	0x40020088
 8004f68:	400200a0 	.word	0x400200a0
 8004f6c:	400200b8 	.word	0x400200b8
 8004f70:	40020410 	.word	0x40020410
 8004f74:	40020428 	.word	0x40020428
 8004f78:	40020440 	.word	0x40020440
 8004f7c:	40020458 	.word	0x40020458
 8004f80:	40020470 	.word	0x40020470
 8004f84:	40020488 	.word	0x40020488
 8004f88:	400204a0 	.word	0x400204a0
 8004f8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4f      	ldr	r2, [pc, #316]	@ (80050e8 <HAL_DMA_Abort+0x5dc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d072      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80050ec <HAL_DMA_Abort+0x5e0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d06d      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80050f0 <HAL_DMA_Abort+0x5e4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d068      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80050f4 <HAL_DMA_Abort+0x5e8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d063      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a49      	ldr	r2, [pc, #292]	@ (80050f8 <HAL_DMA_Abort+0x5ec>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d05e      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a47      	ldr	r2, [pc, #284]	@ (80050fc <HAL_DMA_Abort+0x5f0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d059      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a46      	ldr	r2, [pc, #280]	@ (8005100 <HAL_DMA_Abort+0x5f4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d054      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a44      	ldr	r2, [pc, #272]	@ (8005104 <HAL_DMA_Abort+0x5f8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d04f      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a43      	ldr	r2, [pc, #268]	@ (8005108 <HAL_DMA_Abort+0x5fc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d04a      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a41      	ldr	r2, [pc, #260]	@ (800510c <HAL_DMA_Abort+0x600>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d045      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a40      	ldr	r2, [pc, #256]	@ (8005110 <HAL_DMA_Abort+0x604>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d040      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a3e      	ldr	r2, [pc, #248]	@ (8005114 <HAL_DMA_Abort+0x608>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d03b      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a3d      	ldr	r2, [pc, #244]	@ (8005118 <HAL_DMA_Abort+0x60c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d036      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3b      	ldr	r2, [pc, #236]	@ (800511c <HAL_DMA_Abort+0x610>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3a      	ldr	r2, [pc, #232]	@ (8005120 <HAL_DMA_Abort+0x614>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d02c      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a38      	ldr	r2, [pc, #224]	@ (8005124 <HAL_DMA_Abort+0x618>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d027      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a37      	ldr	r2, [pc, #220]	@ (8005128 <HAL_DMA_Abort+0x61c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d022      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a35      	ldr	r2, [pc, #212]	@ (800512c <HAL_DMA_Abort+0x620>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a34      	ldr	r2, [pc, #208]	@ (8005130 <HAL_DMA_Abort+0x624>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d018      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a32      	ldr	r2, [pc, #200]	@ (8005134 <HAL_DMA_Abort+0x628>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a31      	ldr	r2, [pc, #196]	@ (8005138 <HAL_DMA_Abort+0x62c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2f      	ldr	r2, [pc, #188]	@ (800513c <HAL_DMA_Abort+0x630>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2e      	ldr	r2, [pc, #184]	@ (8005140 <HAL_DMA_Abort+0x634>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_DMA_Abort+0x58a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2c      	ldr	r2, [pc, #176]	@ (8005144 <HAL_DMA_Abort+0x638>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d101      	bne.n	800509a <HAL_DMA_Abort+0x58e>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <HAL_DMA_Abort+0x590>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d015      	beq.n	80050cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40020010 	.word	0x40020010
 80050ec:	40020028 	.word	0x40020028
 80050f0:	40020040 	.word	0x40020040
 80050f4:	40020058 	.word	0x40020058
 80050f8:	40020070 	.word	0x40020070
 80050fc:	40020088 	.word	0x40020088
 8005100:	400200a0 	.word	0x400200a0
 8005104:	400200b8 	.word	0x400200b8
 8005108:	40020410 	.word	0x40020410
 800510c:	40020428 	.word	0x40020428
 8005110:	40020440 	.word	0x40020440
 8005114:	40020458 	.word	0x40020458
 8005118:	40020470 	.word	0x40020470
 800511c:	40020488 	.word	0x40020488
 8005120:	400204a0 	.word	0x400204a0
 8005124:	400204b8 	.word	0x400204b8
 8005128:	58025408 	.word	0x58025408
 800512c:	5802541c 	.word	0x5802541c
 8005130:	58025430 	.word	0x58025430
 8005134:	58025444 	.word	0x58025444
 8005138:	58025458 	.word	0x58025458
 800513c:	5802546c 	.word	0x5802546c
 8005140:	58025480 	.word	0x58025480
 8005144:	58025494 	.word	0x58025494

08005148 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e237      	b.n	80055ca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d004      	beq.n	8005170 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2280      	movs	r2, #128	@ 0x80
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e22c      	b.n	80055ca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5c      	ldr	r2, [pc, #368]	@ (80052e8 <HAL_DMA_Abort_IT+0x1a0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d04a      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5b      	ldr	r2, [pc, #364]	@ (80052ec <HAL_DMA_Abort_IT+0x1a4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d045      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a59      	ldr	r2, [pc, #356]	@ (80052f0 <HAL_DMA_Abort_IT+0x1a8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d040      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a58      	ldr	r2, [pc, #352]	@ (80052f4 <HAL_DMA_Abort_IT+0x1ac>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d03b      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a56      	ldr	r2, [pc, #344]	@ (80052f8 <HAL_DMA_Abort_IT+0x1b0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d036      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a55      	ldr	r2, [pc, #340]	@ (80052fc <HAL_DMA_Abort_IT+0x1b4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d031      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a53      	ldr	r2, [pc, #332]	@ (8005300 <HAL_DMA_Abort_IT+0x1b8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d02c      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a52      	ldr	r2, [pc, #328]	@ (8005304 <HAL_DMA_Abort_IT+0x1bc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d027      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a50      	ldr	r2, [pc, #320]	@ (8005308 <HAL_DMA_Abort_IT+0x1c0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d022      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a4f      	ldr	r2, [pc, #316]	@ (800530c <HAL_DMA_Abort_IT+0x1c4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d01d      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005310 <HAL_DMA_Abort_IT+0x1c8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d018      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005314 <HAL_DMA_Abort_IT+0x1cc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d013      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005318 <HAL_DMA_Abort_IT+0x1d0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00e      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a49      	ldr	r2, [pc, #292]	@ (800531c <HAL_DMA_Abort_IT+0x1d4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d009      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a47      	ldr	r2, [pc, #284]	@ (8005320 <HAL_DMA_Abort_IT+0x1d8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <HAL_DMA_Abort_IT+0xc8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a46      	ldr	r2, [pc, #280]	@ (8005324 <HAL_DMA_Abort_IT+0x1dc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d101      	bne.n	8005214 <HAL_DMA_Abort_IT+0xcc>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_DMA_Abort_IT+0xce>
 8005214:	2300      	movs	r3, #0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8086 	beq.w	8005328 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2204      	movs	r2, #4
 8005220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2f      	ldr	r2, [pc, #188]	@ (80052e8 <HAL_DMA_Abort_IT+0x1a0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2e      	ldr	r2, [pc, #184]	@ (80052ec <HAL_DMA_Abort_IT+0x1a4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2c      	ldr	r2, [pc, #176]	@ (80052f0 <HAL_DMA_Abort_IT+0x1a8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2b      	ldr	r2, [pc, #172]	@ (80052f4 <HAL_DMA_Abort_IT+0x1ac>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a29      	ldr	r2, [pc, #164]	@ (80052f8 <HAL_DMA_Abort_IT+0x1b0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a28      	ldr	r2, [pc, #160]	@ (80052fc <HAL_DMA_Abort_IT+0x1b4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <HAL_DMA_Abort_IT+0x1b8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a25      	ldr	r2, [pc, #148]	@ (8005304 <HAL_DMA_Abort_IT+0x1bc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	@ (8005308 <HAL_DMA_Abort_IT+0x1c0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a22      	ldr	r2, [pc, #136]	@ (800530c <HAL_DMA_Abort_IT+0x1c4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a20      	ldr	r2, [pc, #128]	@ (8005310 <HAL_DMA_Abort_IT+0x1c8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1f      	ldr	r2, [pc, #124]	@ (8005314 <HAL_DMA_Abort_IT+0x1cc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005318 <HAL_DMA_Abort_IT+0x1d0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1c      	ldr	r2, [pc, #112]	@ (800531c <HAL_DMA_Abort_IT+0x1d4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005320 <HAL_DMA_Abort_IT+0x1d8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_Abort_IT+0x17c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a19      	ldr	r2, [pc, #100]	@ (8005324 <HAL_DMA_Abort_IT+0x1dc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d108      	bne.n	80052d6 <HAL_DMA_Abort_IT+0x18e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e178      	b.n	80055c8 <HAL_DMA_Abort_IT+0x480>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e16f      	b.n	80055c8 <HAL_DMA_Abort_IT+0x480>
 80052e8:	40020010 	.word	0x40020010
 80052ec:	40020028 	.word	0x40020028
 80052f0:	40020040 	.word	0x40020040
 80052f4:	40020058 	.word	0x40020058
 80052f8:	40020070 	.word	0x40020070
 80052fc:	40020088 	.word	0x40020088
 8005300:	400200a0 	.word	0x400200a0
 8005304:	400200b8 	.word	0x400200b8
 8005308:	40020410 	.word	0x40020410
 800530c:	40020428 	.word	0x40020428
 8005310:	40020440 	.word	0x40020440
 8005314:	40020458 	.word	0x40020458
 8005318:	40020470 	.word	0x40020470
 800531c:	40020488 	.word	0x40020488
 8005320:	400204a0 	.word	0x400204a0
 8005324:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 020e 	bic.w	r2, r2, #14
 8005336:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6c      	ldr	r2, [pc, #432]	@ (80054f0 <HAL_DMA_Abort_IT+0x3a8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6b      	ldr	r2, [pc, #428]	@ (80054f4 <HAL_DMA_Abort_IT+0x3ac>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a69      	ldr	r2, [pc, #420]	@ (80054f8 <HAL_DMA_Abort_IT+0x3b0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <HAL_DMA_Abort_IT+0x3b4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a66      	ldr	r2, [pc, #408]	@ (8005500 <HAL_DMA_Abort_IT+0x3b8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a65      	ldr	r2, [pc, #404]	@ (8005504 <HAL_DMA_Abort_IT+0x3bc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a63      	ldr	r2, [pc, #396]	@ (8005508 <HAL_DMA_Abort_IT+0x3c0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a62      	ldr	r2, [pc, #392]	@ (800550c <HAL_DMA_Abort_IT+0x3c4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a60      	ldr	r2, [pc, #384]	@ (8005510 <HAL_DMA_Abort_IT+0x3c8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a5f      	ldr	r2, [pc, #380]	@ (8005514 <HAL_DMA_Abort_IT+0x3cc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a5d      	ldr	r2, [pc, #372]	@ (8005518 <HAL_DMA_Abort_IT+0x3d0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a5c      	ldr	r2, [pc, #368]	@ (800551c <HAL_DMA_Abort_IT+0x3d4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005520 <HAL_DMA_Abort_IT+0x3d8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a59      	ldr	r2, [pc, #356]	@ (8005524 <HAL_DMA_Abort_IT+0x3dc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a57      	ldr	r2, [pc, #348]	@ (8005528 <HAL_DMA_Abort_IT+0x3e0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x290>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a56      	ldr	r2, [pc, #344]	@ (800552c <HAL_DMA_Abort_IT+0x3e4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d108      	bne.n	80053ea <HAL_DMA_Abort_IT+0x2a2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e007      	b.n	80053fa <HAL_DMA_Abort_IT+0x2b2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a3c      	ldr	r2, [pc, #240]	@ (80054f0 <HAL_DMA_Abort_IT+0x3a8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d072      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a3a      	ldr	r2, [pc, #232]	@ (80054f4 <HAL_DMA_Abort_IT+0x3ac>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d06d      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a39      	ldr	r2, [pc, #228]	@ (80054f8 <HAL_DMA_Abort_IT+0x3b0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d068      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a37      	ldr	r2, [pc, #220]	@ (80054fc <HAL_DMA_Abort_IT+0x3b4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d063      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a36      	ldr	r2, [pc, #216]	@ (8005500 <HAL_DMA_Abort_IT+0x3b8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d05e      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a34      	ldr	r2, [pc, #208]	@ (8005504 <HAL_DMA_Abort_IT+0x3bc>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d059      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a33      	ldr	r2, [pc, #204]	@ (8005508 <HAL_DMA_Abort_IT+0x3c0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d054      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a31      	ldr	r2, [pc, #196]	@ (800550c <HAL_DMA_Abort_IT+0x3c4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d04f      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a30      	ldr	r2, [pc, #192]	@ (8005510 <HAL_DMA_Abort_IT+0x3c8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d04a      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a2e      	ldr	r2, [pc, #184]	@ (8005514 <HAL_DMA_Abort_IT+0x3cc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d045      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a2d      	ldr	r2, [pc, #180]	@ (8005518 <HAL_DMA_Abort_IT+0x3d0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d040      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a2b      	ldr	r2, [pc, #172]	@ (800551c <HAL_DMA_Abort_IT+0x3d4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d03b      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a2a      	ldr	r2, [pc, #168]	@ (8005520 <HAL_DMA_Abort_IT+0x3d8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d036      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a28      	ldr	r2, [pc, #160]	@ (8005524 <HAL_DMA_Abort_IT+0x3dc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d031      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a27      	ldr	r2, [pc, #156]	@ (8005528 <HAL_DMA_Abort_IT+0x3e0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d02c      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a25      	ldr	r2, [pc, #148]	@ (800552c <HAL_DMA_Abort_IT+0x3e4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d027      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a24      	ldr	r2, [pc, #144]	@ (8005530 <HAL_DMA_Abort_IT+0x3e8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d022      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a22      	ldr	r2, [pc, #136]	@ (8005534 <HAL_DMA_Abort_IT+0x3ec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01d      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <HAL_DMA_Abort_IT+0x3f0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d018      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1f      	ldr	r2, [pc, #124]	@ (800553c <HAL_DMA_Abort_IT+0x3f4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <HAL_DMA_Abort_IT+0x3f8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00e      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005544 <HAL_DMA_Abort_IT+0x3fc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d009      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <HAL_DMA_Abort_IT+0x400>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d004      	beq.n	80054ea <HAL_DMA_Abort_IT+0x3a2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	@ (800554c <HAL_DMA_Abort_IT+0x404>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d132      	bne.n	8005550 <HAL_DMA_Abort_IT+0x408>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e031      	b.n	8005552 <HAL_DMA_Abort_IT+0x40a>
 80054ee:	bf00      	nop
 80054f0:	40020010 	.word	0x40020010
 80054f4:	40020028 	.word	0x40020028
 80054f8:	40020040 	.word	0x40020040
 80054fc:	40020058 	.word	0x40020058
 8005500:	40020070 	.word	0x40020070
 8005504:	40020088 	.word	0x40020088
 8005508:	400200a0 	.word	0x400200a0
 800550c:	400200b8 	.word	0x400200b8
 8005510:	40020410 	.word	0x40020410
 8005514:	40020428 	.word	0x40020428
 8005518:	40020440 	.word	0x40020440
 800551c:	40020458 	.word	0x40020458
 8005520:	40020470 	.word	0x40020470
 8005524:	40020488 	.word	0x40020488
 8005528:	400204a0 	.word	0x400204a0
 800552c:	400204b8 	.word	0x400204b8
 8005530:	58025408 	.word	0x58025408
 8005534:	5802541c 	.word	0x5802541c
 8005538:	58025430 	.word	0x58025430
 800553c:	58025444 	.word	0x58025444
 8005540:	58025458 	.word	0x58025458
 8005544:	5802546c 	.word	0x5802546c
 8005548:	58025480 	.word	0x58025480
 800554c:	58025494 	.word	0x58025494
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d028      	beq.n	80055a8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005560:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005564:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005584:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00c      	beq.n	80055a8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800559c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055a6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055e0:	4b67      	ldr	r3, [pc, #412]	@ (8005780 <HAL_DMA_IRQHandler+0x1ac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a67      	ldr	r2, [pc, #412]	@ (8005784 <HAL_DMA_IRQHandler+0x1b0>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	0a9b      	lsrs	r3, r3, #10
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a5f      	ldr	r2, [pc, #380]	@ (8005788 <HAL_DMA_IRQHandler+0x1b4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d04a      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5d      	ldr	r2, [pc, #372]	@ (800578c <HAL_DMA_IRQHandler+0x1b8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d045      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a5c      	ldr	r2, [pc, #368]	@ (8005790 <HAL_DMA_IRQHandler+0x1bc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d040      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a5a      	ldr	r2, [pc, #360]	@ (8005794 <HAL_DMA_IRQHandler+0x1c0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d03b      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a59      	ldr	r2, [pc, #356]	@ (8005798 <HAL_DMA_IRQHandler+0x1c4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d036      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a57      	ldr	r2, [pc, #348]	@ (800579c <HAL_DMA_IRQHandler+0x1c8>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d031      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a56      	ldr	r2, [pc, #344]	@ (80057a0 <HAL_DMA_IRQHandler+0x1cc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d02c      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a54      	ldr	r2, [pc, #336]	@ (80057a4 <HAL_DMA_IRQHandler+0x1d0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d027      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a53      	ldr	r2, [pc, #332]	@ (80057a8 <HAL_DMA_IRQHandler+0x1d4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a51      	ldr	r2, [pc, #324]	@ (80057ac <HAL_DMA_IRQHandler+0x1d8>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01d      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a50      	ldr	r2, [pc, #320]	@ (80057b0 <HAL_DMA_IRQHandler+0x1dc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a4e      	ldr	r2, [pc, #312]	@ (80057b4 <HAL_DMA_IRQHandler+0x1e0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4d      	ldr	r2, [pc, #308]	@ (80057b8 <HAL_DMA_IRQHandler+0x1e4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a4b      	ldr	r2, [pc, #300]	@ (80057bc <HAL_DMA_IRQHandler+0x1e8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a4a      	ldr	r2, [pc, #296]	@ (80057c0 <HAL_DMA_IRQHandler+0x1ec>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xd2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a48      	ldr	r2, [pc, #288]	@ (80057c4 <HAL_DMA_IRQHandler+0x1f0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_DMA_IRQHandler+0xd6>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_DMA_IRQHandler+0xd8>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 842b 	beq.w	8005f08 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2208      	movs	r2, #8
 80056bc:	409a      	lsls	r2, r3
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80a2 	beq.w	800580c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <HAL_DMA_IRQHandler+0x1b4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d04a      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2d      	ldr	r2, [pc, #180]	@ (800578c <HAL_DMA_IRQHandler+0x1b8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d045      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005790 <HAL_DMA_IRQHandler+0x1bc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d040      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005794 <HAL_DMA_IRQHandler+0x1c0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d03b      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a28      	ldr	r2, [pc, #160]	@ (8005798 <HAL_DMA_IRQHandler+0x1c4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d036      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a27      	ldr	r2, [pc, #156]	@ (800579c <HAL_DMA_IRQHandler+0x1c8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d031      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a25      	ldr	r2, [pc, #148]	@ (80057a0 <HAL_DMA_IRQHandler+0x1cc>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d02c      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <HAL_DMA_IRQHandler+0x1d0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d027      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a22      	ldr	r2, [pc, #136]	@ (80057a8 <HAL_DMA_IRQHandler+0x1d4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d022      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a21      	ldr	r2, [pc, #132]	@ (80057ac <HAL_DMA_IRQHandler+0x1d8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01d      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1f      	ldr	r2, [pc, #124]	@ (80057b0 <HAL_DMA_IRQHandler+0x1dc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d018      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1e      	ldr	r2, [pc, #120]	@ (80057b4 <HAL_DMA_IRQHandler+0x1e0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1c      	ldr	r2, [pc, #112]	@ (80057b8 <HAL_DMA_IRQHandler+0x1e4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00e      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1b      	ldr	r2, [pc, #108]	@ (80057bc <HAL_DMA_IRQHandler+0x1e8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a19      	ldr	r2, [pc, #100]	@ (80057c0 <HAL_DMA_IRQHandler+0x1ec>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_DMA_IRQHandler+0x194>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	@ (80057c4 <HAL_DMA_IRQHandler+0x1f0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d12f      	bne.n	80057c8 <HAL_DMA_IRQHandler+0x1f4>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	e02e      	b.n	80057dc <HAL_DMA_IRQHandler+0x208>
 800577e:	bf00      	nop
 8005780:	2400000c 	.word	0x2400000c
 8005784:	1b4e81b5 	.word	0x1b4e81b5
 8005788:	40020010 	.word	0x40020010
 800578c:	40020028 	.word	0x40020028
 8005790:	40020040 	.word	0x40020040
 8005794:	40020058 	.word	0x40020058
 8005798:	40020070 	.word	0x40020070
 800579c:	40020088 	.word	0x40020088
 80057a0:	400200a0 	.word	0x400200a0
 80057a4:	400200b8 	.word	0x400200b8
 80057a8:	40020410 	.word	0x40020410
 80057ac:	40020428 	.word	0x40020428
 80057b0:	40020440 	.word	0x40020440
 80057b4:	40020458 	.word	0x40020458
 80057b8:	40020470 	.word	0x40020470
 80057bc:	40020488 	.word	0x40020488
 80057c0:	400204a0 	.word	0x400204a0
 80057c4:	400204b8 	.word	0x400204b8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf14      	ite	ne
 80057d6:	2301      	movne	r3, #1
 80057d8:	2300      	moveq	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d015      	beq.n	800580c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0204 	bic.w	r2, r2, #4
 80057ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	2208      	movs	r2, #8
 80057fa:	409a      	lsls	r2, r3
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005804:	f043 0201 	orr.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	fa22 f303 	lsr.w	r3, r2, r3
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d06e      	beq.n	8005900 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a69      	ldr	r2, [pc, #420]	@ (80059cc <HAL_DMA_IRQHandler+0x3f8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04a      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a67      	ldr	r2, [pc, #412]	@ (80059d0 <HAL_DMA_IRQHandler+0x3fc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d045      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a66      	ldr	r2, [pc, #408]	@ (80059d4 <HAL_DMA_IRQHandler+0x400>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a64      	ldr	r2, [pc, #400]	@ (80059d8 <HAL_DMA_IRQHandler+0x404>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d03b      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a63      	ldr	r2, [pc, #396]	@ (80059dc <HAL_DMA_IRQHandler+0x408>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d036      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a61      	ldr	r2, [pc, #388]	@ (80059e0 <HAL_DMA_IRQHandler+0x40c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d031      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a60      	ldr	r2, [pc, #384]	@ (80059e4 <HAL_DMA_IRQHandler+0x410>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d02c      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5e      	ldr	r2, [pc, #376]	@ (80059e8 <HAL_DMA_IRQHandler+0x414>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d027      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a5d      	ldr	r2, [pc, #372]	@ (80059ec <HAL_DMA_IRQHandler+0x418>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d022      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a5b      	ldr	r2, [pc, #364]	@ (80059f0 <HAL_DMA_IRQHandler+0x41c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01d      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a5a      	ldr	r2, [pc, #360]	@ (80059f4 <HAL_DMA_IRQHandler+0x420>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a58      	ldr	r2, [pc, #352]	@ (80059f8 <HAL_DMA_IRQHandler+0x424>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a57      	ldr	r2, [pc, #348]	@ (80059fc <HAL_DMA_IRQHandler+0x428>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a55      	ldr	r2, [pc, #340]	@ (8005a00 <HAL_DMA_IRQHandler+0x42c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a54      	ldr	r2, [pc, #336]	@ (8005a04 <HAL_DMA_IRQHandler+0x430>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x2ee>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a52      	ldr	r2, [pc, #328]	@ (8005a08 <HAL_DMA_IRQHandler+0x434>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10a      	bne.n	80058d8 <HAL_DMA_IRQHandler+0x304>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e003      	b.n	80058e0 <HAL_DMA_IRQHandler+0x30c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	2201      	movs	r2, #1
 80058ee:	409a      	lsls	r2, r3
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f8:	f043 0202 	orr.w	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	2204      	movs	r2, #4
 800590a:	409a      	lsls	r2, r3
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 808f 	beq.w	8005a34 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2c      	ldr	r2, [pc, #176]	@ (80059cc <HAL_DMA_IRQHandler+0x3f8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d04a      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2a      	ldr	r2, [pc, #168]	@ (80059d0 <HAL_DMA_IRQHandler+0x3fc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d045      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a29      	ldr	r2, [pc, #164]	@ (80059d4 <HAL_DMA_IRQHandler+0x400>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d040      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a27      	ldr	r2, [pc, #156]	@ (80059d8 <HAL_DMA_IRQHandler+0x404>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d03b      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a26      	ldr	r2, [pc, #152]	@ (80059dc <HAL_DMA_IRQHandler+0x408>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d036      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a24      	ldr	r2, [pc, #144]	@ (80059e0 <HAL_DMA_IRQHandler+0x40c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d031      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a23      	ldr	r2, [pc, #140]	@ (80059e4 <HAL_DMA_IRQHandler+0x410>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d02c      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a21      	ldr	r2, [pc, #132]	@ (80059e8 <HAL_DMA_IRQHandler+0x414>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d027      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a20      	ldr	r2, [pc, #128]	@ (80059ec <HAL_DMA_IRQHandler+0x418>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d022      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1e      	ldr	r2, [pc, #120]	@ (80059f0 <HAL_DMA_IRQHandler+0x41c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1d      	ldr	r2, [pc, #116]	@ (80059f4 <HAL_DMA_IRQHandler+0x420>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <HAL_DMA_IRQHandler+0x424>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1a      	ldr	r2, [pc, #104]	@ (80059fc <HAL_DMA_IRQHandler+0x428>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a18      	ldr	r2, [pc, #96]	@ (8005a00 <HAL_DMA_IRQHandler+0x42c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <HAL_DMA_IRQHandler+0x430>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x3e2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <HAL_DMA_IRQHandler+0x434>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d12a      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x438>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e023      	b.n	8005a14 <HAL_DMA_IRQHandler+0x440>
 80059cc:	40020010 	.word	0x40020010
 80059d0:	40020028 	.word	0x40020028
 80059d4:	40020040 	.word	0x40020040
 80059d8:	40020058 	.word	0x40020058
 80059dc:	40020070 	.word	0x40020070
 80059e0:	40020088 	.word	0x40020088
 80059e4:	400200a0 	.word	0x400200a0
 80059e8:	400200b8 	.word	0x400200b8
 80059ec:	40020410 	.word	0x40020410
 80059f0:	40020428 	.word	0x40020428
 80059f4:	40020440 	.word	0x40020440
 80059f8:	40020458 	.word	0x40020458
 80059fc:	40020470 	.word	0x40020470
 8005a00:	40020488 	.word	0x40020488
 8005a04:	400204a0 	.word	0x400204a0
 8005a08:	400204b8 	.word	0x400204b8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2204      	movs	r2, #4
 8005a22:	409a      	lsls	r2, r3
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2c:	f043 0204 	orr.w	r2, r3, #4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	409a      	lsls	r2, r3
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80a6 	beq.w	8005b96 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a85      	ldr	r2, [pc, #532]	@ (8005c64 <HAL_DMA_IRQHandler+0x690>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d04a      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a83      	ldr	r2, [pc, #524]	@ (8005c68 <HAL_DMA_IRQHandler+0x694>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d045      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a82      	ldr	r2, [pc, #520]	@ (8005c6c <HAL_DMA_IRQHandler+0x698>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d040      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a80      	ldr	r2, [pc, #512]	@ (8005c70 <HAL_DMA_IRQHandler+0x69c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d03b      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a7f      	ldr	r2, [pc, #508]	@ (8005c74 <HAL_DMA_IRQHandler+0x6a0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d036      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a7d      	ldr	r2, [pc, #500]	@ (8005c78 <HAL_DMA_IRQHandler+0x6a4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d031      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8005c7c <HAL_DMA_IRQHandler+0x6a8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d02c      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a7a      	ldr	r2, [pc, #488]	@ (8005c80 <HAL_DMA_IRQHandler+0x6ac>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d027      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a79      	ldr	r2, [pc, #484]	@ (8005c84 <HAL_DMA_IRQHandler+0x6b0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d022      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a77      	ldr	r2, [pc, #476]	@ (8005c88 <HAL_DMA_IRQHandler+0x6b4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01d      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a76      	ldr	r2, [pc, #472]	@ (8005c8c <HAL_DMA_IRQHandler+0x6b8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d018      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a74      	ldr	r2, [pc, #464]	@ (8005c90 <HAL_DMA_IRQHandler+0x6bc>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a73      	ldr	r2, [pc, #460]	@ (8005c94 <HAL_DMA_IRQHandler+0x6c0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a71      	ldr	r2, [pc, #452]	@ (8005c98 <HAL_DMA_IRQHandler+0x6c4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a70      	ldr	r2, [pc, #448]	@ (8005c9c <HAL_DMA_IRQHandler+0x6c8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_DMA_IRQHandler+0x516>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6cc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10a      	bne.n	8005b00 <HAL_DMA_IRQHandler+0x52c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	e009      	b.n	8005b14 <HAL_DMA_IRQHandler+0x540>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d03e      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1c:	f003 031f 	and.w	r3, r3, #31
 8005b20:	2210      	movs	r2, #16
 8005b22:	409a      	lsls	r2, r3
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d018      	beq.n	8005b68 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d108      	bne.n	8005b56 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d024      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
 8005b54:	e01f      	b.n	8005b96 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01b      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	4798      	blx	r3
 8005b66:	e016      	b.n	8005b96 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0208 	bic.w	r2, r2, #8
 8005b84:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9a:	f003 031f 	and.w	r3, r3, #31
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	409a      	lsls	r2, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8110 	beq.w	8005dcc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c64 <HAL_DMA_IRQHandler+0x690>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d04a      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2b      	ldr	r2, [pc, #172]	@ (8005c68 <HAL_DMA_IRQHandler+0x694>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d045      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a29      	ldr	r2, [pc, #164]	@ (8005c6c <HAL_DMA_IRQHandler+0x698>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d040      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a28      	ldr	r2, [pc, #160]	@ (8005c70 <HAL_DMA_IRQHandler+0x69c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d03b      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	@ (8005c74 <HAL_DMA_IRQHandler+0x6a0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d036      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a25      	ldr	r2, [pc, #148]	@ (8005c78 <HAL_DMA_IRQHandler+0x6a4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d031      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a23      	ldr	r2, [pc, #140]	@ (8005c7c <HAL_DMA_IRQHandler+0x6a8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d02c      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a22      	ldr	r2, [pc, #136]	@ (8005c80 <HAL_DMA_IRQHandler+0x6ac>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d027      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a20      	ldr	r2, [pc, #128]	@ (8005c84 <HAL_DMA_IRQHandler+0x6b0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d022      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c88 <HAL_DMA_IRQHandler+0x6b4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d01d      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	@ (8005c8c <HAL_DMA_IRQHandler+0x6b8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d018      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c90 <HAL_DMA_IRQHandler+0x6bc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d013      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	@ (8005c94 <HAL_DMA_IRQHandler+0x6c0>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00e      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <HAL_DMA_IRQHandler+0x6c4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d009      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <HAL_DMA_IRQHandler+0x6c8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_DMA_IRQHandler+0x678>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a16      	ldr	r2, [pc, #88]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6cc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d12b      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x6d0>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bf14      	ite	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	2300      	moveq	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e02a      	b.n	8005cb8 <HAL_DMA_IRQHandler+0x6e4>
 8005c62:	bf00      	nop
 8005c64:	40020010 	.word	0x40020010
 8005c68:	40020028 	.word	0x40020028
 8005c6c:	40020040 	.word	0x40020040
 8005c70:	40020058 	.word	0x40020058
 8005c74:	40020070 	.word	0x40020070
 8005c78:	40020088 	.word	0x40020088
 8005c7c:	400200a0 	.word	0x400200a0
 8005c80:	400200b8 	.word	0x400200b8
 8005c84:	40020410 	.word	0x40020410
 8005c88:	40020428 	.word	0x40020428
 8005c8c:	40020440 	.word	0x40020440
 8005c90:	40020458 	.word	0x40020458
 8005c94:	40020470 	.word	0x40020470
 8005c98:	40020488 	.word	0x40020488
 8005c9c:	400204a0 	.word	0x400204a0
 8005ca0:	400204b8 	.word	0x400204b8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bf14      	ite	ne
 8005cb2:	2301      	movne	r3, #1
 8005cb4:	2300      	moveq	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8087 	beq.w	8005dcc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	409a      	lsls	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d139      	bne.n	8005d4e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0216 	bic.w	r2, r2, #22
 8005ce8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <HAL_DMA_IRQHandler+0x736>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0208 	bic.w	r2, r2, #8
 8005d18:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	223f      	movs	r2, #63	@ 0x3f
 8005d24:	409a      	lsls	r2, r3
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 834a 	beq.w	80063d8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
          }
          return;
 8005d4c:	e344      	b.n	80063d8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d018      	beq.n	8005d8e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d108      	bne.n	8005d7c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d02c      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
 8005d7a:	e027      	b.n	8005dcc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d023      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
 8005d8c:	e01e      	b.n	8005dcc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10f      	bne.n	8005dbc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0210 	bic.w	r2, r2, #16
 8005daa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8306 	beq.w	80063e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8088 	beq.w	8005ef4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2204      	movs	r2, #4
 8005de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a7a      	ldr	r2, [pc, #488]	@ (8005fdc <HAL_DMA_IRQHandler+0xa08>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d04a      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a79      	ldr	r2, [pc, #484]	@ (8005fe0 <HAL_DMA_IRQHandler+0xa0c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d045      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a77      	ldr	r2, [pc, #476]	@ (8005fe4 <HAL_DMA_IRQHandler+0xa10>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d040      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a76      	ldr	r2, [pc, #472]	@ (8005fe8 <HAL_DMA_IRQHandler+0xa14>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d03b      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a74      	ldr	r2, [pc, #464]	@ (8005fec <HAL_DMA_IRQHandler+0xa18>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d036      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a73      	ldr	r2, [pc, #460]	@ (8005ff0 <HAL_DMA_IRQHandler+0xa1c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d031      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a71      	ldr	r2, [pc, #452]	@ (8005ff4 <HAL_DMA_IRQHandler+0xa20>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02c      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a70      	ldr	r2, [pc, #448]	@ (8005ff8 <HAL_DMA_IRQHandler+0xa24>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d027      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6e      	ldr	r2, [pc, #440]	@ (8005ffc <HAL_DMA_IRQHandler+0xa28>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8006000 <HAL_DMA_IRQHandler+0xa2c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d01d      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6b      	ldr	r2, [pc, #428]	@ (8006004 <HAL_DMA_IRQHandler+0xa30>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6a      	ldr	r2, [pc, #424]	@ (8006008 <HAL_DMA_IRQHandler+0xa34>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a68      	ldr	r2, [pc, #416]	@ (800600c <HAL_DMA_IRQHandler+0xa38>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a67      	ldr	r2, [pc, #412]	@ (8006010 <HAL_DMA_IRQHandler+0xa3c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a65      	ldr	r2, [pc, #404]	@ (8006014 <HAL_DMA_IRQHandler+0xa40>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x8b8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a64      	ldr	r2, [pc, #400]	@ (8006018 <HAL_DMA_IRQHandler+0xa44>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <HAL_DMA_IRQHandler+0x8ca>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e007      	b.n	8005eae <HAL_DMA_IRQHandler+0x8da>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d307      	bcc.n	8005eca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1f2      	bne.n	8005eae <HAL_DMA_IRQHandler+0x8da>
 8005ec8:	e000      	b.n	8005ecc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005eca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2203      	movs	r2, #3
 8005ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005ee2:	e003      	b.n	8005eec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8272 	beq.w	80063e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
 8005f06:	e26c      	b.n	80063e2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a43      	ldr	r2, [pc, #268]	@ (800601c <HAL_DMA_IRQHandler+0xa48>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d022      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a42      	ldr	r2, [pc, #264]	@ (8006020 <HAL_DMA_IRQHandler+0xa4c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01d      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a40      	ldr	r2, [pc, #256]	@ (8006024 <HAL_DMA_IRQHandler+0xa50>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d018      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8006028 <HAL_DMA_IRQHandler+0xa54>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a3d      	ldr	r2, [pc, #244]	@ (800602c <HAL_DMA_IRQHandler+0xa58>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8006030 <HAL_DMA_IRQHandler+0xa5c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a3a      	ldr	r2, [pc, #232]	@ (8006034 <HAL_DMA_IRQHandler+0xa60>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x984>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a39      	ldr	r2, [pc, #228]	@ (8006038 <HAL_DMA_IRQHandler+0xa64>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d101      	bne.n	8005f5c <HAL_DMA_IRQHandler+0x988>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_DMA_IRQHandler+0x98a>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 823f 	beq.w	80063e2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	2204      	movs	r2, #4
 8005f76:	409a      	lsls	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 80cd 	beq.w	800611c <HAL_DMA_IRQHandler+0xb48>
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80c7 	beq.w	800611c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2204      	movs	r2, #4
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d049      	beq.n	800603c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 8210 	beq.w	80063dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc4:	e20a      	b.n	80063dc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8206 	beq.w	80063dc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fd8:	e200      	b.n	80063dc <HAL_DMA_IRQHandler+0xe08>
 8005fda:	bf00      	nop
 8005fdc:	40020010 	.word	0x40020010
 8005fe0:	40020028 	.word	0x40020028
 8005fe4:	40020040 	.word	0x40020040
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	40020070 	.word	0x40020070
 8005ff0:	40020088 	.word	0x40020088
 8005ff4:	400200a0 	.word	0x400200a0
 8005ff8:	400200b8 	.word	0x400200b8
 8005ffc:	40020410 	.word	0x40020410
 8006000:	40020428 	.word	0x40020428
 8006004:	40020440 	.word	0x40020440
 8006008:	40020458 	.word	0x40020458
 800600c:	40020470 	.word	0x40020470
 8006010:	40020488 	.word	0x40020488
 8006014:	400204a0 	.word	0x400204a0
 8006018:	400204b8 	.word	0x400204b8
 800601c:	58025408 	.word	0x58025408
 8006020:	5802541c 	.word	0x5802541c
 8006024:	58025430 	.word	0x58025430
 8006028:	58025444 	.word	0x58025444
 800602c:	58025458 	.word	0x58025458
 8006030:	5802546c 	.word	0x5802546c
 8006034:	58025480 	.word	0x58025480
 8006038:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d160      	bne.n	8006108 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a7f      	ldr	r2, [pc, #508]	@ (8006248 <HAL_DMA_IRQHandler+0xc74>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d04a      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a7d      	ldr	r2, [pc, #500]	@ (800624c <HAL_DMA_IRQHandler+0xc78>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d045      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a7c      	ldr	r2, [pc, #496]	@ (8006250 <HAL_DMA_IRQHandler+0xc7c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d040      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a7a      	ldr	r2, [pc, #488]	@ (8006254 <HAL_DMA_IRQHandler+0xc80>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d03b      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a79      	ldr	r2, [pc, #484]	@ (8006258 <HAL_DMA_IRQHandler+0xc84>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d036      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a77      	ldr	r2, [pc, #476]	@ (800625c <HAL_DMA_IRQHandler+0xc88>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d031      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a76      	ldr	r2, [pc, #472]	@ (8006260 <HAL_DMA_IRQHandler+0xc8c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d02c      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a74      	ldr	r2, [pc, #464]	@ (8006264 <HAL_DMA_IRQHandler+0xc90>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d027      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a73      	ldr	r2, [pc, #460]	@ (8006268 <HAL_DMA_IRQHandler+0xc94>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d022      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a71      	ldr	r2, [pc, #452]	@ (800626c <HAL_DMA_IRQHandler+0xc98>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01d      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a70      	ldr	r2, [pc, #448]	@ (8006270 <HAL_DMA_IRQHandler+0xc9c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d018      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a6e      	ldr	r2, [pc, #440]	@ (8006274 <HAL_DMA_IRQHandler+0xca0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d013      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6d      	ldr	r2, [pc, #436]	@ (8006278 <HAL_DMA_IRQHandler+0xca4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00e      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a6b      	ldr	r2, [pc, #428]	@ (800627c <HAL_DMA_IRQHandler+0xca8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d009      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a6a      	ldr	r2, [pc, #424]	@ (8006280 <HAL_DMA_IRQHandler+0xcac>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d004      	beq.n	80060e6 <HAL_DMA_IRQHandler+0xb12>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a68      	ldr	r2, [pc, #416]	@ (8006284 <HAL_DMA_IRQHandler+0xcb0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d108      	bne.n	80060f8 <HAL_DMA_IRQHandler+0xb24>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0208 	bic.w	r2, r2, #8
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	e007      	b.n	8006108 <HAL_DMA_IRQHandler+0xb34>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0204 	bic.w	r2, r2, #4
 8006106:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8165 	beq.w	80063dc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800611a:	e15f      	b.n	80063dc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	2202      	movs	r2, #2
 8006126:	409a      	lsls	r2, r3
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 80c5 	beq.w	80062bc <HAL_DMA_IRQHandler+0xce8>
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80bf 	beq.w	80062bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2202      	movs	r2, #2
 8006148:	409a      	lsls	r2, r3
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 813a 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006174:	e134      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8130 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006188:	e12a      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 8089 	bne.w	80062a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2b      	ldr	r2, [pc, #172]	@ (8006248 <HAL_DMA_IRQHandler+0xc74>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d04a      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a29      	ldr	r2, [pc, #164]	@ (800624c <HAL_DMA_IRQHandler+0xc78>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d045      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a28      	ldr	r2, [pc, #160]	@ (8006250 <HAL_DMA_IRQHandler+0xc7c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d040      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a26      	ldr	r2, [pc, #152]	@ (8006254 <HAL_DMA_IRQHandler+0xc80>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d03b      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a25      	ldr	r2, [pc, #148]	@ (8006258 <HAL_DMA_IRQHandler+0xc84>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d036      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a23      	ldr	r2, [pc, #140]	@ (800625c <HAL_DMA_IRQHandler+0xc88>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d031      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a22      	ldr	r2, [pc, #136]	@ (8006260 <HAL_DMA_IRQHandler+0xc8c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d02c      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a20      	ldr	r2, [pc, #128]	@ (8006264 <HAL_DMA_IRQHandler+0xc90>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d027      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006268 <HAL_DMA_IRQHandler+0xc94>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d022      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <HAL_DMA_IRQHandler+0xc98>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01d      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <HAL_DMA_IRQHandler+0xc9c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d018      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1a      	ldr	r2, [pc, #104]	@ (8006274 <HAL_DMA_IRQHandler+0xca0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d013      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a19      	ldr	r2, [pc, #100]	@ (8006278 <HAL_DMA_IRQHandler+0xca4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a17      	ldr	r2, [pc, #92]	@ (800627c <HAL_DMA_IRQHandler+0xca8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d009      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a16      	ldr	r2, [pc, #88]	@ (8006280 <HAL_DMA_IRQHandler+0xcac>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_DMA_IRQHandler+0xc62>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a14      	ldr	r2, [pc, #80]	@ (8006284 <HAL_DMA_IRQHandler+0xcb0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d128      	bne.n	8006288 <HAL_DMA_IRQHandler+0xcb4>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0214 	bic.w	r2, r2, #20
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e027      	b.n	8006298 <HAL_DMA_IRQHandler+0xcc4>
 8006248:	40020010 	.word	0x40020010
 800624c:	40020028 	.word	0x40020028
 8006250:	40020040 	.word	0x40020040
 8006254:	40020058 	.word	0x40020058
 8006258:	40020070 	.word	0x40020070
 800625c:	40020088 	.word	0x40020088
 8006260:	400200a0 	.word	0x400200a0
 8006264:	400200b8 	.word	0x400200b8
 8006268:	40020410 	.word	0x40020410
 800626c:	40020428 	.word	0x40020428
 8006270:	40020440 	.word	0x40020440
 8006274:	40020458 	.word	0x40020458
 8006278:	40020470 	.word	0x40020470
 800627c:	40020488 	.word	0x40020488
 8006280:	400204a0 	.word	0x400204a0
 8006284:	400204b8 	.word	0x400204b8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 020a 	bic.w	r2, r2, #10
 8006296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8097 	beq.w	80063e0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062ba:	e091      	b.n	80063e0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	2208      	movs	r2, #8
 80062c6:	409a      	lsls	r2, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8088 	beq.w	80063e2 <HAL_DMA_IRQHandler+0xe0e>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8082 	beq.w	80063e2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a41      	ldr	r2, [pc, #260]	@ (80063e8 <HAL_DMA_IRQHandler+0xe14>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d04a      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a3f      	ldr	r2, [pc, #252]	@ (80063ec <HAL_DMA_IRQHandler+0xe18>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d045      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a3e      	ldr	r2, [pc, #248]	@ (80063f0 <HAL_DMA_IRQHandler+0xe1c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d040      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a3c      	ldr	r2, [pc, #240]	@ (80063f4 <HAL_DMA_IRQHandler+0xe20>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d03b      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a3b      	ldr	r2, [pc, #236]	@ (80063f8 <HAL_DMA_IRQHandler+0xe24>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d036      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a39      	ldr	r2, [pc, #228]	@ (80063fc <HAL_DMA_IRQHandler+0xe28>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a38      	ldr	r2, [pc, #224]	@ (8006400 <HAL_DMA_IRQHandler+0xe2c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d02c      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a36      	ldr	r2, [pc, #216]	@ (8006404 <HAL_DMA_IRQHandler+0xe30>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d027      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a35      	ldr	r2, [pc, #212]	@ (8006408 <HAL_DMA_IRQHandler+0xe34>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a33      	ldr	r2, [pc, #204]	@ (800640c <HAL_DMA_IRQHandler+0xe38>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01d      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a32      	ldr	r2, [pc, #200]	@ (8006410 <HAL_DMA_IRQHandler+0xe3c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a30      	ldr	r2, [pc, #192]	@ (8006414 <HAL_DMA_IRQHandler+0xe40>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a2f      	ldr	r2, [pc, #188]	@ (8006418 <HAL_DMA_IRQHandler+0xe44>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a2d      	ldr	r2, [pc, #180]	@ (800641c <HAL_DMA_IRQHandler+0xe48>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2c      	ldr	r2, [pc, #176]	@ (8006420 <HAL_DMA_IRQHandler+0xe4c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_DMA_IRQHandler+0xdaa>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2a      	ldr	r2, [pc, #168]	@ (8006424 <HAL_DMA_IRQHandler+0xe50>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d108      	bne.n	8006390 <HAL_DMA_IRQHandler+0xdbc>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 021c 	bic.w	r2, r2, #28
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e007      	b.n	80063a0 <HAL_DMA_IRQHandler+0xdcc>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 020e 	bic.w	r2, r2, #14
 800639e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2201      	movs	r2, #1
 80063aa:	409a      	lsls	r2, r3
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
 80063d6:	e004      	b.n	80063e2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063d8:	bf00      	nop
 80063da:	e002      	b.n	80063e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063dc:	bf00      	nop
 80063de:	e000      	b.n	80063e2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063e2:	3728      	adds	r7, #40	@ 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40020010 	.word	0x40020010
 80063ec:	40020028 	.word	0x40020028
 80063f0:	40020040 	.word	0x40020040
 80063f4:	40020058 	.word	0x40020058
 80063f8:	40020070 	.word	0x40020070
 80063fc:	40020088 	.word	0x40020088
 8006400:	400200a0 	.word	0x400200a0
 8006404:	400200b8 	.word	0x400200b8
 8006408:	40020410 	.word	0x40020410
 800640c:	40020428 	.word	0x40020428
 8006410:	40020440 	.word	0x40020440
 8006414:	40020458 	.word	0x40020458
 8006418:	40020470 	.word	0x40020470
 800641c:	40020488 	.word	0x40020488
 8006420:	400204a0 	.word	0x400204a0
 8006424:	400204b8 	.word	0x400204b8

08006428 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006452:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006458:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7f      	ldr	r2, [pc, #508]	@ (800665c <DMA_SetConfig+0x21c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d072      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a7d      	ldr	r2, [pc, #500]	@ (8006660 <DMA_SetConfig+0x220>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d06d      	beq.n	800654a <DMA_SetConfig+0x10a>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a7c      	ldr	r2, [pc, #496]	@ (8006664 <DMA_SetConfig+0x224>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d068      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a7a      	ldr	r2, [pc, #488]	@ (8006668 <DMA_SetConfig+0x228>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d063      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a79      	ldr	r2, [pc, #484]	@ (800666c <DMA_SetConfig+0x22c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d05e      	beq.n	800654a <DMA_SetConfig+0x10a>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a77      	ldr	r2, [pc, #476]	@ (8006670 <DMA_SetConfig+0x230>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d059      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a76      	ldr	r2, [pc, #472]	@ (8006674 <DMA_SetConfig+0x234>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d054      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a74      	ldr	r2, [pc, #464]	@ (8006678 <DMA_SetConfig+0x238>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d04f      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a73      	ldr	r2, [pc, #460]	@ (800667c <DMA_SetConfig+0x23c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d04a      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a71      	ldr	r2, [pc, #452]	@ (8006680 <DMA_SetConfig+0x240>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d045      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a70      	ldr	r2, [pc, #448]	@ (8006684 <DMA_SetConfig+0x244>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d040      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006688 <DMA_SetConfig+0x248>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03b      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a6d      	ldr	r2, [pc, #436]	@ (800668c <DMA_SetConfig+0x24c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d036      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006690 <DMA_SetConfig+0x250>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d031      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006694 <DMA_SetConfig+0x254>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02c      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a68      	ldr	r2, [pc, #416]	@ (8006698 <DMA_SetConfig+0x258>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d027      	beq.n	800654a <DMA_SetConfig+0x10a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a67      	ldr	r2, [pc, #412]	@ (800669c <DMA_SetConfig+0x25c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a65      	ldr	r2, [pc, #404]	@ (80066a0 <DMA_SetConfig+0x260>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <DMA_SetConfig+0x10a>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a64      	ldr	r2, [pc, #400]	@ (80066a4 <DMA_SetConfig+0x264>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a62      	ldr	r2, [pc, #392]	@ (80066a8 <DMA_SetConfig+0x268>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a61      	ldr	r2, [pc, #388]	@ (80066ac <DMA_SetConfig+0x26c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <DMA_SetConfig+0x10a>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a5f      	ldr	r2, [pc, #380]	@ (80066b0 <DMA_SetConfig+0x270>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a5e      	ldr	r2, [pc, #376]	@ (80066b4 <DMA_SetConfig+0x274>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <DMA_SetConfig+0x10a>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a5c      	ldr	r2, [pc, #368]	@ (80066b8 <DMA_SetConfig+0x278>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <DMA_SetConfig+0x10e>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <DMA_SetConfig+0x110>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00d      	beq.n	8006570 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800655c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800656e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a39      	ldr	r2, [pc, #228]	@ (800665c <DMA_SetConfig+0x21c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d04a      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a38      	ldr	r2, [pc, #224]	@ (8006660 <DMA_SetConfig+0x220>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d045      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a36      	ldr	r2, [pc, #216]	@ (8006664 <DMA_SetConfig+0x224>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d040      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a35      	ldr	r2, [pc, #212]	@ (8006668 <DMA_SetConfig+0x228>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d03b      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a33      	ldr	r2, [pc, #204]	@ (800666c <DMA_SetConfig+0x22c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d036      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a32      	ldr	r2, [pc, #200]	@ (8006670 <DMA_SetConfig+0x230>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d031      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a30      	ldr	r2, [pc, #192]	@ (8006674 <DMA_SetConfig+0x234>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d02c      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006678 <DMA_SetConfig+0x238>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d027      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a2d      	ldr	r2, [pc, #180]	@ (800667c <DMA_SetConfig+0x23c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006680 <DMA_SetConfig+0x240>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d01d      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006684 <DMA_SetConfig+0x244>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <DMA_SetConfig+0x248>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a27      	ldr	r2, [pc, #156]	@ (800668c <DMA_SetConfig+0x24c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a26      	ldr	r2, [pc, #152]	@ (8006690 <DMA_SetConfig+0x250>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a24      	ldr	r2, [pc, #144]	@ (8006694 <DMA_SetConfig+0x254>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <DMA_SetConfig+0x1d0>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a23      	ldr	r2, [pc, #140]	@ (8006698 <DMA_SetConfig+0x258>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d101      	bne.n	8006614 <DMA_SetConfig+0x1d4>
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <DMA_SetConfig+0x1d6>
 8006614:	2300      	movs	r3, #0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d059      	beq.n	80066ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	223f      	movs	r2, #63	@ 0x3f
 8006624:	409a      	lsls	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006638:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d138      	bne.n	80066bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800665a:	e086      	b.n	800676a <DMA_SetConfig+0x32a>
 800665c:	40020010 	.word	0x40020010
 8006660:	40020028 	.word	0x40020028
 8006664:	40020040 	.word	0x40020040
 8006668:	40020058 	.word	0x40020058
 800666c:	40020070 	.word	0x40020070
 8006670:	40020088 	.word	0x40020088
 8006674:	400200a0 	.word	0x400200a0
 8006678:	400200b8 	.word	0x400200b8
 800667c:	40020410 	.word	0x40020410
 8006680:	40020428 	.word	0x40020428
 8006684:	40020440 	.word	0x40020440
 8006688:	40020458 	.word	0x40020458
 800668c:	40020470 	.word	0x40020470
 8006690:	40020488 	.word	0x40020488
 8006694:	400204a0 	.word	0x400204a0
 8006698:	400204b8 	.word	0x400204b8
 800669c:	58025408 	.word	0x58025408
 80066a0:	5802541c 	.word	0x5802541c
 80066a4:	58025430 	.word	0x58025430
 80066a8:	58025444 	.word	0x58025444
 80066ac:	58025458 	.word	0x58025458
 80066b0:	5802546c 	.word	0x5802546c
 80066b4:	58025480 	.word	0x58025480
 80066b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	60da      	str	r2, [r3, #12]
}
 80066cc:	e04d      	b.n	800676a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a29      	ldr	r2, [pc, #164]	@ (8006778 <DMA_SetConfig+0x338>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d022      	beq.n	800671e <DMA_SetConfig+0x2de>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a27      	ldr	r2, [pc, #156]	@ (800677c <DMA_SetConfig+0x33c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d01d      	beq.n	800671e <DMA_SetConfig+0x2de>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a26      	ldr	r2, [pc, #152]	@ (8006780 <DMA_SetConfig+0x340>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <DMA_SetConfig+0x2de>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a24      	ldr	r2, [pc, #144]	@ (8006784 <DMA_SetConfig+0x344>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <DMA_SetConfig+0x2de>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <DMA_SetConfig+0x348>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00e      	beq.n	800671e <DMA_SetConfig+0x2de>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a21      	ldr	r2, [pc, #132]	@ (800678c <DMA_SetConfig+0x34c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <DMA_SetConfig+0x2de>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a20      	ldr	r2, [pc, #128]	@ (8006790 <DMA_SetConfig+0x350>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <DMA_SetConfig+0x2de>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1e      	ldr	r2, [pc, #120]	@ (8006794 <DMA_SetConfig+0x354>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d101      	bne.n	8006722 <DMA_SetConfig+0x2e2>
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <DMA_SetConfig+0x2e4>
 8006722:	2300      	movs	r3, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d020      	beq.n	800676a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	2201      	movs	r2, #1
 8006732:	409a      	lsls	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b40      	cmp	r3, #64	@ 0x40
 8006746:	d108      	bne.n	800675a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	60da      	str	r2, [r3, #12]
}
 8006758:	e007      	b.n	800676a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	60da      	str	r2, [r3, #12]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	58025408 	.word	0x58025408
 800677c:	5802541c 	.word	0x5802541c
 8006780:	58025430 	.word	0x58025430
 8006784:	58025444 	.word	0x58025444
 8006788:	58025458 	.word	0x58025458
 800678c:	5802546c 	.word	0x5802546c
 8006790:	58025480 	.word	0x58025480
 8006794:	58025494 	.word	0x58025494

08006798 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a42      	ldr	r2, [pc, #264]	@ (80068b0 <DMA_CalcBaseAndBitshift+0x118>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a41      	ldr	r2, [pc, #260]	@ (80068b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a3f      	ldr	r2, [pc, #252]	@ (80068b8 <DMA_CalcBaseAndBitshift+0x120>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a3e      	ldr	r2, [pc, #248]	@ (80068bc <DMA_CalcBaseAndBitshift+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3c      	ldr	r2, [pc, #240]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x128>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a3b      	ldr	r2, [pc, #236]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a39      	ldr	r2, [pc, #228]	@ (80068c8 <DMA_CalcBaseAndBitshift+0x130>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a38      	ldr	r2, [pc, #224]	@ (80068cc <DMA_CalcBaseAndBitshift+0x134>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a36      	ldr	r2, [pc, #216]	@ (80068d0 <DMA_CalcBaseAndBitshift+0x138>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a35      	ldr	r2, [pc, #212]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a33      	ldr	r2, [pc, #204]	@ (80068d8 <DMA_CalcBaseAndBitshift+0x140>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a32      	ldr	r2, [pc, #200]	@ (80068dc <DMA_CalcBaseAndBitshift+0x144>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a30      	ldr	r2, [pc, #192]	@ (80068e0 <DMA_CalcBaseAndBitshift+0x148>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a2f      	ldr	r2, [pc, #188]	@ (80068e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a2d      	ldr	r2, [pc, #180]	@ (80068e8 <DMA_CalcBaseAndBitshift+0x150>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <DMA_CalcBaseAndBitshift+0xa8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2c      	ldr	r2, [pc, #176]	@ (80068ec <DMA_CalcBaseAndBitshift+0x154>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d101      	bne.n	8006844 <DMA_CalcBaseAndBitshift+0xac>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <DMA_CalcBaseAndBitshift+0xae>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d024      	beq.n	8006894 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	3b10      	subs	r3, #16
 8006852:	4a27      	ldr	r2, [pc, #156]	@ (80068f0 <DMA_CalcBaseAndBitshift+0x158>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	4a24      	ldr	r2, [pc, #144]	@ (80068f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d908      	bls.n	8006884 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	4b1f      	ldr	r3, [pc, #124]	@ (80068f8 <DMA_CalcBaseAndBitshift+0x160>)
 800687a:	4013      	ands	r3, r2
 800687c:	1d1a      	adds	r2, r3, #4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	659a      	str	r2, [r3, #88]	@ 0x58
 8006882:	e00d      	b.n	80068a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <DMA_CalcBaseAndBitshift+0x160>)
 800688c:	4013      	ands	r3, r2
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6593      	str	r3, [r2, #88]	@ 0x58
 8006892:	e005      	b.n	80068a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40020010 	.word	0x40020010
 80068b4:	40020028 	.word	0x40020028
 80068b8:	40020040 	.word	0x40020040
 80068bc:	40020058 	.word	0x40020058
 80068c0:	40020070 	.word	0x40020070
 80068c4:	40020088 	.word	0x40020088
 80068c8:	400200a0 	.word	0x400200a0
 80068cc:	400200b8 	.word	0x400200b8
 80068d0:	40020410 	.word	0x40020410
 80068d4:	40020428 	.word	0x40020428
 80068d8:	40020440 	.word	0x40020440
 80068dc:	40020458 	.word	0x40020458
 80068e0:	40020470 	.word	0x40020470
 80068e4:	40020488 	.word	0x40020488
 80068e8:	400204a0 	.word	0x400204a0
 80068ec:	400204b8 	.word	0x400204b8
 80068f0:	aaaaaaab 	.word	0xaaaaaaab
 80068f4:	0800f058 	.word	0x0800f058
 80068f8:	fffffc00 	.word	0xfffffc00

080068fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d120      	bne.n	8006952 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	2b03      	cmp	r3, #3
 8006916:	d858      	bhi.n	80069ca <DMA_CheckFifoParam+0xce>
 8006918:	a201      	add	r2, pc, #4	@ (adr r2, 8006920 <DMA_CheckFifoParam+0x24>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006931 	.word	0x08006931
 8006924:	08006943 	.word	0x08006943
 8006928:	08006931 	.word	0x08006931
 800692c:	080069cb 	.word	0x080069cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d048      	beq.n	80069ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006940:	e045      	b.n	80069ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800694a:	d142      	bne.n	80069d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006950:	e03f      	b.n	80069d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800695a:	d123      	bne.n	80069a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	2b03      	cmp	r3, #3
 8006962:	d838      	bhi.n	80069d6 <DMA_CheckFifoParam+0xda>
 8006964:	a201      	add	r2, pc, #4	@ (adr r2, 800696c <DMA_CheckFifoParam+0x70>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	0800697d 	.word	0x0800697d
 8006970:	08006983 	.word	0x08006983
 8006974:	0800697d 	.word	0x0800697d
 8006978:	08006995 	.word	0x08006995
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
        break;
 8006980:	e030      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d025      	beq.n	80069da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006992:	e022      	b.n	80069da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800699c:	d11f      	bne.n	80069de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069a2:	e01c      	b.n	80069de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d902      	bls.n	80069b2 <DMA_CheckFifoParam+0xb6>
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d003      	beq.n	80069b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80069b0:	e018      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
        break;
 80069b6:	e015      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00e      	beq.n	80069e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
    break;
 80069c8:	e00b      	b.n	80069e2 <DMA_CheckFifoParam+0xe6>
        break;
 80069ca:	bf00      	nop
 80069cc:	e00a      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        break;
 80069ce:	bf00      	nop
 80069d0:	e008      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        break;
 80069d2:	bf00      	nop
 80069d4:	e006      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        break;
 80069d6:	bf00      	nop
 80069d8:	e004      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        break;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
        break;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <DMA_CheckFifoParam+0xe8>
    break;
 80069e2:	bf00      	nop
    }
  }

  return status;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop

080069f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a38      	ldr	r2, [pc, #224]	@ (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a36      	ldr	r2, [pc, #216]	@ (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01d      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a35      	ldr	r2, [pc, #212]	@ (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a33      	ldr	r2, [pc, #204]	@ (8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a32      	ldr	r2, [pc, #200]	@ (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a30      	ldr	r2, [pc, #192]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2f      	ldr	r2, [pc, #188]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d101      	bne.n	8006a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d01a      	beq.n	8006a92 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	3b08      	subs	r3, #8
 8006a64:	4a28      	ldr	r2, [pc, #160]	@ (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	091b      	lsrs	r3, r3, #4
 8006a6c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4b26      	ldr	r3, [pc, #152]	@ (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	461a      	mov	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a24      	ldr	r2, [pc, #144]	@ (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a90:	e024      	b.n	8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	3b10      	subs	r3, #16
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa0:	091b      	lsrs	r3, r3, #4
 8006aa2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d806      	bhi.n	8006aba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a1b      	ldr	r2, [pc, #108]	@ (8006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d902      	bls.n	8006aba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4b18      	ldr	r3, [pc, #96]	@ (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a16      	ldr	r2, [pc, #88]	@ (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006acc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	58025408 	.word	0x58025408
 8006aec:	5802541c 	.word	0x5802541c
 8006af0:	58025430 	.word	0x58025430
 8006af4:	58025444 	.word	0x58025444
 8006af8:	58025458 	.word	0x58025458
 8006afc:	5802546c 	.word	0x5802546c
 8006b00:	58025480 	.word	0x58025480
 8006b04:	58025494 	.word	0x58025494
 8006b08:	cccccccd 	.word	0xcccccccd
 8006b0c:	16009600 	.word	0x16009600
 8006b10:	58025880 	.word	0x58025880
 8006b14:	aaaaaaab 	.word	0xaaaaaaab
 8006b18:	400204b8 	.word	0x400204b8
 8006b1c:	4002040f 	.word	0x4002040f
 8006b20:	10008200 	.word	0x10008200
 8006b24:	40020880 	.word	0x40020880

08006b28 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d04a      	beq.n	8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d847      	bhi.n	8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a25      	ldr	r2, [pc, #148]	@ (8006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d022      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a24      	ldr	r2, [pc, #144]	@ (8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d01d      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a22      	ldr	r2, [pc, #136]	@ (8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d018      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a21      	ldr	r2, [pc, #132]	@ (8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d101      	bne.n	8006b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4b17      	ldr	r3, [pc, #92]	@ (8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006bb0:	671a      	str	r2, [r3, #112]	@ 0x70
 8006bb2:	e009      	b.n	8006bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4b14      	ldr	r3, [pc, #80]	@ (8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a11      	ldr	r2, [pc, #68]	@ (8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bc6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2201      	movs	r2, #1
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	58025408 	.word	0x58025408
 8006be4:	5802541c 	.word	0x5802541c
 8006be8:	58025430 	.word	0x58025430
 8006bec:	58025444 	.word	0x58025444
 8006bf0:	58025458 	.word	0x58025458
 8006bf4:	5802546c 	.word	0x5802546c
 8006bf8:	58025480 	.word	0x58025480
 8006bfc:	58025494 	.word	0x58025494
 8006c00:	1600963f 	.word	0x1600963f
 8006c04:	58025940 	.word	0x58025940
 8006c08:	1000823f 	.word	0x1000823f
 8006c0c:	40020940 	.word	0x40020940

08006c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b089      	sub	sp, #36	@ 0x24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c1e:	4b86      	ldr	r3, [pc, #536]	@ (8006e38 <HAL_GPIO_Init+0x228>)
 8006c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c22:	e18c      	b.n	8006f3e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2101      	movs	r1, #1
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 817e 	beq.w	8006f38 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d005      	beq.n	8006c54 <HAL_GPIO_Init+0x44>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d130      	bne.n	8006cb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	2203      	movs	r2, #3
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	43db      	mvns	r3, r3
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	4013      	ands	r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	f003 0201 	and.w	r2, r3, #1
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d017      	beq.n	8006cf2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	2203      	movs	r2, #3
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d123      	bne.n	8006d46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	08da      	lsrs	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3208      	adds	r2, #8
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	220f      	movs	r2, #15
 8006d16:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	08da      	lsrs	r2, r3, #3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3208      	adds	r2, #8
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	2203      	movs	r2, #3
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 0203 	and.w	r2, r3, #3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80d8 	beq.w	8006f38 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d88:	4b2c      	ldr	r3, [pc, #176]	@ (8006e3c <HAL_GPIO_Init+0x22c>)
 8006d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8006e3c <HAL_GPIO_Init+0x22c>)
 8006d90:	f043 0302 	orr.w	r3, r3, #2
 8006d94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006d98:	4b28      	ldr	r3, [pc, #160]	@ (8006e3c <HAL_GPIO_Init+0x22c>)
 8006d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006da6:	4a26      	ldr	r2, [pc, #152]	@ (8006e40 <HAL_GPIO_Init+0x230>)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	089b      	lsrs	r3, r3, #2
 8006dac:	3302      	adds	r3, #2
 8006dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	220f      	movs	r2, #15
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e44 <HAL_GPIO_Init+0x234>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d04a      	beq.n	8006e68 <HAL_GPIO_Init+0x258>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e48 <HAL_GPIO_Init+0x238>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d02b      	beq.n	8006e32 <HAL_GPIO_Init+0x222>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e4c <HAL_GPIO_Init+0x23c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d025      	beq.n	8006e2e <HAL_GPIO_Init+0x21e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e50 <HAL_GPIO_Init+0x240>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01f      	beq.n	8006e2a <HAL_GPIO_Init+0x21a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a19      	ldr	r2, [pc, #100]	@ (8006e54 <HAL_GPIO_Init+0x244>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d019      	beq.n	8006e26 <HAL_GPIO_Init+0x216>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a18      	ldr	r2, [pc, #96]	@ (8006e58 <HAL_GPIO_Init+0x248>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_GPIO_Init+0x212>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a17      	ldr	r2, [pc, #92]	@ (8006e5c <HAL_GPIO_Init+0x24c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00d      	beq.n	8006e1e <HAL_GPIO_Init+0x20e>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <HAL_GPIO_Init+0x250>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d007      	beq.n	8006e1a <HAL_GPIO_Init+0x20a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a15      	ldr	r2, [pc, #84]	@ (8006e64 <HAL_GPIO_Init+0x254>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d101      	bne.n	8006e16 <HAL_GPIO_Init+0x206>
 8006e12:	2309      	movs	r3, #9
 8006e14:	e029      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e16:	230a      	movs	r3, #10
 8006e18:	e027      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e1a:	2307      	movs	r3, #7
 8006e1c:	e025      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e1e:	2306      	movs	r3, #6
 8006e20:	e023      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e22:	2305      	movs	r3, #5
 8006e24:	e021      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e26:	2304      	movs	r3, #4
 8006e28:	e01f      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e01d      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e01b      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e019      	b.n	8006e6a <HAL_GPIO_Init+0x25a>
 8006e36:	bf00      	nop
 8006e38:	58000080 	.word	0x58000080
 8006e3c:	58024400 	.word	0x58024400
 8006e40:	58000400 	.word	0x58000400
 8006e44:	58020000 	.word	0x58020000
 8006e48:	58020400 	.word	0x58020400
 8006e4c:	58020800 	.word	0x58020800
 8006e50:	58020c00 	.word	0x58020c00
 8006e54:	58021000 	.word	0x58021000
 8006e58:	58021400 	.word	0x58021400
 8006e5c:	58021800 	.word	0x58021800
 8006e60:	58021c00 	.word	0x58021c00
 8006e64:	58022400 	.word	0x58022400
 8006e68:	2300      	movs	r3, #0
 8006e6a:	69fa      	ldr	r2, [r7, #28]
 8006e6c:	f002 0203 	and.w	r2, r2, #3
 8006e70:	0092      	lsls	r2, r2, #2
 8006e72:	4093      	lsls	r3, r2
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e7a:	4938      	ldr	r1, [pc, #224]	@ (8006f5c <HAL_GPIO_Init+0x34c>)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	089b      	lsrs	r3, r3, #2
 8006e80:	3302      	adds	r3, #2
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	43db      	mvns	r3, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4013      	ands	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	43db      	mvns	r3, r3
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f47f ae6b 	bne.w	8006c24 <HAL_GPIO_Init+0x14>
  }
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	3724      	adds	r7, #36	@ 0x24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	58000400 	.word	0x58000400

08006f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	807b      	strh	r3, [r7, #2]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f70:	787b      	ldrb	r3, [r7, #1]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f76:	887a      	ldrh	r2, [r7, #2]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f7c:	e003      	b.n	8006f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f7e:	887b      	ldrh	r3, [r7, #2]
 8006f80:	041a      	lsls	r2, r3, #16
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	619a      	str	r2, [r3, #24]
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b082      	sub	sp, #8
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	4603      	mov	r3, r0
 8006f9a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fb0:	88fb      	ldrh	r3, [r7, #6]
 8006fb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f804 	bl	8006fc6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006fbe:	bf00      	nop
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	4603      	mov	r3, r0
 8006fce:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006fe4:	4b19      	ldr	r3, [pc, #100]	@ (800704c <HAL_PWREx_ConfigSupply+0x70>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d00a      	beq.n	8007006 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006ff0:	4b16      	ldr	r3, [pc, #88]	@ (800704c <HAL_PWREx_ConfigSupply+0x70>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d001      	beq.n	8007002 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e01f      	b.n	8007042 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e01d      	b.n	8007042 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007006:	4b11      	ldr	r3, [pc, #68]	@ (800704c <HAL_PWREx_ConfigSupply+0x70>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f023 0207 	bic.w	r2, r3, #7
 800700e:	490f      	ldr	r1, [pc, #60]	@ (800704c <HAL_PWREx_ConfigSupply+0x70>)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4313      	orrs	r3, r2
 8007014:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007016:	f7fc fe77 	bl	8003d08 <HAL_GetTick>
 800701a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800701c:	e009      	b.n	8007032 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800701e:	f7fc fe73 	bl	8003d08 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800702c:	d901      	bls.n	8007032 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e007      	b.n	8007042 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_PWREx_ConfigSupply+0x70>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800703a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800703e:	d1ee      	bne.n	800701e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	58024800 	.word	0x58024800

08007050 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b08c      	sub	sp, #48	@ 0x30
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e3c8      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8087 	beq.w	800717e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007070:	4b88      	ldr	r3, [pc, #544]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800707a:	4b86      	ldr	r3, [pc, #536]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007082:	2b10      	cmp	r3, #16
 8007084:	d007      	beq.n	8007096 <HAL_RCC_OscConfig+0x46>
 8007086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007088:	2b18      	cmp	r3, #24
 800708a:	d110      	bne.n	80070ae <HAL_RCC_OscConfig+0x5e>
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d10b      	bne.n	80070ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007096:	4b7f      	ldr	r3, [pc, #508]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d06c      	beq.n	800717c <HAL_RCC_OscConfig+0x12c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d168      	bne.n	800717c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e3a2      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070b6:	d106      	bne.n	80070c6 <HAL_RCC_OscConfig+0x76>
 80070b8:	4b76      	ldr	r3, [pc, #472]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a75      	ldr	r2, [pc, #468]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	e02e      	b.n	8007124 <HAL_RCC_OscConfig+0xd4>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10c      	bne.n	80070e8 <HAL_RCC_OscConfig+0x98>
 80070ce:	4b71      	ldr	r3, [pc, #452]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a70      	ldr	r2, [pc, #448]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	4b6e      	ldr	r3, [pc, #440]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a6d      	ldr	r2, [pc, #436]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e01d      	b.n	8007124 <HAL_RCC_OscConfig+0xd4>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070f0:	d10c      	bne.n	800710c <HAL_RCC_OscConfig+0xbc>
 80070f2:	4b68      	ldr	r3, [pc, #416]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a67      	ldr	r2, [pc, #412]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80070f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	4b65      	ldr	r3, [pc, #404]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a64      	ldr	r2, [pc, #400]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e00b      	b.n	8007124 <HAL_RCC_OscConfig+0xd4>
 800710c:	4b61      	ldr	r3, [pc, #388]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a60      	ldr	r2, [pc, #384]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	4b5e      	ldr	r3, [pc, #376]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a5d      	ldr	r2, [pc, #372]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800711e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fc fdec 	bl	8003d08 <HAL_GetTick>
 8007130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007134:	f7fc fde8 	bl	8003d08 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b64      	cmp	r3, #100	@ 0x64
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e356      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007146:	4b53      	ldr	r3, [pc, #332]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0f0      	beq.n	8007134 <HAL_RCC_OscConfig+0xe4>
 8007152:	e014      	b.n	800717e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007154:	f7fc fdd8 	bl	8003d08 <HAL_GetTick>
 8007158:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800715c:	f7fc fdd4 	bl	8003d08 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	@ 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e342      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800716e:	4b49      	ldr	r3, [pc, #292]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x10c>
 800717a:	e000      	b.n	800717e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800717c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 808c 	beq.w	80072a4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800718c:	4b41      	ldr	r3, [pc, #260]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007194:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007196:	4b3f      	ldr	r3, [pc, #252]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <HAL_RCC_OscConfig+0x162>
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	2b18      	cmp	r3, #24
 80071a6:	d137      	bne.n	8007218 <HAL_RCC_OscConfig+0x1c8>
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d132      	bne.n	8007218 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071b2:	4b38      	ldr	r3, [pc, #224]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <HAL_RCC_OscConfig+0x17a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e314      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071ca:	4b32      	ldr	r3, [pc, #200]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 0219 	bic.w	r2, r3, #25
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	492f      	ldr	r1, [pc, #188]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071dc:	f7fc fd94 	bl	8003d08 <HAL_GetTick>
 80071e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071e4:	f7fc fd90 	bl	8003d08 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e2fe      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071f6:	4b27      	ldr	r3, [pc, #156]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0f0      	beq.n	80071e4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007202:	4b24      	ldr	r3, [pc, #144]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	061b      	lsls	r3, r3, #24
 8007210:	4920      	ldr	r1, [pc, #128]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007212:	4313      	orrs	r3, r2
 8007214:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007216:	e045      	b.n	80072a4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d026      	beq.n	800726e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007220:	4b1c      	ldr	r3, [pc, #112]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f023 0219 	bic.w	r2, r3, #25
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4919      	ldr	r1, [pc, #100]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007232:	f7fc fd69 	bl	8003d08 <HAL_GetTick>
 8007236:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800723a:	f7fc fd65 	bl	8003d08 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e2d3      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800724c:	4b11      	ldr	r3, [pc, #68]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0f0      	beq.n	800723a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007258:	4b0e      	ldr	r3, [pc, #56]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	061b      	lsls	r3, r3, #24
 8007266:	490b      	ldr	r1, [pc, #44]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]
 800726c:	e01a      	b.n	80072a4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800726e:	4b09      	ldr	r3, [pc, #36]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a08      	ldr	r2, [pc, #32]	@ (8007294 <HAL_RCC_OscConfig+0x244>)
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727a:	f7fc fd45 	bl	8003d08 <HAL_GetTick>
 800727e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007280:	e00a      	b.n	8007298 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007282:	f7fc fd41 	bl	8003d08 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	2b02      	cmp	r3, #2
 800728e:	d903      	bls.n	8007298 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e2af      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
 8007294:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007298:	4b96      	ldr	r3, [pc, #600]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1ee      	bne.n	8007282 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d06a      	beq.n	8007386 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072b0:	4b90      	ldr	r3, [pc, #576]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072b8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072ba:	4b8e      	ldr	r3, [pc, #568]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80072bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072be:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d007      	beq.n	80072d6 <HAL_RCC_OscConfig+0x286>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b18      	cmp	r3, #24
 80072ca:	d11b      	bne.n	8007304 <HAL_RCC_OscConfig+0x2b4>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d116      	bne.n	8007304 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072d6:	4b87      	ldr	r3, [pc, #540]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <HAL_RCC_OscConfig+0x29e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	2b80      	cmp	r3, #128	@ 0x80
 80072e8:	d001      	beq.n	80072ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e282      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072ee:	4b81      	ldr	r3, [pc, #516]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	061b      	lsls	r3, r3, #24
 80072fc:	497d      	ldr	r1, [pc, #500]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007302:	e040      	b.n	8007386 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d023      	beq.n	8007354 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800730c:	4b79      	ldr	r3, [pc, #484]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a78      	ldr	r2, [pc, #480]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 8007312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007318:	f7fc fcf6 	bl	8003d08 <HAL_GetTick>
 800731c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800731e:	e008      	b.n	8007332 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007320:	f7fc fcf2 	bl	8003d08 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e260      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007332:	4b70      	ldr	r3, [pc, #448]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0f0      	beq.n	8007320 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800733e:	4b6d      	ldr	r3, [pc, #436]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	4969      	ldr	r1, [pc, #420]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800734e:	4313      	orrs	r3, r2
 8007350:	60cb      	str	r3, [r1, #12]
 8007352:	e018      	b.n	8007386 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007354:	4b67      	ldr	r3, [pc, #412]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a66      	ldr	r2, [pc, #408]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800735a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800735e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fc fcd2 	bl	8003d08 <HAL_GetTick>
 8007364:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007368:	f7fc fcce 	bl	8003d08 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e23c      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800737a:	4b5e      	ldr	r3, [pc, #376]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f0      	bne.n	8007368 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d036      	beq.n	8007400 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d019      	beq.n	80073ce <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800739a:	4b56      	ldr	r3, [pc, #344]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800739c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800739e:	4a55      	ldr	r2, [pc, #340]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a6:	f7fc fcaf 	bl	8003d08 <HAL_GetTick>
 80073aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073ac:	e008      	b.n	80073c0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ae:	f7fc fcab 	bl	8003d08 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e219      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073c0:	4b4c      	ldr	r3, [pc, #304]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80073c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0f0      	beq.n	80073ae <HAL_RCC_OscConfig+0x35e>
 80073cc:	e018      	b.n	8007400 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ce:	4b49      	ldr	r3, [pc, #292]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80073d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073d2:	4a48      	ldr	r2, [pc, #288]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073da:	f7fc fc95 	bl	8003d08 <HAL_GetTick>
 80073de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073e2:	f7fc fc91 	bl	8003d08 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e1ff      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073f4:	4b3f      	ldr	r3, [pc, #252]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80073f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f0      	bne.n	80073e2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d036      	beq.n	800747a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d019      	beq.n	8007448 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007414:	4b37      	ldr	r3, [pc, #220]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a36      	ldr	r2, [pc, #216]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800741a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800741e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007420:	f7fc fc72 	bl	8003d08 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007428:	f7fc fc6e 	bl	8003d08 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e1dc      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800743a:	4b2e      	ldr	r3, [pc, #184]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0x3d8>
 8007446:	e018      	b.n	800747a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007448:	4b2a      	ldr	r3, [pc, #168]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a29      	ldr	r2, [pc, #164]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 800744e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007452:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007454:	f7fc fc58 	bl	8003d08 <HAL_GetTick>
 8007458:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800745c:	f7fc fc54 	bl	8003d08 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e1c2      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800746e:	4b21      	ldr	r3, [pc, #132]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f0      	bne.n	800745c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8086 	beq.w	8007594 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007488:	4b1b      	ldr	r3, [pc, #108]	@ (80074f8 <HAL_RCC_OscConfig+0x4a8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1a      	ldr	r2, [pc, #104]	@ (80074f8 <HAL_RCC_OscConfig+0x4a8>)
 800748e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007492:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007494:	f7fc fc38 	bl	8003d08 <HAL_GetTick>
 8007498:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749c:	f7fc fc34 	bl	8003d08 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b64      	cmp	r3, #100	@ 0x64
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e1a2      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ae:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <HAL_RCC_OscConfig+0x4a8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d106      	bne.n	80074d0 <HAL_RCC_OscConfig+0x480>
 80074c2:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c6:	4a0b      	ldr	r2, [pc, #44]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ce:	e032      	b.n	8007536 <HAL_RCC_OscConfig+0x4e6>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d111      	bne.n	80074fc <HAL_RCC_OscConfig+0x4ac>
 80074d8:	4b06      	ldr	r3, [pc, #24]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074dc:	4a05      	ldr	r2, [pc, #20]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80074de:	f023 0301 	bic.w	r3, r3, #1
 80074e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80074e4:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e8:	4a02      	ldr	r2, [pc, #8]	@ (80074f4 <HAL_RCC_OscConfig+0x4a4>)
 80074ea:	f023 0304 	bic.w	r3, r3, #4
 80074ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80074f0:	e021      	b.n	8007536 <HAL_RCC_OscConfig+0x4e6>
 80074f2:	bf00      	nop
 80074f4:	58024400 	.word	0x58024400
 80074f8:	58024800 	.word	0x58024800
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b05      	cmp	r3, #5
 8007502:	d10c      	bne.n	800751e <HAL_RCC_OscConfig+0x4ce>
 8007504:	4b83      	ldr	r3, [pc, #524]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007508:	4a82      	ldr	r2, [pc, #520]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800750a:	f043 0304 	orr.w	r3, r3, #4
 800750e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007510:	4b80      	ldr	r3, [pc, #512]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007514:	4a7f      	ldr	r2, [pc, #508]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	6713      	str	r3, [r2, #112]	@ 0x70
 800751c:	e00b      	b.n	8007536 <HAL_RCC_OscConfig+0x4e6>
 800751e:	4b7d      	ldr	r3, [pc, #500]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007522:	4a7c      	ldr	r2, [pc, #496]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007524:	f023 0301 	bic.w	r3, r3, #1
 8007528:	6713      	str	r3, [r2, #112]	@ 0x70
 800752a:	4b7a      	ldr	r3, [pc, #488]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752e:	4a79      	ldr	r2, [pc, #484]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007530:	f023 0304 	bic.w	r3, r3, #4
 8007534:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d015      	beq.n	800756a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800753e:	f7fc fbe3 	bl	8003d08 <HAL_GetTick>
 8007542:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007544:	e00a      	b.n	800755c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007546:	f7fc fbdf 	bl	8003d08 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e14b      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800755c:	4b6d      	ldr	r3, [pc, #436]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ee      	beq.n	8007546 <HAL_RCC_OscConfig+0x4f6>
 8007568:	e014      	b.n	8007594 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756a:	f7fc fbcd 	bl	8003d08 <HAL_GetTick>
 800756e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007570:	e00a      	b.n	8007588 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007572:	f7fc fbc9 	bl	8003d08 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e135      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007588:	4b62      	ldr	r3, [pc, #392]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1ee      	bne.n	8007572 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 812a 	beq.w	80077f2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800759e:	4b5d      	ldr	r3, [pc, #372]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075a6:	2b18      	cmp	r3, #24
 80075a8:	f000 80ba 	beq.w	8007720 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f040 8095 	bne.w	80076e0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b6:	4b57      	ldr	r3, [pc, #348]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a56      	ldr	r2, [pc, #344]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80075bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c2:	f7fc fba1 	bl	8003d08 <HAL_GetTick>
 80075c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075c8:	e008      	b.n	80075dc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ca:	f7fc fb9d 	bl	8003d08 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d901      	bls.n	80075dc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e10b      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1f0      	bne.n	80075ca <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80075ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075ec:	4b4a      	ldr	r3, [pc, #296]	@ (8007718 <HAL_RCC_OscConfig+0x6c8>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80075f8:	0112      	lsls	r2, r2, #4
 80075fa:	430a      	orrs	r2, r1
 80075fc:	4945      	ldr	r1, [pc, #276]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	628b      	str	r3, [r1, #40]	@ 0x28
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007606:	3b01      	subs	r3, #1
 8007608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007610:	3b01      	subs	r3, #1
 8007612:	025b      	lsls	r3, r3, #9
 8007614:	b29b      	uxth	r3, r3
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761c:	3b01      	subs	r3, #1
 800761e:	041b      	lsls	r3, r3, #16
 8007620:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800762a:	3b01      	subs	r3, #1
 800762c:	061b      	lsls	r3, r3, #24
 800762e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007632:	4938      	ldr	r1, [pc, #224]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007634:	4313      	orrs	r3, r2
 8007636:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007638:	4b36      	ldr	r3, [pc, #216]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800763a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763c:	4a35      	ldr	r2, [pc, #212]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007644:	4b33      	ldr	r3, [pc, #204]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007648:	4b34      	ldr	r3, [pc, #208]	@ (800771c <HAL_RCC_OscConfig+0x6cc>)
 800764a:	4013      	ands	r3, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007650:	00d2      	lsls	r2, r2, #3
 8007652:	4930      	ldr	r1, [pc, #192]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007654:	4313      	orrs	r3, r2
 8007656:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007658:	4b2e      	ldr	r3, [pc, #184]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	f023 020c 	bic.w	r2, r3, #12
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	492b      	ldr	r1, [pc, #172]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007666:	4313      	orrs	r3, r2
 8007668:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800766a:	4b2a      	ldr	r3, [pc, #168]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800766c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766e:	f023 0202 	bic.w	r2, r3, #2
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007676:	4927      	ldr	r1, [pc, #156]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007678:	4313      	orrs	r3, r2
 800767a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800767c:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4a24      	ldr	r2, [pc, #144]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007688:	4b22      	ldr	r3, [pc, #136]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	4a21      	ldr	r2, [pc, #132]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800768e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007694:	4b1f      	ldr	r3, [pc, #124]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	4a1e      	ldr	r2, [pc, #120]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 800769a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800769e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076a6:	f043 0301 	orr.w	r3, r3, #1
 80076aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076ac:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a18      	ldr	r2, [pc, #96]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fc fb26 	bl	8003d08 <HAL_GetTick>
 80076bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c0:	f7fc fb22 	bl	8003d08 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e090      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d2:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0x670>
 80076de:	e088      	b.n	80077f2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 80076e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fc fb0c 	bl	8003d08 <HAL_GetTick>
 80076f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f4:	f7fc fb08 	bl	8003d08 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e076      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007706:	4b03      	ldr	r3, [pc, #12]	@ (8007714 <HAL_RCC_OscConfig+0x6c4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f0      	bne.n	80076f4 <HAL_RCC_OscConfig+0x6a4>
 8007712:	e06e      	b.n	80077f2 <HAL_RCC_OscConfig+0x7a2>
 8007714:	58024400 	.word	0x58024400
 8007718:	fffffc0c 	.word	0xfffffc0c
 800771c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007720:	4b36      	ldr	r3, [pc, #216]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007724:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007726:	4b35      	ldr	r3, [pc, #212]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800772a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	2b01      	cmp	r3, #1
 8007732:	d031      	beq.n	8007798 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f003 0203 	and.w	r2, r3, #3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800773e:	429a      	cmp	r2, r3
 8007740:	d12a      	bne.n	8007798 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	091b      	lsrs	r3, r3, #4
 8007746:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774e:	429a      	cmp	r2, r3
 8007750:	d122      	bne.n	8007798 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800775e:	429a      	cmp	r2, r3
 8007760:	d11a      	bne.n	8007798 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0a5b      	lsrs	r3, r3, #9
 8007766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800776e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007770:	429a      	cmp	r2, r3
 8007772:	d111      	bne.n	8007798 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	0c1b      	lsrs	r3, r3, #16
 8007778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007782:	429a      	cmp	r2, r3
 8007784:	d108      	bne.n	8007798 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	0e1b      	lsrs	r3, r3, #24
 800778a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007792:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007794:	429a      	cmp	r2, r3
 8007796:	d001      	beq.n	800779c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e02b      	b.n	80077f4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800779c:	4b17      	ldr	r3, [pc, #92]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 800779e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a0:	08db      	lsrs	r3, r3, #3
 80077a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d01f      	beq.n	80077f2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80077b2:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a11      	ldr	r2, [pc, #68]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077be:	f7fc faa3 	bl	8003d08 <HAL_GetTick>
 80077c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80077c4:	bf00      	nop
 80077c6:	f7fc fa9f 	bl	8003d08 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d0f9      	beq.n	80077c6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 80077d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007800 <HAL_RCC_OscConfig+0x7b0>)
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077de:	00d2      	lsls	r2, r2, #3
 80077e0:	4906      	ldr	r1, [pc, #24]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80077e6:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 80077e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ea:	4a04      	ldr	r2, [pc, #16]	@ (80077fc <HAL_RCC_OscConfig+0x7ac>)
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3730      	adds	r7, #48	@ 0x30
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	58024400 	.word	0x58024400
 8007800:	ffff0007 	.word	0xffff0007

08007804 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e19c      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007818:	4b8a      	ldr	r3, [pc, #552]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d910      	bls.n	8007848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007826:	4b87      	ldr	r3, [pc, #540]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f023 020f 	bic.w	r2, r3, #15
 800782e:	4985      	ldr	r1, [pc, #532]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	4313      	orrs	r3, r2
 8007834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007836:	4b83      	ldr	r3, [pc, #524]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d001      	beq.n	8007848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e184      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	4b7b      	ldr	r3, [pc, #492]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007860:	429a      	cmp	r2, r3
 8007862:	d908      	bls.n	8007876 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007864:	4b78      	ldr	r3, [pc, #480]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	4975      	ldr	r1, [pc, #468]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007872:	4313      	orrs	r3, r2
 8007874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d010      	beq.n	80078a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	4b70      	ldr	r3, [pc, #448]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800788e:	429a      	cmp	r2, r3
 8007890:	d908      	bls.n	80078a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007892:	4b6d      	ldr	r3, [pc, #436]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	496a      	ldr	r1, [pc, #424]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d010      	beq.n	80078d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	4b64      	ldr	r3, [pc, #400]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078bc:	429a      	cmp	r2, r3
 80078be:	d908      	bls.n	80078d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078c0:	4b61      	ldr	r3, [pc, #388]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	495e      	ldr	r1, [pc, #376]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	69da      	ldr	r2, [r3, #28]
 80078e2:	4b59      	ldr	r3, [pc, #356]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d908      	bls.n	8007900 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078ee:	4b56      	ldr	r3, [pc, #344]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	4953      	ldr	r1, [pc, #332]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d010      	beq.n	800792e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	4b4d      	ldr	r3, [pc, #308]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	429a      	cmp	r2, r3
 800791a:	d908      	bls.n	800792e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800791c:	4b4a      	ldr	r3, [pc, #296]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f023 020f 	bic.w	r2, r3, #15
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	4947      	ldr	r1, [pc, #284]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 800792a:	4313      	orrs	r3, r2
 800792c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d055      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800793a:	4b43      	ldr	r3, [pc, #268]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	4940      	ldr	r1, [pc, #256]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007948:	4313      	orrs	r3, r2
 800794a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d107      	bne.n	8007964 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007954:	4b3c      	ldr	r3, [pc, #240]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d121      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e0f6      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d107      	bne.n	800797c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800796c:	4b36      	ldr	r3, [pc, #216]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d115      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e0ea      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d107      	bne.n	8007994 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007984:	4b30      	ldr	r3, [pc, #192]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0de      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007994:	4b2c      	ldr	r3, [pc, #176]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e0d6      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079a4:	4b28      	ldr	r3, [pc, #160]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	f023 0207 	bic.w	r2, r3, #7
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4925      	ldr	r1, [pc, #148]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b6:	f7fc f9a7 	bl	8003d08 <HAL_GetTick>
 80079ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079bc:	e00a      	b.n	80079d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079be:	f7fc f9a3 	bl	8003d08 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d901      	bls.n	80079d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e0be      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d1eb      	bne.n	80079be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d010      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	4b14      	ldr	r3, [pc, #80]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d208      	bcs.n	8007a14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a02:	4b11      	ldr	r3, [pc, #68]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f023 020f 	bic.w	r2, r3, #15
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	490e      	ldr	r1, [pc, #56]	@ (8007a48 <HAL_RCC_ClockConfig+0x244>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a14:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d214      	bcs.n	8007a4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a22:	4b08      	ldr	r3, [pc, #32]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f023 020f 	bic.w	r2, r3, #15
 8007a2a:	4906      	ldr	r1, [pc, #24]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a32:	4b04      	ldr	r3, [pc, #16]	@ (8007a44 <HAL_RCC_ClockConfig+0x240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d005      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e086      	b.n	8007b52 <HAL_RCC_ClockConfig+0x34e>
 8007a44:	52002000 	.word	0x52002000
 8007a48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d208      	bcs.n	8007a7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a68:	4b3c      	ldr	r3, [pc, #240]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	4939      	ldr	r1, [pc, #228]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d010      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	4b34      	ldr	r3, [pc, #208]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d208      	bcs.n	8007aa8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a96:	4b31      	ldr	r3, [pc, #196]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	492e      	ldr	r1, [pc, #184]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d010      	beq.n	8007ad6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	4b28      	ldr	r3, [pc, #160]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d208      	bcs.n	8007ad6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ac4:	4b25      	ldr	r3, [pc, #148]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	4922      	ldr	r1, [pc, #136]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d010      	beq.n	8007b04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	69da      	ldr	r2, [r3, #28]
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d208      	bcs.n	8007b04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007af2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	4917      	ldr	r1, [pc, #92]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b04:	f000 f834 	bl	8007b70 <HAL_RCC_GetSysClockFreq>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	4912      	ldr	r1, [pc, #72]	@ (8007b60 <HAL_RCC_ClockConfig+0x35c>)
 8007b16:	5ccb      	ldrb	r3, [r1, r3]
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b22:	4b0e      	ldr	r3, [pc, #56]	@ (8007b5c <HAL_RCC_ClockConfig+0x358>)
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8007b60 <HAL_RCC_ClockConfig+0x35c>)
 8007b2c:	5cd3      	ldrb	r3, [r2, r3]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	4a0a      	ldr	r2, [pc, #40]	@ (8007b64 <HAL_RCC_ClockConfig+0x360>)
 8007b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b68 <HAL_RCC_ClockConfig+0x364>)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b42:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <HAL_RCC_ClockConfig+0x368>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fc f894 	bl	8003c74 <HAL_InitTick>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	58024400 	.word	0x58024400
 8007b60:	0800f048 	.word	0x0800f048
 8007b64:	24000010 	.word	0x24000010
 8007b68:	2400000c 	.word	0x2400000c
 8007b6c:	24000014 	.word	0x24000014

08007b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b089      	sub	sp, #36	@ 0x24
 8007b74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b76:	4bb3      	ldr	r3, [pc, #716]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b7e:	2b18      	cmp	r3, #24
 8007b80:	f200 8155 	bhi.w	8007e2e <HAL_RCC_GetSysClockFreq+0x2be>
 8007b84:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007bf1 	.word	0x08007bf1
 8007b90:	08007e2f 	.word	0x08007e2f
 8007b94:	08007e2f 	.word	0x08007e2f
 8007b98:	08007e2f 	.word	0x08007e2f
 8007b9c:	08007e2f 	.word	0x08007e2f
 8007ba0:	08007e2f 	.word	0x08007e2f
 8007ba4:	08007e2f 	.word	0x08007e2f
 8007ba8:	08007e2f 	.word	0x08007e2f
 8007bac:	08007c17 	.word	0x08007c17
 8007bb0:	08007e2f 	.word	0x08007e2f
 8007bb4:	08007e2f 	.word	0x08007e2f
 8007bb8:	08007e2f 	.word	0x08007e2f
 8007bbc:	08007e2f 	.word	0x08007e2f
 8007bc0:	08007e2f 	.word	0x08007e2f
 8007bc4:	08007e2f 	.word	0x08007e2f
 8007bc8:	08007e2f 	.word	0x08007e2f
 8007bcc:	08007c1d 	.word	0x08007c1d
 8007bd0:	08007e2f 	.word	0x08007e2f
 8007bd4:	08007e2f 	.word	0x08007e2f
 8007bd8:	08007e2f 	.word	0x08007e2f
 8007bdc:	08007e2f 	.word	0x08007e2f
 8007be0:	08007e2f 	.word	0x08007e2f
 8007be4:	08007e2f 	.word	0x08007e2f
 8007be8:	08007e2f 	.word	0x08007e2f
 8007bec:	08007c23 	.word	0x08007c23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf0:	4b94      	ldr	r3, [pc, #592]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bfc:	4b91      	ldr	r3, [pc, #580]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	08db      	lsrs	r3, r3, #3
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	4a90      	ldr	r2, [pc, #576]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c08:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c0e:	e111      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c10:	4b8d      	ldr	r3, [pc, #564]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c12:	61bb      	str	r3, [r7, #24]
      break;
 8007c14:	e10e      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c16:	4b8d      	ldr	r3, [pc, #564]	@ (8007e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c18:	61bb      	str	r3, [r7, #24]
      break;
 8007c1a:	e10b      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8007e50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c1e:	61bb      	str	r3, [r7, #24]
      break;
 8007c20:	e108      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c22:	4b88      	ldr	r3, [pc, #544]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c2c:	4b85      	ldr	r3, [pc, #532]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c30:	091b      	lsrs	r3, r3, #4
 8007c32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c38:	4b82      	ldr	r3, [pc, #520]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c42:	4b80      	ldr	r3, [pc, #512]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c46:	08db      	lsrs	r3, r3, #3
 8007c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 80e1 	beq.w	8007e28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	f000 8083 	beq.w	8007d74 <HAL_RCC_GetSysClockFreq+0x204>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	f200 80a1 	bhi.w	8007db8 <HAL_RCC_GetSysClockFreq+0x248>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0x114>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d056      	beq.n	8007d30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c82:	e099      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c84:	4b6f      	ldr	r3, [pc, #444]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d02d      	beq.n	8007cec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c90:	4b6c      	ldr	r3, [pc, #432]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	08db      	lsrs	r3, r3, #3
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	4a6b      	ldr	r2, [pc, #428]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cba:	4b62      	ldr	r3, [pc, #392]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cca:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007cea:	e087      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfe:	4b51      	ldr	r3, [pc, #324]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d2e:	e065      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d42:	4b40      	ldr	r3, [pc, #256]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d72:	e043      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d86:	4b2f      	ldr	r3, [pc, #188]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007db6:	e021      	b.n	8007dfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dca:	4b1e      	ldr	r3, [pc, #120]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007dfc:	4b11      	ldr	r3, [pc, #68]	@ (8007e44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e00:	0a5b      	lsrs	r3, r3, #9
 8007e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e06:	3301      	adds	r3, #1
 8007e08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e20:	ee17 3a90 	vmov	r3, s15
 8007e24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e26:	e005      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
      break;
 8007e2c:	e002      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e2e:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e30:	61bb      	str	r3, [r7, #24]
      break;
 8007e32:	bf00      	nop
  }

  return sysclockfreq;
 8007e34:	69bb      	ldr	r3, [r7, #24]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3724      	adds	r7, #36	@ 0x24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	58024400 	.word	0x58024400
 8007e48:	03d09000 	.word	0x03d09000
 8007e4c:	003d0900 	.word	0x003d0900
 8007e50:	007f2815 	.word	0x007f2815
 8007e54:	46000000 	.word	0x46000000
 8007e58:	4c742400 	.word	0x4c742400
 8007e5c:	4a742400 	.word	0x4a742400
 8007e60:	4afe502a 	.word	0x4afe502a

08007e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e6a:	f7ff fe81 	bl	8007b70 <HAL_RCC_GetSysClockFreq>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	0a1b      	lsrs	r3, r3, #8
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	490f      	ldr	r1, [pc, #60]	@ (8007eb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e7c:	5ccb      	ldrb	r3, [r1, r3]
 8007e7e:	f003 031f 	and.w	r3, r3, #31
 8007e82:	fa22 f303 	lsr.w	r3, r2, r3
 8007e86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e88:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	4a09      	ldr	r2, [pc, #36]	@ (8007eb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e92:	5cd3      	ldrb	r3, [r2, r3]
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	4a07      	ldr	r2, [pc, #28]	@ (8007ebc <HAL_RCC_GetHCLKFreq+0x58>)
 8007ea0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ea2:	4a07      	ldr	r2, [pc, #28]	@ (8007ec0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ea8:	4b04      	ldr	r3, [pc, #16]	@ (8007ebc <HAL_RCC_GetHCLKFreq+0x58>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	0800f048 	.word	0x0800f048
 8007ebc:	24000010 	.word	0x24000010
 8007ec0:	2400000c 	.word	0x2400000c

08007ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ec8:	f7ff ffcc 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	4b06      	ldr	r3, [pc, #24]	@ (8007ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	091b      	lsrs	r3, r3, #4
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	4904      	ldr	r1, [pc, #16]	@ (8007eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8007eda:	5ccb      	ldrb	r3, [r1, r3]
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	58024400 	.word	0x58024400
 8007eec:	0800f048 	.word	0x0800f048

08007ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ef4:	f7ff ffb6 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	4b06      	ldr	r3, [pc, #24]	@ (8007f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	4904      	ldr	r1, [pc, #16]	@ (8007f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f06:	5ccb      	ldrb	r3, [r1, r3]
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	58024400 	.word	0x58024400
 8007f18:	0800f048 	.word	0x0800f048

08007f1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f20:	b0c6      	sub	sp, #280	@ 0x118
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f40:	2500      	movs	r5, #0
 8007f42:	ea54 0305 	orrs.w	r3, r4, r5
 8007f46:	d049      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f52:	d02f      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f58:	d828      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f5e:	d01a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f64:	d822      	bhi.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f6e:	d007      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f70:	e01c      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f72:	4bab      	ldr	r3, [pc, #684]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	4aaa      	ldr	r2, [pc, #680]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f7e:	e01a      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f84:	3308      	adds	r3, #8
 8007f86:	2102      	movs	r1, #2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fc25 	bl	80097d8 <RCCEx_PLL2_Config>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f94:	e00f      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9a:	3328      	adds	r3, #40	@ 0x28
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f001 fccc 	bl	800993c <RCCEx_PLL3_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007faa:	e004      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fb2:	e000      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fbe:	4b98      	ldr	r3, [pc, #608]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fcc:	4a94      	ldr	r2, [pc, #592]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fd2:	e003      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007fe8:	f04f 0900 	mov.w	r9, #0
 8007fec:	ea58 0309 	orrs.w	r3, r8, r9
 8007ff0:	d047      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d82a      	bhi.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8008004 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	08008019 	.word	0x08008019
 8008008:	08008027 	.word	0x08008027
 800800c:	0800803d 	.word	0x0800803d
 8008010:	0800805b 	.word	0x0800805b
 8008014:	0800805b 	.word	0x0800805b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008018:	4b81      	ldr	r3, [pc, #516]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	4a80      	ldr	r2, [pc, #512]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800801e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008024:	e01a      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802a:	3308      	adds	r3, #8
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fbd2 	bl	80097d8 <RCCEx_PLL2_Config>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800803a:	e00f      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008040:	3328      	adds	r3, #40	@ 0x28
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f001 fc79 	bl	800993c <RCCEx_PLL3_Config>
 800804a:	4603      	mov	r3, r0
 800804c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008050:	e004      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008058:	e000      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800805a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008064:	4b6e      	ldr	r3, [pc, #440]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008068:	f023 0107 	bic.w	r1, r3, #7
 800806c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008072:	4a6b      	ldr	r2, [pc, #428]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6513      	str	r3, [r2, #80]	@ 0x50
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800807e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800808e:	f04f 0b00 	mov.w	fp, #0
 8008092:	ea5a 030b 	orrs.w	r3, sl, fp
 8008096:	d05b      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080a0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80080a4:	d03b      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80080a6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80080aa:	d834      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080b0:	d037      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80080b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080b6:	d82e      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080bc:	d033      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80080be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080c2:	d828      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080c8:	d01a      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80080ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080ce:	d822      	bhi.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80080d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080d8:	d007      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80080da:	e01c      	b.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080dc:	4b50      	ldr	r3, [pc, #320]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e0:	4a4f      	ldr	r2, [pc, #316]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080e8:	e01e      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080ee:	3308      	adds	r3, #8
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fb70 	bl	80097d8 <RCCEx_PLL2_Config>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080fe:	e013      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008104:	3328      	adds	r3, #40	@ 0x28
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fc17 	bl	800993c <RCCEx_PLL3_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008114:	e008      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800811c:	e004      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800811e:	bf00      	nop
 8008120:	e002      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008122:	bf00      	nop
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008130:	4b3b      	ldr	r3, [pc, #236]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008134:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008140:	4a37      	ldr	r2, [pc, #220]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008142:	430b      	orrs	r3, r1
 8008144:	6593      	str	r3, [r2, #88]	@ 0x58
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800814c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800815c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008166:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800816a:	460b      	mov	r3, r1
 800816c:	4313      	orrs	r3, r2
 800816e:	d05d      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008174:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008178:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800817c:	d03b      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800817e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008182:	d834      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008184:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008188:	d037      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800818a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800818e:	d82e      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008190:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008194:	d033      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008196:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800819a:	d828      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800819c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a0:	d01a      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80081a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081a6:	d822      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80081ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081b0:	d007      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80081b2:	e01c      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b8:	4a19      	ldr	r2, [pc, #100]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081c0:	e01e      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c6:	3308      	adds	r3, #8
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fb04 	bl	80097d8 <RCCEx_PLL2_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081d6:	e013      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081dc:	3328      	adds	r3, #40	@ 0x28
 80081de:	2100      	movs	r1, #0
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 fbab 	bl	800993c <RCCEx_PLL3_Config>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081ec:	e008      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081f4:	e004      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80081f6:	bf00      	nop
 80081f8:	e002      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80081fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10d      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008208:	4b05      	ldr	r3, [pc, #20]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800820a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008218:	4a01      	ldr	r2, [pc, #4]	@ (8008220 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800821a:	430b      	orrs	r3, r1
 800821c:	6593      	str	r3, [r2, #88]	@ 0x58
 800821e:	e005      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008220:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008228:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008238:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008242:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d03a      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008252:	2b30      	cmp	r3, #48	@ 0x30
 8008254:	d01f      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008256:	2b30      	cmp	r3, #48	@ 0x30
 8008258:	d819      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800825a:	2b20      	cmp	r3, #32
 800825c:	d00c      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800825e:	2b20      	cmp	r3, #32
 8008260:	d815      	bhi.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d019      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008266:	2b10      	cmp	r3, #16
 8008268:	d111      	bne.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826a:	4baa      	ldr	r3, [pc, #680]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800826c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826e:	4aa9      	ldr	r2, [pc, #676]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008276:	e011      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800827c:	3308      	adds	r3, #8
 800827e:	2102      	movs	r1, #2
 8008280:	4618      	mov	r0, r3
 8008282:	f001 faa9 	bl	80097d8 <RCCEx_PLL2_Config>
 8008286:	4603      	mov	r3, r0
 8008288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800828c:	e006      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008294:	e002      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008296:	bf00      	nop
 8008298:	e000      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800829a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b2:	4a98      	ldr	r2, [pc, #608]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082b4:	430b      	orrs	r3, r1
 80082b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082b8:	e003      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082dc:	460b      	mov	r3, r1
 80082de:	4313      	orrs	r3, r2
 80082e0:	d051      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082ec:	d035      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80082ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082f2:	d82e      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80082f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082f8:	d031      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80082fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082fe:	d828      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008304:	d01a      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800830a:	d822      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008310:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008314:	d007      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008316:	e01c      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008318:	4b7e      	ldr	r3, [pc, #504]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	4a7d      	ldr	r2, [pc, #500]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800831e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008324:	e01c      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832a:	3308      	adds	r3, #8
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f001 fa52 	bl	80097d8 <RCCEx_PLL2_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800833a:	e011      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800833c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008340:	3328      	adds	r3, #40	@ 0x28
 8008342:	2100      	movs	r1, #0
 8008344:	4618      	mov	r0, r3
 8008346:	f001 faf9 	bl	800993c <RCCEx_PLL3_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008350:	e006      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008358:	e002      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800835a:	bf00      	nop
 800835c:	e000      	b.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800835e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008368:	4b6a      	ldr	r3, [pc, #424]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800836a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800836c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008376:	4a67      	ldr	r2, [pc, #412]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008378:	430b      	orrs	r3, r1
 800837a:	6513      	str	r3, [r2, #80]	@ 0x50
 800837c:	e003      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800837e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008382:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008392:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008396:	2300      	movs	r3, #0
 8008398:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800839c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4313      	orrs	r3, r2
 80083a4:	d053      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083b0:	d033      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80083b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083b6:	d82c      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083bc:	d02f      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80083be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083c2:	d826      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083c8:	d02b      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80083ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083ce:	d820      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083d4:	d012      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80083d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083da:	d81a      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d022      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80083e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e4:	d115      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ea:	3308      	adds	r3, #8
 80083ec:	2101      	movs	r1, #1
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 f9f2 	bl	80097d8 <RCCEx_PLL2_Config>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083fa:	e015      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008400:	3328      	adds	r3, #40	@ 0x28
 8008402:	2101      	movs	r1, #1
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fa99 	bl	800993c <RCCEx_PLL3_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008410:	e00a      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008418:	e006      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800841a:	bf00      	nop
 800841c:	e004      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800841e:	bf00      	nop
 8008420:	e002      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008422:	bf00      	nop
 8008424:	e000      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10a      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008430:	4b38      	ldr	r3, [pc, #224]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008434:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800843c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843e:	4a35      	ldr	r2, [pc, #212]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008440:	430b      	orrs	r3, r1
 8008442:	6513      	str	r3, [r2, #80]	@ 0x50
 8008444:	e003      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800844a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800845a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800845e:	2300      	movs	r3, #0
 8008460:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008464:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008468:	460b      	mov	r3, r1
 800846a:	4313      	orrs	r3, r2
 800846c:	d058      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800846e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800847a:	d033      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800847c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008480:	d82c      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008486:	d02f      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800848c:	d826      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800848e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008492:	d02b      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008494:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008498:	d820      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800849e:	d012      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80084a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a4:	d81a      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d022      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ae:	d115      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b4:	3308      	adds	r3, #8
 80084b6:	2101      	movs	r1, #1
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 f98d 	bl	80097d8 <RCCEx_PLL2_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084c4:	e015      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ca:	3328      	adds	r3, #40	@ 0x28
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fa34 	bl	800993c <RCCEx_PLL3_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084da:	e00a      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084e2:	e006      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084e4:	bf00      	nop
 80084e6:	e004      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084e8:	bf00      	nop
 80084ea:	e002      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084ec:	bf00      	nop
 80084ee:	e000      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10e      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084fa:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084fe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008506:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800850a:	4a02      	ldr	r2, [pc, #8]	@ (8008514 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800850c:	430b      	orrs	r3, r1
 800850e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008510:	e006      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008512:	bf00      	nop
 8008514:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800851c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800852c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008530:	2300      	movs	r3, #0
 8008532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008536:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800853a:	460b      	mov	r3, r1
 800853c:	4313      	orrs	r3, r2
 800853e:	d037      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854a:	d00e      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800854c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008550:	d816      	bhi.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d018      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800855a:	d111      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855c:	4bc4      	ldr	r3, [pc, #784]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	4ac3      	ldr	r2, [pc, #780]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008568:	e00f      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800856a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856e:	3308      	adds	r3, #8
 8008570:	2101      	movs	r1, #1
 8008572:	4618      	mov	r0, r3
 8008574:	f001 f930 	bl	80097d8 <RCCEx_PLL2_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800857e:	e004      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008586:	e000      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008592:	4bb7      	ldr	r3, [pc, #732]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008596:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a0:	4ab3      	ldr	r2, [pc, #716]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085a2:	430b      	orrs	r3, r1
 80085a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80085a6:	e003      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80085ca:	460b      	mov	r3, r1
 80085cc:	4313      	orrs	r3, r2
 80085ce:	d039      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d81c      	bhi.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	0800861d 	.word	0x0800861d
 80085e4:	080085f1 	.word	0x080085f1
 80085e8:	080085ff 	.word	0x080085ff
 80085ec:	0800861d 	.word	0x0800861d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f0:	4b9f      	ldr	r3, [pc, #636]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f4:	4a9e      	ldr	r2, [pc, #632]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085fc:	e00f      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008602:	3308      	adds	r3, #8
 8008604:	2102      	movs	r1, #2
 8008606:	4618      	mov	r0, r3
 8008608:	f001 f8e6 	bl	80097d8 <RCCEx_PLL2_Config>
 800860c:	4603      	mov	r3, r0
 800860e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008612:	e004      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800861a:	e000      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800861c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800861e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10a      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008626:	4b92      	ldr	r3, [pc, #584]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800862a:	f023 0103 	bic.w	r1, r3, #3
 800862e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008634:	4a8e      	ldr	r2, [pc, #568]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008636:	430b      	orrs	r3, r1
 8008638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800863a:	e003      	b.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008654:	2300      	movs	r3, #0
 8008656:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800865a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800865e:	460b      	mov	r3, r1
 8008660:	4313      	orrs	r3, r2
 8008662:	f000 8099 	beq.w	8008798 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008666:	4b83      	ldr	r3, [pc, #524]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a82      	ldr	r2, [pc, #520]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800866c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008672:	f7fb fb49 	bl	8003d08 <HAL_GetTick>
 8008676:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800867a:	e00b      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800867c:	f7fb fb44 	bl	8003d08 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b64      	cmp	r3, #100	@ 0x64
 800868a:	d903      	bls.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008692:	e005      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008694:	4b77      	ldr	r3, [pc, #476]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0ed      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d173      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086a8:	4b71      	ldr	r3, [pc, #452]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80086b4:	4053      	eors	r3, r2
 80086b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d015      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086be:	4b6c      	ldr	r3, [pc, #432]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086ca:	4b69      	ldr	r3, [pc, #420]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ce:	4a68      	ldr	r2, [pc, #416]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086d4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086d6:	4b66      	ldr	r3, [pc, #408]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	4a65      	ldr	r2, [pc, #404]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086e0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086e2:	4a63      	ldr	r2, [pc, #396]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80086f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086f6:	d118      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7fb fb06 	bl	8003d08 <HAL_GetTick>
 80086fc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008700:	e00d      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008702:	f7fb fb01 	bl	8003d08 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008712:	429a      	cmp	r2, r3
 8008714:	d903      	bls.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800871c:	e005      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800871e:	4b54      	ldr	r3, [pc, #336]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008722:	f003 0302 	and.w	r3, r3, #2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0eb      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800872a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800872e:	2b00      	cmp	r3, #0
 8008730:	d129      	bne.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800873a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800873e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008742:	d10e      	bne.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008744:	4b4a      	ldr	r3, [pc, #296]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800874c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008754:	091a      	lsrs	r2, r3, #4
 8008756:	4b48      	ldr	r3, [pc, #288]	@ (8008878 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008758:	4013      	ands	r3, r2
 800875a:	4a45      	ldr	r2, [pc, #276]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800875c:	430b      	orrs	r3, r1
 800875e:	6113      	str	r3, [r2, #16]
 8008760:	e005      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008762:	4b43      	ldr	r3, [pc, #268]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	4a42      	ldr	r2, [pc, #264]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008768:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800876c:	6113      	str	r3, [r2, #16]
 800876e:	4b40      	ldr	r3, [pc, #256]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008770:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800877a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800877e:	4a3c      	ldr	r2, [pc, #240]	@ (8008870 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	430b      	orrs	r3, r1
 8008782:	6713      	str	r3, [r2, #112]	@ 0x70
 8008784:	e008      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800878a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800878e:	e003      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008794:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a0:	f002 0301 	and.w	r3, r2, #1
 80087a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087a8:	2300      	movs	r3, #0
 80087aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087b2:	460b      	mov	r3, r1
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f000 808f 	beq.w	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087c0:	2b28      	cmp	r3, #40	@ 0x28
 80087c2:	d871      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087c4:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080088b1 	.word	0x080088b1
 80087d0:	080088a9 	.word	0x080088a9
 80087d4:	080088a9 	.word	0x080088a9
 80087d8:	080088a9 	.word	0x080088a9
 80087dc:	080088a9 	.word	0x080088a9
 80087e0:	080088a9 	.word	0x080088a9
 80087e4:	080088a9 	.word	0x080088a9
 80087e8:	080088a9 	.word	0x080088a9
 80087ec:	0800887d 	.word	0x0800887d
 80087f0:	080088a9 	.word	0x080088a9
 80087f4:	080088a9 	.word	0x080088a9
 80087f8:	080088a9 	.word	0x080088a9
 80087fc:	080088a9 	.word	0x080088a9
 8008800:	080088a9 	.word	0x080088a9
 8008804:	080088a9 	.word	0x080088a9
 8008808:	080088a9 	.word	0x080088a9
 800880c:	08008893 	.word	0x08008893
 8008810:	080088a9 	.word	0x080088a9
 8008814:	080088a9 	.word	0x080088a9
 8008818:	080088a9 	.word	0x080088a9
 800881c:	080088a9 	.word	0x080088a9
 8008820:	080088a9 	.word	0x080088a9
 8008824:	080088a9 	.word	0x080088a9
 8008828:	080088a9 	.word	0x080088a9
 800882c:	080088b1 	.word	0x080088b1
 8008830:	080088a9 	.word	0x080088a9
 8008834:	080088a9 	.word	0x080088a9
 8008838:	080088a9 	.word	0x080088a9
 800883c:	080088a9 	.word	0x080088a9
 8008840:	080088a9 	.word	0x080088a9
 8008844:	080088a9 	.word	0x080088a9
 8008848:	080088a9 	.word	0x080088a9
 800884c:	080088b1 	.word	0x080088b1
 8008850:	080088a9 	.word	0x080088a9
 8008854:	080088a9 	.word	0x080088a9
 8008858:	080088a9 	.word	0x080088a9
 800885c:	080088a9 	.word	0x080088a9
 8008860:	080088a9 	.word	0x080088a9
 8008864:	080088a9 	.word	0x080088a9
 8008868:	080088a9 	.word	0x080088a9
 800886c:	080088b1 	.word	0x080088b1
 8008870:	58024400 	.word	0x58024400
 8008874:	58024800 	.word	0x58024800
 8008878:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008880:	3308      	adds	r3, #8
 8008882:	2101      	movs	r1, #1
 8008884:	4618      	mov	r0, r3
 8008886:	f000 ffa7 	bl	80097d8 <RCCEx_PLL2_Config>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008890:	e00f      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008896:	3328      	adds	r3, #40	@ 0x28
 8008898:	2101      	movs	r1, #1
 800889a:	4618      	mov	r0, r3
 800889c:	f001 f84e 	bl	800993c <RCCEx_PLL3_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088a6:	e004      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088ae:	e000      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088ba:	4bbf      	ldr	r3, [pc, #764]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c8:	4abb      	ldr	r2, [pc, #748]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088ca:	430b      	orrs	r3, r1
 80088cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80088ce:	e003      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f002 0302 	and.w	r3, r2, #2
 80088e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80088f2:	460b      	mov	r3, r1
 80088f4:	4313      	orrs	r3, r2
 80088f6:	d041      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80088f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d824      	bhi.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008902:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008955 	.word	0x08008955
 800890c:	08008921 	.word	0x08008921
 8008910:	08008937 	.word	0x08008937
 8008914:	08008955 	.word	0x08008955
 8008918:	08008955 	.word	0x08008955
 800891c:	08008955 	.word	0x08008955
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008924:	3308      	adds	r3, #8
 8008926:	2101      	movs	r1, #1
 8008928:	4618      	mov	r0, r3
 800892a:	f000 ff55 	bl	80097d8 <RCCEx_PLL2_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008934:	e00f      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893a:	3328      	adds	r3, #40	@ 0x28
 800893c:	2101      	movs	r1, #1
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fffc 	bl	800993c <RCCEx_PLL3_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800894a:	e004      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008952:	e000      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800895e:	4b96      	ldr	r3, [pc, #600]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008962:	f023 0107 	bic.w	r1, r3, #7
 8008966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800896a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800896c:	4a92      	ldr	r2, [pc, #584]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800896e:	430b      	orrs	r3, r1
 8008970:	6553      	str	r3, [r2, #84]	@ 0x54
 8008972:	e003      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800897c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f002 0304 	and.w	r3, r2, #4
 8008988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800898c:	2300      	movs	r3, #0
 800898e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008992:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008996:	460b      	mov	r3, r1
 8008998:	4313      	orrs	r3, r2
 800899a:	d044      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800899c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089a4:	2b05      	cmp	r3, #5
 80089a6:	d825      	bhi.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80089a8:	a201      	add	r2, pc, #4	@ (adr r2, 80089b0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089fd 	.word	0x080089fd
 80089b4:	080089c9 	.word	0x080089c9
 80089b8:	080089df 	.word	0x080089df
 80089bc:	080089fd 	.word	0x080089fd
 80089c0:	080089fd 	.word	0x080089fd
 80089c4:	080089fd 	.word	0x080089fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089cc:	3308      	adds	r3, #8
 80089ce:	2101      	movs	r1, #1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 ff01 	bl	80097d8 <RCCEx_PLL2_Config>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089dc:	e00f      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e2:	3328      	adds	r3, #40	@ 0x28
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 ffa8 	bl	800993c <RCCEx_PLL3_Config>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089f2:	e004      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089fa:	e000      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a06:	4b6c      	ldr	r3, [pc, #432]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0a:	f023 0107 	bic.w	r1, r3, #7
 8008a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a16:	4a68      	ldr	r2, [pc, #416]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a1c:	e003      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f002 0320 	and.w	r3, r2, #32
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d055      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a52:	d033      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a58:	d82c      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5e:	d02f      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a64:	d826      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a6a:	d02b      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a70:	d820      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a76:	d012      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7c:	d81a      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d022      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a86:	d115      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fea1 	bl	80097d8 <RCCEx_PLL2_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a9c:	e015      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa2:	3328      	adds	r3, #40	@ 0x28
 8008aa4:	2102      	movs	r1, #2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 ff48 	bl	800993c <RCCEx_PLL3_Config>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ab2:	e00a      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008aba:	e006      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008abc:	bf00      	nop
 8008abe:	e004      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ac0:	bf00      	nop
 8008ac2:	e002      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ac4:	bf00      	nop
 8008ac6:	e000      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10b      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ad2:	4b39      	ldr	r3, [pc, #228]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ae2:	4a35      	ldr	r2, [pc, #212]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ae8:	e003      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008aee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008afe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b02:	2300      	movs	r3, #0
 8008b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	d058      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b1e:	d033      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008b20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b24:	d82c      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b2a:	d02f      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b30:	d826      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b36:	d02b      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b3c:	d820      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b42:	d012      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b48:	d81a      	bhi.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d022      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b52:	d115      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b58:	3308      	adds	r3, #8
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fe3b 	bl	80097d8 <RCCEx_PLL2_Config>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b68:	e015      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6e:	3328      	adds	r3, #40	@ 0x28
 8008b70:	2102      	movs	r1, #2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 fee2 	bl	800993c <RCCEx_PLL3_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b7e:	e00a      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b86:	e006      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008b88:	bf00      	nop
 8008b8a:	e004      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008b8c:	bf00      	nop
 8008b8e:	e002      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008b90:	bf00      	nop
 8008b92:	e000      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10e      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b9e:	4b06      	ldr	r3, [pc, #24]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bae:	4a02      	ldr	r2, [pc, #8]	@ (8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bb4:	e006      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bde:	460b      	mov	r3, r1
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d055      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bf0:	d033      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008bf2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bf6:	d82c      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bfc:	d02f      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c02:	d826      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c04:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c08:	d02b      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c0a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c0e:	d820      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c14:	d012      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008c16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c1a:	d81a      	bhi.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d022      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c24:	d115      	bne.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fdd2 	bl	80097d8 <RCCEx_PLL2_Config>
 8008c34:	4603      	mov	r3, r0
 8008c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c3a:	e015      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c40:	3328      	adds	r3, #40	@ 0x28
 8008c42:	2102      	movs	r1, #2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 fe79 	bl	800993c <RCCEx_PLL3_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c50:	e00a      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c58:	e006      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c5a:	bf00      	nop
 8008c5c:	e004      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c5e:	bf00      	nop
 8008c60:	e002      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c62:	bf00      	nop
 8008c64:	e000      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10b      	bne.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c70:	4ba0      	ldr	r3, [pc, #640]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c74:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c80:	4a9c      	ldr	r2, [pc, #624]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c82:	430b      	orrs	r3, r1
 8008c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c86:	e003      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f002 0308 	and.w	r3, r2, #8
 8008c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ca6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008caa:	460b      	mov	r3, r1
 8008cac:	4313      	orrs	r3, r2
 8008cae:	d01e      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cbc:	d10c      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc2:	3328      	adds	r3, #40	@ 0x28
 8008cc4:	2102      	movs	r1, #2
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fe38 	bl	800993c <RCCEx_PLL3_Config>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008cd8:	4b86      	ldr	r3, [pc, #536]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cdc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce8:	4a82      	ldr	r2, [pc, #520]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cea:	430b      	orrs	r3, r1
 8008cec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f002 0310 	and.w	r3, r2, #16
 8008cfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d04:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	d01e      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d1a:	d10c      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d20:	3328      	adds	r3, #40	@ 0x28
 8008d22:	2102      	movs	r1, #2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fe09 	bl	800993c <RCCEx_PLL3_Config>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d36:	4b6f      	ldr	r3, [pc, #444]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d46:	4a6b      	ldr	r2, [pc, #428]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d5e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d62:	460b      	mov	r3, r1
 8008d64:	4313      	orrs	r3, r2
 8008d66:	d03e      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d74:	d022      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d7a:	d81b      	bhi.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d003      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d84:	d00b      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008d86:	e015      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fd21 	bl	80097d8 <RCCEx_PLL2_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d9c:	e00f      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da2:	3328      	adds	r3, #40	@ 0x28
 8008da4:	2102      	movs	r1, #2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fdc8 	bl	800993c <RCCEx_PLL3_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008db2:	e004      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dba:	e000      	b.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10b      	bne.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008dd6:	4a47      	ldr	r2, [pc, #284]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ddc:	e003      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008de2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008df2:	673b      	str	r3, [r7, #112]	@ 0x70
 8008df4:	2300      	movs	r3, #0
 8008df6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008df8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	d03b      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e0e:	d01f      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e14:	d818      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e1a:	d003      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008e1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e20:	d007      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008e22:	e011      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4b33      	ldr	r3, [pc, #204]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	4a32      	ldr	r2, [pc, #200]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e30:	e00f      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e36:	3328      	adds	r3, #40	@ 0x28
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fd7e 	bl	800993c <RCCEx_PLL3_Config>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e46:	e004      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e4e:	e000      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10b      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e5a:	4b26      	ldr	r3, [pc, #152]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e5e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e6a:	4a22      	ldr	r2, [pc, #136]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e70:	e003      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e88:	2300      	movs	r3, #0
 8008e8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e8c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e90:	460b      	mov	r3, r1
 8008e92:	4313      	orrs	r3, r2
 8008e94:	d034      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ea4:	d007      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008ea6:	e011      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea8:	4b12      	ldr	r3, [pc, #72]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eac:	4a11      	ldr	r2, [pc, #68]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008eb4:	e00e      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eba:	3308      	adds	r3, #8
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fc8a 	bl	80097d8 <RCCEx_PLL2_Config>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008eca:	e003      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10d      	bne.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ee0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eea:	4a02      	ldr	r2, [pc, #8]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008eec:	430b      	orrs	r3, r1
 8008eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ef0:	e006      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f0e:	2300      	movs	r3, #0
 8008f10:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f16:	460b      	mov	r3, r1
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	d00c      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	3328      	adds	r3, #40	@ 0x28
 8008f22:	2102      	movs	r1, #2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fd09 	bl	800993c <RCCEx_PLL3_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f44:	2300      	movs	r3, #0
 8008f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f48:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	d036      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f5c:	d018      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008f5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f62:	d811      	bhi.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f68:	d014      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6e:	d80b      	bhi.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d011      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f78:	d106      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7a:	4bb7      	ldr	r3, [pc, #732]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7e:	4ab6      	ldr	r2, [pc, #728]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f86:	e008      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f8e:	e004      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008f90:	bf00      	nop
 8008f92:	e002      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008f94:	bf00      	nop
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fa2:	4bad      	ldr	r3, [pc, #692]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fb0:	4aa9      	ldr	r2, [pc, #676]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fb2:	430b      	orrs	r3, r1
 8008fb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fb6:	e003      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fce:	2300      	movs	r3, #0
 8008fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	d009      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fdc:	4b9e      	ldr	r3, [pc, #632]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fea:	4a9b      	ldr	r2, [pc, #620]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ffe:	2300      	movs	r3, #0
 8009000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009002:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009006:	460b      	mov	r3, r1
 8009008:	4313      	orrs	r3, r2
 800900a:	d009      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800900c:	4b92      	ldr	r3, [pc, #584]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800900e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009010:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800901a:	4a8f      	ldr	r2, [pc, #572]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800901c:	430b      	orrs	r3, r1
 800901e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800902c:	643b      	str	r3, [r7, #64]	@ 0x40
 800902e:	2300      	movs	r3, #0
 8009030:	647b      	str	r3, [r7, #68]	@ 0x44
 8009032:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009036:	460b      	mov	r3, r1
 8009038:	4313      	orrs	r3, r2
 800903a:	d00e      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800903c:	4b86      	ldr	r3, [pc, #536]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	4a85      	ldr	r2, [pc, #532]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009042:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009046:	6113      	str	r3, [r2, #16]
 8009048:	4b83      	ldr	r3, [pc, #524]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800904a:	6919      	ldr	r1, [r3, #16]
 800904c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009054:	4a80      	ldr	r2, [pc, #512]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009056:	430b      	orrs	r3, r1
 8009058:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009062:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009066:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009068:	2300      	movs	r3, #0
 800906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800906c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009070:	460b      	mov	r3, r1
 8009072:	4313      	orrs	r3, r2
 8009074:	d009      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009076:	4b78      	ldr	r3, [pc, #480]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800907e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009084:	4a74      	ldr	r2, [pc, #464]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009086:	430b      	orrs	r3, r1
 8009088:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009096:	633b      	str	r3, [r7, #48]	@ 0x30
 8009098:	2300      	movs	r3, #0
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
 800909c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d00a      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090a6:	4b6c      	ldr	r3, [pc, #432]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090aa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80090ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090b6:	4a68      	ldr	r2, [pc, #416]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090b8:	430b      	orrs	r3, r1
 80090ba:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	2100      	movs	r1, #0
 80090c6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090ce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090d2:	460b      	mov	r3, r1
 80090d4:	4313      	orrs	r3, r2
 80090d6:	d011      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090dc:	3308      	adds	r3, #8
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fb79 	bl	80097d8 <RCCEx_PLL2_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80090ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d003      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	2100      	movs	r1, #0
 8009106:	6239      	str	r1, [r7, #32]
 8009108:	f003 0302 	and.w	r3, r3, #2
 800910c:	627b      	str	r3, [r7, #36]	@ 0x24
 800910e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009112:	460b      	mov	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	d011      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911c:	3308      	adds	r3, #8
 800911e:	2101      	movs	r1, #1
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fb59 	bl	80097d8 <RCCEx_PLL2_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800912c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009134:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009138:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800913c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	2100      	movs	r1, #0
 8009146:	61b9      	str	r1, [r7, #24]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009152:	460b      	mov	r3, r1
 8009154:	4313      	orrs	r3, r2
 8009156:	d011      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800915c:	3308      	adds	r3, #8
 800915e:	2102      	movs	r1, #2
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fb39 	bl	80097d8 <RCCEx_PLL2_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800916c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	2100      	movs	r1, #0
 8009186:	6139      	str	r1, [r7, #16]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	617b      	str	r3, [r7, #20]
 800918e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009192:	460b      	mov	r3, r1
 8009194:	4313      	orrs	r3, r2
 8009196:	d011      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919c:	3328      	adds	r3, #40	@ 0x28
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fbcb 	bl	800993c <RCCEx_PLL3_Config>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80091ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	2100      	movs	r1, #0
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091d2:	460b      	mov	r3, r1
 80091d4:	4313      	orrs	r3, r2
 80091d6:	d011      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091dc:	3328      	adds	r3, #40	@ 0x28
 80091de:	2101      	movs	r1, #1
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fbab 	bl	800993c <RCCEx_PLL3_Config>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80091ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	2100      	movs	r1, #0
 8009206:	6039      	str	r1, [r7, #0]
 8009208:	f003 0320 	and.w	r3, r3, #32
 800920c:	607b      	str	r3, [r7, #4]
 800920e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009212:	460b      	mov	r3, r1
 8009214:	4313      	orrs	r3, r2
 8009216:	d011      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800921c:	3328      	adds	r3, #40	@ 0x28
 800921e:	2102      	movs	r1, #2
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fb8b 	bl	800993c <RCCEx_PLL3_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800922c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800923c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	e000      	b.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
}
 800924a:	4618      	mov	r0, r3
 800924c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009250:	46bd      	mov	sp, r7
 8009252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009256:	bf00      	nop
 8009258:	58024400 	.word	0x58024400

0800925c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009260:	f7fe fe00 	bl	8007e64 <HAL_RCC_GetHCLKFreq>
 8009264:	4602      	mov	r2, r0
 8009266:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	4904      	ldr	r1, [pc, #16]	@ (8009284 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009272:	5ccb      	ldrb	r3, [r1, r3]
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800927c:	4618      	mov	r0, r3
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58024400 	.word	0x58024400
 8009284:	0800f048 	.word	0x0800f048

08009288 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009290:	4ba1      	ldr	r3, [pc, #644]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800929a:	4b9f      	ldr	r3, [pc, #636]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	0b1b      	lsrs	r3, r3, #12
 80092a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092aa:	091b      	lsrs	r3, r3, #4
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092b2:	4b99      	ldr	r3, [pc, #612]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8111 	beq.w	80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	f000 8083 	beq.w	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f200 80a1 	bhi.w	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d056      	beq.n	80093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092f2:	e099      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f4:	4b88      	ldr	r3, [pc, #544]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d02d      	beq.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009300:	4b85      	ldr	r3, [pc, #532]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	08db      	lsrs	r3, r3, #3
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	4a84      	ldr	r2, [pc, #528]	@ (800951c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
 8009310:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932a:	4b7b      	ldr	r3, [pc, #492]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933a:	ed97 6a03 	vldr	s12, [r7, #12]
 800933e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800935a:	e087      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936e:	4b6a      	ldr	r3, [pc, #424]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009382:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939e:	e065      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b59      	ldr	r3, [pc, #356]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e2:	e043      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800952c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b48      	ldr	r3, [pc, #288]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009426:	e021      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b37      	ldr	r3, [pc, #220]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a03 	vldr	s12, [r7, #12]
 800944e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800946c:	4b2a      	ldr	r3, [pc, #168]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	0a5b      	lsrs	r3, r3, #9
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009486:	edd7 6a07 	vldr	s13, [r7, #28]
 800948a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009492:	ee17 2a90 	vmov	r2, s15
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800949a:	4b1f      	ldr	r3, [pc, #124]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800949c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949e:	0c1b      	lsrs	r3, r3, #16
 80094a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c0:	ee17 2a90 	vmov	r2, s15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094c8:	4b13      	ldr	r3, [pc, #76]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094cc:	0e1b      	lsrs	r3, r3, #24
 80094ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ee:	ee17 2a90 	vmov	r2, s15
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094f6:	e008      	b.n	800950a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
}
 800950a:	bf00      	nop
 800950c:	3724      	adds	r7, #36	@ 0x24
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	03d09000 	.word	0x03d09000
 8009520:	46000000 	.word	0x46000000
 8009524:	4c742400 	.word	0x4c742400
 8009528:	4a742400 	.word	0x4a742400
 800952c:	4afe502a 	.word	0x4afe502a

08009530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009530:	b480      	push	{r7}
 8009532:	b089      	sub	sp, #36	@ 0x24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009538:	4ba1      	ldr	r3, [pc, #644]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009542:	4b9f      	ldr	r3, [pc, #636]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	0d1b      	lsrs	r3, r3, #20
 8009548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800954c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800954e:	4b9c      	ldr	r3, [pc, #624]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800955a:	4b99      	ldr	r3, [pc, #612]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8111 	beq.w	80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f000 8083 	beq.w	800968c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f200 80a1 	bhi.w	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d056      	beq.n	8009648 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800959a:	e099      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959c:	4b88      	ldr	r3, [pc, #544]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d02d      	beq.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a8:	4b85      	ldr	r3, [pc, #532]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	4a84      	ldr	r2, [pc, #528]	@ (80097c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b7b      	ldr	r3, [pc, #492]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009602:	e087      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b6a      	ldr	r3, [pc, #424]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a03 	vldr	s12, [r7, #12]
 800962a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009646:	e065      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b59      	ldr	r3, [pc, #356]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a03 	vldr	s12, [r7, #12]
 800966e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800968a:	e043      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b48      	ldr	r3, [pc, #288]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ce:	e021      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	4b37      	ldr	r3, [pc, #220]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009712:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009714:	4b2a      	ldr	r3, [pc, #168]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009718:	0a5b      	lsrs	r3, r3, #9
 800971a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800972a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973a:	ee17 2a90 	vmov	r2, s15
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009742:	4b1f      	ldr	r3, [pc, #124]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800975c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009768:	ee17 2a90 	vmov	r2, s15
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009770:	4b13      	ldr	r3, [pc, #76]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800978a:	edd7 6a07 	vldr	s13, [r7, #28]
 800978e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009796:	ee17 2a90 	vmov	r2, s15
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800979e:	e008      	b.n	80097b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
}
 80097b2:	bf00      	nop
 80097b4:	3724      	adds	r7, #36	@ 0x24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	58024400 	.word	0x58024400
 80097c4:	03d09000 	.word	0x03d09000
 80097c8:	46000000 	.word	0x46000000
 80097cc:	4c742400 	.word	0x4c742400
 80097d0:	4a742400 	.word	0x4a742400
 80097d4:	4afe502a 	.word	0x4afe502a

080097d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097e6:	4b53      	ldr	r3, [pc, #332]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80097e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d101      	bne.n	80097f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e099      	b.n	800992a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80097fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009802:	f7fa fa81 	bl	8003d08 <HAL_GetTick>
 8009806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009808:	e008      	b.n	800981c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800980a:	f7fa fa7d 	bl	8003d08 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e086      	b.n	800992a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800981c:	4b45      	ldr	r3, [pc, #276]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f0      	bne.n	800980a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009828:	4b42      	ldr	r3, [pc, #264]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800982a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	031b      	lsls	r3, r3, #12
 8009836:	493f      	ldr	r1, [pc, #252]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009838:	4313      	orrs	r3, r2
 800983a:	628b      	str	r3, [r1, #40]	@ 0x28
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	3b01      	subs	r3, #1
 8009842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	025b      	lsls	r3, r3, #9
 800984e:	b29b      	uxth	r3, r3
 8009850:	431a      	orrs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	3b01      	subs	r3, #1
 8009858:	041b      	lsls	r3, r3, #16
 800985a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	3b01      	subs	r3, #1
 8009866:	061b      	lsls	r3, r3, #24
 8009868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800986c:	4931      	ldr	r1, [pc, #196]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800986e:	4313      	orrs	r3, r2
 8009870:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009872:	4b30      	ldr	r3, [pc, #192]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	492d      	ldr	r1, [pc, #180]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009880:	4313      	orrs	r3, r2
 8009882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009884:	4b2b      	ldr	r3, [pc, #172]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	f023 0220 	bic.w	r2, r3, #32
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	4928      	ldr	r1, [pc, #160]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009892:	4313      	orrs	r3, r2
 8009894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009896:	4b27      	ldr	r3, [pc, #156]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989a:	4a26      	ldr	r2, [pc, #152]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800989c:	f023 0310 	bic.w	r3, r3, #16
 80098a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098a2:	4b24      	ldr	r3, [pc, #144]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098a6:	4b24      	ldr	r3, [pc, #144]	@ (8009938 <RCCEx_PLL2_Config+0x160>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	69d2      	ldr	r2, [r2, #28]
 80098ae:	00d2      	lsls	r2, r2, #3
 80098b0:	4920      	ldr	r1, [pc, #128]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098bc:	f043 0310 	orr.w	r3, r3, #16
 80098c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	4a19      	ldr	r2, [pc, #100]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098d4:	e00f      	b.n	80098f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d106      	bne.n	80098ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098dc:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	4a14      	ldr	r2, [pc, #80]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098e8:	e005      	b.n	80098f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098ea:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a11      	ldr	r2, [pc, #68]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009902:	f7fa fa01 	bl	8003d08 <HAL_GetTick>
 8009906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009908:	e008      	b.n	800991c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800990a:	f7fa f9fd 	bl	8003d08 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d901      	bls.n	800991c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e006      	b.n	800992a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0f0      	beq.n	800990a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	58024400 	.word	0x58024400
 8009938:	ffff0007 	.word	0xffff0007

0800993c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800994a:	4b53      	ldr	r3, [pc, #332]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	2b03      	cmp	r3, #3
 8009954:	d101      	bne.n	800995a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e099      	b.n	8009a8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800995a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a4e      	ldr	r2, [pc, #312]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009966:	f7fa f9cf 	bl	8003d08 <HAL_GetTick>
 800996a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800996c:	e008      	b.n	8009980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800996e:	f7fa f9cb 	bl	8003d08 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d901      	bls.n	8009980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e086      	b.n	8009a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009980:	4b45      	ldr	r3, [pc, #276]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1f0      	bne.n	800996e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800998c:	4b42      	ldr	r3, [pc, #264]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800998e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009990:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	051b      	lsls	r3, r3, #20
 800999a:	493f      	ldr	r1, [pc, #252]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800999c:	4313      	orrs	r3, r2
 800999e:	628b      	str	r3, [r1, #40]	@ 0x28
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	025b      	lsls	r3, r3, #9
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	041b      	lsls	r3, r3, #16
 80099be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	061b      	lsls	r3, r3, #24
 80099cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099d0:	4931      	ldr	r1, [pc, #196]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099d6:	4b30      	ldr	r3, [pc, #192]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	492d      	ldr	r1, [pc, #180]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	4928      	ldr	r1, [pc, #160]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099fa:	4b27      	ldr	r3, [pc, #156]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	4a26      	ldr	r2, [pc, #152]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a06:	4b24      	ldr	r3, [pc, #144]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a0a:	4b24      	ldr	r3, [pc, #144]	@ (8009a9c <RCCEx_PLL3_Config+0x160>)
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	69d2      	ldr	r2, [r2, #28]
 8009a12:	00d2      	lsls	r2, r2, #3
 8009a14:	4920      	ldr	r1, [pc, #128]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	4a19      	ldr	r2, [pc, #100]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a38:	e00f      	b.n	8009a5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d106      	bne.n	8009a4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a40:	4b15      	ldr	r3, [pc, #84]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a44:	4a14      	ldr	r2, [pc, #80]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a4c:	e005      	b.n	8009a5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a4e:	4b12      	ldr	r3, [pc, #72]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a11      	ldr	r2, [pc, #68]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a66:	f7fa f94f 	bl	8003d08 <HAL_GetTick>
 8009a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a6c:	e008      	b.n	8009a80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a6e:	f7fa f94b 	bl	8003d08 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d901      	bls.n	8009a80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e006      	b.n	8009a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0f0      	beq.n	8009a6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	58024400 	.word	0x58024400
 8009a9c:	ffff0007 	.word	0xffff0007

08009aa0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e10f      	b.n	8009cd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a87      	ldr	r2, [pc, #540]	@ (8009cdc <HAL_SPI_Init+0x23c>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d00f      	beq.n	8009ae2 <HAL_SPI_Init+0x42>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a86      	ldr	r2, [pc, #536]	@ (8009ce0 <HAL_SPI_Init+0x240>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00a      	beq.n	8009ae2 <HAL_SPI_Init+0x42>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a84      	ldr	r2, [pc, #528]	@ (8009ce4 <HAL_SPI_Init+0x244>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d005      	beq.n	8009ae2 <HAL_SPI_Init+0x42>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	2b0f      	cmp	r3, #15
 8009adc:	d901      	bls.n	8009ae2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e0f7      	b.n	8009cd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 feca 	bl	800a87c <SPI_GetPacketSize>
 8009ae8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a7b      	ldr	r2, [pc, #492]	@ (8009cdc <HAL_SPI_Init+0x23c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d00c      	beq.n	8009b0e <HAL_SPI_Init+0x6e>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a79      	ldr	r2, [pc, #484]	@ (8009ce0 <HAL_SPI_Init+0x240>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d007      	beq.n	8009b0e <HAL_SPI_Init+0x6e>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a78      	ldr	r2, [pc, #480]	@ (8009ce4 <HAL_SPI_Init+0x244>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d002      	beq.n	8009b0e <HAL_SPI_Init+0x6e>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b08      	cmp	r3, #8
 8009b0c:	d811      	bhi.n	8009b32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b12:	4a72      	ldr	r2, [pc, #456]	@ (8009cdc <HAL_SPI_Init+0x23c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d009      	beq.n	8009b2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a70      	ldr	r2, [pc, #448]	@ (8009ce0 <HAL_SPI_Init+0x240>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d004      	beq.n	8009b2c <HAL_SPI_Init+0x8c>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a6f      	ldr	r2, [pc, #444]	@ (8009ce4 <HAL_SPI_Init+0x244>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d104      	bne.n	8009b36 <HAL_SPI_Init+0x96>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d901      	bls.n	8009b36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e0cd      	b.n	8009cd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7f9 fa84 	bl	8003058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2202      	movs	r2, #2
 8009b54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f022 0201 	bic.w	r2, r2, #1
 8009b66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009b72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b7c:	d119      	bne.n	8009bb2 <HAL_SPI_Init+0x112>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b86:	d103      	bne.n	8009b90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d008      	beq.n	8009ba2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10c      	bne.n	8009bb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba0:	d107      	bne.n	8009bb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009bb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00f      	beq.n	8009bde <HAL_SPI_Init+0x13e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	2b06      	cmp	r3, #6
 8009bc4:	d90b      	bls.n	8009bde <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	e007      	b.n	8009bee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69da      	ldr	r2, [r3, #28]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c00:	ea42 0103 	orr.w	r1, r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68da      	ldr	r2, [r3, #12]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	431a      	orrs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c4e:	ea42 0103 	orr.w	r1, r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d113      	bne.n	8009c8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0201 	bic.w	r2, r2, #1
 8009c9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	40013000 	.word	0x40013000
 8009ce0:	40003800 	.word	0x40003800
 8009ce4:	40003c00 	.word	0x40003c00

08009ce8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d001      	beq.n	8009d06 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009d02:	2302      	movs	r3, #2
 8009d04:	e126      	b.n	8009f54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <HAL_SPI_Transmit_DMA+0x2a>
 8009d0c:	88fb      	ldrh	r3, [r7, #6]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e11e      	b.n	8009f54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_SPI_Transmit_DMA+0x3c>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e117      	b.n	8009f54 <HAL_SPI_Transmit_DMA+0x26c>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2203      	movs	r2, #3
 8009d30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	88fa      	ldrh	r2, [r7, #6]
 8009d4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009d7c:	d108      	bne.n	8009d90 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	e009      	b.n	8009da4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009da2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b0f      	cmp	r3, #15
 8009daa:	d905      	bls.n	8009db8 <HAL_SPI_Transmit_DMA+0xd0>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009db6:	d10f      	bne.n	8009dd8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	d911      	bls.n	8009de4 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dca:	d00b      	beq.n	8009de4 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dd0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dd6:	d005      	beq.n	8009de4 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e0b7      	b.n	8009f54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	2b07      	cmp	r3, #7
 8009dea:	d820      	bhi.n	8009e2e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009df6:	d109      	bne.n	8009e0c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	3301      	adds	r3, #1
 8009e02:	105b      	asrs	r3, r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e16:	d11e      	bne.n	8009e56 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	3303      	adds	r3, #3
 8009e22:	109b      	asrs	r3, r3, #2
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e2c:	e013      	b.n	8009e56 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	2b0f      	cmp	r3, #15
 8009e34:	d80f      	bhi.n	8009e56 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e3a:	699b      	ldr	r3, [r3, #24]
 8009e3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e40:	d109      	bne.n	8009e56 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	105b      	asrs	r3, r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e5a:	4a40      	ldr	r2, [pc, #256]	@ (8009f5c <HAL_SPI_Transmit_DMA+0x274>)
 8009e5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e62:	4a3f      	ldr	r2, [pc, #252]	@ (8009f60 <HAL_SPI_Transmit_DMA+0x278>)
 8009e64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e6a:	4a3e      	ldr	r2, [pc, #248]	@ (8009f64 <HAL_SPI_Transmit_DMA+0x27c>)
 8009e6c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e72:	2200      	movs	r2, #0
 8009e74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e84:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e8e:	4619      	mov	r1, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3320      	adds	r3, #32
 8009e96:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009ea0:	f7fa fbca 	bl	8004638 <HAL_DMA_Start_IT>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d011      	beq.n	8009ece <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eb0:	f043 0210 	orr.w	r2, r3, #16
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e042      	b.n	8009f54 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed8:	d108      	bne.n	8009eec <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6859      	ldr	r1, [r3, #4]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	4b20      	ldr	r3, [pc, #128]	@ (8009f68 <HAL_SPI_Transmit_DMA+0x280>)
 8009ee6:	400b      	ands	r3, r1
 8009ee8:	6053      	str	r3, [r2, #4]
 8009eea:	e009      	b.n	8009f00 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8009f68 <HAL_SPI_Transmit_DMA+0x280>)
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	88f9      	ldrh	r1, [r7, #6]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	6812      	ldr	r2, [r2, #0]
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f0e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691a      	ldr	r2, [r3, #16]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009f1e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f38:	d107      	bne.n	8009f4a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f48:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	0800a689 	.word	0x0800a689
 8009f60:	0800a5fd 	.word	0x0800a5fd
 8009f64:	0800a6c1 	.word	0x0800a6c1
 8009f68:	ffff0000 	.word	0xffff0000

08009f6c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	4613      	mov	r3, r2
 8009f78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d005      	beq.n	8009f92 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e127      	b.n	800a1e2 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <HAL_SPI_Receive_DMA+0x32>
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d105      	bne.n	8009faa <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e11b      	b.n	800a1e2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_SPI_Receive_DMA+0x4c>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e114      	b.n	800a1e2 <HAL_SPI_Receive_DMA+0x276>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2204      	movs	r2, #4
 8009fc4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	88fa      	ldrh	r2, [r7, #6]
 8009fda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	88fa      	ldrh	r2, [r7, #6]
 8009fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a00a:	d108      	bne.n	800a01e <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e009      	b.n	800a032 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a030:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	2b0f      	cmp	r3, #15
 800a038:	d905      	bls.n	800a046 <HAL_SPI_Receive_DMA+0xda>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a044:	d10f      	bne.n	800a066 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a04a:	2b07      	cmp	r3, #7
 800a04c:	d911      	bls.n	800a072 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a058:	d00b      	beq.n	800a072 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a05e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a064:	d005      	beq.n	800a072 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e0b7      	b.n	800a1e2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689a      	ldr	r2, [r3, #8]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a080:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	2b07      	cmp	r3, #7
 800a088:	d820      	bhi.n	800a0cc <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a094:	d109      	bne.n	800a0aa <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3301      	adds	r3, #1
 800a0a0:	105b      	asrs	r3, r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0b4:	d11e      	bne.n	800a0f4 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3303      	adds	r3, #3
 800a0c0:	109b      	asrs	r3, r3, #2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0ca:	e013      	b.n	800a0f4 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	2b0f      	cmp	r3, #15
 800a0d2:	d80f      	bhi.n	800a0f4 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0de:	d109      	bne.n	800a0f4 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	105b      	asrs	r3, r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0f8:	4a3c      	ldr	r2, [pc, #240]	@ (800a1ec <HAL_SPI_Receive_DMA+0x280>)
 800a0fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a100:	4a3b      	ldr	r2, [pc, #236]	@ (800a1f0 <HAL_SPI_Receive_DMA+0x284>)
 800a102:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a108:	4a3a      	ldr	r2, [pc, #232]	@ (800a1f4 <HAL_SPI_Receive_DMA+0x288>)
 800a10a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a110:	2200      	movs	r2, #0
 800a112:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3330      	adds	r3, #48	@ 0x30
 800a11e:	4619      	mov	r1, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a124:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a12c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a12e:	f7fa fa83 	bl	8004638 <HAL_DMA_Start_IT>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d011      	beq.n	800a15c <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a13e:	f043 0210 	orr.w	r2, r3, #16
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e042      	b.n	800a1e2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a166:	d108      	bne.n	800a17a <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6859      	ldr	r1, [r3, #4]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4b21      	ldr	r3, [pc, #132]	@ (800a1f8 <HAL_SPI_Receive_DMA+0x28c>)
 800a174:	400b      	ands	r3, r1
 800a176:	6053      	str	r3, [r2, #4]
 800a178:	e009      	b.n	800a18e <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f8 <HAL_SPI_Receive_DMA+0x28c>)
 800a182:	4013      	ands	r3, r2
 800a184:	88f9      	ldrh	r1, [r7, #6]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	430b      	orrs	r3, r1
 800a18c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	689a      	ldr	r2, [r3, #8]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a19c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800a1ac:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f042 0201 	orr.w	r2, r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1c6:	d107      	bne.n	800a1d8 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1d6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800a6a5 	.word	0x0800a6a5
 800a1f0:	0800a643 	.word	0x0800a643
 800a1f4:	0800a6c1 	.word	0x0800a6c1
 800a1f8:	ffff0000 	.word	0xffff0000

0800a1fc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	@ 0x28
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a214:	6a3a      	ldr	r2, [r7, #32]
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	4013      	ands	r3, r2
 800a21a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a224:	2300      	movs	r3, #0
 800a226:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a22e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3330      	adds	r3, #48	@ 0x30
 800a236:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d010      	beq.n	800a264 <HAL_SPI_IRQHandler+0x68>
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a25a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9c3 	bl	800a5e8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a262:	e192      	b.n	800a58a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d113      	bne.n	800a296 <HAL_SPI_IRQHandler+0x9a>
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	f003 0320 	and.w	r3, r3, #32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10e      	bne.n	800a296 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
    handled = 1UL;
 800a292:	2301      	movs	r3, #1
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a296:	69bb      	ldr	r3, [r7, #24]
 800a298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10f      	bne.n	800a2c0 <HAL_SPI_IRQHandler+0xc4>
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	4798      	blx	r3
    handled = 1UL;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10f      	bne.n	800a2ea <HAL_SPI_IRQHandler+0xee>
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00a      	beq.n	800a2ea <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2d4:	69bb      	ldr	r3, [r7, #24]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d105      	bne.n	800a2ea <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	4798      	blx	r3
    handled = 1UL;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f040 8147 	bne.w	800a580 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	f003 0308 	and.w	r3, r3, #8
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 808b 	beq.w	800a414 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f042 0208 	orr.w	r2, r2, #8
 800a30c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	699a      	ldr	r2, [r3, #24]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f042 0210 	orr.w	r2, r2, #16
 800a31c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	699a      	ldr	r2, [r3, #24]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a32c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	691a      	ldr	r2, [r3, #16]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 0208 	bic.w	r2, r2, #8
 800a33c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d13d      	bne.n	800a3c8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a34c:	e036      	b.n	800a3bc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	2b0f      	cmp	r3, #15
 800a354:	d90b      	bls.n	800a36e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a35e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a360:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	665a      	str	r2, [r3, #100]	@ 0x64
 800a36c:	e01d      	b.n	800a3aa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b07      	cmp	r3, #7
 800a374:	d90b      	bls.n	800a38e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	8812      	ldrh	r2, [r2, #0]
 800a37e:	b292      	uxth	r2, r2
 800a380:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a386:	1c9a      	adds	r2, r3, #2
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	665a      	str	r2, [r3, #100]	@ 0x64
 800a38c:	e00d      	b.n	800a3aa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a39a:	7812      	ldrb	r2, [r2, #0]
 800a39c:	b2d2      	uxtb	r2, r2
 800a39e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3a4:	1c5a      	adds	r2, r3, #1
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1c2      	bne.n	800a34e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f9b7 	bl	800a73c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d003      	beq.n	800a3e8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7f7 fc37 	bl	8001c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a3e6:	e0d0      	b.n	800a58a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a3e8:	7cfb      	ldrb	r3, [r7, #19]
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	d103      	bne.n	800a3f6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f8dc 	bl	800a5ac <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a3f4:	e0c6      	b.n	800a584 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a3f6:	7cfb      	ldrb	r3, [r7, #19]
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d103      	bne.n	800a404 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7f7 fc19 	bl	8001c34 <HAL_SPI_RxCpltCallback>
    return;
 800a402:	e0bf      	b.n	800a584 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a404:	7cfb      	ldrb	r3, [r7, #19]
 800a406:	2b03      	cmp	r3, #3
 800a408:	f040 80bc 	bne.w	800a584 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f8c3 	bl	800a598 <HAL_SPI_TxCpltCallback>
    return;
 800a412:	e0b7      	b.n	800a584 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 80b5 	beq.w	800a58a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00f      	beq.n	800a44a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a430:	f043 0204 	orr.w	r2, r3, #4
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	699a      	ldr	r2, [r3, #24]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a448:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00f      	beq.n	800a474 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a45a:	f043 0201 	orr.w	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	699a      	ldr	r2, [r3, #24]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a472:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00f      	beq.n	800a49e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a484:	f043 0208 	orr.w	r2, r3, #8
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	699a      	ldr	r2, [r3, #24]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a49c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00f      	beq.n	800a4c8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699a      	ldr	r2, [r3, #24]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0220 	orr.w	r2, r2, #32
 800a4c6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d05a      	beq.n	800a588 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 0201 	bic.w	r2, r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6919      	ldr	r1, [r3, #16]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	4b28      	ldr	r3, [pc, #160]	@ (800a590 <HAL_SPI_IRQHandler+0x394>)
 800a4ee:	400b      	ands	r3, r1
 800a4f0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a4f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a4fc:	d138      	bne.n	800a570 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689a      	ldr	r2, [r3, #8]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a50c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d013      	beq.n	800a53e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a51a:	4a1e      	ldr	r2, [pc, #120]	@ (800a594 <HAL_SPI_IRQHandler+0x398>)
 800a51c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a522:	4618      	mov	r0, r3
 800a524:	f7fa fe10 	bl	8005148 <HAL_DMA_Abort_IT>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d007      	beq.n	800a53e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a534:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a542:	2b00      	cmp	r3, #0
 800a544:	d020      	beq.n	800a588 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a54a:	4a12      	ldr	r2, [pc, #72]	@ (800a594 <HAL_SPI_IRQHandler+0x398>)
 800a54c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a552:	4618      	mov	r0, r3
 800a554:	f7fa fdf8 	bl	8005148 <HAL_DMA_Abort_IT>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d014      	beq.n	800a588 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a564:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a56e:	e00b      	b.n	800a588 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7f7 fb6b 	bl	8001c54 <HAL_SPI_ErrorCallback>
    return;
 800a57e:	e003      	b.n	800a588 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a580:	bf00      	nop
 800a582:	e002      	b.n	800a58a <HAL_SPI_IRQHandler+0x38e>
    return;
 800a584:	bf00      	nop
 800a586:	e000      	b.n	800a58a <HAL_SPI_IRQHandler+0x38e>
    return;
 800a588:	bf00      	nop
  }
}
 800a58a:	3728      	adds	r7, #40	@ 0x28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	fffffc94 	.word	0xfffffc94
 800a594:	0800a707 	.word	0x0800a707

0800a598 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a608:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b07      	cmp	r3, #7
 800a614:	d011      	beq.n	800a63a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a620:	d103      	bne.n	800a62a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff ffb8 	bl	800a598 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a628:	e007      	b.n	800a63a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f042 0208 	orr.w	r2, r2, #8
 800a638:	611a      	str	r2, [r3, #16]
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a656:	b2db      	uxtb	r3, r3
 800a658:	2b07      	cmp	r3, #7
 800a65a:	d011      	beq.n	800a680 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a660:	69db      	ldr	r3, [r3, #28]
 800a662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a666:	d103      	bne.n	800a670 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7f7 fae3 	bl	8001c34 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a66e:	e007      	b.n	800a680 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	691a      	ldr	r2, [r3, #16]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0208 	orr.w	r2, r2, #8
 800a67e:	611a      	str	r2, [r3, #16]
}
 800a680:	bf00      	nop
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a694:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7ff ff92 	bl	800a5c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a69c:	bf00      	nop
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b0:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff ff8e 	bl	800a5d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6cc:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7fb feaa 	bl	8006428 <HAL_DMA_GetError>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d011      	beq.n	800a6fe <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f82e 	bl	800a73c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6e6:	f043 0210 	orr.w	r2, r3, #16
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7f7 faab 	bl	8001c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a712:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2200      	movs	r2, #0
 800a718:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7f7 fa91 	bl	8001c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	699a      	ldr	r2, [r3, #24]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0208 	orr.w	r2, r2, #8
 800a75a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699a      	ldr	r2, [r3, #24]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0210 	orr.w	r2, r2, #16
 800a76a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0201 	bic.w	r2, r2, #1
 800a77a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6919      	ldr	r1, [r3, #16]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4b3c      	ldr	r3, [pc, #240]	@ (800a878 <SPI_CloseTransfer+0x13c>)
 800a788:	400b      	ands	r3, r1
 800a78a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a79a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b04      	cmp	r3, #4
 800a7a6:	d014      	beq.n	800a7d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00f      	beq.n	800a7d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	699a      	ldr	r2, [r3, #24]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f042 0220 	orr.w	r2, r2, #32
 800a7d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b03      	cmp	r3, #3
 800a7dc:	d014      	beq.n	800a808 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00f      	beq.n	800a808 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7ee:	f043 0204 	orr.w	r2, r3, #4
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	699a      	ldr	r2, [r3, #24]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a806:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00f      	beq.n	800a832 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a818:	f043 0201 	orr.w	r2, r3, #1
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	699a      	ldr	r2, [r3, #24]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a830:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00f      	beq.n	800a85c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a842:	f043 0208 	orr.w	r2, r3, #8
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699a      	ldr	r2, [r3, #24]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a85a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a86c:	bf00      	nop
 800a86e:	3714      	adds	r7, #20
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	fffffc90 	.word	0xfffffc90

0800a87c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a888:	095b      	lsrs	r3, r3, #5
 800a88a:	3301      	adds	r3, #1
 800a88c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	3301      	adds	r3, #1
 800a894:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	3307      	adds	r3, #7
 800a89a:	08db      	lsrs	r3, r3, #3
 800a89c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e049      	b.n	800a958 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d106      	bne.n	800a8de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7f8 fd09 	bl	80032f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f000 ffa5 	bl	800b840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b01      	cmp	r3, #1
 800a972:	d001      	beq.n	800a978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e05e      	b.n	800aa36 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68da      	ldr	r2, [r3, #12]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f042 0201 	orr.w	r2, r2, #1
 800a98e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a2b      	ldr	r2, [pc, #172]	@ (800aa44 <HAL_TIM_Base_Start_IT+0xe4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d02c      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a2:	d027      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a27      	ldr	r2, [pc, #156]	@ (800aa48 <HAL_TIM_Base_Start_IT+0xe8>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d022      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a26      	ldr	r2, [pc, #152]	@ (800aa4c <HAL_TIM_Base_Start_IT+0xec>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d01d      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a24      	ldr	r2, [pc, #144]	@ (800aa50 <HAL_TIM_Base_Start_IT+0xf0>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d018      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a23      	ldr	r2, [pc, #140]	@ (800aa54 <HAL_TIM_Base_Start_IT+0xf4>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d013      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a21      	ldr	r2, [pc, #132]	@ (800aa58 <HAL_TIM_Base_Start_IT+0xf8>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00e      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a20      	ldr	r2, [pc, #128]	@ (800aa5c <HAL_TIM_Base_Start_IT+0xfc>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d009      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a1e      	ldr	r2, [pc, #120]	@ (800aa60 <HAL_TIM_Base_Start_IT+0x100>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d004      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x94>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a1d      	ldr	r2, [pc, #116]	@ (800aa64 <HAL_TIM_Base_Start_IT+0x104>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d115      	bne.n	800aa20 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	4b1b      	ldr	r3, [pc, #108]	@ (800aa68 <HAL_TIM_Base_Start_IT+0x108>)
 800a9fc:	4013      	ands	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b06      	cmp	r3, #6
 800aa04:	d015      	beq.n	800aa32 <HAL_TIM_Base_Start_IT+0xd2>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa0c:	d011      	beq.n	800aa32 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f042 0201 	orr.w	r2, r2, #1
 800aa1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa1e:	e008      	b.n	800aa32 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0201 	orr.w	r2, r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	e000      	b.n	800aa34 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	40010000 	.word	0x40010000
 800aa48:	40000400 	.word	0x40000400
 800aa4c:	40000800 	.word	0x40000800
 800aa50:	40000c00 	.word	0x40000c00
 800aa54:	40010400 	.word	0x40010400
 800aa58:	40001800 	.word	0x40001800
 800aa5c:	40014000 	.word	0x40014000
 800aa60:	4000e000 	.word	0x4000e000
 800aa64:	4000e400 	.word	0x4000e400
 800aa68:	00010007 	.word	0x00010007

0800aa6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6a1a      	ldr	r2, [r3, #32]
 800aa8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aa8e:	4013      	ands	r3, r2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10f      	bne.n	800aab4 <HAL_TIM_Base_Stop_IT+0x48>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6a1a      	ldr	r2, [r3, #32]
 800aa9a:	f240 4344 	movw	r3, #1092	@ 0x444
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d107      	bne.n	800aab4 <HAL_TIM_Base_Stop_IT+0x48>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f022 0201 	bic.w	r2, r2, #1
 800aab2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e049      	b.n	800ab70 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7f8 fc73 	bl	80033dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2202      	movs	r2, #2
 800aafa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4619      	mov	r1, r3
 800ab08:	4610      	mov	r0, r2
 800ab0a:	f000 fe99 	bl	800b840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d109      	bne.n	800ab9c <HAL_TIM_OC_Start+0x24>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	bf14      	ite	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	2300      	moveq	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	e03c      	b.n	800ac16 <HAL_TIM_OC_Start+0x9e>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d109      	bne.n	800abb6 <HAL_TIM_OC_Start+0x3e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b01      	cmp	r3, #1
 800abac:	bf14      	ite	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	2300      	moveq	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	e02f      	b.n	800ac16 <HAL_TIM_OC_Start+0x9e>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d109      	bne.n	800abd0 <HAL_TIM_OC_Start+0x58>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	e022      	b.n	800ac16 <HAL_TIM_OC_Start+0x9e>
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	2b0c      	cmp	r3, #12
 800abd4:	d109      	bne.n	800abea <HAL_TIM_OC_Start+0x72>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b01      	cmp	r3, #1
 800abe0:	bf14      	ite	ne
 800abe2:	2301      	movne	r3, #1
 800abe4:	2300      	moveq	r3, #0
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	e015      	b.n	800ac16 <HAL_TIM_OC_Start+0x9e>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b10      	cmp	r3, #16
 800abee:	d109      	bne.n	800ac04 <HAL_TIM_OC_Start+0x8c>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	bf14      	ite	ne
 800abfc:	2301      	movne	r3, #1
 800abfe:	2300      	moveq	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	e008      	b.n	800ac16 <HAL_TIM_OC_Start+0x9e>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	bf14      	ite	ne
 800ac10:	2301      	movne	r3, #1
 800ac12:	2300      	moveq	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e0ab      	b.n	800ad76 <HAL_TIM_OC_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d104      	bne.n	800ac2e <HAL_TIM_OC_Start+0xb6>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac2c:	e023      	b.n	800ac76 <HAL_TIM_OC_Start+0xfe>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d104      	bne.n	800ac3e <HAL_TIM_OC_Start+0xc6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac3c:	e01b      	b.n	800ac76 <HAL_TIM_OC_Start+0xfe>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d104      	bne.n	800ac4e <HAL_TIM_OC_Start+0xd6>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2202      	movs	r2, #2
 800ac48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac4c:	e013      	b.n	800ac76 <HAL_TIM_OC_Start+0xfe>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b0c      	cmp	r3, #12
 800ac52:	d104      	bne.n	800ac5e <HAL_TIM_OC_Start+0xe6>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac5c:	e00b      	b.n	800ac76 <HAL_TIM_OC_Start+0xfe>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	d104      	bne.n	800ac6e <HAL_TIM_OC_Start+0xf6>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac6c:	e003      	b.n	800ac76 <HAL_TIM_OC_Start+0xfe>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2202      	movs	r2, #2
 800ac72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 faee 	bl	800c260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a3d      	ldr	r2, [pc, #244]	@ (800ad80 <HAL_TIM_OC_Start+0x208>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d013      	beq.n	800acb6 <HAL_TIM_OC_Start+0x13e>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a3c      	ldr	r2, [pc, #240]	@ (800ad84 <HAL_TIM_OC_Start+0x20c>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00e      	beq.n	800acb6 <HAL_TIM_OC_Start+0x13e>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a3a      	ldr	r2, [pc, #232]	@ (800ad88 <HAL_TIM_OC_Start+0x210>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d009      	beq.n	800acb6 <HAL_TIM_OC_Start+0x13e>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a39      	ldr	r2, [pc, #228]	@ (800ad8c <HAL_TIM_OC_Start+0x214>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d004      	beq.n	800acb6 <HAL_TIM_OC_Start+0x13e>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a37      	ldr	r2, [pc, #220]	@ (800ad90 <HAL_TIM_OC_Start+0x218>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d101      	bne.n	800acba <HAL_TIM_OC_Start+0x142>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <HAL_TIM_OC_Start+0x144>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800acce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a2a      	ldr	r2, [pc, #168]	@ (800ad80 <HAL_TIM_OC_Start+0x208>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d02c      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ace2:	d027      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a2a      	ldr	r2, [pc, #168]	@ (800ad94 <HAL_TIM_OC_Start+0x21c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d022      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a29      	ldr	r2, [pc, #164]	@ (800ad98 <HAL_TIM_OC_Start+0x220>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d01d      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a27      	ldr	r2, [pc, #156]	@ (800ad9c <HAL_TIM_OC_Start+0x224>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d018      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1f      	ldr	r2, [pc, #124]	@ (800ad84 <HAL_TIM_OC_Start+0x20c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d013      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a23      	ldr	r2, [pc, #140]	@ (800ada0 <HAL_TIM_OC_Start+0x228>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d00e      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a1b      	ldr	r2, [pc, #108]	@ (800ad88 <HAL_TIM_OC_Start+0x210>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d009      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a1f      	ldr	r2, [pc, #124]	@ (800ada4 <HAL_TIM_OC_Start+0x22c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d004      	beq.n	800ad34 <HAL_TIM_OC_Start+0x1bc>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a1e      	ldr	r2, [pc, #120]	@ (800ada8 <HAL_TIM_OC_Start+0x230>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d115      	bne.n	800ad60 <HAL_TIM_OC_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	4b1c      	ldr	r3, [pc, #112]	@ (800adac <HAL_TIM_OC_Start+0x234>)
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2b06      	cmp	r3, #6
 800ad44:	d015      	beq.n	800ad72 <HAL_TIM_OC_Start+0x1fa>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad4c:	d011      	beq.n	800ad72 <HAL_TIM_OC_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f042 0201 	orr.w	r2, r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad5e:	e008      	b.n	800ad72 <HAL_TIM_OC_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f042 0201 	orr.w	r2, r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	e000      	b.n	800ad74 <HAL_TIM_OC_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	40010000 	.word	0x40010000
 800ad84:	40010400 	.word	0x40010400
 800ad88:	40014000 	.word	0x40014000
 800ad8c:	40014400 	.word	0x40014400
 800ad90:	40014800 	.word	0x40014800
 800ad94:	40000400 	.word	0x40000400
 800ad98:	40000800 	.word	0x40000800
 800ad9c:	40000c00 	.word	0x40000c00
 800ada0:	40001800 	.word	0x40001800
 800ada4:	4000e000 	.word	0x4000e000
 800ada8:	4000e400 	.word	0x4000e400
 800adac:	00010007 	.word	0x00010007

0800adb0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2200      	movs	r2, #0
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 fa4c 	bl	800c260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a3e      	ldr	r2, [pc, #248]	@ (800aec8 <HAL_TIM_OC_Stop+0x118>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d013      	beq.n	800adfa <HAL_TIM_OC_Stop+0x4a>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a3d      	ldr	r2, [pc, #244]	@ (800aecc <HAL_TIM_OC_Stop+0x11c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d00e      	beq.n	800adfa <HAL_TIM_OC_Stop+0x4a>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a3b      	ldr	r2, [pc, #236]	@ (800aed0 <HAL_TIM_OC_Stop+0x120>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d009      	beq.n	800adfa <HAL_TIM_OC_Stop+0x4a>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a3a      	ldr	r2, [pc, #232]	@ (800aed4 <HAL_TIM_OC_Stop+0x124>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d004      	beq.n	800adfa <HAL_TIM_OC_Stop+0x4a>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a38      	ldr	r2, [pc, #224]	@ (800aed8 <HAL_TIM_OC_Stop+0x128>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d101      	bne.n	800adfe <HAL_TIM_OC_Stop+0x4e>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e000      	b.n	800ae00 <HAL_TIM_OC_Stop+0x50>
 800adfe:	2300      	movs	r3, #0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d017      	beq.n	800ae34 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6a1a      	ldr	r2, [r3, #32]
 800ae0a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae0e:	4013      	ands	r3, r2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10f      	bne.n	800ae34 <HAL_TIM_OC_Stop+0x84>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6a1a      	ldr	r2, [r3, #32]
 800ae1a:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae1e:	4013      	ands	r3, r2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d107      	bne.n	800ae34 <HAL_TIM_OC_Stop+0x84>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6a1a      	ldr	r2, [r3, #32]
 800ae3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10f      	bne.n	800ae64 <HAL_TIM_OC_Stop+0xb4>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6a1a      	ldr	r2, [r3, #32]
 800ae4a:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae4e:	4013      	ands	r3, r2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d107      	bne.n	800ae64 <HAL_TIM_OC_Stop+0xb4>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0201 	bic.w	r2, r2, #1
 800ae62:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <HAL_TIM_OC_Stop+0xc4>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae72:	e023      	b.n	800aebc <HAL_TIM_OC_Stop+0x10c>
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	d104      	bne.n	800ae84 <HAL_TIM_OC_Stop+0xd4>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae82:	e01b      	b.n	800aebc <HAL_TIM_OC_Stop+0x10c>
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b08      	cmp	r3, #8
 800ae88:	d104      	bne.n	800ae94 <HAL_TIM_OC_Stop+0xe4>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae92:	e013      	b.n	800aebc <HAL_TIM_OC_Stop+0x10c>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b0c      	cmp	r3, #12
 800ae98:	d104      	bne.n	800aea4 <HAL_TIM_OC_Stop+0xf4>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aea2:	e00b      	b.n	800aebc <HAL_TIM_OC_Stop+0x10c>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b10      	cmp	r3, #16
 800aea8:	d104      	bne.n	800aeb4 <HAL_TIM_OC_Stop+0x104>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeb2:	e003      	b.n	800aebc <HAL_TIM_OC_Stop+0x10c>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	40010000 	.word	0x40010000
 800aecc:	40010400 	.word	0x40010400
 800aed0:	40014000 	.word	0x40014000
 800aed4:	40014400 	.word	0x40014400
 800aed8:	40014800 	.word	0x40014800

0800aedc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e049      	b.n	800af82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f000 f841 	bl	800af8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3304      	adds	r3, #4
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f000 fc90 	bl	800b840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e041      	b.n	800b036 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f839 	bl	800b03e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2202      	movs	r2, #2
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3304      	adds	r3, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	f000 fc2e 	bl	800b840 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 0208 	bic.w	r2, r2, #8
 800aff2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b03e:	b480      	push	{r7}
 800b040:	b083      	sub	sp, #12
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f003 0302 	and.w	r3, r3, #2
 800b070:	2b00      	cmp	r3, #0
 800b072:	d020      	beq.n	800b0b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01b      	beq.n	800b0b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f06f 0202 	mvn.w	r2, #2
 800b086:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 fbb1 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800b0a2:	e005      	b.n	800b0b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fba3 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fbb4 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d020      	beq.n	800b102 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f003 0304 	and.w	r3, r3, #4
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d01b      	beq.n	800b102 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f06f 0204 	mvn.w	r2, #4
 800b0d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fb8b 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800b0ee:	e005      	b.n	800b0fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fb7d 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fb8e 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	f003 0308 	and.w	r3, r3, #8
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d020      	beq.n	800b14e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d01b      	beq.n	800b14e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f06f 0208 	mvn.w	r2, #8
 800b11e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2204      	movs	r2, #4
 800b124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f003 0303 	and.w	r3, r3, #3
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fb65 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800b13a:	e005      	b.n	800b148 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fb57 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fb68 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	f003 0310 	and.w	r3, r3, #16
 800b154:	2b00      	cmp	r3, #0
 800b156:	d020      	beq.n	800b19a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 0310 	and.w	r3, r3, #16
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d01b      	beq.n	800b19a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f06f 0210 	mvn.w	r2, #16
 800b16a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2208      	movs	r2, #8
 800b170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fb3f 	bl	800b804 <HAL_TIM_IC_CaptureCallback>
 800b186:	e005      	b.n	800b194 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fb31 	bl	800b7f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fb42 	bl	800b818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00c      	beq.n	800b1be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f003 0301 	and.w	r3, r3, #1
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f06f 0201 	mvn.w	r2, #1
 800b1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7f8 fb21 	bl	8003800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d104      	bne.n	800b1d2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00c      	beq.n	800b1ec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d007      	beq.n	800b1ec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b1e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 f992 	bl	800c510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00c      	beq.n	800b210 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d007      	beq.n	800b210 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f001 f98a 	bl	800c524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00c      	beq.n	800b234 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	d007      	beq.n	800b234 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b22c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fafc 	bl	800b82c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	f003 0320 	and.w	r3, r3, #32
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00c      	beq.n	800b258 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f003 0320 	and.w	r3, r3, #32
 800b244:	2b00      	cmp	r3, #0
 800b246:	d007      	beq.n	800b258 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f06f 0220 	mvn.w	r2, #32
 800b250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f001 f952 	bl	800c4fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b26c:	2300      	movs	r3, #0
 800b26e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b276:	2b01      	cmp	r3, #1
 800b278:	d101      	bne.n	800b27e <HAL_TIM_OC_ConfigChannel+0x1e>
 800b27a:	2302      	movs	r3, #2
 800b27c:	e066      	b.n	800b34c <HAL_TIM_OC_ConfigChannel+0xec>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b14      	cmp	r3, #20
 800b28a:	d857      	bhi.n	800b33c <HAL_TIM_OC_ConfigChannel+0xdc>
 800b28c:	a201      	add	r2, pc, #4	@ (adr r2, 800b294 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b292:	bf00      	nop
 800b294:	0800b2e9 	.word	0x0800b2e9
 800b298:	0800b33d 	.word	0x0800b33d
 800b29c:	0800b33d 	.word	0x0800b33d
 800b2a0:	0800b33d 	.word	0x0800b33d
 800b2a4:	0800b2f7 	.word	0x0800b2f7
 800b2a8:	0800b33d 	.word	0x0800b33d
 800b2ac:	0800b33d 	.word	0x0800b33d
 800b2b0:	0800b33d 	.word	0x0800b33d
 800b2b4:	0800b305 	.word	0x0800b305
 800b2b8:	0800b33d 	.word	0x0800b33d
 800b2bc:	0800b33d 	.word	0x0800b33d
 800b2c0:	0800b33d 	.word	0x0800b33d
 800b2c4:	0800b313 	.word	0x0800b313
 800b2c8:	0800b33d 	.word	0x0800b33d
 800b2cc:	0800b33d 	.word	0x0800b33d
 800b2d0:	0800b33d 	.word	0x0800b33d
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b33d 	.word	0x0800b33d
 800b2dc:	0800b33d 	.word	0x0800b33d
 800b2e0:	0800b33d 	.word	0x0800b33d
 800b2e4:	0800b32f 	.word	0x0800b32f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68b9      	ldr	r1, [r7, #8]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fb58 	bl	800b9a4 <TIM_OC1_SetConfig>
      break;
 800b2f4:	e025      	b.n	800b342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fbe1 	bl	800bac4 <TIM_OC2_SetConfig>
      break;
 800b302:	e01e      	b.n	800b342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68b9      	ldr	r1, [r7, #8]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 fc64 	bl	800bbd8 <TIM_OC3_SetConfig>
      break;
 800b310:	e017      	b.n	800b342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 fce5 	bl	800bce8 <TIM_OC4_SetConfig>
      break;
 800b31e:	e010      	b.n	800b342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	4618      	mov	r0, r3
 800b328:	f000 fd48 	bl	800bdbc <TIM_OC5_SetConfig>
      break;
 800b32c:	e009      	b.n	800b342 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	4618      	mov	r0, r3
 800b336:	f000 fda5 	bl	800be84 <TIM_OC6_SetConfig>
      break;
 800b33a:	e002      	b.n	800b342 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	75fb      	strb	r3, [r7, #23]
      break;
 800b340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d101      	bne.n	800b372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b36e:	2302      	movs	r3, #2
 800b370:	e0ff      	b.n	800b572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2201      	movs	r2, #1
 800b376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b14      	cmp	r3, #20
 800b37e:	f200 80f0 	bhi.w	800b562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b382:	a201      	add	r2, pc, #4	@ (adr r2, 800b388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b388:	0800b3dd 	.word	0x0800b3dd
 800b38c:	0800b563 	.word	0x0800b563
 800b390:	0800b563 	.word	0x0800b563
 800b394:	0800b563 	.word	0x0800b563
 800b398:	0800b41d 	.word	0x0800b41d
 800b39c:	0800b563 	.word	0x0800b563
 800b3a0:	0800b563 	.word	0x0800b563
 800b3a4:	0800b563 	.word	0x0800b563
 800b3a8:	0800b45f 	.word	0x0800b45f
 800b3ac:	0800b563 	.word	0x0800b563
 800b3b0:	0800b563 	.word	0x0800b563
 800b3b4:	0800b563 	.word	0x0800b563
 800b3b8:	0800b49f 	.word	0x0800b49f
 800b3bc:	0800b563 	.word	0x0800b563
 800b3c0:	0800b563 	.word	0x0800b563
 800b3c4:	0800b563 	.word	0x0800b563
 800b3c8:	0800b4e1 	.word	0x0800b4e1
 800b3cc:	0800b563 	.word	0x0800b563
 800b3d0:	0800b563 	.word	0x0800b563
 800b3d4:	0800b563 	.word	0x0800b563
 800b3d8:	0800b521 	.word	0x0800b521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f000 fade 	bl	800b9a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	699a      	ldr	r2, [r3, #24]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0208 	orr.w	r2, r2, #8
 800b3f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	699a      	ldr	r2, [r3, #24]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0204 	bic.w	r2, r2, #4
 800b406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6999      	ldr	r1, [r3, #24]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	691a      	ldr	r2, [r3, #16]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	430a      	orrs	r2, r1
 800b418:	619a      	str	r2, [r3, #24]
      break;
 800b41a:	e0a5      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	4618      	mov	r0, r3
 800b424:	f000 fb4e 	bl	800bac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	699a      	ldr	r2, [r3, #24]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	699a      	ldr	r2, [r3, #24]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6999      	ldr	r1, [r3, #24]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	021a      	lsls	r2, r3, #8
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	430a      	orrs	r2, r1
 800b45a:	619a      	str	r2, [r3, #24]
      break;
 800b45c:	e084      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fbb7 	bl	800bbd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	69da      	ldr	r2, [r3, #28]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f042 0208 	orr.w	r2, r2, #8
 800b478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	69da      	ldr	r2, [r3, #28]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f022 0204 	bic.w	r2, r2, #4
 800b488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	69d9      	ldr	r1, [r3, #28]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	430a      	orrs	r2, r1
 800b49a:	61da      	str	r2, [r3, #28]
      break;
 800b49c:	e064      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68b9      	ldr	r1, [r7, #8]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 fc1f 	bl	800bce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	69da      	ldr	r2, [r3, #28]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	69da      	ldr	r2, [r3, #28]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69d9      	ldr	r1, [r3, #28]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	021a      	lsls	r2, r3, #8
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	61da      	str	r2, [r3, #28]
      break;
 800b4de:	e043      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68b9      	ldr	r1, [r7, #8]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fc68 	bl	800bdbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f042 0208 	orr.w	r2, r2, #8
 800b4fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0204 	bic.w	r2, r2, #4
 800b50a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	430a      	orrs	r2, r1
 800b51c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b51e:	e023      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	4618      	mov	r0, r3
 800b528:	f000 fcac 	bl	800be84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b53a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b54a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	021a      	lsls	r2, r3, #8
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	430a      	orrs	r2, r1
 800b55e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b560:	e002      	b.n	800b568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	75fb      	strb	r3, [r7, #23]
      break;
 800b566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b570:	7dfb      	ldrb	r3, [r7, #23]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop

0800b57c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_TIM_ConfigClockSource+0x1c>
 800b594:	2302      	movs	r3, #2
 800b596:	e0dc      	b.n	800b752 <HAL_TIM_ConfigClockSource+0x1d6>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	4b6a      	ldr	r3, [pc, #424]	@ (800b75c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a64      	ldr	r2, [pc, #400]	@ (800b760 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	f000 80a9 	beq.w	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5d4:	4a62      	ldr	r2, [pc, #392]	@ (800b760 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	f200 80ae 	bhi.w	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5dc:	4a61      	ldr	r2, [pc, #388]	@ (800b764 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	f000 80a1 	beq.w	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5e4:	4a5f      	ldr	r2, [pc, #380]	@ (800b764 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	f200 80a6 	bhi.w	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5ec:	4a5e      	ldr	r2, [pc, #376]	@ (800b768 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	f000 8099 	beq.w	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b5f4:	4a5c      	ldr	r2, [pc, #368]	@ (800b768 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	f200 809e 	bhi.w	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b600:	f000 8091 	beq.w	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b604:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b608:	f200 8096 	bhi.w	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b60c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b610:	f000 8089 	beq.w	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b614:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b618:	f200 808e 	bhi.w	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b61c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b620:	d03e      	beq.n	800b6a0 <HAL_TIM_ConfigClockSource+0x124>
 800b622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b626:	f200 8087 	bhi.w	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b62a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b62e:	f000 8086 	beq.w	800b73e <HAL_TIM_ConfigClockSource+0x1c2>
 800b632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b636:	d87f      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b638:	2b70      	cmp	r3, #112	@ 0x70
 800b63a:	d01a      	beq.n	800b672 <HAL_TIM_ConfigClockSource+0xf6>
 800b63c:	2b70      	cmp	r3, #112	@ 0x70
 800b63e:	d87b      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b640:	2b60      	cmp	r3, #96	@ 0x60
 800b642:	d050      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0x16a>
 800b644:	2b60      	cmp	r3, #96	@ 0x60
 800b646:	d877      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b648:	2b50      	cmp	r3, #80	@ 0x50
 800b64a:	d03c      	beq.n	800b6c6 <HAL_TIM_ConfigClockSource+0x14a>
 800b64c:	2b50      	cmp	r3, #80	@ 0x50
 800b64e:	d873      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b650:	2b40      	cmp	r3, #64	@ 0x40
 800b652:	d058      	beq.n	800b706 <HAL_TIM_ConfigClockSource+0x18a>
 800b654:	2b40      	cmp	r3, #64	@ 0x40
 800b656:	d86f      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b658:	2b30      	cmp	r3, #48	@ 0x30
 800b65a:	d064      	beq.n	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b65c:	2b30      	cmp	r3, #48	@ 0x30
 800b65e:	d86b      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b660:	2b20      	cmp	r3, #32
 800b662:	d060      	beq.n	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b664:	2b20      	cmp	r3, #32
 800b666:	d867      	bhi.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d05c      	beq.n	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b66c:	2b10      	cmp	r3, #16
 800b66e:	d05a      	beq.n	800b726 <HAL_TIM_ConfigClockSource+0x1aa>
 800b670:	e062      	b.n	800b738 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b682:	f000 fdcd 	bl	800c220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	609a      	str	r2, [r3, #8]
      break;
 800b69e:	e04f      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b6b0:	f000 fdb6 	bl	800c220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b6c2:	609a      	str	r2, [r3, #8]
      break;
 800b6c4:	e03c      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	f000 fd26 	bl	800c124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2150      	movs	r1, #80	@ 0x50
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 fd80 	bl	800c1e4 <TIM_ITRx_SetConfig>
      break;
 800b6e4:	e02c      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f000 fd45 	bl	800c182 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2160      	movs	r1, #96	@ 0x60
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fd70 	bl	800c1e4 <TIM_ITRx_SetConfig>
      break;
 800b704:	e01c      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b712:	461a      	mov	r2, r3
 800b714:	f000 fd06 	bl	800c124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2140      	movs	r1, #64	@ 0x40
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 fd60 	bl	800c1e4 <TIM_ITRx_SetConfig>
      break;
 800b724:	e00c      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4619      	mov	r1, r3
 800b730:	4610      	mov	r0, r2
 800b732:	f000 fd57 	bl	800c1e4 <TIM_ITRx_SetConfig>
      break;
 800b736:	e003      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	73fb      	strb	r3, [r7, #15]
      break;
 800b73c:	e000      	b.n	800b740 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b73e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	ffceff88 	.word	0xffceff88
 800b760:	00100040 	.word	0x00100040
 800b764:	00100030 	.word	0x00100030
 800b768:	00100020 	.word	0x00100020

0800b76c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d101      	bne.n	800b784 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b780:	2302      	movs	r3, #2
 800b782:	e031      	b.n	800b7e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fbda 	bl	800bf50 <TIM_SlaveTimer_SetConfig>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d009      	beq.n	800b7b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e018      	b.n	800b7e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68da      	ldr	r2, [r3, #12]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b7d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b80c:	bf00      	nop
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b820:	bf00      	nop
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a4a      	ldr	r2, [pc, #296]	@ (800b97c <TIM_Base_SetConfig+0x13c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d013      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b85e:	d00f      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a47      	ldr	r2, [pc, #284]	@ (800b980 <TIM_Base_SetConfig+0x140>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00b      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a46      	ldr	r2, [pc, #280]	@ (800b984 <TIM_Base_SetConfig+0x144>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d007      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a45      	ldr	r2, [pc, #276]	@ (800b988 <TIM_Base_SetConfig+0x148>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d003      	beq.n	800b880 <TIM_Base_SetConfig+0x40>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a44      	ldr	r2, [pc, #272]	@ (800b98c <TIM_Base_SetConfig+0x14c>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d108      	bne.n	800b892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a39      	ldr	r2, [pc, #228]	@ (800b97c <TIM_Base_SetConfig+0x13c>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d027      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8a0:	d023      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a36      	ldr	r2, [pc, #216]	@ (800b980 <TIM_Base_SetConfig+0x140>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d01f      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a35      	ldr	r2, [pc, #212]	@ (800b984 <TIM_Base_SetConfig+0x144>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d01b      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a34      	ldr	r2, [pc, #208]	@ (800b988 <TIM_Base_SetConfig+0x148>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d017      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a33      	ldr	r2, [pc, #204]	@ (800b98c <TIM_Base_SetConfig+0x14c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d013      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a32      	ldr	r2, [pc, #200]	@ (800b990 <TIM_Base_SetConfig+0x150>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d00f      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a31      	ldr	r2, [pc, #196]	@ (800b994 <TIM_Base_SetConfig+0x154>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d00b      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a30      	ldr	r2, [pc, #192]	@ (800b998 <TIM_Base_SetConfig+0x158>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d007      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a2f      	ldr	r2, [pc, #188]	@ (800b99c <TIM_Base_SetConfig+0x15c>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d003      	beq.n	800b8ea <TIM_Base_SetConfig+0xaa>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a2e      	ldr	r2, [pc, #184]	@ (800b9a0 <TIM_Base_SetConfig+0x160>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d108      	bne.n	800b8fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	4313      	orrs	r3, r2
 800b908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a16      	ldr	r2, [pc, #88]	@ (800b97c <TIM_Base_SetConfig+0x13c>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00f      	beq.n	800b948 <TIM_Base_SetConfig+0x108>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a18      	ldr	r2, [pc, #96]	@ (800b98c <TIM_Base_SetConfig+0x14c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00b      	beq.n	800b948 <TIM_Base_SetConfig+0x108>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a17      	ldr	r2, [pc, #92]	@ (800b990 <TIM_Base_SetConfig+0x150>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d007      	beq.n	800b948 <TIM_Base_SetConfig+0x108>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a16      	ldr	r2, [pc, #88]	@ (800b994 <TIM_Base_SetConfig+0x154>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d003      	beq.n	800b948 <TIM_Base_SetConfig+0x108>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a15      	ldr	r2, [pc, #84]	@ (800b998 <TIM_Base_SetConfig+0x158>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d103      	bne.n	800b950 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	691a      	ldr	r2, [r3, #16]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d105      	bne.n	800b96e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	f023 0201 	bic.w	r2, r3, #1
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	611a      	str	r2, [r3, #16]
  }
}
 800b96e:	bf00      	nop
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	40010000 	.word	0x40010000
 800b980:	40000400 	.word	0x40000400
 800b984:	40000800 	.word	0x40000800
 800b988:	40000c00 	.word	0x40000c00
 800b98c:	40010400 	.word	0x40010400
 800b990:	40014000 	.word	0x40014000
 800b994:	40014400 	.word	0x40014400
 800b998:	40014800 	.word	0x40014800
 800b99c:	4000e000 	.word	0x4000e000
 800b9a0:	4000e400 	.word	0x4000e400

0800b9a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6a1b      	ldr	r3, [r3, #32]
 800b9b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a1b      	ldr	r3, [r3, #32]
 800b9b8:	f023 0201 	bic.w	r2, r3, #1
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4b37      	ldr	r3, [pc, #220]	@ (800baac <TIM_OC1_SetConfig+0x108>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f023 0303 	bic.w	r3, r3, #3
 800b9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f023 0302 	bic.w	r3, r3, #2
 800b9ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a2d      	ldr	r2, [pc, #180]	@ (800bab0 <TIM_OC1_SetConfig+0x10c>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d00f      	beq.n	800ba20 <TIM_OC1_SetConfig+0x7c>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a2c      	ldr	r2, [pc, #176]	@ (800bab4 <TIM_OC1_SetConfig+0x110>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d00b      	beq.n	800ba20 <TIM_OC1_SetConfig+0x7c>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a2b      	ldr	r2, [pc, #172]	@ (800bab8 <TIM_OC1_SetConfig+0x114>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d007      	beq.n	800ba20 <TIM_OC1_SetConfig+0x7c>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a2a      	ldr	r2, [pc, #168]	@ (800babc <TIM_OC1_SetConfig+0x118>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d003      	beq.n	800ba20 <TIM_OC1_SetConfig+0x7c>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a29      	ldr	r2, [pc, #164]	@ (800bac0 <TIM_OC1_SetConfig+0x11c>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d10c      	bne.n	800ba3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f023 0308 	bic.w	r3, r3, #8
 800ba26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f023 0304 	bic.w	r3, r3, #4
 800ba38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a1c      	ldr	r2, [pc, #112]	@ (800bab0 <TIM_OC1_SetConfig+0x10c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00f      	beq.n	800ba62 <TIM_OC1_SetConfig+0xbe>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a1b      	ldr	r2, [pc, #108]	@ (800bab4 <TIM_OC1_SetConfig+0x110>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d00b      	beq.n	800ba62 <TIM_OC1_SetConfig+0xbe>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1a      	ldr	r2, [pc, #104]	@ (800bab8 <TIM_OC1_SetConfig+0x114>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d007      	beq.n	800ba62 <TIM_OC1_SetConfig+0xbe>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a19      	ldr	r2, [pc, #100]	@ (800babc <TIM_OC1_SetConfig+0x118>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d003      	beq.n	800ba62 <TIM_OC1_SetConfig+0xbe>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a18      	ldr	r2, [pc, #96]	@ (800bac0 <TIM_OC1_SetConfig+0x11c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d111      	bne.n	800ba86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	693a      	ldr	r2, [r7, #16]
 800ba8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	697a      	ldr	r2, [r7, #20]
 800ba9e:	621a      	str	r2, [r3, #32]
}
 800baa0:	bf00      	nop
 800baa2:	371c      	adds	r7, #28
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	fffeff8f 	.word	0xfffeff8f
 800bab0:	40010000 	.word	0x40010000
 800bab4:	40010400 	.word	0x40010400
 800bab8:	40014000 	.word	0x40014000
 800babc:	40014400 	.word	0x40014400
 800bac0:	40014800 	.word	0x40014800

0800bac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a1b      	ldr	r3, [r3, #32]
 800bad8:	f023 0210 	bic.w	r2, r3, #16
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	699b      	ldr	r3, [r3, #24]
 800baea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	4b34      	ldr	r3, [pc, #208]	@ (800bbc0 <TIM_OC2_SetConfig+0xfc>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bafa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	021b      	lsls	r3, r3, #8
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f023 0320 	bic.w	r3, r3, #32
 800bb0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a29      	ldr	r2, [pc, #164]	@ (800bbc4 <TIM_OC2_SetConfig+0x100>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d003      	beq.n	800bb2c <TIM_OC2_SetConfig+0x68>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	4a28      	ldr	r2, [pc, #160]	@ (800bbc8 <TIM_OC2_SetConfig+0x104>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d10d      	bne.n	800bb48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	011b      	lsls	r3, r3, #4
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a1e      	ldr	r2, [pc, #120]	@ (800bbc4 <TIM_OC2_SetConfig+0x100>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d00f      	beq.n	800bb70 <TIM_OC2_SetConfig+0xac>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc8 <TIM_OC2_SetConfig+0x104>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d00b      	beq.n	800bb70 <TIM_OC2_SetConfig+0xac>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a1c      	ldr	r2, [pc, #112]	@ (800bbcc <TIM_OC2_SetConfig+0x108>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d007      	beq.n	800bb70 <TIM_OC2_SetConfig+0xac>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a1b      	ldr	r2, [pc, #108]	@ (800bbd0 <TIM_OC2_SetConfig+0x10c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d003      	beq.n	800bb70 <TIM_OC2_SetConfig+0xac>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a1a      	ldr	r2, [pc, #104]	@ (800bbd4 <TIM_OC2_SetConfig+0x110>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d113      	bne.n	800bb98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	621a      	str	r2, [r3, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	feff8fff 	.word	0xfeff8fff
 800bbc4:	40010000 	.word	0x40010000
 800bbc8:	40010400 	.word	0x40010400
 800bbcc:	40014000 	.word	0x40014000
 800bbd0:	40014400 	.word	0x40014400
 800bbd4:	40014800 	.word	0x40014800

0800bbd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a1b      	ldr	r3, [r3, #32]
 800bbe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4b33      	ldr	r3, [pc, #204]	@ (800bcd0 <TIM_OC3_SetConfig+0xf8>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f023 0303 	bic.w	r3, r3, #3
 800bc0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a28      	ldr	r2, [pc, #160]	@ (800bcd4 <TIM_OC3_SetConfig+0xfc>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d003      	beq.n	800bc3e <TIM_OC3_SetConfig+0x66>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a27      	ldr	r2, [pc, #156]	@ (800bcd8 <TIM_OC3_SetConfig+0x100>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d10d      	bne.n	800bc5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	021b      	lsls	r3, r3, #8
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd4 <TIM_OC3_SetConfig+0xfc>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d00f      	beq.n	800bc82 <TIM_OC3_SetConfig+0xaa>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a1c      	ldr	r2, [pc, #112]	@ (800bcd8 <TIM_OC3_SetConfig+0x100>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d00b      	beq.n	800bc82 <TIM_OC3_SetConfig+0xaa>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a1b      	ldr	r2, [pc, #108]	@ (800bcdc <TIM_OC3_SetConfig+0x104>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d007      	beq.n	800bc82 <TIM_OC3_SetConfig+0xaa>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a1a      	ldr	r2, [pc, #104]	@ (800bce0 <TIM_OC3_SetConfig+0x108>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d003      	beq.n	800bc82 <TIM_OC3_SetConfig+0xaa>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a19      	ldr	r2, [pc, #100]	@ (800bce4 <TIM_OC3_SetConfig+0x10c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d113      	bne.n	800bcaa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bc90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	621a      	str	r2, [r3, #32]
}
 800bcc4:	bf00      	nop
 800bcc6:	371c      	adds	r7, #28
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	fffeff8f 	.word	0xfffeff8f
 800bcd4:	40010000 	.word	0x40010000
 800bcd8:	40010400 	.word	0x40010400
 800bcdc:	40014000 	.word	0x40014000
 800bce0:	40014400 	.word	0x40014400
 800bce4:	40014800 	.word	0x40014800

0800bce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a1b      	ldr	r3, [r3, #32]
 800bcfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	4b24      	ldr	r3, [pc, #144]	@ (800bda4 <TIM_OC4_SetConfig+0xbc>)
 800bd14:	4013      	ands	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	021b      	lsls	r3, r3, #8
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	031b      	lsls	r3, r3, #12
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a19      	ldr	r2, [pc, #100]	@ (800bda8 <TIM_OC4_SetConfig+0xc0>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d00f      	beq.n	800bd68 <TIM_OC4_SetConfig+0x80>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a18      	ldr	r2, [pc, #96]	@ (800bdac <TIM_OC4_SetConfig+0xc4>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d00b      	beq.n	800bd68 <TIM_OC4_SetConfig+0x80>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a17      	ldr	r2, [pc, #92]	@ (800bdb0 <TIM_OC4_SetConfig+0xc8>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d007      	beq.n	800bd68 <TIM_OC4_SetConfig+0x80>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a16      	ldr	r2, [pc, #88]	@ (800bdb4 <TIM_OC4_SetConfig+0xcc>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d003      	beq.n	800bd68 <TIM_OC4_SetConfig+0x80>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a15      	ldr	r2, [pc, #84]	@ (800bdb8 <TIM_OC4_SetConfig+0xd0>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d109      	bne.n	800bd7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	019b      	lsls	r3, r3, #6
 800bd76:	697a      	ldr	r2, [r7, #20]
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	621a      	str	r2, [r3, #32]
}
 800bd96:	bf00      	nop
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	feff8fff 	.word	0xfeff8fff
 800bda8:	40010000 	.word	0x40010000
 800bdac:	40010400 	.word	0x40010400
 800bdb0:	40014000 	.word	0x40014000
 800bdb4:	40014400 	.word	0x40014400
 800bdb8:	40014800 	.word	0x40014800

0800bdbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b087      	sub	sp, #28
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a1b      	ldr	r3, [r3, #32]
 800bdd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	4b21      	ldr	r3, [pc, #132]	@ (800be6c <TIM_OC5_SetConfig+0xb0>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bdfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	041b      	lsls	r3, r3, #16
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4313      	orrs	r3, r2
 800be08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a18      	ldr	r2, [pc, #96]	@ (800be70 <TIM_OC5_SetConfig+0xb4>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d00f      	beq.n	800be32 <TIM_OC5_SetConfig+0x76>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	4a17      	ldr	r2, [pc, #92]	@ (800be74 <TIM_OC5_SetConfig+0xb8>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d00b      	beq.n	800be32 <TIM_OC5_SetConfig+0x76>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a16      	ldr	r2, [pc, #88]	@ (800be78 <TIM_OC5_SetConfig+0xbc>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d007      	beq.n	800be32 <TIM_OC5_SetConfig+0x76>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a15      	ldr	r2, [pc, #84]	@ (800be7c <TIM_OC5_SetConfig+0xc0>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d003      	beq.n	800be32 <TIM_OC5_SetConfig+0x76>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a14      	ldr	r2, [pc, #80]	@ (800be80 <TIM_OC5_SetConfig+0xc4>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d109      	bne.n	800be46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	021b      	lsls	r3, r3, #8
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	4313      	orrs	r3, r2
 800be44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	621a      	str	r2, [r3, #32]
}
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	fffeff8f 	.word	0xfffeff8f
 800be70:	40010000 	.word	0x40010000
 800be74:	40010400 	.word	0x40010400
 800be78:	40014000 	.word	0x40014000
 800be7c:	40014400 	.word	0x40014400
 800be80:	40014800 	.word	0x40014800

0800be84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a1b      	ldr	r3, [r3, #32]
 800be98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4b22      	ldr	r3, [pc, #136]	@ (800bf38 <TIM_OC6_SetConfig+0xb4>)
 800beb0:	4013      	ands	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	021b      	lsls	r3, r3, #8
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	051b      	lsls	r3, r3, #20
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a19      	ldr	r2, [pc, #100]	@ (800bf3c <TIM_OC6_SetConfig+0xb8>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d00f      	beq.n	800befc <TIM_OC6_SetConfig+0x78>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a18      	ldr	r2, [pc, #96]	@ (800bf40 <TIM_OC6_SetConfig+0xbc>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d00b      	beq.n	800befc <TIM_OC6_SetConfig+0x78>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a17      	ldr	r2, [pc, #92]	@ (800bf44 <TIM_OC6_SetConfig+0xc0>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d007      	beq.n	800befc <TIM_OC6_SetConfig+0x78>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a16      	ldr	r2, [pc, #88]	@ (800bf48 <TIM_OC6_SetConfig+0xc4>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d003      	beq.n	800befc <TIM_OC6_SetConfig+0x78>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a15      	ldr	r2, [pc, #84]	@ (800bf4c <TIM_OC6_SetConfig+0xc8>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d109      	bne.n	800bf10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bf02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	029b      	lsls	r3, r3, #10
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	697a      	ldr	r2, [r7, #20]
 800bf14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	621a      	str	r2, [r3, #32]
}
 800bf2a:	bf00      	nop
 800bf2c:	371c      	adds	r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	feff8fff 	.word	0xfeff8fff
 800bf3c:	40010000 	.word	0x40010000
 800bf40:	40010400 	.word	0x40010400
 800bf44:	40014000 	.word	0x40014000
 800bf48:	40014400 	.word	0x40014400
 800bf4c:	40014800 	.word	0x40014800

0800bf50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b086      	sub	sp, #24
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	4b65      	ldr	r3, [pc, #404]	@ (800c100 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	4b62      	ldr	r3, [pc, #392]	@ (800c104 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	693a      	ldr	r2, [r7, #16]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	693a      	ldr	r2, [r7, #16]
 800bf90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4a5c      	ldr	r2, [pc, #368]	@ (800c108 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	f000 80ab 	beq.w	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bf9e:	4a5a      	ldr	r2, [pc, #360]	@ (800c108 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	f200 80a4 	bhi.w	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800bfa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfaa:	f000 80a3 	beq.w	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfb2:	f200 809c 	bhi.w	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800bfb6:	4a55      	ldr	r2, [pc, #340]	@ (800c10c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	f000 809b 	beq.w	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfbe:	4a53      	ldr	r2, [pc, #332]	@ (800c10c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	f200 8094 	bhi.w	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800bfc6:	4a52      	ldr	r2, [pc, #328]	@ (800c110 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	f000 8093 	beq.w	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfce:	4a50      	ldr	r2, [pc, #320]	@ (800c110 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	f200 808c 	bhi.w	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800bfd6:	4a4f      	ldr	r2, [pc, #316]	@ (800c114 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f000 808b 	beq.w	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfde:	4a4d      	ldr	r2, [pc, #308]	@ (800c114 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	f200 8084 	bhi.w	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800bfe6:	4a4c      	ldr	r2, [pc, #304]	@ (800c118 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	f000 8083 	beq.w	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfee:	4a4a      	ldr	r2, [pc, #296]	@ (800c118 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d87c      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800bff4:	4a49      	ldr	r2, [pc, #292]	@ (800c11c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d07c      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bffa:	4a48      	ldr	r2, [pc, #288]	@ (800c11c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d876      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c000:	4a47      	ldr	r2, [pc, #284]	@ (800c120 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d076      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c006:	4a46      	ldr	r2, [pc, #280]	@ (800c120 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d870      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c00c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c010:	d070      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c012:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c016:	d86a      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c018:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c01c:	d06a      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c01e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c022:	d864      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c024:	2b70      	cmp	r3, #112	@ 0x70
 800c026:	d01a      	beq.n	800c05e <TIM_SlaveTimer_SetConfig+0x10e>
 800c028:	2b70      	cmp	r3, #112	@ 0x70
 800c02a:	d860      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c02c:	2b60      	cmp	r3, #96	@ 0x60
 800c02e:	d054      	beq.n	800c0da <TIM_SlaveTimer_SetConfig+0x18a>
 800c030:	2b60      	cmp	r3, #96	@ 0x60
 800c032:	d85c      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c034:	2b50      	cmp	r3, #80	@ 0x50
 800c036:	d046      	beq.n	800c0c6 <TIM_SlaveTimer_SetConfig+0x176>
 800c038:	2b50      	cmp	r3, #80	@ 0x50
 800c03a:	d858      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c03c:	2b40      	cmp	r3, #64	@ 0x40
 800c03e:	d019      	beq.n	800c074 <TIM_SlaveTimer_SetConfig+0x124>
 800c040:	2b40      	cmp	r3, #64	@ 0x40
 800c042:	d854      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c044:	2b30      	cmp	r3, #48	@ 0x30
 800c046:	d055      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c048:	2b30      	cmp	r3, #48	@ 0x30
 800c04a:	d850      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c04c:	2b20      	cmp	r3, #32
 800c04e:	d051      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c050:	2b20      	cmp	r3, #32
 800c052:	d84c      	bhi.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d04d      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c058:	2b10      	cmp	r3, #16
 800c05a:	d04b      	beq.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c05c:	e047      	b.n	800c0ee <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800c06e:	f000 f8d7 	bl	800c220 <TIM_ETR_SetConfig>
      break;
 800c072:	e040      	b.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b05      	cmp	r3, #5
 800c07a:	d101      	bne.n	800c080 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e03b      	b.n	800c0f8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6a1a      	ldr	r2, [r3, #32]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f022 0201 	bic.w	r2, r2, #1
 800c096:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c0a6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68ba      	ldr	r2, [r7, #8]
 800c0ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	621a      	str	r2, [r3, #32]
      break;
 800c0c4:	e017      	b.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	f000 f826 	bl	800c124 <TIM_TI1_ConfigInputStage>
      break;
 800c0d8:	e00d      	b.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	f000 f84b 	bl	800c182 <TIM_TI2_ConfigInputStage>
      break;
 800c0ec:	e003      	b.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f2:	e000      	b.n	800c0f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800c0f4:	bf00      	nop
  }

  return status;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	ffcfff8f 	.word	0xffcfff8f
 800c104:	fffefff8 	.word	0xfffefff8
 800c108:	00200010 	.word	0x00200010
 800c10c:	00100070 	.word	0x00100070
 800c110:	00100060 	.word	0x00100060
 800c114:	00100050 	.word	0x00100050
 800c118:	00100040 	.word	0x00100040
 800c11c:	00100030 	.word	0x00100030
 800c120:	00100020 	.word	0x00100020

0800c124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c124:	b480      	push	{r7}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	f023 0201 	bic.w	r2, r3, #1
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	4313      	orrs	r3, r2
 800c158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f023 030a 	bic.w	r3, r3, #10
 800c160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	4313      	orrs	r3, r2
 800c168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	621a      	str	r2, [r3, #32]
}
 800c176:	bf00      	nop
 800c178:	371c      	adds	r7, #28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c182:	b480      	push	{r7}
 800c184:	b087      	sub	sp, #28
 800c186:	af00      	add	r7, sp, #0
 800c188:	60f8      	str	r0, [r7, #12]
 800c18a:	60b9      	str	r1, [r7, #8]
 800c18c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	f023 0210 	bic.w	r2, r3, #16
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	031b      	lsls	r3, r3, #12
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	621a      	str	r2, [r3, #32]
}
 800c1d6:	bf00      	nop
 800c1d8:	371c      	adds	r7, #28
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	4b09      	ldr	r3, [pc, #36]	@ (800c21c <TIM_ITRx_SetConfig+0x38>)
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4313      	orrs	r3, r2
 800c202:	f043 0307 	orr.w	r3, r3, #7
 800c206:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	609a      	str	r2, [r3, #8]
}
 800c20e:	bf00      	nop
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	ffcfff8f 	.word	0xffcfff8f

0800c220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c220:	b480      	push	{r7}
 800c222:	b087      	sub	sp, #28
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c23a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	021a      	lsls	r2, r3, #8
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	431a      	orrs	r2, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	4313      	orrs	r3, r2
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	609a      	str	r2, [r3, #8]
}
 800c254:	bf00      	nop
 800c256:	371c      	adds	r7, #28
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c260:	b480      	push	{r7}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f003 031f 	and.w	r3, r3, #31
 800c272:	2201      	movs	r2, #1
 800c274:	fa02 f303 	lsl.w	r3, r2, r3
 800c278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6a1a      	ldr	r2, [r3, #32]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	43db      	mvns	r3, r3
 800c282:	401a      	ands	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6a1a      	ldr	r2, [r3, #32]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	f003 031f 	and.w	r3, r3, #31
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	fa01 f303 	lsl.w	r3, r1, r3
 800c298:	431a      	orrs	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	621a      	str	r2, [r3, #32]
}
 800c29e:	bf00      	nop
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
	...

0800c2ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d101      	bne.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	e077      	b.n	800c3b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a35      	ldr	r2, [pc, #212]	@ (800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d004      	beq.n	800c2f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a34      	ldr	r2, [pc, #208]	@ (800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d108      	bne.n	800c30a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c2fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	4313      	orrs	r3, r2
 800c308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	4313      	orrs	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a25      	ldr	r2, [pc, #148]	@ (800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d02c      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c336:	d027      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a22      	ldr	r2, [pc, #136]	@ (800c3c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d022      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a21      	ldr	r2, [pc, #132]	@ (800c3cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d01d      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a1f      	ldr	r2, [pc, #124]	@ (800c3d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d018      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a1a      	ldr	r2, [pc, #104]	@ (800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d013      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a1b      	ldr	r2, [pc, #108]	@ (800c3d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d00e      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a1a      	ldr	r2, [pc, #104]	@ (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d009      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a18      	ldr	r2, [pc, #96]	@ (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d004      	beq.n	800c388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a17      	ldr	r2, [pc, #92]	@ (800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d10c      	bne.n	800c3a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c38e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	68ba      	ldr	r2, [r7, #8]
 800c396:	4313      	orrs	r3, r2
 800c398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40010400 	.word	0x40010400
 800c3c8:	40000400 	.word	0x40000400
 800c3cc:	40000800 	.word	0x40000800
 800c3d0:	40000c00 	.word	0x40000c00
 800c3d4:	40001800 	.word	0x40001800
 800c3d8:	40014000 	.word	0x40014000
 800c3dc:	4000e000 	.word	0x4000e000
 800c3e0:	4000e400 	.word	0x4000e400

0800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e073      	b.n	800c4e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	4313      	orrs	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	041b      	lsls	r3, r3, #16
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	69db      	ldr	r3, [r3, #28]
 800c484:	4313      	orrs	r3, r2
 800c486:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a19      	ldr	r2, [pc, #100]	@ (800c4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d004      	beq.n	800c49c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a18      	ldr	r2, [pc, #96]	@ (800c4f8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d11c      	bne.n	800c4d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4a6:	051b      	lsls	r3, r3, #20
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	40010000 	.word	0x40010000
 800c4f8:	40010400 	.word	0x40010400

0800c4fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e042      	b.n	800c5d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c550:	2b00      	cmp	r3, #0
 800c552:	d106      	bne.n	800c562 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7f6 fff1 	bl	8003544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2224      	movs	r2, #36	@ 0x24
 800c566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f022 0201 	bic.w	r2, r2, #1
 800c578:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f001 faee 	bl	800db64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fc7f 	bl	800ce8c <UART_SetConfig>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b01      	cmp	r3, #1
 800c592:	d101      	bne.n	800c598 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	e01b      	b.n	800c5d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	689a      	ldr	r2, [r3, #8]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f042 0201 	orr.w	r2, r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 fb6d 	bl	800dca8 <UART_CheckIdleState>
 800c5ce:	4603      	mov	r3, r0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b08a      	sub	sp, #40	@ 0x28
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5ec:	2b20      	cmp	r3, #32
 800c5ee:	d167      	bne.n	800c6c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <HAL_UART_Transmit_DMA+0x24>
 800c5f6:	88fb      	ldrh	r3, [r7, #6]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e060      	b.n	800c6c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	68ba      	ldr	r2, [r7, #8]
 800c604:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	88fa      	ldrh	r2, [r7, #6]
 800c60a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	88fa      	ldrh	r2, [r7, #6]
 800c612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2221      	movs	r2, #33	@ 0x21
 800c622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d028      	beq.n	800c680 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c632:	4a26      	ldr	r2, [pc, #152]	@ (800c6cc <HAL_UART_Transmit_DMA+0xf4>)
 800c634:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c63a:	4a25      	ldr	r2, [pc, #148]	@ (800c6d0 <HAL_UART_Transmit_DMA+0xf8>)
 800c63c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c642:	4a24      	ldr	r2, [pc, #144]	@ (800c6d4 <HAL_UART_Transmit_DMA+0xfc>)
 800c644:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c64a:	2200      	movs	r2, #0
 800c64c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c656:	4619      	mov	r1, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3328      	adds	r3, #40	@ 0x28
 800c65e:	461a      	mov	r2, r3
 800c660:	88fb      	ldrh	r3, [r7, #6]
 800c662:	f7f7 ffe9 	bl	8004638 <HAL_DMA_Start_IT>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d009      	beq.n	800c680 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2210      	movs	r2, #16
 800c670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2220      	movs	r2, #32
 800c678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e020      	b.n	800c6c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2240      	movs	r2, #64	@ 0x40
 800c686:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	3308      	adds	r3, #8
 800c68e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	e853 3f00 	ldrex	r3, [r3]
 800c696:	613b      	str	r3, [r7, #16]
   return(result);
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c69e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a8:	623a      	str	r2, [r7, #32]
 800c6aa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ac:	69f9      	ldr	r1, [r7, #28]
 800c6ae:	6a3a      	ldr	r2, [r7, #32]
 800c6b0:	e841 2300 	strex	r3, r2, [r1]
 800c6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1e5      	bne.n	800c688 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e000      	b.n	800c6c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c6c0:	2302      	movs	r3, #2
  }
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3728      	adds	r7, #40	@ 0x28
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	0800e025 	.word	0x0800e025
 800c6d0:	0800e0bb 	.word	0x0800e0bb
 800c6d4:	0800e0d7 	.word	0x0800e0d7

0800c6d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b0ba      	sub	sp, #232	@ 0xe8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	69db      	ldr	r3, [r3, #28]
 800c6e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c6fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c702:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c706:	4013      	ands	r3, r2
 800c708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c70c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11b      	bne.n	800c74c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c718:	f003 0320 	and.w	r3, r3, #32
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d015      	beq.n	800c74c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c724:	f003 0320 	and.w	r3, r3, #32
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d105      	bne.n	800c738 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c72c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f000 8377 	beq.w	800ce30 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	4798      	blx	r3
      }
      return;
 800c74a:	e371      	b.n	800ce30 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c74c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 8123 	beq.w	800c99c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c756:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c75a:	4b8d      	ldr	r3, [pc, #564]	@ (800c990 <HAL_UART_IRQHandler+0x2b8>)
 800c75c:	4013      	ands	r3, r2
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c762:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c766:	4b8b      	ldr	r3, [pc, #556]	@ (800c994 <HAL_UART_IRQHandler+0x2bc>)
 800c768:	4013      	ands	r3, r2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 8116 	beq.w	800c99c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d011      	beq.n	800c7a0 <HAL_UART_IRQHandler+0xc8>
 800c77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00b      	beq.n	800c7a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2201      	movs	r2, #1
 800c78e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c796:	f043 0201 	orr.w	r2, r3, #1
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7a4:	f003 0302 	and.w	r3, r3, #2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d011      	beq.n	800c7d0 <HAL_UART_IRQHandler+0xf8>
 800c7ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00b      	beq.n	800c7d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7c6:	f043 0204 	orr.w	r2, r3, #4
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d4:	f003 0304 	and.w	r3, r3, #4
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d011      	beq.n	800c800 <HAL_UART_IRQHandler+0x128>
 800c7dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2204      	movs	r2, #4
 800c7ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7f6:	f043 0202 	orr.w	r2, r3, #2
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c804:	f003 0308 	and.w	r3, r3, #8
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d017      	beq.n	800c83c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c810:	f003 0320 	and.w	r3, r3, #32
 800c814:	2b00      	cmp	r3, #0
 800c816:	d105      	bne.n	800c824 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c818:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c81c:	4b5c      	ldr	r3, [pc, #368]	@ (800c990 <HAL_UART_IRQHandler+0x2b8>)
 800c81e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2208      	movs	r2, #8
 800c82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c832:	f043 0208 	orr.w	r2, r3, #8
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c840:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c844:	2b00      	cmp	r3, #0
 800c846:	d012      	beq.n	800c86e <HAL_UART_IRQHandler+0x196>
 800c848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c84c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00c      	beq.n	800c86e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c85c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c864:	f043 0220 	orr.w	r2, r3, #32
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 82dd 	beq.w	800ce34 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c87a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c87e:	f003 0320 	and.w	r3, r3, #32
 800c882:	2b00      	cmp	r3, #0
 800c884:	d013      	beq.n	800c8ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c88a:	f003 0320 	and.w	r3, r3, #32
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d105      	bne.n	800c89e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d007      	beq.n	800c8ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689b      	ldr	r3, [r3, #8]
 800c8be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8c2:	2b40      	cmp	r3, #64	@ 0x40
 800c8c4:	d005      	beq.n	800c8d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c8c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d054      	beq.n	800c97c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 fb40 	bl	800df58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e2:	2b40      	cmp	r3, #64	@ 0x40
 800c8e4:	d146      	bne.n	800c974 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c8fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3308      	adds	r3, #8
 800c90e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c91e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c92a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1d9      	bne.n	800c8e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d017      	beq.n	800c96c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c942:	4a15      	ldr	r2, [pc, #84]	@ (800c998 <HAL_UART_IRQHandler+0x2c0>)
 800c944:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7f8 fbfb 	bl	8005148 <HAL_DMA_Abort_IT>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d019      	beq.n	800c98c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c966:	4610      	mov	r0, r2
 800c968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c96a:	e00f      	b.n	800c98c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 fa77 	bl	800ce60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c972:	e00b      	b.n	800c98c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fa73 	bl	800ce60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c97a:	e007      	b.n	800c98c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fa6f 	bl	800ce60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c98a:	e253      	b.n	800ce34 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c98c:	bf00      	nop
    return;
 800c98e:	e251      	b.n	800ce34 <HAL_UART_IRQHandler+0x75c>
 800c990:	10000001 	.word	0x10000001
 800c994:	04000120 	.word	0x04000120
 800c998:	0800e157 	.word	0x0800e157

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	f040 81e7 	bne.w	800cd74 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9aa:	f003 0310 	and.w	r3, r3, #16
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 81e0 	beq.w	800cd74 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9b8:	f003 0310 	and.w	r3, r3, #16
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 81d9 	beq.w	800cd74 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2210      	movs	r2, #16
 800c9c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9d4:	2b40      	cmp	r3, #64	@ 0x40
 800c9d6:	f040 8151 	bne.w	800cc7c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a96      	ldr	r2, [pc, #600]	@ (800cc3c <HAL_UART_IRQHandler+0x564>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d068      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a93      	ldr	r2, [pc, #588]	@ (800cc40 <HAL_UART_IRQHandler+0x568>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d061      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a91      	ldr	r2, [pc, #580]	@ (800cc44 <HAL_UART_IRQHandler+0x56c>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d05a      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a8e      	ldr	r2, [pc, #568]	@ (800cc48 <HAL_UART_IRQHandler+0x570>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d053      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a8c      	ldr	r2, [pc, #560]	@ (800cc4c <HAL_UART_IRQHandler+0x574>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d04c      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a89      	ldr	r2, [pc, #548]	@ (800cc50 <HAL_UART_IRQHandler+0x578>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d045      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a87      	ldr	r2, [pc, #540]	@ (800cc54 <HAL_UART_IRQHandler+0x57c>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d03e      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a84      	ldr	r2, [pc, #528]	@ (800cc58 <HAL_UART_IRQHandler+0x580>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d037      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a82      	ldr	r2, [pc, #520]	@ (800cc5c <HAL_UART_IRQHandler+0x584>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d030      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a7f      	ldr	r2, [pc, #508]	@ (800cc60 <HAL_UART_IRQHandler+0x588>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d029      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a7d      	ldr	r2, [pc, #500]	@ (800cc64 <HAL_UART_IRQHandler+0x58c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d022      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a7a      	ldr	r2, [pc, #488]	@ (800cc68 <HAL_UART_IRQHandler+0x590>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d01b      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a78      	ldr	r2, [pc, #480]	@ (800cc6c <HAL_UART_IRQHandler+0x594>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d014      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a75      	ldr	r2, [pc, #468]	@ (800cc70 <HAL_UART_IRQHandler+0x598>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d00d      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a73      	ldr	r2, [pc, #460]	@ (800cc74 <HAL_UART_IRQHandler+0x59c>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d006      	beq.n	800caba <HAL_UART_IRQHandler+0x3e2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a70      	ldr	r2, [pc, #448]	@ (800cc78 <HAL_UART_IRQHandler+0x5a0>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d106      	bne.n	800cac8 <HAL_UART_IRQHandler+0x3f0>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	e005      	b.n	800cad4 <HAL_UART_IRQHandler+0x3fc>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 81ab 	beq.w	800ce38 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800caec:	429a      	cmp	r2, r3
 800caee:	f080 81a3 	bcs.w	800ce38 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800caf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb08:	f000 8087 	beq.w	800cc1a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cb20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cb42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb46:	e841 2300 	strex	r3, r2, [r1]
 800cb4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cb4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1da      	bne.n	800cb0c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb60:	e853 3f00 	ldrex	r3, [r3]
 800cb64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cb66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb68:	f023 0301 	bic.w	r3, r3, #1
 800cb6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	3308      	adds	r3, #8
 800cb76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cb7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cb82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cb86:	e841 2300 	strex	r3, r2, [r1]
 800cb8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cb8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1e1      	bne.n	800cb56 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	3308      	adds	r3, #8
 800cb98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb9c:	e853 3f00 	ldrex	r3, [r3]
 800cba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cbb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cbb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cbbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cbbe:	e841 2300 	strex	r3, r2, [r1]
 800cbc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cbc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1e3      	bne.n	800cb92 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2220      	movs	r2, #32
 800cbce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbe0:	e853 3f00 	ldrex	r3, [r3]
 800cbe4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cbe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbe8:	f023 0310 	bic.w	r3, r3, #16
 800cbec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cbfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc02:	e841 2300 	strex	r3, r2, [r1]
 800cc06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1e4      	bne.n	800cbd8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7f7 ff79 	bl	8004b0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f91d 	bl	800ce74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc3a:	e0fd      	b.n	800ce38 <HAL_UART_IRQHandler+0x760>
 800cc3c:	40020010 	.word	0x40020010
 800cc40:	40020028 	.word	0x40020028
 800cc44:	40020040 	.word	0x40020040
 800cc48:	40020058 	.word	0x40020058
 800cc4c:	40020070 	.word	0x40020070
 800cc50:	40020088 	.word	0x40020088
 800cc54:	400200a0 	.word	0x400200a0
 800cc58:	400200b8 	.word	0x400200b8
 800cc5c:	40020410 	.word	0x40020410
 800cc60:	40020428 	.word	0x40020428
 800cc64:	40020440 	.word	0x40020440
 800cc68:	40020458 	.word	0x40020458
 800cc6c:	40020470 	.word	0x40020470
 800cc70:	40020488 	.word	0x40020488
 800cc74:	400204a0 	.word	0x400204a0
 800cc78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 80cf 	beq.w	800ce3c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cc9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 80ca 	beq.w	800ce3c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb0:	e853 3f00 	ldrex	r3, [r3]
 800ccb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ccca:	647b      	str	r3, [r7, #68]	@ 0x44
 800cccc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccd2:	e841 2300 	strex	r3, r2, [r1]
 800ccd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1e4      	bne.n	800cca8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3308      	adds	r3, #8
 800cce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce8:	e853 3f00 	ldrex	r3, [r3]
 800ccec:	623b      	str	r3, [r7, #32]
   return(result);
 800ccee:	6a3a      	ldr	r2, [r7, #32]
 800ccf0:	4b55      	ldr	r3, [pc, #340]	@ (800ce48 <HAL_UART_IRQHandler+0x770>)
 800ccf2:	4013      	ands	r3, r2
 800ccf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cd02:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd0a:	e841 2300 	strex	r3, r2, [r1]
 800cd0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e3      	bne.n	800ccde <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	e853 3f00 	ldrex	r3, [r3]
 800cd36:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f023 0310 	bic.w	r3, r3, #16
 800cd3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cd4c:	61fb      	str	r3, [r7, #28]
 800cd4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd50:	69b9      	ldr	r1, [r7, #24]
 800cd52:	69fa      	ldr	r2, [r7, #28]
 800cd54:	e841 2300 	strex	r3, r2, [r1]
 800cd58:	617b      	str	r3, [r7, #20]
   return(result);
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e4      	bne.n	800cd2a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cd66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 f881 	bl	800ce74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd72:	e063      	b.n	800ce3c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cd74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00e      	beq.n	800cd9e <HAL_UART_IRQHandler+0x6c6>
 800cd80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d008      	beq.n	800cd9e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cd94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f001 fa1e 	bl	800e1d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd9c:	e051      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cda2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d014      	beq.n	800cdd4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cdaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d105      	bne.n	800cdc2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cdb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d008      	beq.n	800cdd4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d03a      	beq.n	800ce40 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	4798      	blx	r3
    }
    return;
 800cdd2:	e035      	b.n	800ce40 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cdd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d009      	beq.n	800cdf4 <HAL_UART_IRQHandler+0x71c>
 800cde0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cde4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f001 f9c8 	bl	800e182 <UART_EndTransmit_IT>
    return;
 800cdf2:	e026      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cdf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d009      	beq.n	800ce14 <HAL_UART_IRQHandler+0x73c>
 800ce00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f001 f9f7 	bl	800e200 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce12:	e016      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d010      	beq.n	800ce42 <HAL_UART_IRQHandler+0x76a>
 800ce20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	da0c      	bge.n	800ce42 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f001 f9df 	bl	800e1ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce2e:	e008      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
      return;
 800ce30:	bf00      	nop
 800ce32:	e006      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
    return;
 800ce34:	bf00      	nop
 800ce36:	e004      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
      return;
 800ce38:	bf00      	nop
 800ce3a:	e002      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
      return;
 800ce3c:	bf00      	nop
 800ce3e:	e000      	b.n	800ce42 <HAL_UART_IRQHandler+0x76a>
    return;
 800ce40:	bf00      	nop
  }
}
 800ce42:	37e8      	adds	r7, #232	@ 0xe8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	effffffe 	.word	0xeffffffe

0800ce4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ce68:	bf00      	nop
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce90:	b092      	sub	sp, #72	@ 0x48
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	689a      	ldr	r2, [r3, #8]
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	431a      	orrs	r2, r3
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	695b      	ldr	r3, [r3, #20]
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	4bbe      	ldr	r3, [pc, #760]	@ (800d1b4 <UART_SetConfig+0x328>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	6812      	ldr	r2, [r2, #0]
 800cec2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cec4:	430b      	orrs	r3, r1
 800cec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	430a      	orrs	r2, r1
 800cedc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4ab3      	ldr	r2, [pc, #716]	@ (800d1b8 <UART_SetConfig+0x32c>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d004      	beq.n	800cef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cef4:	4313      	orrs	r3, r2
 800cef6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	689a      	ldr	r2, [r3, #8]
 800cefe:	4baf      	ldr	r3, [pc, #700]	@ (800d1bc <UART_SetConfig+0x330>)
 800cf00:	4013      	ands	r3, r2
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	6812      	ldr	r2, [r2, #0]
 800cf06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf08:	430b      	orrs	r3, r1
 800cf0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf12:	f023 010f 	bic.w	r1, r3, #15
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4aa6      	ldr	r2, [pc, #664]	@ (800d1c0 <UART_SetConfig+0x334>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d177      	bne.n	800d01c <UART_SetConfig+0x190>
 800cf2c:	4ba5      	ldr	r3, [pc, #660]	@ (800d1c4 <UART_SetConfig+0x338>)
 800cf2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf34:	2b28      	cmp	r3, #40	@ 0x28
 800cf36:	d86d      	bhi.n	800d014 <UART_SetConfig+0x188>
 800cf38:	a201      	add	r2, pc, #4	@ (adr r2, 800cf40 <UART_SetConfig+0xb4>)
 800cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3e:	bf00      	nop
 800cf40:	0800cfe5 	.word	0x0800cfe5
 800cf44:	0800d015 	.word	0x0800d015
 800cf48:	0800d015 	.word	0x0800d015
 800cf4c:	0800d015 	.word	0x0800d015
 800cf50:	0800d015 	.word	0x0800d015
 800cf54:	0800d015 	.word	0x0800d015
 800cf58:	0800d015 	.word	0x0800d015
 800cf5c:	0800d015 	.word	0x0800d015
 800cf60:	0800cfed 	.word	0x0800cfed
 800cf64:	0800d015 	.word	0x0800d015
 800cf68:	0800d015 	.word	0x0800d015
 800cf6c:	0800d015 	.word	0x0800d015
 800cf70:	0800d015 	.word	0x0800d015
 800cf74:	0800d015 	.word	0x0800d015
 800cf78:	0800d015 	.word	0x0800d015
 800cf7c:	0800d015 	.word	0x0800d015
 800cf80:	0800cff5 	.word	0x0800cff5
 800cf84:	0800d015 	.word	0x0800d015
 800cf88:	0800d015 	.word	0x0800d015
 800cf8c:	0800d015 	.word	0x0800d015
 800cf90:	0800d015 	.word	0x0800d015
 800cf94:	0800d015 	.word	0x0800d015
 800cf98:	0800d015 	.word	0x0800d015
 800cf9c:	0800d015 	.word	0x0800d015
 800cfa0:	0800cffd 	.word	0x0800cffd
 800cfa4:	0800d015 	.word	0x0800d015
 800cfa8:	0800d015 	.word	0x0800d015
 800cfac:	0800d015 	.word	0x0800d015
 800cfb0:	0800d015 	.word	0x0800d015
 800cfb4:	0800d015 	.word	0x0800d015
 800cfb8:	0800d015 	.word	0x0800d015
 800cfbc:	0800d015 	.word	0x0800d015
 800cfc0:	0800d005 	.word	0x0800d005
 800cfc4:	0800d015 	.word	0x0800d015
 800cfc8:	0800d015 	.word	0x0800d015
 800cfcc:	0800d015 	.word	0x0800d015
 800cfd0:	0800d015 	.word	0x0800d015
 800cfd4:	0800d015 	.word	0x0800d015
 800cfd8:	0800d015 	.word	0x0800d015
 800cfdc:	0800d015 	.word	0x0800d015
 800cfe0:	0800d00d 	.word	0x0800d00d
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfea:	e326      	b.n	800d63a <UART_SetConfig+0x7ae>
 800cfec:	2304      	movs	r3, #4
 800cfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff2:	e322      	b.n	800d63a <UART_SetConfig+0x7ae>
 800cff4:	2308      	movs	r3, #8
 800cff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffa:	e31e      	b.n	800d63a <UART_SetConfig+0x7ae>
 800cffc:	2310      	movs	r3, #16
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e31a      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d004:	2320      	movs	r3, #32
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e316      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d00c:	2340      	movs	r3, #64	@ 0x40
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e312      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d014:	2380      	movs	r3, #128	@ 0x80
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e30e      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a69      	ldr	r2, [pc, #420]	@ (800d1c8 <UART_SetConfig+0x33c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d130      	bne.n	800d088 <UART_SetConfig+0x1fc>
 800d026:	4b67      	ldr	r3, [pc, #412]	@ (800d1c4 <UART_SetConfig+0x338>)
 800d028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d02a:	f003 0307 	and.w	r3, r3, #7
 800d02e:	2b05      	cmp	r3, #5
 800d030:	d826      	bhi.n	800d080 <UART_SetConfig+0x1f4>
 800d032:	a201      	add	r2, pc, #4	@ (adr r2, 800d038 <UART_SetConfig+0x1ac>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d051 	.word	0x0800d051
 800d03c:	0800d059 	.word	0x0800d059
 800d040:	0800d061 	.word	0x0800d061
 800d044:	0800d069 	.word	0x0800d069
 800d048:	0800d071 	.word	0x0800d071
 800d04c:	0800d079 	.word	0x0800d079
 800d050:	2300      	movs	r3, #0
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d056:	e2f0      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d058:	2304      	movs	r3, #4
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05e:	e2ec      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d060:	2308      	movs	r3, #8
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e2e8      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d068:	2310      	movs	r3, #16
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e2e4      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d070:	2320      	movs	r3, #32
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e2e0      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d078:	2340      	movs	r3, #64	@ 0x40
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e2dc      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d080:	2380      	movs	r3, #128	@ 0x80
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e2d8      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a4f      	ldr	r2, [pc, #316]	@ (800d1cc <UART_SetConfig+0x340>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d130      	bne.n	800d0f4 <UART_SetConfig+0x268>
 800d092:	4b4c      	ldr	r3, [pc, #304]	@ (800d1c4 <UART_SetConfig+0x338>)
 800d094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b05      	cmp	r3, #5
 800d09c:	d826      	bhi.n	800d0ec <UART_SetConfig+0x260>
 800d09e:	a201      	add	r2, pc, #4	@ (adr r2, 800d0a4 <UART_SetConfig+0x218>)
 800d0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a4:	0800d0bd 	.word	0x0800d0bd
 800d0a8:	0800d0c5 	.word	0x0800d0c5
 800d0ac:	0800d0cd 	.word	0x0800d0cd
 800d0b0:	0800d0d5 	.word	0x0800d0d5
 800d0b4:	0800d0dd 	.word	0x0800d0dd
 800d0b8:	0800d0e5 	.word	0x0800d0e5
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c2:	e2ba      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e2b6      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0cc:	2308      	movs	r3, #8
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e2b2      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e2ae      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0dc:	2320      	movs	r3, #32
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e2aa      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0e4:	2340      	movs	r3, #64	@ 0x40
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e2a6      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0ec:	2380      	movs	r3, #128	@ 0x80
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e2a2      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a35      	ldr	r2, [pc, #212]	@ (800d1d0 <UART_SetConfig+0x344>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d130      	bne.n	800d160 <UART_SetConfig+0x2d4>
 800d0fe:	4b31      	ldr	r3, [pc, #196]	@ (800d1c4 <UART_SetConfig+0x338>)
 800d100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d102:	f003 0307 	and.w	r3, r3, #7
 800d106:	2b05      	cmp	r3, #5
 800d108:	d826      	bhi.n	800d158 <UART_SetConfig+0x2cc>
 800d10a:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <UART_SetConfig+0x284>)
 800d10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d110:	0800d129 	.word	0x0800d129
 800d114:	0800d131 	.word	0x0800d131
 800d118:	0800d139 	.word	0x0800d139
 800d11c:	0800d141 	.word	0x0800d141
 800d120:	0800d149 	.word	0x0800d149
 800d124:	0800d151 	.word	0x0800d151
 800d128:	2300      	movs	r3, #0
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12e:	e284      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d130:	2304      	movs	r3, #4
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d136:	e280      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d138:	2308      	movs	r3, #8
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13e:	e27c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d140:	2310      	movs	r3, #16
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d146:	e278      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d148:	2320      	movs	r3, #32
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14e:	e274      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d150:	2340      	movs	r3, #64	@ 0x40
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d156:	e270      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d158:	2380      	movs	r3, #128	@ 0x80
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15e:	e26c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d4 <UART_SetConfig+0x348>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d142      	bne.n	800d1f0 <UART_SetConfig+0x364>
 800d16a:	4b16      	ldr	r3, [pc, #88]	@ (800d1c4 <UART_SetConfig+0x338>)
 800d16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b05      	cmp	r3, #5
 800d174:	d838      	bhi.n	800d1e8 <UART_SetConfig+0x35c>
 800d176:	a201      	add	r2, pc, #4	@ (adr r2, 800d17c <UART_SetConfig+0x2f0>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d195 	.word	0x0800d195
 800d180:	0800d19d 	.word	0x0800d19d
 800d184:	0800d1a5 	.word	0x0800d1a5
 800d188:	0800d1ad 	.word	0x0800d1ad
 800d18c:	0800d1d9 	.word	0x0800d1d9
 800d190:	0800d1e1 	.word	0x0800d1e1
 800d194:	2300      	movs	r3, #0
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19a:	e24e      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d19c:	2304      	movs	r3, #4
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a2:	e24a      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1aa:	e246      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b2:	e242      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d1b4:	cfff69f3 	.word	0xcfff69f3
 800d1b8:	58000c00 	.word	0x58000c00
 800d1bc:	11fff4ff 	.word	0x11fff4ff
 800d1c0:	40011000 	.word	0x40011000
 800d1c4:	58024400 	.word	0x58024400
 800d1c8:	40004400 	.word	0x40004400
 800d1cc:	40004800 	.word	0x40004800
 800d1d0:	40004c00 	.word	0x40004c00
 800d1d4:	40005000 	.word	0x40005000
 800d1d8:	2320      	movs	r3, #32
 800d1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1de:	e22c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d1e0:	2340      	movs	r3, #64	@ 0x40
 800d1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e6:	e228      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d1e8:	2380      	movs	r3, #128	@ 0x80
 800d1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ee:	e224      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4ab1      	ldr	r2, [pc, #708]	@ (800d4bc <UART_SetConfig+0x630>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d176      	bne.n	800d2e8 <UART_SetConfig+0x45c>
 800d1fa:	4bb1      	ldr	r3, [pc, #708]	@ (800d4c0 <UART_SetConfig+0x634>)
 800d1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d202:	2b28      	cmp	r3, #40	@ 0x28
 800d204:	d86c      	bhi.n	800d2e0 <UART_SetConfig+0x454>
 800d206:	a201      	add	r2, pc, #4	@ (adr r2, 800d20c <UART_SetConfig+0x380>)
 800d208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20c:	0800d2b1 	.word	0x0800d2b1
 800d210:	0800d2e1 	.word	0x0800d2e1
 800d214:	0800d2e1 	.word	0x0800d2e1
 800d218:	0800d2e1 	.word	0x0800d2e1
 800d21c:	0800d2e1 	.word	0x0800d2e1
 800d220:	0800d2e1 	.word	0x0800d2e1
 800d224:	0800d2e1 	.word	0x0800d2e1
 800d228:	0800d2e1 	.word	0x0800d2e1
 800d22c:	0800d2b9 	.word	0x0800d2b9
 800d230:	0800d2e1 	.word	0x0800d2e1
 800d234:	0800d2e1 	.word	0x0800d2e1
 800d238:	0800d2e1 	.word	0x0800d2e1
 800d23c:	0800d2e1 	.word	0x0800d2e1
 800d240:	0800d2e1 	.word	0x0800d2e1
 800d244:	0800d2e1 	.word	0x0800d2e1
 800d248:	0800d2e1 	.word	0x0800d2e1
 800d24c:	0800d2c1 	.word	0x0800d2c1
 800d250:	0800d2e1 	.word	0x0800d2e1
 800d254:	0800d2e1 	.word	0x0800d2e1
 800d258:	0800d2e1 	.word	0x0800d2e1
 800d25c:	0800d2e1 	.word	0x0800d2e1
 800d260:	0800d2e1 	.word	0x0800d2e1
 800d264:	0800d2e1 	.word	0x0800d2e1
 800d268:	0800d2e1 	.word	0x0800d2e1
 800d26c:	0800d2c9 	.word	0x0800d2c9
 800d270:	0800d2e1 	.word	0x0800d2e1
 800d274:	0800d2e1 	.word	0x0800d2e1
 800d278:	0800d2e1 	.word	0x0800d2e1
 800d27c:	0800d2e1 	.word	0x0800d2e1
 800d280:	0800d2e1 	.word	0x0800d2e1
 800d284:	0800d2e1 	.word	0x0800d2e1
 800d288:	0800d2e1 	.word	0x0800d2e1
 800d28c:	0800d2d1 	.word	0x0800d2d1
 800d290:	0800d2e1 	.word	0x0800d2e1
 800d294:	0800d2e1 	.word	0x0800d2e1
 800d298:	0800d2e1 	.word	0x0800d2e1
 800d29c:	0800d2e1 	.word	0x0800d2e1
 800d2a0:	0800d2e1 	.word	0x0800d2e1
 800d2a4:	0800d2e1 	.word	0x0800d2e1
 800d2a8:	0800d2e1 	.word	0x0800d2e1
 800d2ac:	0800d2d9 	.word	0x0800d2d9
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2b6:	e1c0      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2be:	e1bc      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c6:	e1b8      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ce:	e1b4      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d6:	e1b0      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2d8:	2340      	movs	r3, #64	@ 0x40
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2de:	e1ac      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2e0:	2380      	movs	r3, #128	@ 0x80
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e6:	e1a8      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a75      	ldr	r2, [pc, #468]	@ (800d4c4 <UART_SetConfig+0x638>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d130      	bne.n	800d354 <UART_SetConfig+0x4c8>
 800d2f2:	4b73      	ldr	r3, [pc, #460]	@ (800d4c0 <UART_SetConfig+0x634>)
 800d2f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	d826      	bhi.n	800d34c <UART_SetConfig+0x4c0>
 800d2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <UART_SetConfig+0x478>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d32d 	.word	0x0800d32d
 800d310:	0800d335 	.word	0x0800d335
 800d314:	0800d33d 	.word	0x0800d33d
 800d318:	0800d345 	.word	0x0800d345
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d322:	e18a      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32a:	e186      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d332:	e182      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e17e      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d33c:	2320      	movs	r3, #32
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e17a      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d344:	2340      	movs	r3, #64	@ 0x40
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e176      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d34c:	2380      	movs	r3, #128	@ 0x80
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e172      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a5b      	ldr	r2, [pc, #364]	@ (800d4c8 <UART_SetConfig+0x63c>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d130      	bne.n	800d3c0 <UART_SetConfig+0x534>
 800d35e:	4b58      	ldr	r3, [pc, #352]	@ (800d4c0 <UART_SetConfig+0x634>)
 800d360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b05      	cmp	r3, #5
 800d368:	d826      	bhi.n	800d3b8 <UART_SetConfig+0x52c>
 800d36a:	a201      	add	r2, pc, #4	@ (adr r2, 800d370 <UART_SetConfig+0x4e4>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d389 	.word	0x0800d389
 800d374:	0800d391 	.word	0x0800d391
 800d378:	0800d399 	.word	0x0800d399
 800d37c:	0800d3a1 	.word	0x0800d3a1
 800d380:	0800d3a9 	.word	0x0800d3a9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2300      	movs	r3, #0
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d38e:	e154      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d396:	e150      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39e:	e14c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e148      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e144      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d3b0:	2340      	movs	r3, #64	@ 0x40
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e140      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d3b8:	2380      	movs	r3, #128	@ 0x80
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e13c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a41      	ldr	r2, [pc, #260]	@ (800d4cc <UART_SetConfig+0x640>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	f040 8082 	bne.w	800d4d0 <UART_SetConfig+0x644>
 800d3cc:	4b3c      	ldr	r3, [pc, #240]	@ (800d4c0 <UART_SetConfig+0x634>)
 800d3ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3d4:	2b28      	cmp	r3, #40	@ 0x28
 800d3d6:	d86d      	bhi.n	800d4b4 <UART_SetConfig+0x628>
 800d3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <UART_SetConfig+0x554>)
 800d3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3de:	bf00      	nop
 800d3e0:	0800d485 	.word	0x0800d485
 800d3e4:	0800d4b5 	.word	0x0800d4b5
 800d3e8:	0800d4b5 	.word	0x0800d4b5
 800d3ec:	0800d4b5 	.word	0x0800d4b5
 800d3f0:	0800d4b5 	.word	0x0800d4b5
 800d3f4:	0800d4b5 	.word	0x0800d4b5
 800d3f8:	0800d4b5 	.word	0x0800d4b5
 800d3fc:	0800d4b5 	.word	0x0800d4b5
 800d400:	0800d48d 	.word	0x0800d48d
 800d404:	0800d4b5 	.word	0x0800d4b5
 800d408:	0800d4b5 	.word	0x0800d4b5
 800d40c:	0800d4b5 	.word	0x0800d4b5
 800d410:	0800d4b5 	.word	0x0800d4b5
 800d414:	0800d4b5 	.word	0x0800d4b5
 800d418:	0800d4b5 	.word	0x0800d4b5
 800d41c:	0800d4b5 	.word	0x0800d4b5
 800d420:	0800d495 	.word	0x0800d495
 800d424:	0800d4b5 	.word	0x0800d4b5
 800d428:	0800d4b5 	.word	0x0800d4b5
 800d42c:	0800d4b5 	.word	0x0800d4b5
 800d430:	0800d4b5 	.word	0x0800d4b5
 800d434:	0800d4b5 	.word	0x0800d4b5
 800d438:	0800d4b5 	.word	0x0800d4b5
 800d43c:	0800d4b5 	.word	0x0800d4b5
 800d440:	0800d49d 	.word	0x0800d49d
 800d444:	0800d4b5 	.word	0x0800d4b5
 800d448:	0800d4b5 	.word	0x0800d4b5
 800d44c:	0800d4b5 	.word	0x0800d4b5
 800d450:	0800d4b5 	.word	0x0800d4b5
 800d454:	0800d4b5 	.word	0x0800d4b5
 800d458:	0800d4b5 	.word	0x0800d4b5
 800d45c:	0800d4b5 	.word	0x0800d4b5
 800d460:	0800d4a5 	.word	0x0800d4a5
 800d464:	0800d4b5 	.word	0x0800d4b5
 800d468:	0800d4b5 	.word	0x0800d4b5
 800d46c:	0800d4b5 	.word	0x0800d4b5
 800d470:	0800d4b5 	.word	0x0800d4b5
 800d474:	0800d4b5 	.word	0x0800d4b5
 800d478:	0800d4b5 	.word	0x0800d4b5
 800d47c:	0800d4b5 	.word	0x0800d4b5
 800d480:	0800d4ad 	.word	0x0800d4ad
 800d484:	2301      	movs	r3, #1
 800d486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48a:	e0d6      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d48c:	2304      	movs	r3, #4
 800d48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d492:	e0d2      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d494:	2308      	movs	r3, #8
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49a:	e0ce      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d49c:	2310      	movs	r3, #16
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a2:	e0ca      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4aa:	e0c6      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d4ac:	2340      	movs	r3, #64	@ 0x40
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b2:	e0c2      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d4b4:	2380      	movs	r3, #128	@ 0x80
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ba:	e0be      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d4bc:	40011400 	.word	0x40011400
 800d4c0:	58024400 	.word	0x58024400
 800d4c4:	40007800 	.word	0x40007800
 800d4c8:	40007c00 	.word	0x40007c00
 800d4cc:	40011800 	.word	0x40011800
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4aad      	ldr	r2, [pc, #692]	@ (800d78c <UART_SetConfig+0x900>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d176      	bne.n	800d5c8 <UART_SetConfig+0x73c>
 800d4da:	4bad      	ldr	r3, [pc, #692]	@ (800d790 <UART_SetConfig+0x904>)
 800d4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4e2:	2b28      	cmp	r3, #40	@ 0x28
 800d4e4:	d86c      	bhi.n	800d5c0 <UART_SetConfig+0x734>
 800d4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4ec <UART_SetConfig+0x660>)
 800d4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ec:	0800d591 	.word	0x0800d591
 800d4f0:	0800d5c1 	.word	0x0800d5c1
 800d4f4:	0800d5c1 	.word	0x0800d5c1
 800d4f8:	0800d5c1 	.word	0x0800d5c1
 800d4fc:	0800d5c1 	.word	0x0800d5c1
 800d500:	0800d5c1 	.word	0x0800d5c1
 800d504:	0800d5c1 	.word	0x0800d5c1
 800d508:	0800d5c1 	.word	0x0800d5c1
 800d50c:	0800d599 	.word	0x0800d599
 800d510:	0800d5c1 	.word	0x0800d5c1
 800d514:	0800d5c1 	.word	0x0800d5c1
 800d518:	0800d5c1 	.word	0x0800d5c1
 800d51c:	0800d5c1 	.word	0x0800d5c1
 800d520:	0800d5c1 	.word	0x0800d5c1
 800d524:	0800d5c1 	.word	0x0800d5c1
 800d528:	0800d5c1 	.word	0x0800d5c1
 800d52c:	0800d5a1 	.word	0x0800d5a1
 800d530:	0800d5c1 	.word	0x0800d5c1
 800d534:	0800d5c1 	.word	0x0800d5c1
 800d538:	0800d5c1 	.word	0x0800d5c1
 800d53c:	0800d5c1 	.word	0x0800d5c1
 800d540:	0800d5c1 	.word	0x0800d5c1
 800d544:	0800d5c1 	.word	0x0800d5c1
 800d548:	0800d5c1 	.word	0x0800d5c1
 800d54c:	0800d5a9 	.word	0x0800d5a9
 800d550:	0800d5c1 	.word	0x0800d5c1
 800d554:	0800d5c1 	.word	0x0800d5c1
 800d558:	0800d5c1 	.word	0x0800d5c1
 800d55c:	0800d5c1 	.word	0x0800d5c1
 800d560:	0800d5c1 	.word	0x0800d5c1
 800d564:	0800d5c1 	.word	0x0800d5c1
 800d568:	0800d5c1 	.word	0x0800d5c1
 800d56c:	0800d5b1 	.word	0x0800d5b1
 800d570:	0800d5c1 	.word	0x0800d5c1
 800d574:	0800d5c1 	.word	0x0800d5c1
 800d578:	0800d5c1 	.word	0x0800d5c1
 800d57c:	0800d5c1 	.word	0x0800d5c1
 800d580:	0800d5c1 	.word	0x0800d5c1
 800d584:	0800d5c1 	.word	0x0800d5c1
 800d588:	0800d5c1 	.word	0x0800d5c1
 800d58c:	0800d5b9 	.word	0x0800d5b9
 800d590:	2301      	movs	r3, #1
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d596:	e050      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d598:	2304      	movs	r3, #4
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d59e:	e04c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d5a0:	2308      	movs	r3, #8
 800d5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5a6:	e048      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d5a8:	2310      	movs	r3, #16
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ae:	e044      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d5b0:	2320      	movs	r3, #32
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e040      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d5b8:	2340      	movs	r3, #64	@ 0x40
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5be:	e03c      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d5c0:	2380      	movs	r3, #128	@ 0x80
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5c6:	e038      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a71      	ldr	r2, [pc, #452]	@ (800d794 <UART_SetConfig+0x908>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d130      	bne.n	800d634 <UART_SetConfig+0x7a8>
 800d5d2:	4b6f      	ldr	r3, [pc, #444]	@ (800d790 <UART_SetConfig+0x904>)
 800d5d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5d6:	f003 0307 	and.w	r3, r3, #7
 800d5da:	2b05      	cmp	r3, #5
 800d5dc:	d826      	bhi.n	800d62c <UART_SetConfig+0x7a0>
 800d5de:	a201      	add	r2, pc, #4	@ (adr r2, 800d5e4 <UART_SetConfig+0x758>)
 800d5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e4:	0800d5fd 	.word	0x0800d5fd
 800d5e8:	0800d605 	.word	0x0800d605
 800d5ec:	0800d60d 	.word	0x0800d60d
 800d5f0:	0800d615 	.word	0x0800d615
 800d5f4:	0800d61d 	.word	0x0800d61d
 800d5f8:	0800d625 	.word	0x0800d625
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d602:	e01a      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d604:	2304      	movs	r3, #4
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60a:	e016      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d60c:	2308      	movs	r3, #8
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d612:	e012      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d614:	2310      	movs	r3, #16
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e00e      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d61c:	2320      	movs	r3, #32
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e00a      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d624:	2340      	movs	r3, #64	@ 0x40
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e006      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d62c:	2380      	movs	r3, #128	@ 0x80
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e002      	b.n	800d63a <UART_SetConfig+0x7ae>
 800d634:	2380      	movs	r3, #128	@ 0x80
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a55      	ldr	r2, [pc, #340]	@ (800d794 <UART_SetConfig+0x908>)
 800d640:	4293      	cmp	r3, r2
 800d642:	f040 80f8 	bne.w	800d836 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d646:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d64a:	2b20      	cmp	r3, #32
 800d64c:	dc46      	bgt.n	800d6dc <UART_SetConfig+0x850>
 800d64e:	2b02      	cmp	r3, #2
 800d650:	db75      	blt.n	800d73e <UART_SetConfig+0x8b2>
 800d652:	3b02      	subs	r3, #2
 800d654:	2b1e      	cmp	r3, #30
 800d656:	d872      	bhi.n	800d73e <UART_SetConfig+0x8b2>
 800d658:	a201      	add	r2, pc, #4	@ (adr r2, 800d660 <UART_SetConfig+0x7d4>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d6e3 	.word	0x0800d6e3
 800d664:	0800d73f 	.word	0x0800d73f
 800d668:	0800d6eb 	.word	0x0800d6eb
 800d66c:	0800d73f 	.word	0x0800d73f
 800d670:	0800d73f 	.word	0x0800d73f
 800d674:	0800d73f 	.word	0x0800d73f
 800d678:	0800d6fb 	.word	0x0800d6fb
 800d67c:	0800d73f 	.word	0x0800d73f
 800d680:	0800d73f 	.word	0x0800d73f
 800d684:	0800d73f 	.word	0x0800d73f
 800d688:	0800d73f 	.word	0x0800d73f
 800d68c:	0800d73f 	.word	0x0800d73f
 800d690:	0800d73f 	.word	0x0800d73f
 800d694:	0800d73f 	.word	0x0800d73f
 800d698:	0800d70b 	.word	0x0800d70b
 800d69c:	0800d73f 	.word	0x0800d73f
 800d6a0:	0800d73f 	.word	0x0800d73f
 800d6a4:	0800d73f 	.word	0x0800d73f
 800d6a8:	0800d73f 	.word	0x0800d73f
 800d6ac:	0800d73f 	.word	0x0800d73f
 800d6b0:	0800d73f 	.word	0x0800d73f
 800d6b4:	0800d73f 	.word	0x0800d73f
 800d6b8:	0800d73f 	.word	0x0800d73f
 800d6bc:	0800d73f 	.word	0x0800d73f
 800d6c0:	0800d73f 	.word	0x0800d73f
 800d6c4:	0800d73f 	.word	0x0800d73f
 800d6c8:	0800d73f 	.word	0x0800d73f
 800d6cc:	0800d73f 	.word	0x0800d73f
 800d6d0:	0800d73f 	.word	0x0800d73f
 800d6d4:	0800d73f 	.word	0x0800d73f
 800d6d8:	0800d731 	.word	0x0800d731
 800d6dc:	2b40      	cmp	r3, #64	@ 0x40
 800d6de:	d02a      	beq.n	800d736 <UART_SetConfig+0x8aa>
 800d6e0:	e02d      	b.n	800d73e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d6e2:	f7fb fdbb 	bl	800925c <HAL_RCCEx_GetD3PCLK1Freq>
 800d6e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6e8:	e02f      	b.n	800d74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fb fdca 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6f8:	e027      	b.n	800d74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6fa:	f107 0318 	add.w	r3, r7, #24
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fb ff16 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d708:	e01f      	b.n	800d74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d70a:	4b21      	ldr	r3, [pc, #132]	@ (800d790 <UART_SetConfig+0x904>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 0320 	and.w	r3, r3, #32
 800d712:	2b00      	cmp	r3, #0
 800d714:	d009      	beq.n	800d72a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d716:	4b1e      	ldr	r3, [pc, #120]	@ (800d790 <UART_SetConfig+0x904>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	08db      	lsrs	r3, r3, #3
 800d71c:	f003 0303 	and.w	r3, r3, #3
 800d720:	4a1d      	ldr	r2, [pc, #116]	@ (800d798 <UART_SetConfig+0x90c>)
 800d722:	fa22 f303 	lsr.w	r3, r2, r3
 800d726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d728:	e00f      	b.n	800d74a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d72a:	4b1b      	ldr	r3, [pc, #108]	@ (800d798 <UART_SetConfig+0x90c>)
 800d72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d72e:	e00c      	b.n	800d74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d730:	4b1a      	ldr	r3, [pc, #104]	@ (800d79c <UART_SetConfig+0x910>)
 800d732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d734:	e009      	b.n	800d74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d73c:	e005      	b.n	800d74a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d73e:	2300      	movs	r3, #0
 800d740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	f000 81ee 	beq.w	800db2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d756:	4a12      	ldr	r2, [pc, #72]	@ (800d7a0 <UART_SetConfig+0x914>)
 800d758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d75c:	461a      	mov	r2, r3
 800d75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d760:	fbb3 f3f2 	udiv	r3, r3, r2
 800d764:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	4613      	mov	r3, r2
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	4413      	add	r3, r2
 800d770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d772:	429a      	cmp	r2, r3
 800d774:	d305      	bcc.n	800d782 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d77c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d77e:	429a      	cmp	r2, r3
 800d780:	d910      	bls.n	800d7a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d788:	e1d1      	b.n	800db2e <UART_SetConfig+0xca2>
 800d78a:	bf00      	nop
 800d78c:	40011c00 	.word	0x40011c00
 800d790:	58024400 	.word	0x58024400
 800d794:	58000c00 	.word	0x58000c00
 800d798:	03d09000 	.word	0x03d09000
 800d79c:	003d0900 	.word	0x003d0900
 800d7a0:	0800f060 	.word	0x0800f060
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	60bb      	str	r3, [r7, #8]
 800d7aa:	60fa      	str	r2, [r7, #12]
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b0:	4ac0      	ldr	r2, [pc, #768]	@ (800dab4 <UART_SetConfig+0xc28>)
 800d7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	607a      	str	r2, [r7, #4]
 800d7be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7c6:	f7f2 fda3 	bl	8000310 <__aeabi_uldivmod>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4610      	mov	r0, r2
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	f04f 0200 	mov.w	r2, #0
 800d7d6:	f04f 0300 	mov.w	r3, #0
 800d7da:	020b      	lsls	r3, r1, #8
 800d7dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d7e0:	0202      	lsls	r2, r0, #8
 800d7e2:	6979      	ldr	r1, [r7, #20]
 800d7e4:	6849      	ldr	r1, [r1, #4]
 800d7e6:	0849      	lsrs	r1, r1, #1
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	4605      	mov	r5, r0
 800d7ee:	eb12 0804 	adds.w	r8, r2, r4
 800d7f2:	eb43 0905 	adc.w	r9, r3, r5
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	469a      	mov	sl, r3
 800d7fe:	4693      	mov	fp, r2
 800d800:	4652      	mov	r2, sl
 800d802:	465b      	mov	r3, fp
 800d804:	4640      	mov	r0, r8
 800d806:	4649      	mov	r1, r9
 800d808:	f7f2 fd82 	bl	8000310 <__aeabi_uldivmod>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4613      	mov	r3, r2
 800d812:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d81a:	d308      	bcc.n	800d82e <UART_SetConfig+0x9a2>
 800d81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d822:	d204      	bcs.n	800d82e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d82a:	60da      	str	r2, [r3, #12]
 800d82c:	e17f      	b.n	800db2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d834:	e17b      	b.n	800db2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	69db      	ldr	r3, [r3, #28]
 800d83a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d83e:	f040 80bd 	bne.w	800d9bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d842:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d846:	2b20      	cmp	r3, #32
 800d848:	dc48      	bgt.n	800d8dc <UART_SetConfig+0xa50>
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	db7b      	blt.n	800d946 <UART_SetConfig+0xaba>
 800d84e:	2b20      	cmp	r3, #32
 800d850:	d879      	bhi.n	800d946 <UART_SetConfig+0xaba>
 800d852:	a201      	add	r2, pc, #4	@ (adr r2, 800d858 <UART_SetConfig+0x9cc>)
 800d854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d858:	0800d8e3 	.word	0x0800d8e3
 800d85c:	0800d8eb 	.word	0x0800d8eb
 800d860:	0800d947 	.word	0x0800d947
 800d864:	0800d947 	.word	0x0800d947
 800d868:	0800d8f3 	.word	0x0800d8f3
 800d86c:	0800d947 	.word	0x0800d947
 800d870:	0800d947 	.word	0x0800d947
 800d874:	0800d947 	.word	0x0800d947
 800d878:	0800d903 	.word	0x0800d903
 800d87c:	0800d947 	.word	0x0800d947
 800d880:	0800d947 	.word	0x0800d947
 800d884:	0800d947 	.word	0x0800d947
 800d888:	0800d947 	.word	0x0800d947
 800d88c:	0800d947 	.word	0x0800d947
 800d890:	0800d947 	.word	0x0800d947
 800d894:	0800d947 	.word	0x0800d947
 800d898:	0800d913 	.word	0x0800d913
 800d89c:	0800d947 	.word	0x0800d947
 800d8a0:	0800d947 	.word	0x0800d947
 800d8a4:	0800d947 	.word	0x0800d947
 800d8a8:	0800d947 	.word	0x0800d947
 800d8ac:	0800d947 	.word	0x0800d947
 800d8b0:	0800d947 	.word	0x0800d947
 800d8b4:	0800d947 	.word	0x0800d947
 800d8b8:	0800d947 	.word	0x0800d947
 800d8bc:	0800d947 	.word	0x0800d947
 800d8c0:	0800d947 	.word	0x0800d947
 800d8c4:	0800d947 	.word	0x0800d947
 800d8c8:	0800d947 	.word	0x0800d947
 800d8cc:	0800d947 	.word	0x0800d947
 800d8d0:	0800d947 	.word	0x0800d947
 800d8d4:	0800d947 	.word	0x0800d947
 800d8d8:	0800d939 	.word	0x0800d939
 800d8dc:	2b40      	cmp	r3, #64	@ 0x40
 800d8de:	d02e      	beq.n	800d93e <UART_SetConfig+0xab2>
 800d8e0:	e031      	b.n	800d946 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8e2:	f7fa faef 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800d8e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d8e8:	e033      	b.n	800d952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d8ea:	f7fa fb01 	bl	8007ef0 <HAL_RCC_GetPCLK2Freq>
 800d8ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d8f0:	e02f      	b.n	800d952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fb fcc6 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d900:	e027      	b.n	800d952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d902:	f107 0318 	add.w	r3, r7, #24
 800d906:	4618      	mov	r0, r3
 800d908:	f7fb fe12 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d910:	e01f      	b.n	800d952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d912:	4b69      	ldr	r3, [pc, #420]	@ (800dab8 <UART_SetConfig+0xc2c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0320 	and.w	r3, r3, #32
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d91e:	4b66      	ldr	r3, [pc, #408]	@ (800dab8 <UART_SetConfig+0xc2c>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	08db      	lsrs	r3, r3, #3
 800d924:	f003 0303 	and.w	r3, r3, #3
 800d928:	4a64      	ldr	r2, [pc, #400]	@ (800dabc <UART_SetConfig+0xc30>)
 800d92a:	fa22 f303 	lsr.w	r3, r2, r3
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d930:	e00f      	b.n	800d952 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d932:	4b62      	ldr	r3, [pc, #392]	@ (800dabc <UART_SetConfig+0xc30>)
 800d934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d936:	e00c      	b.n	800d952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d938:	4b61      	ldr	r3, [pc, #388]	@ (800dac0 <UART_SetConfig+0xc34>)
 800d93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d93c:	e009      	b.n	800d952 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d93e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d944:	e005      	b.n	800d952 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d946:	2300      	movs	r3, #0
 800d948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 80ea 	beq.w	800db2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d95e:	4a55      	ldr	r2, [pc, #340]	@ (800dab4 <UART_SetConfig+0xc28>)
 800d960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d964:	461a      	mov	r2, r3
 800d966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d968:	fbb3 f3f2 	udiv	r3, r3, r2
 800d96c:	005a      	lsls	r2, r3, #1
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	085b      	lsrs	r3, r3, #1
 800d974:	441a      	add	r2, r3
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	685b      	ldr	r3, [r3, #4]
 800d97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d982:	2b0f      	cmp	r3, #15
 800d984:	d916      	bls.n	800d9b4 <UART_SetConfig+0xb28>
 800d986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d98c:	d212      	bcs.n	800d9b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d990:	b29b      	uxth	r3, r3
 800d992:	f023 030f 	bic.w	r3, r3, #15
 800d996:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99a:	085b      	lsrs	r3, r3, #1
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	f003 0307 	and.w	r3, r3, #7
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d9b0:	60da      	str	r2, [r3, #12]
 800d9b2:	e0bc      	b.n	800db2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d9ba:	e0b8      	b.n	800db2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d9bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d9c0:	2b20      	cmp	r3, #32
 800d9c2:	dc4b      	bgt.n	800da5c <UART_SetConfig+0xbd0>
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f2c0 8087 	blt.w	800dad8 <UART_SetConfig+0xc4c>
 800d9ca:	2b20      	cmp	r3, #32
 800d9cc:	f200 8084 	bhi.w	800dad8 <UART_SetConfig+0xc4c>
 800d9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d9d8 <UART_SetConfig+0xb4c>)
 800d9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d6:	bf00      	nop
 800d9d8:	0800da63 	.word	0x0800da63
 800d9dc:	0800da6b 	.word	0x0800da6b
 800d9e0:	0800dad9 	.word	0x0800dad9
 800d9e4:	0800dad9 	.word	0x0800dad9
 800d9e8:	0800da73 	.word	0x0800da73
 800d9ec:	0800dad9 	.word	0x0800dad9
 800d9f0:	0800dad9 	.word	0x0800dad9
 800d9f4:	0800dad9 	.word	0x0800dad9
 800d9f8:	0800da83 	.word	0x0800da83
 800d9fc:	0800dad9 	.word	0x0800dad9
 800da00:	0800dad9 	.word	0x0800dad9
 800da04:	0800dad9 	.word	0x0800dad9
 800da08:	0800dad9 	.word	0x0800dad9
 800da0c:	0800dad9 	.word	0x0800dad9
 800da10:	0800dad9 	.word	0x0800dad9
 800da14:	0800dad9 	.word	0x0800dad9
 800da18:	0800da93 	.word	0x0800da93
 800da1c:	0800dad9 	.word	0x0800dad9
 800da20:	0800dad9 	.word	0x0800dad9
 800da24:	0800dad9 	.word	0x0800dad9
 800da28:	0800dad9 	.word	0x0800dad9
 800da2c:	0800dad9 	.word	0x0800dad9
 800da30:	0800dad9 	.word	0x0800dad9
 800da34:	0800dad9 	.word	0x0800dad9
 800da38:	0800dad9 	.word	0x0800dad9
 800da3c:	0800dad9 	.word	0x0800dad9
 800da40:	0800dad9 	.word	0x0800dad9
 800da44:	0800dad9 	.word	0x0800dad9
 800da48:	0800dad9 	.word	0x0800dad9
 800da4c:	0800dad9 	.word	0x0800dad9
 800da50:	0800dad9 	.word	0x0800dad9
 800da54:	0800dad9 	.word	0x0800dad9
 800da58:	0800dacb 	.word	0x0800dacb
 800da5c:	2b40      	cmp	r3, #64	@ 0x40
 800da5e:	d037      	beq.n	800dad0 <UART_SetConfig+0xc44>
 800da60:	e03a      	b.n	800dad8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da62:	f7fa fa2f 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800da66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da68:	e03c      	b.n	800dae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da6a:	f7fa fa41 	bl	8007ef0 <HAL_RCC_GetPCLK2Freq>
 800da6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da70:	e038      	b.n	800dae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da76:	4618      	mov	r0, r3
 800da78:	f7fb fc06 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da80:	e030      	b.n	800dae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da82:	f107 0318 	add.w	r3, r7, #24
 800da86:	4618      	mov	r0, r3
 800da88:	f7fb fd52 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da90:	e028      	b.n	800dae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da92:	4b09      	ldr	r3, [pc, #36]	@ (800dab8 <UART_SetConfig+0xc2c>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f003 0320 	and.w	r3, r3, #32
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d012      	beq.n	800dac4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da9e:	4b06      	ldr	r3, [pc, #24]	@ (800dab8 <UART_SetConfig+0xc2c>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	08db      	lsrs	r3, r3, #3
 800daa4:	f003 0303 	and.w	r3, r3, #3
 800daa8:	4a04      	ldr	r2, [pc, #16]	@ (800dabc <UART_SetConfig+0xc30>)
 800daaa:	fa22 f303 	lsr.w	r3, r2, r3
 800daae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dab0:	e018      	b.n	800dae4 <UART_SetConfig+0xc58>
 800dab2:	bf00      	nop
 800dab4:	0800f060 	.word	0x0800f060
 800dab8:	58024400 	.word	0x58024400
 800dabc:	03d09000 	.word	0x03d09000
 800dac0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dac4:	4b24      	ldr	r3, [pc, #144]	@ (800db58 <UART_SetConfig+0xccc>)
 800dac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dac8:	e00c      	b.n	800dae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800daca:	4b24      	ldr	r3, [pc, #144]	@ (800db5c <UART_SetConfig+0xcd0>)
 800dacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dace:	e009      	b.n	800dae4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dad6:	e005      	b.n	800dae4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800dad8:	2300      	movs	r3, #0
 800dada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dae2:	bf00      	nop
    }

    if (pclk != 0U)
 800dae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d021      	beq.n	800db2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daee:	4a1c      	ldr	r2, [pc, #112]	@ (800db60 <UART_SetConfig+0xcd4>)
 800daf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daf4:	461a      	mov	r2, r3
 800daf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf8:	fbb3 f2f2 	udiv	r2, r3, r2
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	085b      	lsrs	r3, r3, #1
 800db02:	441a      	add	r2, r3
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	fbb2 f3f3 	udiv	r3, r2, r3
 800db0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db10:	2b0f      	cmp	r3, #15
 800db12:	d909      	bls.n	800db28 <UART_SetConfig+0xc9c>
 800db14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db1a:	d205      	bcs.n	800db28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	b29a      	uxth	r2, r3
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	60da      	str	r2, [r3, #12]
 800db26:	e002      	b.n	800db2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2201      	movs	r2, #1
 800db32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2201      	movs	r2, #1
 800db3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	2200      	movs	r2, #0
 800db42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	2200      	movs	r2, #0
 800db48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800db4a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3748      	adds	r7, #72	@ 0x48
 800db52:	46bd      	mov	sp, r7
 800db54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db58:	03d09000 	.word	0x03d09000
 800db5c:	003d0900 	.word	0x003d0900
 800db60:	0800f060 	.word	0x0800f060

0800db64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db70:	f003 0308 	and.w	r3, r3, #8
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00a      	beq.n	800db8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db92:	f003 0301 	and.w	r3, r3, #1
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00a      	beq.n	800dbb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	430a      	orrs	r2, r1
 800dbae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb4:	f003 0302 	and.w	r3, r3, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbd6:	f003 0304 	and.w	r3, r3, #4
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf8:	f003 0310 	and.w	r3, r3, #16
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00a      	beq.n	800dc16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	689b      	ldr	r3, [r3, #8]
 800dc06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	430a      	orrs	r2, r1
 800dc14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1a:	f003 0320 	and.w	r3, r3, #32
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	430a      	orrs	r2, r1
 800dc36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01a      	beq.n	800dc7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	430a      	orrs	r2, r1
 800dc58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc62:	d10a      	bne.n	800dc7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	430a      	orrs	r2, r1
 800dc78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00a      	beq.n	800dc9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	685b      	ldr	r3, [r3, #4]
 800dc8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	430a      	orrs	r2, r1
 800dc9a:	605a      	str	r2, [r3, #4]
  }
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b098      	sub	sp, #96	@ 0x60
 800dcac:	af02      	add	r7, sp, #8
 800dcae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcb8:	f7f6 f826 	bl	8003d08 <HAL_GetTick>
 800dcbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f003 0308 	and.w	r3, r3, #8
 800dcc8:	2b08      	cmp	r3, #8
 800dcca:	d12f      	bne.n	800dd2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 f88e 	bl	800ddfc <UART_WaitOnFlagUntilTimeout>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d022      	beq.n	800dd2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcee:	e853 3f00 	ldrex	r3, [r3]
 800dcf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcfa:	653b      	str	r3, [r7, #80]	@ 0x50
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	461a      	mov	r2, r3
 800dd02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd04:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd0c:	e841 2300 	strex	r3, r2, [r1]
 800dd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1e6      	bne.n	800dce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2220      	movs	r2, #32
 800dd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e063      	b.n	800ddf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0304 	and.w	r3, r3, #4
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	d149      	bne.n	800ddce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd42:	2200      	movs	r2, #0
 800dd44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 f857 	bl	800ddfc <UART_WaitOnFlagUntilTimeout>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d03c      	beq.n	800ddce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5c:	e853 3f00 	ldrex	r3, [r3]
 800dd60:	623b      	str	r3, [r7, #32]
   return(result);
 800dd62:	6a3b      	ldr	r3, [r7, #32]
 800dd64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	461a      	mov	r2, r3
 800dd70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd72:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd7a:	e841 2300 	strex	r3, r2, [r1]
 800dd7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e6      	bne.n	800dd54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	e853 3f00 	ldrex	r3, [r3]
 800dd94:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f023 0301 	bic.w	r3, r3, #1
 800dd9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	3308      	adds	r3, #8
 800dda4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dda6:	61fa      	str	r2, [r7, #28]
 800dda8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddaa:	69b9      	ldr	r1, [r7, #24]
 800ddac:	69fa      	ldr	r2, [r7, #28]
 800ddae:	e841 2300 	strex	r3, r2, [r1]
 800ddb2:	617b      	str	r3, [r7, #20]
   return(result);
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1e5      	bne.n	800dd86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2220      	movs	r2, #32
 800ddbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddca:	2303      	movs	r3, #3
 800ddcc:	e012      	b.n	800ddf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2220      	movs	r2, #32
 800ddd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2220      	movs	r2, #32
 800ddda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddf2:	2300      	movs	r3, #0
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3758      	adds	r7, #88	@ 0x58
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	4613      	mov	r3, r2
 800de0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de0c:	e04f      	b.n	800deae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de14:	d04b      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de16:	f7f5 ff77 	bl	8003d08 <HAL_GetTick>
 800de1a:	4602      	mov	r2, r0
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	1ad3      	subs	r3, r2, r3
 800de20:	69ba      	ldr	r2, [r7, #24]
 800de22:	429a      	cmp	r2, r3
 800de24:	d302      	bcc.n	800de2c <UART_WaitOnFlagUntilTimeout+0x30>
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e04e      	b.n	800dece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f003 0304 	and.w	r3, r3, #4
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d037      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb2>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2b80      	cmp	r3, #128	@ 0x80
 800de42:	d034      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb2>
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	2b40      	cmp	r3, #64	@ 0x40
 800de48:	d031      	beq.n	800deae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	f003 0308 	and.w	r3, r3, #8
 800de54:	2b08      	cmp	r3, #8
 800de56:	d110      	bne.n	800de7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2208      	movs	r2, #8
 800de5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de60:	68f8      	ldr	r0, [r7, #12]
 800de62:	f000 f879 	bl	800df58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2208      	movs	r2, #8
 800de6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800de76:	2301      	movs	r3, #1
 800de78:	e029      	b.n	800dece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	69db      	ldr	r3, [r3, #28]
 800de80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de88:	d111      	bne.n	800deae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f000 f85f 	bl	800df58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2220      	movs	r2, #32
 800de9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e00f      	b.n	800dece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	69da      	ldr	r2, [r3, #28]
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	4013      	ands	r3, r2
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	429a      	cmp	r2, r3
 800debc:	bf0c      	ite	eq
 800debe:	2301      	moveq	r3, #1
 800dec0:	2300      	movne	r3, #0
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	461a      	mov	r2, r3
 800dec6:	79fb      	ldrb	r3, [r7, #7]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d0a0      	beq.n	800de0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ded6:	b480      	push	{r7}
 800ded8:	b08f      	sub	sp, #60	@ 0x3c
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	e853 3f00 	ldrex	r3, [r3]
 800deea:	61fb      	str	r3, [r7, #28]
   return(result);
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800def2:	637b      	str	r3, [r7, #52]	@ 0x34
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	461a      	mov	r2, r3
 800defa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800defc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800defe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df04:	e841 2300 	strex	r3, r2, [r1]
 800df08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1e6      	bne.n	800dede <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	3308      	adds	r3, #8
 800df16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	e853 3f00 	ldrex	r3, [r3]
 800df1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800df26:	633b      	str	r3, [r7, #48]	@ 0x30
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3308      	adds	r3, #8
 800df2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df30:	61ba      	str	r2, [r7, #24]
 800df32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df34:	6979      	ldr	r1, [r7, #20]
 800df36:	69ba      	ldr	r2, [r7, #24]
 800df38:	e841 2300 	strex	r3, r2, [r1]
 800df3c:	613b      	str	r3, [r7, #16]
   return(result);
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e5      	bne.n	800df10 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2220      	movs	r2, #32
 800df48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800df4c:	bf00      	nop
 800df4e:	373c      	adds	r7, #60	@ 0x3c
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df58:	b480      	push	{r7}
 800df5a:	b095      	sub	sp, #84	@ 0x54
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df68:	e853 3f00 	ldrex	r3, [r3]
 800df6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	461a      	mov	r2, r3
 800df7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800df80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df86:	e841 2300 	strex	r3, r2, [r1]
 800df8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1e6      	bne.n	800df60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	3308      	adds	r3, #8
 800df98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df9a:	6a3b      	ldr	r3, [r7, #32]
 800df9c:	e853 3f00 	ldrex	r3, [r3]
 800dfa0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfa2:	69fa      	ldr	r2, [r7, #28]
 800dfa4:	4b1e      	ldr	r3, [pc, #120]	@ (800e020 <UART_EndRxTransfer+0xc8>)
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfba:	e841 2300 	strex	r3, r2, [r1]
 800dfbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1e5      	bne.n	800df92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d118      	bne.n	800e000 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	e853 3f00 	ldrex	r3, [r3]
 800dfda:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	f023 0310 	bic.w	r3, r3, #16
 800dfe2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	461a      	mov	r2, r3
 800dfea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfec:	61bb      	str	r3, [r7, #24]
 800dfee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff0:	6979      	ldr	r1, [r7, #20]
 800dff2:	69ba      	ldr	r2, [r7, #24]
 800dff4:	e841 2300 	strex	r3, r2, [r1]
 800dff8:	613b      	str	r3, [r7, #16]
   return(result);
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d1e6      	bne.n	800dfce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2220      	movs	r2, #32
 800e004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e014:	bf00      	nop
 800e016:	3754      	adds	r7, #84	@ 0x54
 800e018:	46bd      	mov	sp, r7
 800e01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01e:	4770      	bx	lr
 800e020:	effffffe 	.word	0xeffffffe

0800e024 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b090      	sub	sp, #64	@ 0x40
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e030:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e03a:	d037      	beq.n	800e0ac <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e03e:	2200      	movs	r2, #0
 800e040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3308      	adds	r3, #8
 800e04a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04e:	e853 3f00 	ldrex	r3, [r3]
 800e052:	623b      	str	r3, [r7, #32]
   return(result);
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e05a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3308      	adds	r3, #8
 800e062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e064:	633a      	str	r2, [r7, #48]	@ 0x30
 800e066:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e06a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e06c:	e841 2300 	strex	r3, r2, [r1]
 800e070:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1e5      	bne.n	800e044 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	e853 3f00 	ldrex	r3, [r3]
 800e084:	60fb      	str	r3, [r7, #12]
   return(result);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e08c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	461a      	mov	r2, r3
 800e094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e096:	61fb      	str	r3, [r7, #28]
 800e098:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09a:	69b9      	ldr	r1, [r7, #24]
 800e09c:	69fa      	ldr	r2, [r7, #28]
 800e09e:	e841 2300 	strex	r3, r2, [r1]
 800e0a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1e6      	bne.n	800e078 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e0aa:	e002      	b.n	800e0b2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e0ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e0ae:	f7f3 fddb 	bl	8001c68 <HAL_UART_TxCpltCallback>
}
 800e0b2:	bf00      	nop
 800e0b4:	3740      	adds	r7, #64	@ 0x40
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b084      	sub	sp, #16
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7fe febf 	bl	800ce4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0ce:	bf00      	nop
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b086      	sub	sp, #24
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0fe:	2b80      	cmp	r3, #128	@ 0x80
 800e100:	d109      	bne.n	800e116 <UART_DMAError+0x40>
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b21      	cmp	r3, #33	@ 0x21
 800e106:	d106      	bne.n	800e116 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e110:	6978      	ldr	r0, [r7, #20]
 800e112:	f7ff fee0 	bl	800ded6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e120:	2b40      	cmp	r3, #64	@ 0x40
 800e122:	d109      	bne.n	800e138 <UART_DMAError+0x62>
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2b22      	cmp	r3, #34	@ 0x22
 800e128:	d106      	bne.n	800e138 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e132:	6978      	ldr	r0, [r7, #20]
 800e134:	f7ff ff10 	bl	800df58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e13e:	f043 0210 	orr.w	r2, r3, #16
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e148:	6978      	ldr	r0, [r7, #20]
 800e14a:	f7fe fe89 	bl	800ce60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e14e:	bf00      	nop
 800e150:	3718      	adds	r7, #24
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e174:	68f8      	ldr	r0, [r7, #12]
 800e176:	f7fe fe73 	bl	800ce60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e17a:	bf00      	nop
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b088      	sub	sp, #32
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	e853 3f00 	ldrex	r3, [r3]
 800e196:	60bb      	str	r3, [r7, #8]
   return(result);
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e19e:	61fb      	str	r3, [r7, #28]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	61bb      	str	r3, [r7, #24]
 800e1aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ac:	6979      	ldr	r1, [r7, #20]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	e841 2300 	strex	r3, r2, [r1]
 800e1b4:	613b      	str	r3, [r7, #16]
   return(result);
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1e6      	bne.n	800e18a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2220      	movs	r2, #32
 800e1c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7f3 fd4c 	bl	8001c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1d0:	bf00      	nop
 800e1d2:	3720      	adds	r7, #32
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e1f4:	bf00      	nop
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e214:	b480      	push	{r7}
 800e216:	b085      	sub	sp, #20
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e222:	2b01      	cmp	r3, #1
 800e224:	d101      	bne.n	800e22a <HAL_UARTEx_DisableFifoMode+0x16>
 800e226:	2302      	movs	r3, #2
 800e228:	e027      	b.n	800e27a <HAL_UARTEx_DisableFifoMode+0x66>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2224      	movs	r2, #36	@ 0x24
 800e236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f022 0201 	bic.w	r2, r2, #1
 800e250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2220      	movs	r2, #32
 800e26c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e296:	2b01      	cmp	r3, #1
 800e298:	d101      	bne.n	800e29e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e29a:	2302      	movs	r3, #2
 800e29c:	e02d      	b.n	800e2fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2224      	movs	r2, #36	@ 0x24
 800e2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f022 0201 	bic.w	r2, r2, #1
 800e2c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	430a      	orrs	r2, r1
 800e2d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f850 	bl	800e380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b084      	sub	sp, #16
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e312:	2b01      	cmp	r3, #1
 800e314:	d101      	bne.n	800e31a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e316:	2302      	movs	r3, #2
 800e318:	e02d      	b.n	800e376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2224      	movs	r2, #36	@ 0x24
 800e326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f022 0201 	bic.w	r2, r2, #1
 800e340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	430a      	orrs	r2, r1
 800e354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f812 	bl	800e380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2220      	movs	r2, #32
 800e368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d108      	bne.n	800e3a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e3a0:	e031      	b.n	800e406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e3a2:	2310      	movs	r3, #16
 800e3a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e3a6:	2310      	movs	r3, #16
 800e3a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	0e5b      	lsrs	r3, r3, #25
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	f003 0307 	and.w	r3, r3, #7
 800e3b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	0f5b      	lsrs	r3, r3, #29
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	f003 0307 	and.w	r3, r3, #7
 800e3c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
 800e3cc:	7b3a      	ldrb	r2, [r7, #12]
 800e3ce:	4911      	ldr	r1, [pc, #68]	@ (800e414 <UARTEx_SetNbDataToProcess+0x94>)
 800e3d0:	5c8a      	ldrb	r2, [r1, r2]
 800e3d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3d6:	7b3a      	ldrb	r2, [r7, #12]
 800e3d8:	490f      	ldr	r1, [pc, #60]	@ (800e418 <UARTEx_SetNbDataToProcess+0x98>)
 800e3da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ea:	7b7a      	ldrb	r2, [r7, #13]
 800e3ec:	4909      	ldr	r1, [pc, #36]	@ (800e414 <UARTEx_SetNbDataToProcess+0x94>)
 800e3ee:	5c8a      	ldrb	r2, [r1, r2]
 800e3f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e3f4:	7b7a      	ldrb	r2, [r7, #13]
 800e3f6:	4908      	ldr	r1, [pc, #32]	@ (800e418 <UARTEx_SetNbDataToProcess+0x98>)
 800e3f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e3fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e406:	bf00      	nop
 800e408:	3714      	adds	r7, #20
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	0800f078 	.word	0x0800f078
 800e418:	0800f080 	.word	0x0800f080

0800e41c <malloc>:
 800e41c:	4b02      	ldr	r3, [pc, #8]	@ (800e428 <malloc+0xc>)
 800e41e:	4601      	mov	r1, r0
 800e420:	6818      	ldr	r0, [r3, #0]
 800e422:	f000 b82d 	b.w	800e480 <_malloc_r>
 800e426:	bf00      	nop
 800e428:	2400001c 	.word	0x2400001c

0800e42c <free>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	@ (800e438 <free+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f000 b8f5 	b.w	800e620 <_free_r>
 800e436:	bf00      	nop
 800e438:	2400001c 	.word	0x2400001c

0800e43c <sbrk_aligned>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	4e0f      	ldr	r6, [pc, #60]	@ (800e47c <sbrk_aligned+0x40>)
 800e440:	460c      	mov	r4, r1
 800e442:	6831      	ldr	r1, [r6, #0]
 800e444:	4605      	mov	r5, r0
 800e446:	b911      	cbnz	r1, 800e44e <sbrk_aligned+0x12>
 800e448:	f000 f8ae 	bl	800e5a8 <_sbrk_r>
 800e44c:	6030      	str	r0, [r6, #0]
 800e44e:	4621      	mov	r1, r4
 800e450:	4628      	mov	r0, r5
 800e452:	f000 f8a9 	bl	800e5a8 <_sbrk_r>
 800e456:	1c43      	adds	r3, r0, #1
 800e458:	d103      	bne.n	800e462 <sbrk_aligned+0x26>
 800e45a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e45e:	4620      	mov	r0, r4
 800e460:	bd70      	pop	{r4, r5, r6, pc}
 800e462:	1cc4      	adds	r4, r0, #3
 800e464:	f024 0403 	bic.w	r4, r4, #3
 800e468:	42a0      	cmp	r0, r4
 800e46a:	d0f8      	beq.n	800e45e <sbrk_aligned+0x22>
 800e46c:	1a21      	subs	r1, r4, r0
 800e46e:	4628      	mov	r0, r5
 800e470:	f000 f89a 	bl	800e5a8 <_sbrk_r>
 800e474:	3001      	adds	r0, #1
 800e476:	d1f2      	bne.n	800e45e <sbrk_aligned+0x22>
 800e478:	e7ef      	b.n	800e45a <sbrk_aligned+0x1e>
 800e47a:	bf00      	nop
 800e47c:	240008c4 	.word	0x240008c4

0800e480 <_malloc_r>:
 800e480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e484:	1ccd      	adds	r5, r1, #3
 800e486:	f025 0503 	bic.w	r5, r5, #3
 800e48a:	3508      	adds	r5, #8
 800e48c:	2d0c      	cmp	r5, #12
 800e48e:	bf38      	it	cc
 800e490:	250c      	movcc	r5, #12
 800e492:	2d00      	cmp	r5, #0
 800e494:	4606      	mov	r6, r0
 800e496:	db01      	blt.n	800e49c <_malloc_r+0x1c>
 800e498:	42a9      	cmp	r1, r5
 800e49a:	d904      	bls.n	800e4a6 <_malloc_r+0x26>
 800e49c:	230c      	movs	r3, #12
 800e49e:	6033      	str	r3, [r6, #0]
 800e4a0:	2000      	movs	r0, #0
 800e4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e57c <_malloc_r+0xfc>
 800e4aa:	f000 f869 	bl	800e580 <__malloc_lock>
 800e4ae:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b2:	461c      	mov	r4, r3
 800e4b4:	bb44      	cbnz	r4, 800e508 <_malloc_r+0x88>
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff ffbf 	bl	800e43c <sbrk_aligned>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	d158      	bne.n	800e576 <_malloc_r+0xf6>
 800e4c4:	f8d8 4000 	ldr.w	r4, [r8]
 800e4c8:	4627      	mov	r7, r4
 800e4ca:	2f00      	cmp	r7, #0
 800e4cc:	d143      	bne.n	800e556 <_malloc_r+0xd6>
 800e4ce:	2c00      	cmp	r4, #0
 800e4d0:	d04b      	beq.n	800e56a <_malloc_r+0xea>
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	eb04 0903 	add.w	r9, r4, r3
 800e4dc:	f000 f864 	bl	800e5a8 <_sbrk_r>
 800e4e0:	4581      	cmp	r9, r0
 800e4e2:	d142      	bne.n	800e56a <_malloc_r+0xea>
 800e4e4:	6821      	ldr	r1, [r4, #0]
 800e4e6:	1a6d      	subs	r5, r5, r1
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f7ff ffa6 	bl	800e43c <sbrk_aligned>
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	d03a      	beq.n	800e56a <_malloc_r+0xea>
 800e4f4:	6823      	ldr	r3, [r4, #0]
 800e4f6:	442b      	add	r3, r5
 800e4f8:	6023      	str	r3, [r4, #0]
 800e4fa:	f8d8 3000 	ldr.w	r3, [r8]
 800e4fe:	685a      	ldr	r2, [r3, #4]
 800e500:	bb62      	cbnz	r2, 800e55c <_malloc_r+0xdc>
 800e502:	f8c8 7000 	str.w	r7, [r8]
 800e506:	e00f      	b.n	800e528 <_malloc_r+0xa8>
 800e508:	6822      	ldr	r2, [r4, #0]
 800e50a:	1b52      	subs	r2, r2, r5
 800e50c:	d420      	bmi.n	800e550 <_malloc_r+0xd0>
 800e50e:	2a0b      	cmp	r2, #11
 800e510:	d917      	bls.n	800e542 <_malloc_r+0xc2>
 800e512:	1961      	adds	r1, r4, r5
 800e514:	42a3      	cmp	r3, r4
 800e516:	6025      	str	r5, [r4, #0]
 800e518:	bf18      	it	ne
 800e51a:	6059      	strne	r1, [r3, #4]
 800e51c:	6863      	ldr	r3, [r4, #4]
 800e51e:	bf08      	it	eq
 800e520:	f8c8 1000 	streq.w	r1, [r8]
 800e524:	5162      	str	r2, [r4, r5]
 800e526:	604b      	str	r3, [r1, #4]
 800e528:	4630      	mov	r0, r6
 800e52a:	f000 f82f 	bl	800e58c <__malloc_unlock>
 800e52e:	f104 000b 	add.w	r0, r4, #11
 800e532:	1d23      	adds	r3, r4, #4
 800e534:	f020 0007 	bic.w	r0, r0, #7
 800e538:	1ac2      	subs	r2, r0, r3
 800e53a:	bf1c      	itt	ne
 800e53c:	1a1b      	subne	r3, r3, r0
 800e53e:	50a3      	strne	r3, [r4, r2]
 800e540:	e7af      	b.n	800e4a2 <_malloc_r+0x22>
 800e542:	6862      	ldr	r2, [r4, #4]
 800e544:	42a3      	cmp	r3, r4
 800e546:	bf0c      	ite	eq
 800e548:	f8c8 2000 	streq.w	r2, [r8]
 800e54c:	605a      	strne	r2, [r3, #4]
 800e54e:	e7eb      	b.n	800e528 <_malloc_r+0xa8>
 800e550:	4623      	mov	r3, r4
 800e552:	6864      	ldr	r4, [r4, #4]
 800e554:	e7ae      	b.n	800e4b4 <_malloc_r+0x34>
 800e556:	463c      	mov	r4, r7
 800e558:	687f      	ldr	r7, [r7, #4]
 800e55a:	e7b6      	b.n	800e4ca <_malloc_r+0x4a>
 800e55c:	461a      	mov	r2, r3
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	42a3      	cmp	r3, r4
 800e562:	d1fb      	bne.n	800e55c <_malloc_r+0xdc>
 800e564:	2300      	movs	r3, #0
 800e566:	6053      	str	r3, [r2, #4]
 800e568:	e7de      	b.n	800e528 <_malloc_r+0xa8>
 800e56a:	230c      	movs	r3, #12
 800e56c:	6033      	str	r3, [r6, #0]
 800e56e:	4630      	mov	r0, r6
 800e570:	f000 f80c 	bl	800e58c <__malloc_unlock>
 800e574:	e794      	b.n	800e4a0 <_malloc_r+0x20>
 800e576:	6005      	str	r5, [r0, #0]
 800e578:	e7d6      	b.n	800e528 <_malloc_r+0xa8>
 800e57a:	bf00      	nop
 800e57c:	240008c8 	.word	0x240008c8

0800e580 <__malloc_lock>:
 800e580:	4801      	ldr	r0, [pc, #4]	@ (800e588 <__malloc_lock+0x8>)
 800e582:	f000 b84b 	b.w	800e61c <__retarget_lock_acquire_recursive>
 800e586:	bf00      	nop
 800e588:	24000a04 	.word	0x24000a04

0800e58c <__malloc_unlock>:
 800e58c:	4801      	ldr	r0, [pc, #4]	@ (800e594 <__malloc_unlock+0x8>)
 800e58e:	f000 b846 	b.w	800e61e <__retarget_lock_release_recursive>
 800e592:	bf00      	nop
 800e594:	24000a04 	.word	0x24000a04

0800e598 <memset>:
 800e598:	4402      	add	r2, r0
 800e59a:	4603      	mov	r3, r0
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d100      	bne.n	800e5a2 <memset+0xa>
 800e5a0:	4770      	bx	lr
 800e5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a6:	e7f9      	b.n	800e59c <memset+0x4>

0800e5a8 <_sbrk_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d06      	ldr	r5, [pc, #24]	@ (800e5c4 <_sbrk_r+0x1c>)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	f7f5 f92e 	bl	8003814 <_sbrk>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_sbrk_r+0x1a>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_sbrk_r+0x1a>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	24000a08 	.word	0x24000a08

0800e5c8 <__errno>:
 800e5c8:	4b01      	ldr	r3, [pc, #4]	@ (800e5d0 <__errno+0x8>)
 800e5ca:	6818      	ldr	r0, [r3, #0]
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	2400001c 	.word	0x2400001c

0800e5d4 <__libc_init_array>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	4d0d      	ldr	r5, [pc, #52]	@ (800e60c <__libc_init_array+0x38>)
 800e5d8:	4c0d      	ldr	r4, [pc, #52]	@ (800e610 <__libc_init_array+0x3c>)
 800e5da:	1b64      	subs	r4, r4, r5
 800e5dc:	10a4      	asrs	r4, r4, #2
 800e5de:	2600      	movs	r6, #0
 800e5e0:	42a6      	cmp	r6, r4
 800e5e2:	d109      	bne.n	800e5f8 <__libc_init_array+0x24>
 800e5e4:	4d0b      	ldr	r5, [pc, #44]	@ (800e614 <__libc_init_array+0x40>)
 800e5e6:	4c0c      	ldr	r4, [pc, #48]	@ (800e618 <__libc_init_array+0x44>)
 800e5e8:	f000 fd22 	bl	800f030 <_init>
 800e5ec:	1b64      	subs	r4, r4, r5
 800e5ee:	10a4      	asrs	r4, r4, #2
 800e5f0:	2600      	movs	r6, #0
 800e5f2:	42a6      	cmp	r6, r4
 800e5f4:	d105      	bne.n	800e602 <__libc_init_array+0x2e>
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5fc:	4798      	blx	r3
 800e5fe:	3601      	adds	r6, #1
 800e600:	e7ee      	b.n	800e5e0 <__libc_init_array+0xc>
 800e602:	f855 3b04 	ldr.w	r3, [r5], #4
 800e606:	4798      	blx	r3
 800e608:	3601      	adds	r6, #1
 800e60a:	e7f2      	b.n	800e5f2 <__libc_init_array+0x1e>
 800e60c:	080111e0 	.word	0x080111e0
 800e610:	080111e0 	.word	0x080111e0
 800e614:	080111e0 	.word	0x080111e0
 800e618:	080111e4 	.word	0x080111e4

0800e61c <__retarget_lock_acquire_recursive>:
 800e61c:	4770      	bx	lr

0800e61e <__retarget_lock_release_recursive>:
 800e61e:	4770      	bx	lr

0800e620 <_free_r>:
 800e620:	b538      	push	{r3, r4, r5, lr}
 800e622:	4605      	mov	r5, r0
 800e624:	2900      	cmp	r1, #0
 800e626:	d041      	beq.n	800e6ac <_free_r+0x8c>
 800e628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e62c:	1f0c      	subs	r4, r1, #4
 800e62e:	2b00      	cmp	r3, #0
 800e630:	bfb8      	it	lt
 800e632:	18e4      	addlt	r4, r4, r3
 800e634:	f7ff ffa4 	bl	800e580 <__malloc_lock>
 800e638:	4a1d      	ldr	r2, [pc, #116]	@ (800e6b0 <_free_r+0x90>)
 800e63a:	6813      	ldr	r3, [r2, #0]
 800e63c:	b933      	cbnz	r3, 800e64c <_free_r+0x2c>
 800e63e:	6063      	str	r3, [r4, #4]
 800e640:	6014      	str	r4, [r2, #0]
 800e642:	4628      	mov	r0, r5
 800e644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e648:	f7ff bfa0 	b.w	800e58c <__malloc_unlock>
 800e64c:	42a3      	cmp	r3, r4
 800e64e:	d908      	bls.n	800e662 <_free_r+0x42>
 800e650:	6820      	ldr	r0, [r4, #0]
 800e652:	1821      	adds	r1, r4, r0
 800e654:	428b      	cmp	r3, r1
 800e656:	bf01      	itttt	eq
 800e658:	6819      	ldreq	r1, [r3, #0]
 800e65a:	685b      	ldreq	r3, [r3, #4]
 800e65c:	1809      	addeq	r1, r1, r0
 800e65e:	6021      	streq	r1, [r4, #0]
 800e660:	e7ed      	b.n	800e63e <_free_r+0x1e>
 800e662:	461a      	mov	r2, r3
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	b10b      	cbz	r3, 800e66c <_free_r+0x4c>
 800e668:	42a3      	cmp	r3, r4
 800e66a:	d9fa      	bls.n	800e662 <_free_r+0x42>
 800e66c:	6811      	ldr	r1, [r2, #0]
 800e66e:	1850      	adds	r0, r2, r1
 800e670:	42a0      	cmp	r0, r4
 800e672:	d10b      	bne.n	800e68c <_free_r+0x6c>
 800e674:	6820      	ldr	r0, [r4, #0]
 800e676:	4401      	add	r1, r0
 800e678:	1850      	adds	r0, r2, r1
 800e67a:	4283      	cmp	r3, r0
 800e67c:	6011      	str	r1, [r2, #0]
 800e67e:	d1e0      	bne.n	800e642 <_free_r+0x22>
 800e680:	6818      	ldr	r0, [r3, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	6053      	str	r3, [r2, #4]
 800e686:	4408      	add	r0, r1
 800e688:	6010      	str	r0, [r2, #0]
 800e68a:	e7da      	b.n	800e642 <_free_r+0x22>
 800e68c:	d902      	bls.n	800e694 <_free_r+0x74>
 800e68e:	230c      	movs	r3, #12
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	e7d6      	b.n	800e642 <_free_r+0x22>
 800e694:	6820      	ldr	r0, [r4, #0]
 800e696:	1821      	adds	r1, r4, r0
 800e698:	428b      	cmp	r3, r1
 800e69a:	bf04      	itt	eq
 800e69c:	6819      	ldreq	r1, [r3, #0]
 800e69e:	685b      	ldreq	r3, [r3, #4]
 800e6a0:	6063      	str	r3, [r4, #4]
 800e6a2:	bf04      	itt	eq
 800e6a4:	1809      	addeq	r1, r1, r0
 800e6a6:	6021      	streq	r1, [r4, #0]
 800e6a8:	6054      	str	r4, [r2, #4]
 800e6aa:	e7ca      	b.n	800e642 <_free_r+0x22>
 800e6ac:	bd38      	pop	{r3, r4, r5, pc}
 800e6ae:	bf00      	nop
 800e6b0:	240008c8 	.word	0x240008c8
 800e6b4:	00000000 	.word	0x00000000

0800e6b8 <log>:
 800e6b8:	b4f0      	push	{r4, r5, r6, r7}
 800e6ba:	ee10 0a90 	vmov	r0, s1
 800e6be:	ee10 3a10 	vmov	r3, s0
 800e6c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e6c6:	429c      	cmp	r4, r3
 800e6c8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 800e6cc:	4c70      	ldr	r4, [pc, #448]	@ (800e890 <log+0x1d8>)
 800e6ce:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800e6d2:	418c      	sbcs	r4, r1
 800e6d4:	ed2d 8b02 	vpush	{d8}
 800e6d8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e6dc:	d35a      	bcc.n	800e794 <log+0xdc>
 800e6de:	4a6d      	ldr	r2, [pc, #436]	@ (800e894 <log+0x1dc>)
 800e6e0:	4290      	cmp	r0, r2
 800e6e2:	bf08      	it	eq
 800e6e4:	2b00      	cmpeq	r3, #0
 800e6e6:	f000 80c4 	beq.w	800e872 <log+0x1ba>
 800e6ea:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e6ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e6f2:	4b69      	ldr	r3, [pc, #420]	@ (800e898 <log+0x1e0>)
 800e6f4:	ee20 2b00 	vmul.f64	d2, d0, d0
 800e6f8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800e6fc:	ee20 4b02 	vmul.f64	d4, d0, d2
 800e700:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800e704:	eea6 7b00 	vfma.f64	d7, d6, d0
 800e708:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800e70c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800e710:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e714:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800e718:	eea5 6b00 	vfma.f64	d6, d5, d0
 800e71c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 800e720:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800e724:	eea5 6b02 	vfma.f64	d6, d5, d2
 800e728:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800e72c:	eea3 5b00 	vfma.f64	d5, d3, d0
 800e730:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800e734:	eea3 5b02 	vfma.f64	d5, d3, d2
 800e738:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 800e73c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e740:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e744:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800e748:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e74c:	eeb0 2b47 	vmov.f64	d2, d7
 800e750:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 800e878 <log+0x1c0>
 800e754:	eeb0 6b40 	vmov.f64	d6, d0
 800e758:	eeb0 3b40 	vmov.f64	d3, d0
 800e75c:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e760:	eea0 6b47 	vfms.f64	d6, d0, d7
 800e764:	ee30 8b46 	vsub.f64	d8, d0, d6
 800e768:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e76c:	eea1 3b05 	vfma.f64	d3, d1, d5
 800e770:	ee30 7b43 	vsub.f64	d7, d0, d3
 800e774:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e778:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e77c:	ee25 5b08 	vmul.f64	d5, d5, d8
 800e780:	eea5 7b00 	vfma.f64	d7, d5, d0
 800e784:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e788:	ee33 0b07 	vadd.f64	d0, d3, d7
 800e78c:	ecbd 8b02 	vpop	{d8}
 800e790:	bcf0      	pop	{r4, r5, r6, r7}
 800e792:	4770      	bx	lr
 800e794:	f1a2 0410 	sub.w	r4, r2, #16
 800e798:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 800e79c:	428c      	cmp	r4, r1
 800e79e:	d923      	bls.n	800e7e8 <log+0x130>
 800e7a0:	18d9      	adds	r1, r3, r3
 800e7a2:	eb40 0400 	adc.w	r4, r0, r0
 800e7a6:	4321      	orrs	r1, r4
 800e7a8:	d105      	bne.n	800e7b6 <log+0xfe>
 800e7aa:	ecbd 8b02 	vpop	{d8}
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	bcf0      	pop	{r4, r5, r6, r7}
 800e7b2:	f000 bbf9 	b.w	800efa8 <__math_divzero>
 800e7b6:	4939      	ldr	r1, [pc, #228]	@ (800e89c <log+0x1e4>)
 800e7b8:	4288      	cmp	r0, r1
 800e7ba:	bf08      	it	eq
 800e7bc:	2b00      	cmpeq	r3, #0
 800e7be:	d0e5      	beq.n	800e78c <log+0xd4>
 800e7c0:	0413      	lsls	r3, r2, #16
 800e7c2:	d403      	bmi.n	800e7cc <log+0x114>
 800e7c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800e7c8:	4393      	bics	r3, r2
 800e7ca:	d104      	bne.n	800e7d6 <log+0x11e>
 800e7cc:	ecbd 8b02 	vpop	{d8}
 800e7d0:	bcf0      	pop	{r4, r5, r6, r7}
 800e7d2:	f000 bc01 	b.w	800efd8 <__math_invalid>
 800e7d6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e880 <log+0x1c8>
 800e7da:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e7de:	ec53 2b17 	vmov	r2, r3, d7
 800e7e2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 800e7ec:	492a      	ldr	r1, [pc, #168]	@ (800e898 <log+0x1e0>)
 800e7ee:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800e7f2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800e7f6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 800e7fa:	0d15      	lsrs	r5, r2, #20
 800e7fc:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 800e800:	052d      	lsls	r5, r5, #20
 800e802:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 800e806:	1e1e      	subs	r6, r3, #0
 800e808:	1b47      	subs	r7, r0, r5
 800e80a:	ec47 6b16 	vmov	d6, r6, r7
 800e80e:	1512      	asrs	r2, r2, #20
 800e810:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e814:	ee07 2a90 	vmov	s15, r2
 800e818:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e81c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e820:	ed91 4b00 	vldr	d4, [r1]
 800e824:	ee25 1b02 	vmul.f64	d1, d5, d2
 800e828:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 800e82c:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e830:	ee35 4b07 	vadd.f64	d4, d5, d7
 800e834:	ee37 0b44 	vsub.f64	d0, d7, d4
 800e838:	ed91 7b02 	vldr	d7, [r1, #8]
 800e83c:	ee30 0b05 	vadd.f64	d0, d0, d5
 800e840:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e844:	ed91 7b04 	vldr	d7, [r1, #16]
 800e848:	ed91 6b08 	vldr	d6, [r1, #32]
 800e84c:	eea7 0b02 	vfma.f64	d0, d7, d2
 800e850:	ed91 7b06 	vldr	d7, [r1, #24]
 800e854:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 800e858:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e85c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 800e860:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e864:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e868:	eea1 0b07 	vfma.f64	d0, d1, d7
 800e86c:	ee30 0b04 	vadd.f64	d0, d0, d4
 800e870:	e78c      	b.n	800e78c <log+0xd4>
 800e872:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800e888 <log+0x1d0>
 800e876:	e789      	b.n	800e78c <log+0xd4>
 800e878:	00000000 	.word	0x00000000
 800e87c:	41a00000 	.word	0x41a00000
 800e880:	00000000 	.word	0x00000000
 800e884:	43300000 	.word	0x43300000
	...
 800e890:	000308ff 	.word	0x000308ff
 800e894:	3ff00000 	.word	0x3ff00000
 800e898:	0800f088 	.word	0x0800f088
 800e89c:	7ff00000 	.word	0x7ff00000

0800e8a0 <log10>:
 800e8a0:	b508      	push	{r3, lr}
 800e8a2:	ed2d 8b02 	vpush	{d8}
 800e8a6:	eeb0 8b40 	vmov.f64	d8, d0
 800e8aa:	f000 fadd 	bl	800ee68 <__ieee754_log10>
 800e8ae:	eeb4 8b48 	vcmp.f64	d8, d8
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	d60f      	bvs.n	800e8d8 <log10+0x38>
 800e8b8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c0:	d80a      	bhi.n	800e8d8 <log10+0x38>
 800e8c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ca:	d108      	bne.n	800e8de <log10+0x3e>
 800e8cc:	f7ff fe7c 	bl	800e5c8 <__errno>
 800e8d0:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800e8f8 <log10+0x58>
 800e8d4:	2322      	movs	r3, #34	@ 0x22
 800e8d6:	6003      	str	r3, [r0, #0]
 800e8d8:	ecbd 8b02 	vpop	{d8}
 800e8dc:	bd08      	pop	{r3, pc}
 800e8de:	f7ff fe73 	bl	800e5c8 <__errno>
 800e8e2:	ecbd 8b02 	vpop	{d8}
 800e8e6:	2321      	movs	r3, #33	@ 0x21
 800e8e8:	6003      	str	r3, [r0, #0]
 800e8ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e8ee:	4804      	ldr	r0, [pc, #16]	@ (800e900 <log10+0x60>)
 800e8f0:	f000 bab2 	b.w	800ee58 <nan>
 800e8f4:	f3af 8000 	nop.w
 800e8f8:	00000000 	.word	0x00000000
 800e8fc:	fff00000 	.word	0xfff00000
 800e900:	0800f918 	.word	0x0800f918

0800e904 <checkint>:
 800e904:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e908:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800e90c:	429a      	cmp	r2, r3
 800e90e:	b570      	push	{r4, r5, r6, lr}
 800e910:	dd2a      	ble.n	800e968 <checkint+0x64>
 800e912:	f240 4333 	movw	r3, #1075	@ 0x433
 800e916:	429a      	cmp	r2, r3
 800e918:	dc24      	bgt.n	800e964 <checkint+0x60>
 800e91a:	1a9b      	subs	r3, r3, r2
 800e91c:	f1a3 0620 	sub.w	r6, r3, #32
 800e920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e924:	fa02 f403 	lsl.w	r4, r2, r3
 800e928:	fa02 f606 	lsl.w	r6, r2, r6
 800e92c:	f1c3 0520 	rsb	r5, r3, #32
 800e930:	fa22 f505 	lsr.w	r5, r2, r5
 800e934:	4334      	orrs	r4, r6
 800e936:	432c      	orrs	r4, r5
 800e938:	409a      	lsls	r2, r3
 800e93a:	ea20 0202 	bic.w	r2, r0, r2
 800e93e:	ea21 0404 	bic.w	r4, r1, r4
 800e942:	4322      	orrs	r2, r4
 800e944:	f1a3 0420 	sub.w	r4, r3, #32
 800e948:	f1c3 0220 	rsb	r2, r3, #32
 800e94c:	d10c      	bne.n	800e968 <checkint+0x64>
 800e94e:	40d8      	lsrs	r0, r3
 800e950:	fa01 f302 	lsl.w	r3, r1, r2
 800e954:	4318      	orrs	r0, r3
 800e956:	40e1      	lsrs	r1, r4
 800e958:	4308      	orrs	r0, r1
 800e95a:	f000 0001 	and.w	r0, r0, #1
 800e95e:	f1d0 0002 	rsbs	r0, r0, #2
 800e962:	bd70      	pop	{r4, r5, r6, pc}
 800e964:	2002      	movs	r0, #2
 800e966:	e7fc      	b.n	800e962 <checkint+0x5e>
 800e968:	2000      	movs	r0, #0
 800e96a:	e7fa      	b.n	800e962 <checkint+0x5e>
 800e96c:	0000      	movs	r0, r0
	...

0800e970 <pow>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	ee10 4a90 	vmov	r4, s1
 800e978:	ed2d 8b0a 	vpush	{d8-d12}
 800e97c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800e980:	ee11 aa90 	vmov	sl, s3
 800e984:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800e988:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800e98c:	429a      	cmp	r2, r3
 800e98e:	ee10 5a10 	vmov	r5, s0
 800e992:	ee11 0a10 	vmov	r0, s2
 800e996:	b087      	sub	sp, #28
 800e998:	46c4      	mov	ip, r8
 800e99a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800e99e:	d806      	bhi.n	800e9ae <pow+0x3e>
 800e9a0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800e9a4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800e9a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9aa:	f240 8157 	bls.w	800ec5c <pow+0x2ec>
 800e9ae:	1802      	adds	r2, r0, r0
 800e9b0:	eb4a 010a 	adc.w	r1, sl, sl
 800e9b4:	f06f 0b01 	mvn.w	fp, #1
 800e9b8:	1e57      	subs	r7, r2, #1
 800e9ba:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800e9be:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800e9c2:	45bb      	cmp	fp, r7
 800e9c4:	eb7e 0303 	sbcs.w	r3, lr, r3
 800e9c8:	d242      	bcs.n	800ea50 <pow+0xe0>
 800e9ca:	ea52 0301 	orrs.w	r3, r2, r1
 800e9ce:	f04f 0300 	mov.w	r3, #0
 800e9d2:	d10c      	bne.n	800e9ee <pow+0x7e>
 800e9d4:	196d      	adds	r5, r5, r5
 800e9d6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800e9da:	4164      	adcs	r4, r4
 800e9dc:	42ab      	cmp	r3, r5
 800e9de:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e9e2:	41a3      	sbcs	r3, r4
 800e9e4:	f0c0 808f 	bcc.w	800eb06 <pow+0x196>
 800e9e8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e9ec:	e02b      	b.n	800ea46 <pow+0xd6>
 800e9ee:	4ed4      	ldr	r6, [pc, #848]	@ (800ed40 <pow+0x3d0>)
 800e9f0:	42b4      	cmp	r4, r6
 800e9f2:	bf08      	it	eq
 800e9f4:	429d      	cmpeq	r5, r3
 800e9f6:	d109      	bne.n	800ea0c <pow+0x9c>
 800e9f8:	1800      	adds	r0, r0, r0
 800e9fa:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800e9fe:	eb4a 0a0a 	adc.w	sl, sl, sl
 800ea02:	4283      	cmp	r3, r0
 800ea04:	4bcf      	ldr	r3, [pc, #828]	@ (800ed44 <pow+0x3d4>)
 800ea06:	eb73 030a 	sbcs.w	r3, r3, sl
 800ea0a:	e7eb      	b.n	800e9e4 <pow+0x74>
 800ea0c:	196d      	adds	r5, r5, r5
 800ea0e:	48ce      	ldr	r0, [pc, #824]	@ (800ed48 <pow+0x3d8>)
 800ea10:	4164      	adcs	r4, r4
 800ea12:	42ab      	cmp	r3, r5
 800ea14:	eb70 0604 	sbcs.w	r6, r0, r4
 800ea18:	d375      	bcc.n	800eb06 <pow+0x196>
 800ea1a:	4281      	cmp	r1, r0
 800ea1c:	bf08      	it	eq
 800ea1e:	429a      	cmpeq	r2, r3
 800ea20:	d171      	bne.n	800eb06 <pow+0x196>
 800ea22:	4aca      	ldr	r2, [pc, #808]	@ (800ed4c <pow+0x3dc>)
 800ea24:	4294      	cmp	r4, r2
 800ea26:	bf08      	it	eq
 800ea28:	429d      	cmpeq	r5, r3
 800ea2a:	d0dd      	beq.n	800e9e8 <pow+0x78>
 800ea2c:	4294      	cmp	r4, r2
 800ea2e:	ea6f 0a0a 	mvn.w	sl, sl
 800ea32:	bf34      	ite	cc
 800ea34:	2400      	movcc	r4, #0
 800ea36:	2401      	movcs	r4, #1
 800ea38:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800ea3c:	4554      	cmp	r4, sl
 800ea3e:	f040 81dc 	bne.w	800edfa <pow+0x48a>
 800ea42:	ee21 0b01 	vmul.f64	d0, d1, d1
 800ea46:	b007      	add	sp, #28
 800ea48:	ecbd 8b0a 	vpop	{d8-d12}
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea50:	196f      	adds	r7, r5, r5
 800ea52:	eb44 0904 	adc.w	r9, r4, r4
 800ea56:	1e7a      	subs	r2, r7, #1
 800ea58:	f169 0300 	sbc.w	r3, r9, #0
 800ea5c:	4593      	cmp	fp, r2
 800ea5e:	eb7e 0303 	sbcs.w	r3, lr, r3
 800ea62:	d225      	bcs.n	800eab0 <pow+0x140>
 800ea64:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ea68:	2c00      	cmp	r4, #0
 800ea6a:	da13      	bge.n	800ea94 <pow+0x124>
 800ea6c:	4651      	mov	r1, sl
 800ea6e:	f7ff ff49 	bl	800e904 <checkint>
 800ea72:	2801      	cmp	r0, #1
 800ea74:	d10e      	bne.n	800ea94 <pow+0x124>
 800ea76:	eeb1 0b40 	vneg.f64	d0, d0
 800ea7a:	ea57 0909 	orrs.w	r9, r7, r9
 800ea7e:	d10b      	bne.n	800ea98 <pow+0x128>
 800ea80:	f1ba 0f00 	cmp.w	sl, #0
 800ea84:	dadf      	bge.n	800ea46 <pow+0xd6>
 800ea86:	b007      	add	sp, #28
 800ea88:	ecbd 8b0a 	vpop	{d8-d12}
 800ea8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea90:	f000 ba8a 	b.w	800efa8 <__math_divzero>
 800ea94:	2000      	movs	r0, #0
 800ea96:	e7f0      	b.n	800ea7a <pow+0x10a>
 800ea98:	f1ba 0f00 	cmp.w	sl, #0
 800ea9c:	dad3      	bge.n	800ea46 <pow+0xd6>
 800ea9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800eaa2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800eaa6:	ed8d 7b00 	vstr	d7, [sp]
 800eaaa:	ed9d 0b00 	vldr	d0, [sp]
 800eaae:	e7ca      	b.n	800ea46 <pow+0xd6>
 800eab0:	2c00      	cmp	r4, #0
 800eab2:	da2b      	bge.n	800eb0c <pow+0x19c>
 800eab4:	4651      	mov	r1, sl
 800eab6:	f7ff ff25 	bl	800e904 <checkint>
 800eaba:	b930      	cbnz	r0, 800eaca <pow+0x15a>
 800eabc:	b007      	add	sp, #28
 800eabe:	ecbd 8b0a 	vpop	{d8-d12}
 800eac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac6:	f000 ba87 	b.w	800efd8 <__math_invalid>
 800eaca:	1e41      	subs	r1, r0, #1
 800eacc:	4248      	negs	r0, r1
 800eace:	4148      	adcs	r0, r1
 800ead0:	0480      	lsls	r0, r0, #18
 800ead2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800ead6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800eada:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800eade:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800eae2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eae4:	d92d      	bls.n	800eb42 <pow+0x1d2>
 800eae6:	4b96      	ldr	r3, [pc, #600]	@ (800ed40 <pow+0x3d0>)
 800eae8:	2000      	movs	r0, #0
 800eaea:	429c      	cmp	r4, r3
 800eaec:	bf08      	it	eq
 800eaee:	4285      	cmpeq	r5, r0
 800eaf0:	f43f af7a 	beq.w	800e9e8 <pow+0x78>
 800eaf4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800eaf8:	428a      	cmp	r2, r1
 800eafa:	d80c      	bhi.n	800eb16 <pow+0x1a6>
 800eafc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800eb00:	42a8      	cmp	r0, r5
 800eb02:	41a3      	sbcs	r3, r4
 800eb04:	d204      	bcs.n	800eb10 <pow+0x1a0>
 800eb06:	ee31 0b00 	vadd.f64	d0, d1, d0
 800eb0a:	e79c      	b.n	800ea46 <pow+0xd6>
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e7e4      	b.n	800eada <pow+0x16a>
 800eb10:	ee30 0b41 	vsub.f64	d0, d0, d1
 800eb14:	e797      	b.n	800ea46 <pow+0xd6>
 800eb16:	2d01      	cmp	r5, #1
 800eb18:	eb74 0303 	sbcs.w	r3, r4, r3
 800eb1c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800eb20:	bf34      	ite	cc
 800eb22:	2301      	movcc	r3, #1
 800eb24:	2300      	movcs	r3, #0
 800eb26:	4296      	cmp	r6, r2
 800eb28:	bf8c      	ite	hi
 800eb2a:	2600      	movhi	r6, #0
 800eb2c:	2601      	movls	r6, #1
 800eb2e:	42b3      	cmp	r3, r6
 800eb30:	f000 809c 	beq.w	800ec6c <pow+0x2fc>
 800eb34:	b007      	add	sp, #28
 800eb36:	ecbd 8b0a 	vpop	{d8-d12}
 800eb3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3e:	f000 ba2b 	b.w	800ef98 <__math_oflow>
 800eb42:	f1bc 0f00 	cmp.w	ip, #0
 800eb46:	d10a      	bne.n	800eb5e <pow+0x1ee>
 800eb48:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800ed30 <pow+0x3c0>
 800eb4c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800eb50:	ec53 2b17 	vmov	r2, r3, d7
 800eb54:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800eb58:	4615      	mov	r5, r2
 800eb5a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800eb5e:	4a7c      	ldr	r2, [pc, #496]	@ (800ed50 <pow+0x3e0>)
 800eb60:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800eb64:	4422      	add	r2, r4
 800eb66:	1513      	asrs	r3, r2, #20
 800eb68:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800eb6c:	ee03 3a10 	vmov	s6, r3
 800eb70:	0d12      	lsrs	r2, r2, #20
 800eb72:	4b78      	ldr	r3, [pc, #480]	@ (800ed54 <pow+0x3e4>)
 800eb74:	0512      	lsls	r2, r2, #20
 800eb76:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800eb7a:	1aa7      	subs	r7, r4, r2
 800eb7c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800eb80:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800eb84:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800eb88:	1e2e      	subs	r6, r5, #0
 800eb8a:	ec47 6b14 	vmov	d4, r6, r7
 800eb8e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800eb92:	eea4 6b05 	vfma.f64	d6, d4, d5
 800eb96:	ed93 5b00 	vldr	d5, [r3]
 800eb9a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800eb9e:	eea3 2b05 	vfma.f64	d2, d3, d5
 800eba2:	ed93 5b02 	vldr	d5, [r3, #8]
 800eba6:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ebaa:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ebae:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ebb2:	ed93 5b04 	vldr	d5, [r3, #16]
 800ebb6:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ebba:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ebbe:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ebc2:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ebc6:	ee34 8b00 	vadd.f64	d8, d4, d0
 800ebca:	eeb0 9b40 	vmov.f64	d9, d0
 800ebce:	ee34 4b48 	vsub.f64	d4, d4, d8
 800ebd2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800ebd6:	ee34 ab00 	vadd.f64	d10, d4, d0
 800ebda:	ed93 5b06 	vldr	d5, [r3, #24]
 800ebde:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ebe2:	ee37 7b09 	vadd.f64	d7, d7, d9
 800ebe6:	ed93 4b08 	vldr	d4, [r3, #32]
 800ebea:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800ebee:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800ebf2:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ebf6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800ebfa:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800ebfe:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ec02:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800ec06:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800ec0a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ec0e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800ec12:	eeab 7b05 	vfma.f64	d7, d11, d5
 800ec16:	ee38 4b07 	vadd.f64	d4, d8, d7
 800ec1a:	ee21 6b04 	vmul.f64	d6, d1, d4
 800ec1e:	ee16 3a90 	vmov	r3, s13
 800ec22:	eeb0 5b46 	vmov.f64	d5, d6
 800ec26:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800ec2a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800ec2e:	18b2      	adds	r2, r6, r2
 800ec30:	2a3e      	cmp	r2, #62	@ 0x3e
 800ec32:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800ec36:	ee38 8b44 	vsub.f64	d8, d8, d4
 800ec3a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800ec3e:	eea1 5b08 	vfma.f64	d5, d1, d8
 800ec42:	d91b      	bls.n	800ec7c <pow+0x30c>
 800ec44:	2a00      	cmp	r2, #0
 800ec46:	da0b      	bge.n	800ec60 <pow+0x2f0>
 800ec48:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ec4c:	ee36 0b00 	vadd.f64	d0, d6, d0
 800ec50:	2800      	cmp	r0, #0
 800ec52:	f43f aef8 	beq.w	800ea46 <pow+0xd6>
 800ec56:	eeb1 0b40 	vneg.f64	d0, d0
 800ec5a:	e6f4      	b.n	800ea46 <pow+0xd6>
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	e77e      	b.n	800eb5e <pow+0x1ee>
 800ec60:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800ec64:	d909      	bls.n	800ec7a <pow+0x30a>
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f6bf af64 	bge.w	800eb34 <pow+0x1c4>
 800ec6c:	b007      	add	sp, #28
 800ec6e:	ecbd 8b0a 	vpop	{d8-d12}
 800ec72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec76:	f000 b987 	b.w	800ef88 <__math_uflow>
 800ec7a:	2600      	movs	r6, #0
 800ec7c:	4936      	ldr	r1, [pc, #216]	@ (800ed58 <pow+0x3e8>)
 800ec7e:	ed91 4b02 	vldr	d4, [r1, #8]
 800ec82:	ed91 3b00 	vldr	d3, [r1]
 800ec86:	eeb0 7b44 	vmov.f64	d7, d4
 800ec8a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ec8e:	ee17 5a10 	vmov	r5, s14
 800ec92:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ec96:	ed91 4b04 	vldr	d4, [r1, #16]
 800ec9a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800ec9e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800eca2:	ed91 4b06 	vldr	d4, [r1, #24]
 800eca6:	18dc      	adds	r4, r3, r3
 800eca8:	f104 030f 	add.w	r3, r4, #15
 800ecac:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ecb0:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ecb4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800ecb8:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ecbc:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ecc0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800ecc4:	ed91 4b08 	vldr	d4, [r1, #32]
 800ecc8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800eccc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ecd0:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ecd4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800ecd8:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ecdc:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ece0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800ece4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ece8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ecec:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ecf0:	1940      	adds	r0, r0, r5
 800ecf2:	2700      	movs	r7, #0
 800ecf4:	eb17 020c 	adds.w	r2, r7, ip
 800ecf8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ecfc:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ed00:	2e00      	cmp	r6, #0
 800ed02:	d175      	bne.n	800edf0 <pow+0x480>
 800ed04:	42bd      	cmp	r5, r7
 800ed06:	db29      	blt.n	800ed5c <pow+0x3ec>
 800ed08:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800ed0c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800ed10:	4610      	mov	r0, r2
 800ed12:	ec41 0b10 	vmov	d0, r0, r1
 800ed16:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ed1a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ed38 <pow+0x3c8>
 800ed1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed22:	b007      	add	sp, #28
 800ed24:	ecbd 8b0a 	vpop	{d8-d12}
 800ed28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	f000 b96c 	b.w	800f008 <__math_check_oflow>
 800ed30:	00000000 	.word	0x00000000
 800ed34:	43300000 	.word	0x43300000
 800ed38:	00000000 	.word	0x00000000
 800ed3c:	7f000000 	.word	0x7f000000
 800ed40:	3ff00000 	.word	0x3ff00000
 800ed44:	fff00000 	.word	0xfff00000
 800ed48:	ffe00000 	.word	0xffe00000
 800ed4c:	7fe00000 	.word	0x7fe00000
 800ed50:	c0196aab 	.word	0xc0196aab
 800ed54:	0800f920 	.word	0x0800f920
 800ed58:	08010968 	.word	0x08010968
 800ed5c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ed60:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800ed64:	4610      	mov	r0, r2
 800ed66:	ec41 0b15 	vmov	d5, r0, r1
 800ed6a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800ed6e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ed72:	ee35 7b06 	vadd.f64	d7, d5, d6
 800ed76:	eeb0 4bc7 	vabs.f64	d4, d7
 800ed7a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800ed7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed82:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800ee00 <pow+0x490>
 800ed86:	d52a      	bpl.n	800edde <pow+0x46e>
 800ed88:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ed8c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ed90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed94:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ed98:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800ed9c:	bf58      	it	pl
 800ed9e:	eeb0 4b43 	vmovpl.f64	d4, d3
 800eda2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800eda6:	ee34 6b43 	vsub.f64	d6, d4, d3
 800edaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 800edae:	ee36 6b05 	vadd.f64	d6, d6, d5
 800edb2:	ee36 6b03 	vadd.f64	d6, d6, d3
 800edb6:	ee36 7b44 	vsub.f64	d7, d6, d4
 800edba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800edbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc2:	d104      	bne.n	800edce <pow+0x45e>
 800edc4:	4632      	mov	r2, r6
 800edc6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800edca:	ec43 2b17 	vmov	d7, r2, r3
 800edce:	ed8d 0b02 	vstr	d0, [sp, #8]
 800edd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800edd6:	ee26 6b00 	vmul.f64	d6, d6, d0
 800edda:	ed8d 6b04 	vstr	d6, [sp, #16]
 800edde:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ede2:	b007      	add	sp, #28
 800ede4:	ecbd 8b0a 	vpop	{d8-d12}
 800ede8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	f000 b903 	b.w	800eff6 <__math_check_uflow>
 800edf0:	ec43 2b10 	vmov	d0, r2, r3
 800edf4:	eea7 0b00 	vfma.f64	d0, d7, d0
 800edf8:	e625      	b.n	800ea46 <pow+0xd6>
 800edfa:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800ee08 <pow+0x498>
 800edfe:	e622      	b.n	800ea46 <pow+0xd6>
 800ee00:	00000000 	.word	0x00000000
 800ee04:	00100000 	.word	0x00100000
	...

0800ee10 <sqrt>:
 800ee10:	b508      	push	{r3, lr}
 800ee12:	ed2d 8b04 	vpush	{d8-d9}
 800ee16:	eeb0 8b40 	vmov.f64	d8, d0
 800ee1a:	f000 f819 	bl	800ee50 <__ieee754_sqrt>
 800ee1e:	eeb4 8b48 	vcmp.f64	d8, d8
 800ee22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee26:	d60c      	bvs.n	800ee42 <sqrt+0x32>
 800ee28:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800ee48 <sqrt+0x38>
 800ee2c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ee30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee34:	d505      	bpl.n	800ee42 <sqrt+0x32>
 800ee36:	f7ff fbc7 	bl	800e5c8 <__errno>
 800ee3a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ee3e:	2321      	movs	r3, #33	@ 0x21
 800ee40:	6003      	str	r3, [r0, #0]
 800ee42:	ecbd 8b04 	vpop	{d8-d9}
 800ee46:	bd08      	pop	{r3, pc}
	...

0800ee50 <__ieee754_sqrt>:
 800ee50:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ee54:	4770      	bx	lr
	...

0800ee58 <nan>:
 800ee58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ee60 <nan+0x8>
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	00000000 	.word	0x00000000
 800ee64:	7ff80000 	.word	0x7ff80000

0800ee68 <__ieee754_log10>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	ee10 3a90 	vmov	r3, s1
 800ee6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ee72:	ed2d 8b02 	vpush	{d8}
 800ee76:	da21      	bge.n	800eebc <__ieee754_log10+0x54>
 800ee78:	ee10 1a10 	vmov	r1, s0
 800ee7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ee80:	430a      	orrs	r2, r1
 800ee82:	d108      	bne.n	800ee96 <__ieee754_log10+0x2e>
 800ee84:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800ef10 <__ieee754_log10+0xa8>
 800ee88:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 800ef18 <__ieee754_log10+0xb0>
 800ee8c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800ee90:	ecbd 8b02 	vpop	{d8}
 800ee94:	bd10      	pop	{r4, pc}
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	da02      	bge.n	800eea0 <__ieee754_log10+0x38>
 800ee9a:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ee9e:	e7f3      	b.n	800ee88 <__ieee754_log10+0x20>
 800eea0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800ef20 <__ieee754_log10+0xb8>
 800eea4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eea8:	ee10 3a90 	vmov	r3, s1
 800eeac:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800eeb0:	4923      	ldr	r1, [pc, #140]	@ (800ef40 <__ieee754_log10+0xd8>)
 800eeb2:	428b      	cmp	r3, r1
 800eeb4:	dd04      	ble.n	800eec0 <__ieee754_log10+0x58>
 800eeb6:	ee30 0b00 	vadd.f64	d0, d0, d0
 800eeba:	e7e9      	b.n	800ee90 <__ieee754_log10+0x28>
 800eebc:	2200      	movs	r2, #0
 800eebe:	e7f7      	b.n	800eeb0 <__ieee754_log10+0x48>
 800eec0:	1518      	asrs	r0, r3, #20
 800eec2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800eec6:	4410      	add	r0, r2
 800eec8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800eecc:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 800eed0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800eed4:	ee08 3a10 	vmov	s16, r3
 800eed8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 800eedc:	ec53 2b10 	vmov	r2, r3, d0
 800eee0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800eee4:	ec43 2b10 	vmov	d0, r2, r3
 800eee8:	f7ff fbe6 	bl	800e6b8 <log>
 800eeec:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ef28 <__ieee754_log10+0xc0>
 800eef0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eef4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ef30 <__ieee754_log10+0xc8>
 800eef8:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 800eefc:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ef00:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ef38 <__ieee754_log10+0xd0>
 800ef04:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ef08:	e7c2      	b.n	800ee90 <__ieee754_log10+0x28>
 800ef0a:	bf00      	nop
 800ef0c:	f3af 8000 	nop.w
 800ef10:	00000000 	.word	0x00000000
 800ef14:	c3500000 	.word	0xc3500000
	...
 800ef24:	43500000 	.word	0x43500000
 800ef28:	1526e50e 	.word	0x1526e50e
 800ef2c:	3fdbcb7b 	.word	0x3fdbcb7b
 800ef30:	11f12b36 	.word	0x11f12b36
 800ef34:	3d59fef3 	.word	0x3d59fef3
 800ef38:	509f6000 	.word	0x509f6000
 800ef3c:	3fd34413 	.word	0x3fd34413
 800ef40:	7fefffff 	.word	0x7fefffff

0800ef44 <with_errno>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	ed2d 8b02 	vpush	{d8}
 800ef4a:	eeb0 8b40 	vmov.f64	d8, d0
 800ef4e:	4604      	mov	r4, r0
 800ef50:	f7ff fb3a 	bl	800e5c8 <__errno>
 800ef54:	eeb0 0b48 	vmov.f64	d0, d8
 800ef58:	ecbd 8b02 	vpop	{d8}
 800ef5c:	6004      	str	r4, [r0, #0]
 800ef5e:	bd10      	pop	{r4, pc}

0800ef60 <xflow>:
 800ef60:	b082      	sub	sp, #8
 800ef62:	b158      	cbz	r0, 800ef7c <xflow+0x1c>
 800ef64:	eeb1 7b40 	vneg.f64	d7, d0
 800ef68:	ed8d 7b00 	vstr	d7, [sp]
 800ef6c:	ed9d 7b00 	vldr	d7, [sp]
 800ef70:	2022      	movs	r0, #34	@ 0x22
 800ef72:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef76:	b002      	add	sp, #8
 800ef78:	f7ff bfe4 	b.w	800ef44 <with_errno>
 800ef7c:	eeb0 7b40 	vmov.f64	d7, d0
 800ef80:	e7f2      	b.n	800ef68 <xflow+0x8>
 800ef82:	0000      	movs	r0, r0
 800ef84:	0000      	movs	r0, r0
	...

0800ef88 <__math_uflow>:
 800ef88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef90 <__math_uflow+0x8>
 800ef8c:	f7ff bfe8 	b.w	800ef60 <xflow>
 800ef90:	00000000 	.word	0x00000000
 800ef94:	10000000 	.word	0x10000000

0800ef98 <__math_oflow>:
 800ef98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800efa0 <__math_oflow+0x8>
 800ef9c:	f7ff bfe0 	b.w	800ef60 <xflow>
 800efa0:	00000000 	.word	0x00000000
 800efa4:	70000000 	.word	0x70000000

0800efa8 <__math_divzero>:
 800efa8:	b082      	sub	sp, #8
 800efaa:	2800      	cmp	r0, #0
 800efac:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800efb0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800efb4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800efb8:	ed8d 7b00 	vstr	d7, [sp]
 800efbc:	ed9d 0b00 	vldr	d0, [sp]
 800efc0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800efd0 <__math_divzero+0x28>
 800efc4:	2022      	movs	r0, #34	@ 0x22
 800efc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800efca:	b002      	add	sp, #8
 800efcc:	f7ff bfba 	b.w	800ef44 <with_errno>
	...

0800efd8 <__math_invalid>:
 800efd8:	eeb0 7b40 	vmov.f64	d7, d0
 800efdc:	eeb4 7b47 	vcmp.f64	d7, d7
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800efe8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800efec:	d602      	bvs.n	800eff4 <__math_invalid+0x1c>
 800efee:	2021      	movs	r0, #33	@ 0x21
 800eff0:	f7ff bfa8 	b.w	800ef44 <with_errno>
 800eff4:	4770      	bx	lr

0800eff6 <__math_check_uflow>:
 800eff6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800effa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effe:	d102      	bne.n	800f006 <__math_check_uflow+0x10>
 800f000:	2022      	movs	r0, #34	@ 0x22
 800f002:	f7ff bf9f 	b.w	800ef44 <with_errno>
 800f006:	4770      	bx	lr

0800f008 <__math_check_oflow>:
 800f008:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800f028 <__math_check_oflow+0x20>
 800f00c:	eeb0 7bc0 	vabs.f64	d7, d0
 800f010:	eeb4 7b46 	vcmp.f64	d7, d6
 800f014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f018:	dd02      	ble.n	800f020 <__math_check_oflow+0x18>
 800f01a:	2022      	movs	r0, #34	@ 0x22
 800f01c:	f7ff bf92 	b.w	800ef44 <with_errno>
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	f3af 8000 	nop.w
 800f028:	ffffffff 	.word	0xffffffff
 800f02c:	7fefffff 	.word	0x7fefffff

0800f030 <_init>:
 800f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f032:	bf00      	nop
 800f034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f036:	bc08      	pop	{r3}
 800f038:	469e      	mov	lr, r3
 800f03a:	4770      	bx	lr

0800f03c <_fini>:
 800f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f03e:	bf00      	nop
 800f040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f042:	bc08      	pop	{r3}
 800f044:	469e      	mov	lr, r3
 800f046:	4770      	bx	lr
