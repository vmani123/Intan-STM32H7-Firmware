
rhd2164_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb58  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  0800ee28  0800ee28  0000fe28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010fb8  08010fb8  00011fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010fc0  08010fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010fc4  08010fc4  00011fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08010fc8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000948  24000070  08011034  00012070  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240009b8  08011034  000129b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bc67  00000000  00000000  0001209a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003314  00000000  00000000  0002dd01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001520  00000000  00000000  00031018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001081  00000000  00000000  00032538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f22  00000000  00000000  000335b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c2ab  00000000  00000000  000674db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00151467  00000000  00000000  00083786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4bed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000616c  00000000  00000000  001d4c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001dad9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ee10 	.word	0x0800ee10

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800ee10 	.word	0x0800ee10

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	4619      	mov	r1, r3
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f006 fb92 	bl	8006d40 <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fa66 	bl	8003b00 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <enable_interrupt_timer+0x16>
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <enable_interrupt_timer+0x24>)
 800064c:	f00a f878 	bl	800a740 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000650:	e002      	b.n	8000658 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <enable_interrupt_timer+0x24>)
 8000654:	f00a f8fa 	bl	800a84c <HAL_TIM_Base_Stop_IT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000324 	.word	0x24000324

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ea      	sub	sp, #424	@ 0x1a8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f003 f9b7 	bl	80039dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f873 	bl	8000758 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000672:	f000 f8df 	bl	8000834 <PeriphCommonClock_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067a:	f7ff ffd3 	bl	8000624 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fbe3 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000682:	f000 fbb1 	bl	8000de8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000686:	f000 f9ad 	bl	80009e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800068a:	f000 fa7f 	bl	8000b8c <MX_TIM2_Init>
  MX_TIM3_Init();
 800068e:	f000 fb05 	bl	8000c9c <MX_TIM3_Init>
  MX_SPI3_Init();
 8000692:	f000 f94f 	bl	8000934 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000696:	f000 f8fd 	bl	8000894 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800069a:	f000 fb57 	bl	8000d4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Write register values to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1LFZ1, 0b10); // enable pausing TIM3 during debug
 800069e:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <main+0xe0>)
 80006a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006a2:	4a28      	ldr	r2, [pc, #160]	@ (8000744 <main+0xe0>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB1LFZ1, 0b1); // enable pausing TIM2 during debug
 80006aa:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <main+0xe0>)
 80006ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006ae:	4a25      	ldr	r2, [pc, #148]	@ (8000744 <main+0xe0>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB2FZ1, 0b1); // enable pausing TIM1 during debug
 80006b6:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <main+0xe0>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a22      	ldr	r2, [pc, #136]	@ (8000744 <main+0xe0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c

  // Allocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 80006c2:	f000 fdf1 	bl	80012a8 <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 80006c6:	f000 fe1d 	bl	8001304 <initialize_spi_with_dma>

  // Set up timers used to generate 32-bit SCLK used to read DDR MISO to trigger once TRANSMIT_SPI CS goes low.
  initialize_ddr_sclk_timers();
 80006ca:	f000 fe29 	bl	8001320 <initialize_ddr_sclk_timers>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f909 	bl	80038e8 <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 80006d6:	f003 f912 	bl	80038fe <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 80006da:	463b      	mov	r3, r7
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f915 	bl	800390c <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4818      	ldr	r0, [pc, #96]	@ (8000748 <main+0xe4>)
 80006e8:	f7ff ff8a 	bl	8000600 <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <main+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ffa2 	bl	800063c <enable_interrupt_timer>
  main_loop_active = 1;
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <main+0xec>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 80006fe:	f003 f82d 	bl	800375c <loop_escape>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d106      	bne.n	8000716 <main+0xb2>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800070e:	4811      	ldr	r0, [pc, #68]	@ (8000754 <main+0xf0>)
 8000710:	f7ff ff76 	bl	8000600 <write_pin>
	  if (loop_escape()) break;
 8000714:	e7f3      	b.n	80006fe <main+0x9a>
 8000716:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff8f 	bl	800063c <enable_interrupt_timer>
  main_loop_active = 0;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <main+0xec>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]

  // Disable 32-bit SCLK timers.
  end_ddr_sclk_timers();
 8000724:	f000 fe0c 	bl	8001340 <end_ddr_sclk_timers>

  // Disable SPI DMA.
  end_spi_with_dma();
 8000728:	f000 fdf3 	bl	8001312 <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 800072c:	f003 f870 	bl	8003810 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 8000730:	f000 fddc 	bl	80012ec <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4803      	ldr	r0, [pc, #12]	@ (8000748 <main+0xe4>)
 800073a:	f7ff ff61 	bl	8000600 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 800073e:	bf00      	nop
 8000740:	e7fd      	b.n	800073e <main+0xda>
 8000742:	bf00      	nop
 8000744:	5c001000 	.word	0x5c001000
 8000748:	58020400 	.word	0x58020400
 800074c:	24000550 	.word	0x24000550
 8000750:	2400085a 	.word	0x2400085a
 8000754:	58020800 	.word	0x58020800

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	@ 0x70
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	224c      	movs	r2, #76	@ 0x4c
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f00d fe06 	bl	800e378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2220      	movs	r2, #32
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00d fe00 	bl	800e378 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000778:	2002      	movs	r0, #2
 800077a:	f006 fb1f 	bl	8006dbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b2b      	ldr	r3, [pc, #172]	@ (8000830 <SystemClock_Config+0xd8>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <SystemClock_Config+0xd8>)
 8000788:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <SystemClock_Config+0xd8>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800079a:	bf00      	nop
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <SystemClock_Config+0xd8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007a8:	d1f8      	bne.n	800079c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ae:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 132;
 80007c0:	2384      	movs	r3, #132	@ 0x84
 80007c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007d0:	2308      	movs	r3, #8
 80007d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f006 fb25 	bl	8006e30 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ec:	f000 fcbe 	bl	800116c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	233f      	movs	r3, #63	@ 0x3f
 80007f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f4:	2303      	movs	r3, #3
 80007f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007fc:	2308      	movs	r3, #8
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000800:	2340      	movs	r3, #64	@ 0x40
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000804:	2340      	movs	r3, #64	@ 0x40
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800080e:	2340      	movs	r3, #64	@ 0x40
 8000810:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2103      	movs	r1, #3
 8000816:	4618      	mov	r0, r3
 8000818:	f006 fee4 	bl	80075e4 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000822:	f000 fca3 	bl	800116c <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3770      	adds	r7, #112	@ 0x70
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58024800 	.word	0x58024800

08000834 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ae      	sub	sp, #184	@ 0xb8
 8000838:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	22b8      	movs	r2, #184	@ 0xb8
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f00d fd99 	bl	800e378 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 8000846:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800084a:	f04f 0300 	mov.w	r3, #0
 800084e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 33;
 8000856:	2321      	movs	r3, #33	@ 0x21
 8000858:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800085a:	2303      	movs	r3, #3
 800085c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000866:	23c0      	movs	r3, #192	@ 0xc0
 8000868:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000876:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f007 fa3e 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000886:	f000 fc71 	bl	800116c <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	37b8      	adds	r7, #184	@ 0xb8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_SPI1_Init+0x98>)
 800089a:	4a25      	ldr	r2, [pc, #148]	@ (8000930 <MX_SPI1_Init+0x9c>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_SPI1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_SPI1_Init+0x98>)
 80008a6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_SPI1_Init+0x98>)
 80008ae:	221f      	movs	r2, #31
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_SPI1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_SPI1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_SPI1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_SPI1_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_SPI1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_SPI1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_SPI1_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_SPI1_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_SPI1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_SPI1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_SPI1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_SPI1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_SPI1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_SPI1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_SPI1_Init+0x98>)
 8000908:	2200      	movs	r2, #0
 800090a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_SPI1_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_SPI1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_SPI1_Init+0x98>)
 800091a:	f008 ffb1 	bl	8009880 <HAL_SPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000924:	f000 fc22 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2400008c 	.word	0x2400008c
 8000930:	40013000 	.word	0x40013000

08000934 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000938:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <MX_SPI3_Init+0xa8>)
 800093a:	4a29      	ldr	r2, [pc, #164]	@ (80009e0 <MX_SPI3_Init+0xac>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000940:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000944:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000948:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800094c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000950:	220f      	movs	r2, #15
 8000952:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_SPI3_Init+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000962:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000966:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <MX_SPI3_Init+0xa8>)
 800096a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800096e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000978:	2200      	movs	r2, #0
 800097a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_SPI3_Init+0xa8>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI3_Init+0xa8>)
 800098a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI3_Init+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI3_Init+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_06CYCLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009b0:	2260      	movs	r2, #96	@ 0x60
 80009b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_SPI3_Init+0xa8>)
 80009c8:	f008 ff5a 	bl	8009880 <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80009d2:	f000 fbcb 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	24000114 	.word	0x24000114
 80009e0:	40003c00 	.word	0x40003c00

080009e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0a0      	sub	sp, #128	@ 0x80
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2234      	movs	r2, #52	@ 0x34
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f00d fca2 	bl	800e378 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a34:	4b53      	ldr	r3, [pc, #332]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a36:	4a54      	ldr	r2, [pc, #336]	@ (8000b88 <MX_TIM1_Init+0x1a4>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000a3a:	4b52      	ldr	r3, [pc, #328]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b50      	ldr	r3, [pc, #320]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 8000a46:	4b4f      	ldr	r3, [pc, #316]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a48:	2205      	movs	r2, #5
 8000a4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 31;
 8000a52:	4b4c      	ldr	r3, [pc, #304]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a54:	221f      	movs	r2, #31
 8000a56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b4a      	ldr	r3, [pc, #296]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5e:	4849      	ldr	r0, [pc, #292]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a60:	f009 fe17 	bl	800a692 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a6a:	f000 fb7f 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a74:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4842      	ldr	r0, [pc, #264]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a7c:	f00a fc6e 	bl	800b35c <HAL_TIM_ConfigClockSource>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a86:	f000 fb71 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a8a:	483e      	ldr	r0, [pc, #248]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a8c:	f00a f916 	bl	800acbc <HAL_TIM_PWM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000a96:	f000 fb69 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000a9a:	2108      	movs	r1, #8
 8000a9c:	4839      	ldr	r0, [pc, #228]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000a9e:	f00a f96e 	bl	800ad7e <HAL_TIM_OnePulse_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000aa8:	f000 fb60 	bl	800116c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000aac:	2306      	movs	r3, #6
 8000aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ab4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4832      	ldr	r0, [pc, #200]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000abc:	f00a fd46 	bl	800b54c <HAL_TIM_SlaveConfigSynchro>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000ac6:	f000 fb51 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ada:	4619      	mov	r1, r3
 8000adc:	4829      	ldr	r0, [pc, #164]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000ade:	f00b fad5 	bl	800c08c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ae8:	f000 fb40 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000aec:	2370      	movs	r3, #112	@ 0x70
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000af0:	2303      	movs	r3, #3
 8000af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000afc:	2304      	movs	r3, #4
 8000afe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b04:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	481c      	ldr	r0, [pc, #112]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000b14:	f00a fb0e 	bl	800b134 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000b1e:	f000 fb25 	bl	800116c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000b22:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0208 	bic.w	r2, r2, #8
 8000b30:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000b68:	f00b fb2c 	bl	800c1c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000b72:	f000 fafb 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b76:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <MX_TIM1_Init+0x1a0>)
 8000b78:	f002 fb76 	bl	8003268 <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3780      	adds	r7, #128	@ 0x80
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2400028c 	.word	0x2400028c
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b090      	sub	sp, #64	@ 0x40
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc8:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b32      	ldr	r3, [pc, #200]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bd6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be8:	482b      	ldr	r0, [pc, #172]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bea:	f009 fd52 	bl	800a692 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000bf4:	f000 faba 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bf8:	4827      	ldr	r0, [pc, #156]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000bfa:	f00a f85f 	bl	800acbc <HAL_TIM_PWM_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c04:	f000 fab2 	bl	800116c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4823      	ldr	r0, [pc, #140]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000c0c:	f00a f8b7 	bl	800ad7e <HAL_TIM_OnePulse_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c16:	f000 faa9 	bl	800116c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c1e:	2370      	movs	r3, #112	@ 0x70
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4818      	ldr	r0, [pc, #96]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000c38:	f00a fc88 	bl	800b54c <HAL_TIM_SlaveConfigSynchro>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c42:	f000 fa93 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000c46:	2360      	movs	r3, #96	@ 0x60
 8000c48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4e:	f107 0320 	add.w	r3, r7, #32
 8000c52:	4619      	mov	r1, r3
 8000c54:	4810      	ldr	r0, [pc, #64]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000c56:	f00b fa19 	bl	800c08c <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c60:	f000 fa84 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c64:	2370      	movs	r3, #112	@ 0x70
 8000c66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000c68:	230a      	movs	r3, #10
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2208      	movs	r2, #8
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000c7c:	f00a fa5a 	bl	800b134 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000c86:	f000 fa71 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c8a:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <MX_TIM2_Init+0x10c>)
 8000c8c:	f002 faec 	bl	8003268 <HAL_TIM_MspPostInit>

}
 8000c90:	bf00      	nop
 8000c92:	3740      	adds	r7, #64	@ 0x40
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	240002d8 	.word	0x240002d8

08000c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000cc2:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000cc8:	220f      	movs	r2, #15
 8000cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 13750;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000cd4:	f243 52b6 	movw	r2, #13750	@ 0x35b6
 8000cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ce6:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000ce8:	f009 fddf 	bl	800a8aa <HAL_TIM_OC_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000cf2:	f000 fa3b 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000d06:	f00b f9c1 	bl	800c08c <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d10:	f000 fa2c 	bl	800116c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_TIM3_Init+0xa8>)
 8000d2c:	f00a f988 	bl	800b040 <HAL_TIM_OC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d36:	f000 fa19 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	@ 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	24000324 	.word	0x24000324
 8000d48:	40000400 	.word	0x40000400

08000d4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d52:	4a23      	ldr	r2, [pc, #140]	@ (8000de0 <MX_USART3_UART_Init+0x94>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 12500000;
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d58:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <MX_USART3_UART_Init+0x98>)
 8000d5a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d70:	2208      	movs	r2, #8
 8000d72:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d88:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d94:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000d96:	f00b fabf 	bl	800c318 <HAL_UART_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000da0:	f000 f9e4 	bl	800116c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000da8:	f00d f95d 	bl	800e066 <HAL_UARTEx_SetTxFifoThreshold>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f000 f9db 	bl	800116c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000dba:	f00d f992 	bl	800e0e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc4:	f000 f9d2 	bl	800116c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_USART3_UART_Init+0x90>)
 8000dca:	f00d f913 	bl	800dff4 <HAL_UARTEx_DisableFifoMode>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd4:	f000 f9ca 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	24000370 	.word	0x24000370
 8000de0:	40004800 	.word	0x40004800
 8000de4:	00bebc20 	.word	0x00bebc20

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <MX_DMA_Init+0x5c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a13      	ldr	r2, [pc, #76]	@ (8000e44 <MX_DMA_Init+0x5c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_DMA_Init+0x5c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 ff74 	bl	8003cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f002 ff8b 	bl	8003d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	200c      	movs	r0, #12
 8000e22:	f002 ff6c 	bl	8003cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e26:	200c      	movs	r0, #12
 8000e28:	f002 ff83 	bl	8003d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	200d      	movs	r0, #13
 8000e32:	f002 ff64 	bl	8003cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e36:	200d      	movs	r0, #13
 8000e38:	f002 ff7b 	bl	8003d32 <HAL_NVIC_EnableIRQ>

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	4bbc      	ldr	r3, [pc, #752]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e64:	4aba      	ldr	r2, [pc, #744]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e6e:	4bb8      	ldr	r3, [pc, #736]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4bb4      	ldr	r3, [pc, #720]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e82:	4ab3      	ldr	r2, [pc, #716]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8c:	4bb0      	ldr	r3, [pc, #704]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9a:	4bad      	ldr	r3, [pc, #692]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea0:	4aab      	ldr	r2, [pc, #684]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eaa:	4ba9      	ldr	r3, [pc, #676]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4ba5      	ldr	r3, [pc, #660]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebe:	4aa4      	ldr	r2, [pc, #656]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec8:	4ba1      	ldr	r3, [pc, #644]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	4a9c      	ldr	r2, [pc, #624]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee6:	4b9a      	ldr	r3, [pc, #616]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef4:	4b96      	ldr	r3, [pc, #600]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	4a95      	ldr	r2, [pc, #596]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f04:	4b92      	ldr	r3, [pc, #584]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f12:	4b8f      	ldr	r3, [pc, #572]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	4a8d      	ldr	r2, [pc, #564]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f22:	4b8b      	ldr	r3, [pc, #556]	@ (8001150 <MX_GPIO_Init+0x308>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f36:	4887      	ldr	r0, [pc, #540]	@ (8001154 <MX_GPIO_Init+0x30c>)
 8000f38:	f005 ff02 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f42:	4885      	ldr	r0, [pc, #532]	@ (8001158 <MX_GPIO_Init+0x310>)
 8000f44:	f005 fefc 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f4e:	4882      	ldr	r0, [pc, #520]	@ (8001158 <MX_GPIO_Init+0x310>)
 8000f50:	f005 fef6 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8000f5a:	4880      	ldr	r0, [pc, #512]	@ (800115c <MX_GPIO_Init+0x314>)
 8000f5c:	f005 fef0 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f66:	487e      	ldr	r0, [pc, #504]	@ (8001160 <MX_GPIO_Init+0x318>)
 8000f68:	f005 feea 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ErrorCode_Bit_3_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2103      	movs	r1, #3
 8000f70:	487c      	ldr	r0, [pc, #496]	@ (8001164 <MX_GPIO_Init+0x31c>)
 8000f72:	f005 fee5 	bl	8006d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f76:	2304      	movs	r3, #4
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4876      	ldr	r0, [pc, #472]	@ (8001164 <MX_GPIO_Init+0x31c>)
 8000f8c:	f005 fd30 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	486e      	ldr	r0, [pc, #440]	@ (8001160 <MX_GPIO_Init+0x318>)
 8000fa6:	f005 fd23 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000faa:	2332      	movs	r3, #50	@ 0x32
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fba:	230b      	movs	r3, #11
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4866      	ldr	r0, [pc, #408]	@ (8001160 <MX_GPIO_Init+0x318>)
 8000fc6:	f005 fd13 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fca:	2386      	movs	r3, #134	@ 0x86
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fda:	230b      	movs	r3, #11
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4860      	ldr	r0, [pc, #384]	@ (8001168 <MX_GPIO_Init+0x320>)
 8000fe6:	f005 fd03 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000fea:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4854      	ldr	r0, [pc, #336]	@ (8001154 <MX_GPIO_Init+0x30c>)
 8001004:	f005 fcf4 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001008:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101a:	230b      	movs	r3, #11
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	484b      	ldr	r0, [pc, #300]	@ (8001154 <MX_GPIO_Init+0x30c>)
 8001026:	f005 fce3 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 800102a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4845      	ldr	r0, [pc, #276]	@ (8001158 <MX_GPIO_Init+0x310>)
 8001044:	f005 fcd4 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001048:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	483d      	ldr	r0, [pc, #244]	@ (8001158 <MX_GPIO_Init+0x310>)
 8001062:	f005 fcc5 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 8001066:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4837      	ldr	r0, [pc, #220]	@ (800115c <MX_GPIO_Init+0x314>)
 8001080:	f005 fcb6 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001088:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4830      	ldr	r0, [pc, #192]	@ (800115c <MX_GPIO_Init+0x314>)
 800109a:	f005 fca9 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 800109e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	482a      	ldr	r0, [pc, #168]	@ (8001160 <MX_GPIO_Init+0x318>)
 80010b8:	f005 fc9a 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80010ce:	230a      	movs	r3, #10
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4823      	ldr	r0, [pc, #140]	@ (8001168 <MX_GPIO_Init+0x320>)
 80010da:	f005 fc89 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f0:	230b      	movs	r3, #11
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <MX_GPIO_Init+0x314>)
 80010fc:	f005 fc78 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4813      	ldr	r0, [pc, #76]	@ (8001164 <MX_GPIO_Init+0x31c>)
 8001118:	f005 fc6a 	bl	80069f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800111c:	2302      	movs	r3, #2
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	480c      	ldr	r0, [pc, #48]	@ (8001164 <MX_GPIO_Init+0x31c>)
 8001134:	f005 fc5c 	bl	80069f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2008      	movs	r0, #8
 800113e:	f002 fdde 	bl	8003cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001142:	2008      	movs	r0, #8
 8001144:	f002 fdf5 	bl	8003d32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	@ 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58024400 	.word	0x58024400
 8001154:	58020400 	.word	0x58020400
 8001158:	58020c00 	.word	0x58020c00
 800115c:	58021800 	.word	0x58021800
 8001160:	58020800 	.word	0x58020800
 8001164:	58021000 	.word	0x58021000
 8001168:	58020000 	.word	0x58020000

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <Error_Handler+0x8>

08001178 <write_pin>:
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	b29b      	uxth	r3, r3
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	4619      	mov	r1, r3
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f005 fdd6 	bl	8006d40 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 80011a0:	f002 fadc 	bl	800375c <loop_escape>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d120      	bne.n	80011ec <sample_interrupt_routine+0x50>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011b0:	480f      	ldr	r0, [pc, #60]	@ (80011f0 <sample_interrupt_routine+0x54>)
 80011b2:	f7ff ffe1 	bl	8001178 <write_pin>

	// Write aux commands to command_sequence_MOSI, advancing one sample through aux_command_list.
	cycle_aux_commands();
 80011b6:	f000 f821 	bl	80011fc <cycle_aux_commands>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <sample_interrupt_routine+0x58>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <sample_interrupt_routine+0x2c>
		handle_comm_error(ITClip);
 80011c2:	2005      	movs	r0, #5
 80011c4:	f000 f8cc 	bl	8001360 <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011ce:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <sample_interrupt_routine+0x5c>)
 80011d0:	f7ff ffd2 	bl	8001178 <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <sample_interrupt_routine+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 80011da:	f000 f845 	bl	8001268 <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <sample_interrupt_routine+0x5c>)
 80011e6:	f7ff ffc7 	bl	8001178 <write_pin>
 80011ea:	e000      	b.n	80011ee <sample_interrupt_routine+0x52>
	if (loop_escape()) return;
 80011ec:	bf00      	nop
}
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58020800 	.word	0x58020800
 80011f4:	24000004 	.word	0x24000004
 80011f8:	58020c00 	.word	0x58020c00

080011fc <cycle_aux_commands>:


// Every sample period, cycle circularly through aux_command_list, adding this sample's AUX commands to the end of
// command_sequence_MOSI array which will be transmitted via SPI.
void cycle_aux_commands()
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	e012      	b.n	800122e <cycle_aux_commands+0x32>
		command_sequence_MOSI[CONVERT_COMMANDS_PER_SEQUENCE + i] = aux_command_list[i][aux_command_index];
 8001208:	4b14      	ldr	r3, [pc, #80]	@ (800125c <cycle_aux_commands+0x60>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4618      	mov	r0, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3320      	adds	r3, #32
 8001214:	4912      	ldr	r1, [pc, #72]	@ (8001260 <cycle_aux_commands+0x64>)
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	01d2      	lsls	r2, r2, #7
 800121a:	4402      	add	r2, r0
 800121c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001220:	b291      	uxth	r1, r2
 8001222:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <cycle_aux_commands+0x68>)
 8001224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3301      	adds	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	dde9      	ble.n	8001208 <cycle_aux_commands+0xc>
	}
	if (++aux_command_index >= AUX_COMMAND_LIST_LENGTH) {
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <cycle_aux_commands+0x60>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b07      	ldr	r3, [pc, #28]	@ (800125c <cycle_aux_commands+0x60>)
 8001240:	4611      	mov	r1, r2
 8001242:	7019      	strb	r1, [r3, #0]
 8001244:	b253      	sxtb	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	da02      	bge.n	8001250 <cycle_aux_commands+0x54>
		aux_command_index = 0;
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <cycle_aux_commands+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	// Note that if any command(s) are to be used with a command list different from AUX_COMMAND_LIST_LENGTH,
	// the above code should be commented out, and the last AUX_COMMANDS_PER_SEQUENCE of command_sequence_MOSI
	// should be written here. For example, if impedance check DAC control is used, zcheck_DAC_command_list_length
	// should replace AUX_COMMAND_LIST_LENGTH and zcheck_DAC_command_slot_position should be used to correctly index
	// commands from the proper aux_command_list slot.
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	24000858 	.word	0x24000858
 8001260:	24000558 	.word	0x24000558
 8001264:	2400047c 	.word	0x2400047c

08001268 <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*)command_sequence_MISO,
 800126c:	2223      	movs	r2, #35	@ 0x23
 800126e:	490a      	ldr	r1, [pc, #40]	@ (8001298 <transfer_sequence_spi_dma+0x30>)
 8001270:	480a      	ldr	r0, [pc, #40]	@ (800129c <transfer_sequence_spi_dma+0x34>)
 8001272:	f008 fd6b 	bl	8009d4c <HAL_SPI_Receive_DMA>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <transfer_sequence_spi_dma+0x18>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 800127c:	f7ff ff76 	bl	800116c <Error_Handler>
	}


	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*)command_sequence_MOSI,
 8001280:	2223      	movs	r2, #35	@ 0x23
 8001282:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <transfer_sequence_spi_dma+0x38>)
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <transfer_sequence_spi_dma+0x3c>)
 8001286:	f008 fc1f 	bl	8009ac8 <HAL_SPI_Transmit_DMA>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <transfer_sequence_spi_dma+0x2c>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001290:	f7ff ff6c 	bl	800116c <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	240004c4 	.word	0x240004c4
 800129c:	2400008c 	.word	0x2400008c
 80012a0:	2400047c 	.word	0x2400047c
 80012a4:	24000114 	.word	0x24000114

080012a8 <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 80012ae:	f000 f983 	bl	80015b8 <calculate_sample_rate>
 80012b2:	eeb0 7b40 	vmov.f64	d7, d0
 80012b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012ba:	ee17 2a90 	vmov	r2, s15
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <allocate_sample_memory+0x3c>)
 80012c0:	601a      	str	r2, [r3, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * 2 * per_channel_sample_memory_capacity;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <allocate_sample_memory+0x3c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f00c ff94 	bl	800e1fc <malloc>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <allocate_sample_memory+0x40>)
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	24000000 	.word	0x24000000
 80012e8:	24000554 	.word	0x24000554

080012ec <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	free(sample_memory);
 80012f0:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <free_sample_memory+0x14>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f00c ff89 	bl	800e20c <free>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	24000554 	.word	0x24000554

08001304 <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 8001308:	bf00      	nop
	LL_DMA_SetDataLength(DMA, DMA_RX_CHANNEL, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);

	// Assign RX DMA stream to correct DMAMUX request
	LL_DMA_SetPeriphRequest(DMA, DMA_RX_CHANNEL, LL_DMAMUX1_REQ_SPI1_RX);
#endif
}
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implementation.
void end_spi_with_dma()
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <initialize_ddr_sclk_timers>:


// Start timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void initialize_ddr_sclk_timers()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Start(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 8001324:	2100      	movs	r1, #0
 8001326:	4804      	ldr	r0, [pc, #16]	@ (8001338 <initialize_ddr_sclk_timers+0x18>)
 8001328:	f009 fb16 	bl	800a958 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&CS_DELAY_TIM, TIM_CHANNEL_3);
 800132c:	2108      	movs	r1, #8
 800132e:	4803      	ldr	r0, [pc, #12]	@ (800133c <initialize_ddr_sclk_timers+0x1c>)
 8001330:	f009 fb12 	bl	800a958 <HAL_TIM_OC_Start>
  LL_TIM_EnableCounter(RECEIVE_SCLK_TIM);

  LL_TIM_CC_EnableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
  LL_TIM_EnableCounter(CS_DELAY_TIM);
#endif
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2400028c 	.word	0x2400028c
 800133c:	240002d8 	.word	0x240002d8

08001340 <end_ddr_sclk_timers>:

// End timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void end_ddr_sclk_timers()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Stop(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 8001344:	2100      	movs	r1, #0
 8001346:	4804      	ldr	r0, [pc, #16]	@ (8001358 <end_ddr_sclk_timers+0x18>)
 8001348:	f009 fc22 	bl	800ab90 <HAL_TIM_OC_Stop>
  HAL_TIM_OC_Stop(&CS_DELAY_TIM, TIM_CHANNEL_3);
 800134c:	2108      	movs	r1, #8
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <end_ddr_sclk_timers+0x1c>)
 8001350:	f009 fc1e 	bl	800ab90 <HAL_TIM_OC_Stop>
  LL_TIM_CC_DisableChannel(RECEIVE_SCLK_TIM, LL_TIM_CHANNEL_CH1);

  LL_TIM_DisableCounter(CS_DELAY_TIM);
  LL_TIM_CC_DisableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
#endif
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2400028c 	.word	0x2400028c
 800135c:	240002d8 	.word	0x240002d8

08001360 <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d03f      	beq.n	80013f0 <handle_comm_error+0x90>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001376:	4820      	ldr	r0, [pc, #128]	@ (80013f8 <handle_comm_error+0x98>)
 8001378:	f7ff fefe 	bl	8001178 <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	105b      	asrs	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	109b      	asrs	r3, r3, #2
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	10db      	asrs	r3, r3, #3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <handle_comm_error+0x58>
 80013ae:	2201      	movs	r2, #1
 80013b0:	2140      	movs	r1, #64	@ 0x40
 80013b2:	4812      	ldr	r0, [pc, #72]	@ (80013fc <handle_comm_error+0x9c>)
 80013b4:	f7ff fee0 	bl	8001178 <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <handle_comm_error+0x68>
 80013be:	2201      	movs	r2, #1
 80013c0:	2120      	movs	r1, #32
 80013c2:	480e      	ldr	r0, [pc, #56]	@ (80013fc <handle_comm_error+0x9c>)
 80013c4:	f7ff fed8 	bl	8001178 <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <handle_comm_error+0x7a>
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013d4:	4809      	ldr	r0, [pc, #36]	@ (80013fc <handle_comm_error+0x9c>)
 80013d6:	f7ff fecf 	bl	8001178 <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 80013da:	7b3b      	ldrb	r3, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <handle_comm_error+0x8c>
 80013e0:	2201      	movs	r2, #1
 80013e2:	2101      	movs	r1, #1
 80013e4:	4806      	ldr	r0, [pc, #24]	@ (8001400 <handle_comm_error+0xa0>)
 80013e6:	f7ff fec7 	bl	8001178 <write_pin>

	// Enter infinite loop.
	while(1);
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <handle_comm_error+0x8c>
	if (error_code == 0) return;
 80013f0:	bf00      	nop
}
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58020400 	.word	0x58020400
 80013fc:	58021800 	.word	0x58021800
 8001400:	58021000 	.word	0x58021000

08001404 <spi_rx_cplt_callback>:


// Callback function that executes when Reception of SPI has completed.
void spi_rx_cplt_callback()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 8001408:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <spi_rx_cplt_callback+0x34>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <spi_rx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <spi_rx_cplt_callback+0x38>)
 800141a:	f7ff fead 	bl	8001178 <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 800141e:	f002 f9b3 	bl	8003788 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 8001422:	f002 f9ed 	bl	8003800 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <spi_rx_cplt_callback+0x3c>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 800142c:	e002      	b.n	8001434 <spi_rx_cplt_callback+0x30>
		reception_in_progress = 0;
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <spi_rx_cplt_callback+0x40>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2400085a 	.word	0x2400085a
 800143c:	58020800 	.word	0x58020800
 8001440:	24000004 	.word	0x24000004
 8001444:	24000859 	.word	0x24000859

08001448 <morton_deinterleave>:

// Use 'magic bits' de interleave method inspired by Jeroen Baert's blog post:
// "Morton encoding/decoding through bit interleaving: Implementations" to achieve
// high performance method of separate every other bit from a 32-bit input.
uint16_t morton_deinterleave(uint32_t x)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    x = x & 0x55555555; // Use mask to clear all even bits
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8001456:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 1)) & 0x33333333; // Shift-right by 1, duplicate, and mask data so that valid data is grouped into 2s (00xx00xx00xx...)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	085a      	lsrs	r2, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4313      	orrs	r3, r2
 8001460:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001464:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 2)) & 0x0F0F0F0F; // Shift-right by 2, duplicate, and mask data so that valid data is grouped into 4s (0000xxxx0000xxxx...)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	089a      	lsrs	r2, r3, #2
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001472:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 4)) & 0x00FF00FF; // Shift-right by 4, duplicate, and mask data so that valid data is grouped into 8s (00000000xxxxxxxx00000000xxxxxxxx...)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	091a      	lsrs	r2, r3, #4
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8001480:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 8)) & 0x0000FFFF; // Shift-right by 8, duplicate, and mask data so that 16 MSB data is 0s, 16 LSB data is valid data
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0a1a      	lsrs	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4313      	orrs	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	607b      	str	r3, [r7, #4]
    return (uint16_t) x; // Cast 32-bit 0000_0000_0000_0000_xxxx_xxxx_xxxx_xxxx data into 16-bit xxxx_xxxx_xxxx_xxxx data
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	b29b      	uxth	r3, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <extract_ddr_words>:


// Separate a 32-bit merged word (interleaved stream A and stream B data) into 2 distinct 16-bit words.
void extract_ddr_words(uint32_t merged_word, volatile uint16_t *word_A, volatile uint16_t *word_B)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
//		*word_B |= bit_B << i;
//	}

	// A much faster, but less obvious method uses 'magic bit' masks to copy, shift, and mask bits in several steps
	// to achieve the same result in fewer operations.
	*word_A = morton_deinterleave(merged_word); // Data stream A is all add
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f7ff ffcc 	bl	8001448 <morton_deinterleave>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	801a      	strh	r2, [r3, #0]
	*word_B = morton_deinterleave(merged_word >> 1);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	085b      	lsrs	r3, r3, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffc3 	bl	8001448 <morton_deinterleave>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	801a      	strh	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <spi_error_callback+0x14>)
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	24000004 	.word	0x24000004

080014ec <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b090      	sub	sp, #64	@ 0x40
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 80014f4:	f000 f860 	bl	80015b8 <calculate_sample_rate>
 80014f8:	eeb0 7b40 	vmov.f64	d7, d0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f001 f8e4 	bl	80026d0 <set_default_rhd_settings>

	uint16_t registers[22];
	for (int i = 0; i < 22; i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800150c:	e00e      	b.n	800152c <write_initial_reg_values+0x40>
		registers[i] = get_register_value(p, i);
 800150e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 fa25 	bl	8002960 <get_register_value>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	3340      	adds	r3, #64	@ 0x40
 8001520:	443b      	add	r3, r7
 8001522:	f823 2c38 	strh.w	r2, [r3, #-56]
	for (int i = 0; i < 22; i++) {
 8001526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001528:	3301      	adds	r3, #1
 800152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800152c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800152e:	2b15      	cmp	r3, #21
 8001530:	dded      	ble.n	800150e <write_initial_reg_values+0x22>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 8001532:	203f      	movs	r0, #63	@ 0x3f
 8001534:	f001 fc83 	bl	8002e3e <read_command>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fa4d 	bl	80019da <send_spi_command>
	send_spi_command(read_command(63));
 8001540:	203f      	movs	r0, #63	@ 0x3f
 8001542:	f001 fc7c 	bl	8002e3e <read_command>
 8001546:	4603      	mov	r3, r0
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fa46 	bl	80019da <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 22; i++) {
 800154e:	2300      	movs	r3, #0
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001552:	e013      	b.n	800157c <write_initial_reg_values+0x90>
		send_spi_command(write_command(i, registers[i]));
 8001554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001556:	b2da      	uxtb	r2, r3
 8001558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	3340      	adds	r3, #64	@ 0x40
 800155e:	443b      	add	r3, r7
 8001560:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	4610      	mov	r0, r2
 800156a:	f001 fc4b 	bl	8002e04 <write_command>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fa32 	bl	80019da <send_spi_command>
	for (int i = 0; i < 22; i++) {
 8001576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001578:	3301      	adds	r3, #1
 800157a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800157c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800157e:	2b15      	cmp	r3, #21
 8001580:	dde8      	ble.n	8001554 <write_initial_reg_values+0x68>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 8001582:	f001 fc36 	bl	8002df2 <calibrate_command>
 8001586:	4603      	mov	r3, r0
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fa26 	bl	80019da <send_spi_command>
	for (int i = 0; i < 9; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
 8001592:	e009      	b.n	80015a8 <write_initial_reg_values+0xbc>
		send_spi_command(read_command(40));
 8001594:	2028      	movs	r0, #40	@ 0x28
 8001596:	f001 fc52 	bl	8002e3e <read_command>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa1c 	bl	80019da <send_spi_command>
	for (int i = 0; i < 9; i++) {
 80015a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a4:	3301      	adds	r3, #1
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	ddf2      	ble.n	8001594 <write_initial_reg_values+0xa8>
	}
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	3740      	adds	r7, #64	@ 0x40
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq() * 2; // Timer clock inputs on the H7 are multiplied x2 from peripheral clock frequency, which this function reports.
 80015be:	f006 fb71 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 80015c2:	4603      	mov	r3, r0
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <calculate_sample_rate+0xa0>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <calculate_sample_rate+0xa0>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 80015d4:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <calculate_sample_rate+0xa0>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <calculate_sample_rate+0xa4>)
 80015e0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <calculate_sample_rate+0x40>
		ckd_factor = 2;
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80015f6:	e007      	b.n	8001608 <calculate_sample_rate+0x50>
	} else if (ckd_value == 0b10) {
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d104      	bne.n	8001608 <calculate_sample_rate+0x50>
		ckd_factor = 4;
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <calculate_sample_rate+0xa8>)
 8001604:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001614:	ed87 7b02 	vstr	d7, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8001622:	ed97 6b08 	vldr	d6, [r7, #32]
 8001626:	ed97 7b02 	vldr	d7, [r7, #8]
 800162a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800162e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001632:	ed87 7b00 	vstr	d7, [r7]
	return input_frequency / counter_period;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001640:	ed97 6b00 	vldr	d6, [r7]
 8001644:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001648:	eeb0 7b45 	vmov.f64	d7, d5
}
 800164c:	eeb0 0b47 	vmov.f64	d0, d7
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	24000324 	.word	0x24000324
 800165c:	3ff00000 	.word	0x3ff00000
 8001660:	40100000 	.word	0x40100000

08001664 <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d115      	bne.n	800169e <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	e00e      	b.n	8001696 <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f001 fb9a 	bl	8002db8 <convert_command>
 8001684:	4603      	mov	r3, r0
 8001686:	4619      	mov	r1, r3
 8001688:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <create_convert_sequence+0x70>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b1f      	cmp	r3, #31
 800169a:	dded      	ble.n	8001678 <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 800169c:	e016      	b.n	80016cc <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	e010      	b.n	80016c6 <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fb82 	bl	8002db8 <convert_command>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4a06      	ldr	r2, [pc, #24]	@ (80016d4 <create_convert_sequence+0x70>)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b1f      	cmp	r3, #31
 80016ca:	ddeb      	ble.n	80016a4 <create_convert_sequence+0x40>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2400047c 	.word	0x2400047c

080016d8 <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	61fa      	str	r2, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	18d4      	adds	r4, r2, r3
 80016f8:	203f      	movs	r0, #63	@ 0x3f
 80016fa:	f001 fba0 	bl	8002e3e <read_command>
 80016fe:	4603      	mov	r3, r0
 8001700:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	61fa      	str	r2, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	18d4      	adds	r4, r2, r3
 800170e:	203f      	movs	r0, #63	@ 0x3f
 8001710:	f001 fb95 	bl	8002e3e <read_command>
 8001714:	4603      	mov	r3, r0
 8001716:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 22; ++reg) {
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	e01d      	b.n	800175a <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d016      	beq.n	8001752 <create_command_list_RHD_register_config+0x7a>
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d013      	beq.n	8001752 <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	b2dd      	uxtb	r5, r3
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f001 f915 	bl	8002960 <get_register_value>
 8001736:	4603      	mov	r3, r0
 8001738:	b2d9      	uxtb	r1, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	61fa      	str	r2, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	18d4      	adds	r4, r2, r3
 8001746:	4628      	mov	r0, r5
 8001748:	f001 fb5c 	bl	8002e04 <write_command>
 800174c:	4603      	mov	r3, r0
 800174e:	8023      	strh	r3, [r4, #0]
 8001750:	e000      	b.n	8001754 <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 8001752:	bf00      	nop
	for (int reg = 0; reg < 22; ++reg) {
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	3301      	adds	r3, #1
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b15      	cmp	r3, #21
 800175e:	ddde      	ble.n	800171e <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	61fa      	str	r2, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	18d4      	adds	r4, r2, r3
 800176c:	203f      	movs	r0, #63	@ 0x3f
 800176e:	f001 fb66 	bl	8002e3e <read_command>
 8001772:	4603      	mov	r3, r0
 8001774:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	61fa      	str	r2, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	18d4      	adds	r4, r2, r3
 8001782:	203e      	movs	r0, #62	@ 0x3e
 8001784:	f001 fb5b 	bl	8002e3e <read_command>
 8001788:	4603      	mov	r3, r0
 800178a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	61fa      	str	r2, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	18d4      	adds	r4, r2, r3
 8001798:	203d      	movs	r0, #61	@ 0x3d
 800179a:	f001 fb50 	bl	8002e3e <read_command>
 800179e:	4603      	mov	r3, r0
 80017a0:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	61fa      	str	r2, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	18d4      	adds	r4, r2, r3
 80017ae:	203c      	movs	r0, #60	@ 0x3c
 80017b0:	f001 fb45 	bl	8002e3e <read_command>
 80017b4:	4603      	mov	r3, r0
 80017b6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	61fa      	str	r2, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	18d4      	adds	r4, r2, r3
 80017c4:	203b      	movs	r0, #59	@ 0x3b
 80017c6:	f001 fb3a 	bl	8002e3e <read_command>
 80017ca:	4603      	mov	r3, r0
 80017cc:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	61fa      	str	r2, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	18d4      	adds	r4, r2, r3
 80017da:	2030      	movs	r0, #48	@ 0x30
 80017dc:	f001 fb2f 	bl	8002e3e <read_command>
 80017e0:	4603      	mov	r3, r0
 80017e2:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	61fa      	str	r2, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	18d4      	adds	r4, r2, r3
 80017f0:	2031      	movs	r0, #49	@ 0x31
 80017f2:	f001 fb24 	bl	8002e3e <read_command>
 80017f6:	4603      	mov	r3, r0
 80017f8:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	61fa      	str	r2, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	18d4      	adds	r4, r2, r3
 8001806:	2032      	movs	r0, #50	@ 0x32
 8001808:	f001 fb19 	bl	8002e3e <read_command>
 800180c:	4603      	mov	r3, r0
 800180e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	61fa      	str	r2, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	18d4      	adds	r4, r2, r3
 800181c:	2033      	movs	r0, #51	@ 0x33
 800181e:	f001 fb0e 	bl	8002e3e <read_command>
 8001822:	4603      	mov	r3, r0
 8001824:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	61fa      	str	r2, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	18d4      	adds	r4, r2, r3
 8001832:	2034      	movs	r0, #52	@ 0x34
 8001834:	f001 fb03 	bl	8002e3e <read_command>
 8001838:	4603      	mov	r3, r0
 800183a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	61fa      	str	r2, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	18d4      	adds	r4, r2, r3
 8001848:	2035      	movs	r0, #53	@ 0x35
 800184a:	f001 faf8 	bl	8002e3e <read_command>
 800184e:	4603      	mov	r3, r0
 8001850:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	61fa      	str	r2, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	18d4      	adds	r4, r2, r3
 800185e:	2036      	movs	r0, #54	@ 0x36
 8001860:	f001 faed 	bl	8002e3e <read_command>
 8001864:	4603      	mov	r3, r0
 8001866:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	61fa      	str	r2, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	18d4      	adds	r4, r2, r3
 8001874:	2037      	movs	r0, #55	@ 0x37
 8001876:	f001 fae2 	bl	8002e3e <read_command>
 800187a:	4603      	mov	r3, r0
 800187c:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	61fa      	str	r2, [r7, #28]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	18d4      	adds	r4, r2, r3
 800188a:	2028      	movs	r0, #40	@ 0x28
 800188c:	f001 fad7 	bl	8002e3e <read_command>
 8001890:	4603      	mov	r3, r0
 8001892:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	61fa      	str	r2, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	18d4      	adds	r4, r2, r3
 80018a0:	2029      	movs	r0, #41	@ 0x29
 80018a2:	f001 facc 	bl	8002e3e <read_command>
 80018a6:	4603      	mov	r3, r0
 80018a8:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	61fa      	str	r2, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	18d4      	adds	r4, r2, r3
 80018b6:	202a      	movs	r0, #42	@ 0x2a
 80018b8:	f001 fac1 	bl	8002e3e <read_command>
 80018bc:	4603      	mov	r3, r0
 80018be:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	61fa      	str	r2, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	18d4      	adds	r4, r2, r3
 80018cc:	202b      	movs	r0, #43	@ 0x2b
 80018ce:	f001 fab6 	bl	8002e3e <read_command>
 80018d2:	4603      	mov	r3, r0
 80018d4:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	61fa      	str	r2, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	18d4      	adds	r4, r2, r3
 80018e2:	202c      	movs	r0, #44	@ 0x2c
 80018e4:	f001 faab 	bl	8002e3e <read_command>
 80018e8:	4603      	mov	r3, r0
 80018ea:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 22; ++reg) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00f      	b.n	8001912 <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	b2d9      	uxtb	r1, r3
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	61fa      	str	r2, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	18d4      	adds	r4, r2, r3
 8001902:	4608      	mov	r0, r1
 8001904:	f001 fa9b 	bl	8002e3e <read_command>
 8001908:	4603      	mov	r3, r0
 800190a:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 22; ++reg) {
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b15      	cmp	r3, #21
 8001916:	ddec      	ble.n	80018f2 <create_command_list_RHD_register_config+0x21a>
		// Note that registers 18-21 are only 'visible' on MISO B, so if register values are being used, be sure to use MISO B read values.
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	61fa      	str	r2, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	18d4      	adds	r4, r2, r3
 800192a:	f001 fa62 	bl	8002df2 <calibrate_command>
 800192e:	4603      	mov	r3, r0
 8001930:	8023      	strh	r3, [r4, #0]
 8001932:	e00a      	b.n	800194a <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	61fa      	str	r2, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	18d4      	adds	r4, r2, r3
 8001940:	203f      	movs	r0, #63	@ 0x3f
 8001942:	f001 fa7c 	bl	8002e3e <read_command>
 8001946:	4603      	mov	r3, r0
 8001948:	8023      	strh	r3, [r4, #0]
	}

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	61fa      	str	r2, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	18d4      	adds	r4, r2, r3
 8001956:	203f      	movs	r0, #63	@ 0x3f
 8001958:	f001 fa71 	bl	8002e3e <read_command>
 800195c:	4603      	mov	r3, r0
 800195e:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 64); ++i) {
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e00d      	b.n	8001982 <create_command_list_RHD_register_config+0x2aa>
		command_list[command_index++] = read_command(63);
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	61fa      	str	r2, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	18d4      	adds	r4, r2, r3
 8001972:	203f      	movs	r0, #63	@ 0x3f
 8001974:	f001 fa63 	bl	8002e3e <read_command>
 8001978:	4603      	mov	r3, r0
 800197a:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 64); ++i) {
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	3301      	adds	r3, #1
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3b40      	subs	r3, #64	@ 0x40
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbec      	blt.n	8001966 <create_command_list_RHD_register_config+0x28e>
	}
	return command_index;
 800198c:	69fb      	ldr	r3, [r7, #28]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001996:	b480      	push	{r7}
 8001998:	b087      	sub	sp, #28
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	e00a      	b.n	80019c4 <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	617a      	str	r2, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4413      	add	r3, r2
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	3301      	adds	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <create_command_list_dummy+0x18>
	}

	return command_index;
 80019cc:	697b      	ldr	r3, [r7, #20]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data_A = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	81fb      	strh	r3, [r7, #14]
	uint16_t dummy_data_B = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	81bb      	strh	r3, [r7, #12]
	send_receive_spi_command(tx_data, &dummy_data_A, &dummy_data_B);
 80019ec:	f107 020c 	add.w	r2, r7, #12
 80019f0:	f107 010e 	add.w	r1, r7, #14
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 f804 	bl	8001a04 <send_receive_spi_command>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained results correspond to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data_A, uint16_t *rx_data_B)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	81fb      	strh	r3, [r7, #14]
	uint32_t rx_data = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
	reception_in_progress = 1;
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <send_receive_spi_command+0x68>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]

#ifdef USE_HAL
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*) &rx_data, 1) != HAL_OK)
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2201      	movs	r2, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	4812      	ldr	r0, [pc, #72]	@ (8001a70 <send_receive_spi_command+0x6c>)
 8001a26:	f008 f991 	bl	8009d4c <HAL_SPI_Receive_DMA>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <send_receive_spi_command+0x30>
	{
		Error_Handler();
 8001a30:	f7ff fb9c 	bl	800116c <Error_Handler>
	}

	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*) &tx_data, 1) != HAL_OK)
 8001a34:	f107 030e 	add.w	r3, r7, #14
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <send_receive_spi_command+0x70>)
 8001a3e:	f008 f843 	bl	8009ac8 <HAL_SPI_Transmit_DMA>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <send_receive_spi_command+0x48>
	{
		Error_Handler();
 8001a48:	f7ff fb90 	bl	800116c <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &rx_data, 1);
	begin_spi_tx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001a4c:	bf00      	nop
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <send_receive_spi_command+0x68>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d0fa      	beq.n	8001a4e <send_receive_spi_command+0x4a>
	extract_ddr_words(rx_data, rx_data_A, rx_data_B);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fd1d 	bl	800149e <extract_ddr_words>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	24000859 	.word	0x24000859
 8001a70:	2400008c 	.word	0x2400008c
 8001a74:	24000114 	.word	0x24000114

08001a78 <HAL_SPI_RxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when Rx has completed.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	if (hspi == &RECEIVE_SPI) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_SPI_RxCpltCallback+0x1c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_SPI_RxCpltCallback+0x14>
		spi_rx_cplt_callback();
 8001a88:	f7ff fcbc 	bl	8001404 <spi_rx_cplt_callback>
	}
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2400008c 	.word	0x2400008c

08001a98 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001aa0:	f7ff fd18 	bl	80014d4 <spi_error_callback>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <HAL_UART_TxCpltCallback+0x1c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	24000008 	.word	0x24000008

08001acc <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	0000      	movs	r0, r0
	...

08001af0 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	ed2d 8b02 	vpush	{d8}
 8001af6:	b0b0      	sub	sp, #192	@ 0xc0
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001b00:	f107 0310 	add.w	r3, r7, #16
 8001b04:	2280      	movs	r2, #128	@ 0x80
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00c fc35 	bl	800e378 <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001b14:	e033      	b.n	8001b7e <set_DSP_cutoff_freq+0x8e>
		double x = pow(2.0, (double) n);
 8001b16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b22:	eeb0 1b47 	vmov.f64	d1, d7
 8001b26:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001b2a:	f00c fe11 	bl	800e750 <pow>
 8001b2e:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	ed93 8b00 	vldr	d8, [r3]
 8001b38:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8001b3c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001b40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b44:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001b48:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001b4c:	eeb0 0b45 	vmov.f64	d0, d5
 8001b50:	f00c fca2 	bl	800e498 <log>
 8001b54:	eeb0 7b40 	vmov.f64	d7, d0
 8001b58:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001b5c:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 8001c68 <set_DSP_cutoff_freq+0x178>
 8001b60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	33c0      	adds	r3, #192	@ 0xc0
 8001b6c:	443b      	add	r3, r7
 8001b6e:	3bb0      	subs	r3, #176	@ 0xb0
 8001b70:	ed83 7b00 	vstr	d7, [r3]
	for (int n = 1; n < 16; ++n) {
 8001b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	ddc7      	ble.n	8001b16 <set_DSP_cutoff_freq+0x26>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8001b86:	ed97 0b00 	vldr	d0, [r7]
 8001b8a:	f00c fd79 	bl	800e680 <log10>
 8001b8e:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 8001b92:	ed97 7b06 	vldr	d7, [r7, #24]
 8001b96:	ed97 6b00 	vldr	d6, [r7]
 8001b9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	dd03      	ble.n	8001bac <set_DSP_cutoff_freq+0xbc>
		p->DSP_cutoff_freq = 1;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001baa:	e049      	b.n	8001c40 <set_DSP_cutoff_freq+0x150>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 8001bac:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8001bb0:	ed97 6b00 	vldr	d6, [r7]
 8001bb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	d503      	bpl.n	8001bc6 <set_DSP_cutoff_freq+0xd6>
		p->DSP_cutoff_freq = 15;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001bc4:	e03c      	b.n	8001c40 <set_DSP_cutoff_freq+0x150>
	} else {
		double min_log_diff = 10000000.0;
 8001bc6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001c70 <set_DSP_cutoff_freq+0x180>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001bd6:	e02f      	b.n	8001c38 <set_DSP_cutoff_freq+0x148>
			double log_f_cutoff = log10(f_cutoff[n]);
 8001bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	33c0      	adds	r3, #192	@ 0xc0
 8001be0:	443b      	add	r3, r7
 8001be2:	3bb0      	subs	r3, #176	@ 0xb0
 8001be4:	ed93 7b00 	vldr	d7, [r3]
 8001be8:	eeb0 0b47 	vmov.f64	d0, d7
 8001bec:	f00c fd48 	bl	800e680 <log10>
 8001bf0:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 8001bf4:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001bf8:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001bfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c00:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c04:	ed97 6b2c 	vldr	d6, [r7, #176]	@ 0xb0
 8001c08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	dd0d      	ble.n	8001c2e <set_DSP_cutoff_freq+0x13e>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 8001c12:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001c16:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001c1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c1e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c22:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0
				p->DSP_cutoff_freq = n;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001c2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8001c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c32:	3301      	adds	r3, #1
 8001c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	ddcb      	ble.n	8001bd8 <set_DSP_cutoff_freq+0xe8>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	33c0      	adds	r3, #192	@ 0xc0
 8001c48:	443b      	add	r3, r7
 8001c4a:	3bb0      	subs	r3, #176	@ 0xb0
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c54:	eeb0 0b47 	vmov.f64	d0, d7
 8001c58:	37c0      	adds	r7, #192	@ 0xc0
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	ecbd 8b02 	vpop	{d8}
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	54442d18 	.word	0x54442d18
 8001c6c:	401921fb 	.word	0x401921fb
 8001c70:	00000000 	.word	0x00000000
 8001c74:	416312d0 	.word	0x416312d0

08001c78 <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d00e      	beq.n	8001ca8 <set_zcheck_scale+0x30>
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	dc10      	bgt.n	8001cb0 <set_zcheck_scale+0x38>
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <set_zcheck_scale+0x20>
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d004      	beq.n	8001ca0 <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 8001c96:	e00b      	b.n	8001cb0 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001c9e:	e007      	b.n	8001cb0 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001ca6:	e003      	b.n	8001cb0 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001cae:	bf00      	nop
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	bf0c      	ite	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	2300      	movne	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db05      	blt.n	8001d02 <set_zcheck_channel+0x1c>
 8001cf6:	f000 fce3 	bl	80026c0 <max_num_channels_per_chip>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	db02      	blt.n	8001d08 <set_zcheck_channel+0x22>
		return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d06:	e004      	b.n	8001d12 <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e008      	b.n	8001d3a <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	3228      	adds	r2, #40	@ 0x28
 8001d2e:	2101      	movs	r1, #1
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	f000 fcc1 	bl	80026c0 <max_num_channels_per_chip>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4293      	cmp	r3, r2
 8001d44:	dbf0      	blt.n	8001d28 <power_up_all_amps+0xe>
	}
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0a6      	sub	sp, #152	@ 0x98
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 8001d5c:	a3a1      	add	r3, pc, #644	@ (adr r3, 8001fe4 <set_upper_bandwidth+0x294>)
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b9b      	ldr	r3, [pc, #620]	@ (8001fd8 <set_upper_bandwidth+0x288>)
 8001d6c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8001d70:	a393      	add	r3, pc, #588	@ (adr r3, 8001fc0 <set_upper_bandwidth+0x270>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 8001d7a:	233f      	movs	r3, #63	@ 0x3f
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 8001d7e:	231f      	movs	r3, #31
 8001d80:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 8001d82:	a391      	add	r3, pc, #580	@ (adr r3, 8001fc8 <set_upper_bandwidth+0x278>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b92      	ldr	r3, [pc, #584]	@ (8001fdc <set_upper_bandwidth+0x28c>)
 8001d92:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b91      	ldr	r3, [pc, #580]	@ (8001fe0 <set_upper_bandwidth+0x290>)
 8001d9c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 8001da0:	233f      	movs	r3, #63	@ 0x3f
 8001da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 8001da4:	231f      	movs	r3, #31
 8001da6:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 8001da8:	ed97 7b00 	vldr	d7, [r7]
 8001dac:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8001fd0 <set_upper_bandwidth+0x280>
 8001db0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	dd04      	ble.n	8001dc4 <set_upper_bandwidth+0x74>
		upper_bandwidth = 30000.0;
 8001dba:	a385      	add	r3, pc, #532	@ (adr r3, 8001fd0 <set_upper_bandwidth+0x280>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 8001dc4:	ed97 0b00 	vldr	d0, [r7]
 8001dc8:	f000 f9ee 	bl	80021a8 <rH1_from_upper_bandwidth>
 8001dcc:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 8001de0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001de4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001dee:	e028      	b.n	8001e42 <set_upper_bandwidth+0xf2>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 8001df0:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8001df4:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001df8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dfc:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8001e00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e04:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8001e08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e0c:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001e10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d50e      	bpl.n	8001e38 <set_upper_bandwidth+0xe8>
			rH1_actual += RH1Dac2Unit;
 8001e1a:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001e1e:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e26:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001e42:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001e46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbd1      	blt.n	8001df0 <set_upper_bandwidth+0xa0>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e52:	e024      	b.n	8001e9e <set_upper_bandwidth+0x14e>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 8001e54:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8001e58:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e60:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8001e64:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e68:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001e6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d50e      	bpl.n	8001e94 <set_upper_bandwidth+0x144>
			rH1_actual += RH1Dac1Unit;
 8001e76:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001e7a:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8001e7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e82:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8001e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbd5      	blt.n	8001e54 <set_upper_bandwidth+0x104>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 8001ea8:	ed97 0b00 	vldr	d0, [r7]
 8001eac:	f000 f9c0 	bl	8002230 <rH2_from_upper_bandwidth>
 8001eb0:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 8001ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ec8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ed0:	e026      	b.n	8001f20 <set_upper_bandwidth+0x1d0>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 8001ed2:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8001ed6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001eda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ede:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8001ee2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ee6:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001eea:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001eee:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001ef2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efa:	d50e      	bpl.n	8001f1a <set_upper_bandwidth+0x1ca>
			rH2_actual += RH2Dac2Unit;
 8001efc:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001f00:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001f04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f08:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8001f1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f24:	429a      	cmp	r2, r3
 8001f26:	dbd4      	blt.n	8001ed2 <set_upper_bandwidth+0x182>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f2c:	e022      	b.n	8001f74 <set_upper_bandwidth+0x224>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 8001f2e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8001f32:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001f36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3a:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001f3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f42:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001f46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d50e      	bpl.n	8001f6e <set_upper_bandwidth+0x21e>
			rH2_actual += RH2Dac1Unit;
 8001f50:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8001f54:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001f58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f5c:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8001f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f70:	3301      	adds	r3, #1
 8001f72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f74:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbd8      	blt.n	8001f2e <set_upper_bandwidth+0x1de>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 8001f7c:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8001f80:	f000 fa2a 	bl	80023d8 <upper_bandwidth_from_rH1>
 8001f84:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 8001f88:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8001f8c:	f000 fa88 	bl	80024a0 <upper_bandwidth_from_rH2>
 8001f90:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 8001f94:	ed97 6b08 	vldr	d6, [r7, #32]
 8001f98:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001fa0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fa4:	f00c fe24 	bl	800ebf0 <sqrt>
 8001fa8:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 8001fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fb0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8001fb8:	3798      	adds	r7, #152	@ 0x98
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40dcb600 	.word	0x40dcb600
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40c0fe00 	.word	0x40c0fe00
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40dd4c00 	.word	0x40dd4c00
 8001fd8:	4082c000 	.word	0x4082c000
 8001fdc:	4087d800 	.word	0x4087d800
 8001fe0:	40e2c000 	.word	0x40e2c000
 8001fe4:	00000000 	.word	0x00000000
 8001fe8:	40a13000 	.word	0x40a13000
 8001fec:	00000000 	.word	0x00000000

08001ff0 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b096      	sub	sp, #88	@ 0x58
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 8001ffc:	a362      	add	r3, pc, #392	@ (adr r3, 8002188 <set_lower_bandwidth+0x198>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 8002006:	a362      	add	r3, pc, #392	@ (adr r3, 8002190 <set_lower_bandwidth+0x1a0>)
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 8002010:	a361      	add	r3, pc, #388	@ (adr r3, 8002198 <set_lower_bandwidth+0x1a8>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 800201a:	a361      	add	r3, pc, #388	@ (adr r3, 80021a0 <set_lower_bandwidth+0x1b0>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 8002024:	237f      	movs	r3, #127	@ 0x7f
 8002026:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 8002028:	233f      	movs	r3, #63	@ 0x3f
 800202a:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 800202c:	ed97 7b00 	vldr	d7, [r7]
 8002030:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8002178 <set_lower_bandwidth+0x188>
 8002034:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	dd04      	ble.n	8002048 <set_lower_bandwidth+0x58>
    	lower_bandwidth = 1500.0;
 800203e:	a34e      	add	r3, pc, #312	@ (adr r3, 8002178 <set_lower_bandwidth+0x188>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 8002048:	ed97 0b00 	vldr	d0, [r7]
 800204c:	f000 f934 	bl	80022b8 <rL_from_lower_bandwidth>
 8002050:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 800206c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002070:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 8002074:	ed97 7b00 	vldr	d7, [r7]
 8002078:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002180 <set_lower_bandwidth+0x190>
 800207c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	d50e      	bpl.n	80020a4 <set_lower_bandwidth+0xb4>
    	rL_actual += RLDac3Unit;
 8002086:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800208a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800208e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002092:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a8:	e026      	b.n	80020f8 <set_lower_bandwidth+0x108>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 80020aa:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80020ae:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80020b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020b6:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80020ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020be:	ed97 6b06 	vldr	d6, [r7, #24]
 80020c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020c6:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80020ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d50e      	bpl.n	80020f2 <set_lower_bandwidth+0x102>
    		rL_actual += RLDac2Unit;
 80020d4:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80020d8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80020dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020e0:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 80020f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f4:	3301      	adds	r3, #1
 80020f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbd4      	blt.n	80020aa <set_lower_bandwidth+0xba>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 8002100:	2300      	movs	r3, #0
 8002102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002104:	e022      	b.n	800214c <set_lower_bandwidth+0x15c>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 8002106:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800210a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800210e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002112:	ed97 6b06 	vldr	d6, [r7, #24]
 8002116:	ee36 7b47 	vsub.f64	d7, d6, d7
 800211a:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800211e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	d50e      	bpl.n	8002146 <set_lower_bandwidth+0x156>
    		rL_actual += RLDac1Unit;
 8002128:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800212c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002130:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002134:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 8002146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002148:	3301      	adds	r3, #1
 800214a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800214c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	429a      	cmp	r2, r3
 8002152:	dbd8      	blt.n	8002106 <set_lower_bandwidth+0x116>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 8002154:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002158:	f000 fa06 	bl	8002568 <lower_bandwidth_from_rL>
 800215c:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 8002160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002164:	ec43 2b17 	vmov	d7, r2, r3
}
 8002168:	eeb0 0b47 	vmov.f64	d0, d7
 800216c:	3758      	adds	r7, #88	@ 0x58
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	00000000 	.word	0x00000000
 800217c:	40977000 	.word	0x40977000
 8002180:	33333333 	.word	0x33333333
 8002184:	3fc33333 	.word	0x3fc33333
 8002188:	00000000 	.word	0x00000000
 800218c:	40ab5800 	.word	0x40ab5800
 8002190:	00000000 	.word	0x00000000
 8002194:	4065e000 	.word	0x4065e000
 8002198:	00000000 	.word	0x00000000
 800219c:	40c8ce00 	.word	0x40c8ce00
 80021a0:	00000000 	.word	0x00000000
 80021a4:	4146e360 	.word	0x4146e360

080021a8 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 80021b2:	ed97 0b00 	vldr	d0, [r7]
 80021b6:	f00c fa63 	bl	800e680 <log10>
 80021ba:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 80021be:	ed97 7b02 	vldr	d7, [r7, #8]
 80021c2:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002210 <rH1_from_upper_bandwidth+0x68>
 80021c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021ca:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002218 <rH1_from_upper_bandwidth+0x70>
 80021ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80021d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80021d6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002220 <rH1_from_upper_bandwidth+0x78>
 80021da:	ee27 5b05 	vmul.f64	d5, d7, d5
 80021de:	ed97 7b02 	vldr	d7, [r7, #8]
 80021e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021ea:	eeb0 1b47 	vmov.f64	d1, d7
 80021ee:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80021f2:	f00c faad 	bl	800e750 <pow>
 80021f6:	eeb0 7b40 	vmov.f64	d7, d0
 80021fa:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002228 <rH1_from_upper_bandwidth+0x80>
 80021fe:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 8002202:	eeb0 0b47 	vmov.f64	d0, d7
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	f3af 8000 	nop.w
 8002210:	94467382 	.word	0x94467382
 8002214:	3ff306f6 	.word	0x3ff306f6
 8002218:	c504816f 	.word	0xc504816f
 800221c:	4020318f 	.word	0x4020318f
 8002220:	c60029f1 	.word	0xc60029f1
 8002224:	3fa86833 	.word	0x3fa86833
 8002228:	e5604189 	.word	0xe5604189
 800222c:	3fef22d0 	.word	0x3fef22d0

08002230 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 800223a:	ed97 0b00 	vldr	d0, [r7]
 800223e:	f00c fa1f 	bl	800e680 <log10>
 8002242:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 8002246:	ed97 7b02 	vldr	d7, [r7, #8]
 800224a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002298 <rH2_from_upper_bandwidth+0x68>
 800224e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002252:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80022a0 <rH2_from_upper_bandwidth+0x70>
 8002256:	ee36 6b47 	vsub.f64	d6, d6, d7
 800225a:	ed97 7b02 	vldr	d7, [r7, #8]
 800225e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80022a8 <rH2_from_upper_bandwidth+0x78>
 8002262:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002266:	ed97 7b02 	vldr	d7, [r7, #8]
 800226a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800226e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002272:	eeb0 1b47 	vmov.f64	d1, d7
 8002276:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800227a:	f00c fa69 	bl	800e750 <pow>
 800227e:	eeb0 7b40 	vmov.f64	d7, d0
 8002282:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80022b0 <rH2_from_upper_bandwidth+0x80>
 8002286:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 800228a:	eeb0 0b47 	vmov.f64	d0, d7
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	f3af 8000 	nop.w
 8002298:	16f0068e 	.word	0x16f0068e
 800229c:	3ff15048 	.word	0x3ff15048
 80022a0:	2a305532 	.word	0x2a305532
 80022a4:	402033a9 	.word	0x402033a9
 80022a8:	6f3f52fc 	.word	0x6f3f52fc
 80022ac:	3fa1522a 	.word	0x3fa1522a
 80022b0:	cd35a858 	.word	0xcd35a858
 80022b4:	3ff04e3b 	.word	0x3ff04e3b

080022b8 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 80022c2:	ed97 0b00 	vldr	d0, [r7]
 80022c6:	f00c f9db 	bl	800e680 <log10>
 80022ca:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 80022ce:	ed97 7b00 	vldr	d7, [r7]
 80022d2:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 80022d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	d532      	bpl.n	8002346 <rL_from_lower_bandwidth+0x8e>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80022e0:	ed97 7b02 	vldr	d7, [r7, #8]
 80022e4:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002398 <rL_from_lower_bandwidth+0xe0>
 80022e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ec:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 80023a0 <rL_from_lower_bandwidth+0xe8>
 80022f0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80022f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80022f8:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80023a8 <rL_from_lower_bandwidth+0xf0>
 80022fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002300:	ed97 7b02 	vldr	d7, [r7, #8]
 8002304:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002308:	ee36 6b07 	vadd.f64	d6, d6, d7
            0.1442 * log10f * log10f * log10f));
 800230c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002310:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80023b0 <rL_from_lower_bandwidth+0xf8>
 8002314:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002318:	ed97 7b02 	vldr	d7, [r7, #8]
 800231c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002320:	ed97 7b02 	vldr	d7, [r7, #8]
 8002324:	ee25 7b07 	vmul.f64	d7, d5, d7
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 8002328:	ee36 7b07 	vadd.f64	d7, d6, d7
 800232c:	eeb0 1b47 	vmov.f64	d1, d7
 8002330:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002334:	f00c fa0c 	bl	800e750 <pow>
 8002338:	eeb0 7b40 	vmov.f64	d7, d0
 800233c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80023b8 <rL_from_lower_bandwidth+0x100>
 8002340:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002344:	e021      	b.n	800238a <rL_from_lower_bandwidth+0xd2>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 8002346:	ed97 7b02 	vldr	d7, [r7, #8]
 800234a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80023c0 <rL_from_lower_bandwidth+0x108>
 800234e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002352:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80023c8 <rL_from_lower_bandwidth+0x110>
 8002356:	ee36 6b47 	vsub.f64	d6, d6, d7
 800235a:	ed97 7b02 	vldr	d7, [r7, #8]
 800235e:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80023d0 <rL_from_lower_bandwidth+0x118>
 8002362:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002366:	ed97 7b02 	vldr	d7, [r7, #8]
 800236a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800236e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002372:	eeb0 1b47 	vmov.f64	d1, d7
 8002376:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800237a:	f00c f9e9 	bl	800e750 <pow>
 800237e:	eeb0 7b40 	vmov.f64	d7, d0
 8002382:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80023b8 <rL_from_lower_bandwidth+0x100>
 8002386:	ee27 7b06 	vmul.f64	d7, d7, d6
    }
}
 800238a:	eeb0 0b47 	vmov.f64	d0, d7
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	f3af 8000 	nop.w
 8002398:	ab367a10 	.word	0xab367a10
 800239c:	3ff3573e 	.word	0x3ff3573e
 80023a0:	6e2eb1c4 	.word	0x6e2eb1c4
 80023a4:	4013c1a3 	.word	0x4013c1a3
 80023a8:	35a85879 	.word	0x35a85879
 80023ac:	3fe23bcd 	.word	0x3fe23bcd
 80023b0:	460aa64c 	.word	0x460aa64c
 80023b4:	3fc27525 	.word	0x3fc27525
 80023b8:	504816f0 	.word	0x504816f0
 80023bc:	3ff018fc 	.word	0x3ff018fc
 80023c0:	1f8a0903 	.word	0x1f8a0903
 80023c4:	3fe2ee63 	.word	0x3fe2ee63
 80023c8:	0ded288d 	.word	0x0ded288d
 80023cc:	4012f0be 	.word	0x4012f0be
 80023d0:	760bf5d8 	.word	0x760bf5d8
 80023d4:	3fb5b6c3 	.word	0x3fb5b6c3

080023d8 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	ed2d 8b02 	vpush	{d8}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 80023e6:	a32a      	add	r3, pc, #168	@ (adr r3, 8002490 <upper_bandwidth_from_rH1+0xb8>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 80023f0:	a329      	add	r3, pc, #164	@ (adr r3, 8002498 <upper_bandwidth_from_rH1+0xc0>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 80023fa:	ed97 7b00 	vldr	d7, [r7]
 80023fe:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002480 <upper_bandwidth_from_rH1+0xa8>
 8002402:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002406:	eeb0 0b46 	vmov.f64	d0, d6
 800240a:	f00c f939 	bl	800e680 <log10>
 800240e:	eeb0 7b40 	vmov.f64	d7, d0
 8002412:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002488 <upper_bandwidth_from_rH1+0xb0>
 8002416:	ee36 7b47 	vsub.f64	d7, d6, d7
 800241a:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 800241e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002422:	eeb1 8b47 	vneg.f64	d8, d7
 8002426:	ed97 7b04 	vldr	d7, [r7, #16]
 800242a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800242e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002432:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 8002436:	ee27 5b05 	vmul.f64	d5, d7, d5
 800243a:	ed97 7b02 	vldr	d7, [r7, #8]
 800243e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002442:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002446:	eeb0 0b47 	vmov.f64	d0, d7
 800244a:	f00c fbd1 	bl	800ebf0 <sqrt>
 800244e:	eeb0 7b40 	vmov.f64	d7, d0
 8002452:	ee38 6b47 	vsub.f64	d6, d8, d7
 8002456:	ed97 7b06 	vldr	d7, [r7, #24]
 800245a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800245e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002462:	eeb0 1b45 	vmov.f64	d1, d5
 8002466:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800246a:	f00c f971 	bl	800e750 <pow>
 800246e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8002472:	eeb0 0b47 	vmov.f64	d0, d7
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	ecbd 8b02 	vpop	{d8}
 800247e:	bd80      	pop	{r7, pc}
 8002480:	e5604189 	.word	0xe5604189
 8002484:	3fef22d0 	.word	0x3fef22d0
 8002488:	c504816f 	.word	0xc504816f
 800248c:	4020318f 	.word	0x4020318f
 8002490:	c60029f1 	.word	0xc60029f1
 8002494:	3fa86833 	.word	0x3fa86833
 8002498:	94467382 	.word	0x94467382
 800249c:	bff306f6 	.word	0xbff306f6

080024a0 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	ed2d 8b02 	vpush	{d8}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 80024ae:	a32a      	add	r3, pc, #168	@ (adr r3, 8002558 <upper_bandwidth_from_rH2+0xb8>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 80024b8:	a329      	add	r3, pc, #164	@ (adr r3, 8002560 <upper_bandwidth_from_rH2+0xc0>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 80024c2:	ed97 7b00 	vldr	d7, [r7]
 80024c6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002548 <upper_bandwidth_from_rH2+0xa8>
 80024ca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024ce:	eeb0 0b46 	vmov.f64	d0, d6
 80024d2:	f00c f8d5 	bl	800e680 <log10>
 80024d6:	eeb0 7b40 	vmov.f64	d7, d0
 80024da:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002550 <upper_bandwidth_from_rH2+0xb0>
 80024de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024e2:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 80024e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80024ea:	eeb1 8b47 	vneg.f64	d8, d7
 80024ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80024f2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80024f6:	ed97 7b06 	vldr	d7, [r7, #24]
 80024fa:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80024fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002502:	ed97 7b02 	vldr	d7, [r7, #8]
 8002506:	ee25 7b07 	vmul.f64	d7, d5, d7
 800250a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800250e:	eeb0 0b47 	vmov.f64	d0, d7
 8002512:	f00c fb6d 	bl	800ebf0 <sqrt>
 8002516:	eeb0 7b40 	vmov.f64	d7, d0
 800251a:	ee38 6b47 	vsub.f64	d6, d8, d7
 800251e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002522:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002526:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800252a:	eeb0 1b45 	vmov.f64	d1, d5
 800252e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002532:	f00c f90d 	bl	800e750 <pow>
 8002536:	eeb0 7b40 	vmov.f64	d7, d0
}
 800253a:	eeb0 0b47 	vmov.f64	d0, d7
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	ecbd 8b02 	vpop	{d8}
 8002546:	bd80      	pop	{r7, pc}
 8002548:	cd35a858 	.word	0xcd35a858
 800254c:	3ff04e3b 	.word	0x3ff04e3b
 8002550:	2a305532 	.word	0x2a305532
 8002554:	402033a9 	.word	0x402033a9
 8002558:	6f3f52fc 	.word	0x6f3f52fc
 800255c:	3fa1522a 	.word	0x3fa1522a
 8002560:	16f0068e 	.word	0x16f0068e
 8002564:	bff15048 	.word	0xbff15048

08002568 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	ed2d 8b02 	vpush	{d8}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 8002576:	ed97 7b00 	vldr	d7, [r7]
 800257a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8002678 <lower_bandwidth_from_rL+0x110>
 800257e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d504      	bpl.n	8002592 <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002588:	a33b      	add	r3, pc, #236	@ (adr r3, 8002678 <lower_bandwidth_from_rL+0x110>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 8002592:	ed97 7b00 	vldr	d7, [r7]
 8002596:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8002680 <lower_bandwidth_from_rL+0x118>
 800259a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	d51c      	bpl.n	80025de <lower_bandwidth_from_rL+0x76>
        a = 0.08482;
 80025a4:	a33e      	add	r3, pc, #248	@ (adr r3, 80026a0 <lower_bandwidth_from_rL+0x138>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 80025ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80026a8 <lower_bandwidth_from_rL+0x140>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 80025b8:	ed97 7b00 	vldr	d7, [r7]
 80025bc:	ed9f 5b32 	vldr	d5, [pc, #200]	@ 8002688 <lower_bandwidth_from_rL+0x120>
 80025c0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025c4:	eeb0 0b46 	vmov.f64	d0, d6
 80025c8:	f00c f85a 	bl	800e680 <log10>
 80025cc:	eeb0 7b40 	vmov.f64	d7, d0
 80025d0:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002690 <lower_bandwidth_from_rL+0x128>
 80025d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025d8:	ed87 7b02 	vstr	d7, [r7, #8]
 80025dc:	e01b      	b.n	8002616 <lower_bandwidth_from_rL+0xae>
    } else {
        a = 0.3303;
 80025de:	a334      	add	r3, pc, #208	@ (adr r3, 80026b0 <lower_bandwidth_from_rL+0x148>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 80025e8:	a333      	add	r3, pc, #204	@ (adr r3, 80026b8 <lower_bandwidth_from_rL+0x150>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 80025f2:	ed97 7b00 	vldr	d7, [r7]
 80025f6:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8002688 <lower_bandwidth_from_rL+0x120>
 80025fa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025fe:	eeb0 0b46 	vmov.f64	d0, d6
 8002602:	f00c f83d 	bl	800e680 <log10>
 8002606:	eeb0 7b40 	vmov.f64	d7, d0
 800260a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002698 <lower_bandwidth_from_rL+0x130>
 800260e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002612:	ed87 7b02 	vstr	d7, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002616:	ed97 7b04 	vldr	d7, [r7, #16]
 800261a:	eeb1 8b47 	vneg.f64	d8, d7
 800261e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002622:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002626:	ed97 7b06 	vldr	d7, [r7, #24]
 800262a:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 800262e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002632:	ed97 7b02 	vldr	d7, [r7, #8]
 8002636:	ee25 7b07 	vmul.f64	d7, d5, d7
 800263a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800263e:	eeb0 0b47 	vmov.f64	d0, d7
 8002642:	f00c fad5 	bl	800ebf0 <sqrt>
 8002646:	eeb0 7b40 	vmov.f64	d7, d0
 800264a:	ee38 6b47 	vsub.f64	d6, d8, d7
 800264e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002652:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002656:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800265a:	eeb0 1b45 	vmov.f64	d1, d5
 800265e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002662:	f00c f875 	bl	800e750 <pow>
 8002666:	eeb0 7b40 	vmov.f64	d7, d0
}
 800266a:	eeb0 0b47 	vmov.f64	d0, d7
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	ecbd 8b02 	vpop	{d8}
 8002676:	bd80      	pop	{r7, pc}
 8002678:	00000000 	.word	0x00000000
 800267c:	40b3ec00 	.word	0x40b3ec00
 8002680:	00000000 	.word	0x00000000
 8002684:	40dd4c00 	.word	0x40dd4c00
 8002688:	504816f0 	.word	0x504816f0
 800268c:	3ff018fc 	.word	0x3ff018fc
 8002690:	0ded288d 	.word	0x0ded288d
 8002694:	4012f0be 	.word	0x4012f0be
 8002698:	c56d5cfb 	.word	0xc56d5cfb
 800269c:	4013f2fe 	.word	0x4013f2fe
 80026a0:	760bf5d8 	.word	0x760bf5d8
 80026a4:	3fb5b6c3 	.word	0x3fb5b6c3
 80026a8:	1f8a0903 	.word	0x1f8a0903
 80026ac:	bfe2ee63 	.word	0xbfe2ee63
 80026b0:	9c779a6b 	.word	0x9c779a6b
 80026b4:	3fd523a2 	.word	0x3fd523a2
 80026b8:	f5c28f5c 	.word	0xf5c28f5c
 80026bc:	bff35c28 	.word	0xbff35c28

080026c0 <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
	return 64;
 80026c4:	2340      	movs	r3, #64	@ 0x40
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	p->amp_vref_enable = 1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f103 021c 	add.w	r2, r3, #28
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f103 0120 	add.w	r1, r3, #32
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	ed93 7b00 	vldr	d7, [r3]
 8002710:	eeb0 0b47 	vmov.f64	d0, d7
 8002714:	4610      	mov	r0, r2
 8002716:	f000 f863 	bl	80027e0 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff f9ca 	bl	8001acc <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002750:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff f9cb 	bl	8001af0 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 8002766:	2100      	movs	r1, #0
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fa85 	bl	8001c78 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff faa0 	bl	8001cbc <set_zcheck_polarity>
	p->zcheck_en = 0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 8002782:	2100      	movs	r1, #0
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff faae 	bl	8001ce6 <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 80027b0:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80027d8 <set_default_rhd_settings+0x108>
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff facb 	bl	8001d50 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 80027ba:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fc16 	bl	8001ff0 <set_lower_bandwidth>
	// R[17]D[7:0]: apwr[31:0]
	// R[18]D[7:0] = apwr[39:32]
	// R[19]D[7:0] = apwr[47:40]
	// R[20]D[7:0] = apwr[55:48]
	// R[21]D[7:0] = apwr[63:56]
	power_up_all_amps(p);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff faa8 	bl	8001d1a <power_up_all_amps>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	f3af 8000 	nop.w
 80027d8:	00000000 	.word	0x00000000
 80027dc:	40bd4c00 	.word	0x40bd4c00

080027e0 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 80027ee:	ed97 7b00 	vldr	d7, [r7]
 80027f2:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8002918 <set_biases_based_on_sample_rate+0x138>
 80027f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80027fa:	ed87 7b04 	vstr	d7, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 80027fe:	ed97 7b04 	vldr	d7, [r7, #16]
 8002802:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8002920 <set_biases_based_on_sample_rate+0x140>
 8002806:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280e:	d806      	bhi.n	800281e <set_biases_based_on_sample_rate+0x3e>
		*adc_buffer_bias = 32;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2228      	movs	r2, #40	@ 0x28
 800281a:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 800281c:	e075      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 140000.0) {
 800281e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002822:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002928 <set_biases_based_on_sample_rate+0x148>
 8002826:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800282a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282e:	d806      	bhi.n	800283e <set_biases_based_on_sample_rate+0x5e>
		*adc_buffer_bias = 16;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2210      	movs	r2, #16
 8002834:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2228      	movs	r2, #40	@ 0x28
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	e065      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 175000.0) {
 800283e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002842:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8002930 <set_biases_based_on_sample_rate+0x150>
 8002846:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	d806      	bhi.n	800285e <set_biases_based_on_sample_rate+0x7e>
		*adc_buffer_bias = 8;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2208      	movs	r2, #8
 8002854:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2228      	movs	r2, #40	@ 0x28
 800285a:	601a      	str	r2, [r3, #0]
}
 800285c:	e055      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 220000.0) {
 800285e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002862:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8002938 <set_biases_based_on_sample_rate+0x158>
 8002866:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d806      	bhi.n	800287e <set_biases_based_on_sample_rate+0x9e>
		*adc_buffer_bias = 8;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2208      	movs	r2, #8
 8002874:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2220      	movs	r2, #32
 800287a:	601a      	str	r2, [r3, #0]
}
 800287c:	e045      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 280000.0) {
 800287e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002882:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002940 <set_biases_based_on_sample_rate+0x160>
 8002886:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	d806      	bhi.n	800289e <set_biases_based_on_sample_rate+0xbe>
		*adc_buffer_bias = 8;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2208      	movs	r2, #8
 8002894:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	221a      	movs	r2, #26
 800289a:	601a      	str	r2, [r3, #0]
}
 800289c:	e035      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 350000.0) {
 800289e:	ed97 7b04 	vldr	d7, [r7, #16]
 80028a2:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8002948 <set_biases_based_on_sample_rate+0x168>
 80028a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d806      	bhi.n	80028be <set_biases_based_on_sample_rate+0xde>
		*adc_buffer_bias = 4;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2204      	movs	r2, #4
 80028b4:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2212      	movs	r2, #18
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	e025      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 440000.0) {
 80028be:	ed97 7b04 	vldr	d7, [r7, #16]
 80028c2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002950 <set_biases_based_on_sample_rate+0x170>
 80028c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d806      	bhi.n	80028de <set_biases_based_on_sample_rate+0xfe>
		*adc_buffer_bias = 3;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2203      	movs	r2, #3
 80028d4:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2210      	movs	r2, #16
 80028da:	601a      	str	r2, [r3, #0]
}
 80028dc:	e015      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 525000.0) {
 80028de:	ed97 7b04 	vldr	d7, [r7, #16]
 80028e2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002958 <set_biases_based_on_sample_rate+0x178>
 80028e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80028ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ee:	d806      	bhi.n	80028fe <set_biases_based_on_sample_rate+0x11e>
		*adc_buffer_bias = 3;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2203      	movs	r2, #3
 80028f4:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2207      	movs	r2, #7
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	e005      	b.n	800290a <set_biases_based_on_sample_rate+0x12a>
		*adc_buffer_bias = 2;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2204      	movs	r2, #4
 8002908:	601a      	str	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	00000000 	.word	0x00000000
 800291c:	40418000 	.word	0x40418000
 8002920:	00000000 	.word	0x00000000
 8002924:	40fd4c00 	.word	0x40fd4c00
 8002928:	00000000 	.word	0x00000000
 800292c:	41011700 	.word	0x41011700
 8002930:	00000000 	.word	0x00000000
 8002934:	41055cc0 	.word	0x41055cc0
 8002938:	00000000 	.word	0x00000000
 800293c:	410adb00 	.word	0x410adb00
 8002940:	00000000 	.word	0x00000000
 8002944:	41111700 	.word	0x41111700
 8002948:	00000000 	.word	0x00000000
 800294c:	41155cc0 	.word	0x41155cc0
 8002950:	00000000 	.word	0x00000000
 8002954:	411adb00 	.word	0x411adb00
 8002958:	00000000 	.word	0x00000000
 800295c:	41200590 	.word	0x41200590

08002960 <get_register_value>:


// Return the value of a selected RAM register (0-21) on the RHD2164 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b15      	cmp	r3, #21
 8002972:	f200 8217 	bhi.w	8002da4 <get_register_value+0x444>
 8002976:	a201      	add	r2, pc, #4	@ (adr r2, 800297c <get_register_value+0x1c>)
 8002978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297c:	080029d5 	.word	0x080029d5
 8002980:	080029ff 	.word	0x080029ff
 8002984:	08002a0f 	.word	0x08002a0f
 8002988:	08002a17 	.word	0x08002a17
 800298c:	08002a47 	.word	0x08002a47
 8002990:	08002a6f 	.word	0x08002a6f
 8002994:	08002a9f 	.word	0x08002a9f
 8002998:	08002aa5 	.word	0x08002aa5
 800299c:	08002aad 	.word	0x08002aad
 80029a0:	08002abf 	.word	0x08002abf
 80029a4:	08002ad1 	.word	0x08002ad1
 80029a8:	08002ae3 	.word	0x08002ae3
 80029ac:	08002af5 	.word	0x08002af5
 80029b0:	08002b07 	.word	0x08002b07
 80029b4:	08002b25 	.word	0x08002b25
 80029b8:	08002b75 	.word	0x08002b75
 80029bc:	08002bc5 	.word	0x08002bc5
 80029c0:	08002c15 	.word	0x08002c15
 80029c4:	08002c65 	.word	0x08002c65
 80029c8:	08002cb5 	.word	0x08002cb5
 80029cc:	08002d05 	.word	0x08002d05
 80029d0:	08002d55 	.word	0x08002d55
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	019a      	lsls	r2, r3, #6
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 80029e0:	015b      	lsls	r3, r3, #5
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 80029f2:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 80029f8:	4413      	add	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
		break;
 80029fc:	e1d4      	b.n	8002da8 <get_register_value+0x448>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	019a      	lsls	r2, r3, #6
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
		break;
 8002a0c:	e1cc      	b.n	8002da8 <get_register_value+0x448>

	case 2:
		regout = p->mux_bias;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	60fb      	str	r3, [r7, #12]
		break;
 8002a14:	e1c8      	b.n	8002da8 <get_register_value+0x448>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	441a      	add	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	441a      	add	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a38:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002a3a:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
		break;
 8002a44:	e1b0      	b.n	8002da8 <get_register_value+0x448>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4a:	01da      	lsls	r2, r3, #7
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a58:	015b      	lsls	r3, r3, #5
 8002a5a:	441a      	add	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002a68:	4413      	add	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
		break;
 8002a6c:	e19c      	b.n	8002da8 <get_register_value+0x448>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a72:	019a      	lsls	r2, r3, #6
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	015b      	lsls	r3, r3, #5
 8002a7a:	441a      	add	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002a8a:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002a98:	4413      	add	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
		break;
 8002a9c:	e184      	b.n	8002da8 <get_register_value+0x448>

	case 6:
		regout = ZcheckDac;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
		break;
 8002aa2:	e181      	b.n	8002da8 <get_register_value+0x448>

	case 7:
		regout = p->zcheck_select;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aa8:	60fb      	str	r3, [r7, #12]
		break;
 8002aaa:	e17d      	b.n	8002da8 <get_register_value+0x448>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab0:	01da      	lsls	r2, r3, #7
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ab8:	4413      	add	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
		break;
 8002abc:	e174      	b.n	8002da8 <get_register_value+0x448>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ac2:	01da      	lsls	r2, r3, #7
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
		break;
 8002ace:	e16b      	b.n	8002da8 <get_register_value+0x448>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	01da      	lsls	r2, r3, #7
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002adc:	4413      	add	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
		break;
 8002ae0:	e162      	b.n	8002da8 <get_register_value+0x448>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ae6:	01da      	lsls	r2, r3, #7
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	4413      	add	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
		break;
 8002af2:	e159      	b.n	8002da8 <get_register_value+0x448>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af8:	01da      	lsls	r2, r3, #7
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b00:	4413      	add	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
		break;
 8002b04:	e150      	b.n	8002da8 <get_register_value+0x448>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b0c:	01da      	lsls	r2, r3, #7
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	441a      	add	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
		break;
 8002b22:	e141      	b.n	8002da8 <get_register_value+0x448>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002b2a:	01da      	lsls	r2, r3, #7
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002b32:	019b      	lsls	r3, r3, #6
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b50:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002b52:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
		break;
 8002b72:	e119      	b.n	8002da8 <get_register_value+0x448>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b7a:	01da      	lsls	r2, r3, #7
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b82:	019b      	lsls	r3, r3, #6
 8002b84:	441a      	add	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002b8c:	015b      	lsls	r3, r3, #5
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002ba0:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002ba2:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	441a      	add	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
		break;
 8002bc2:	e0f1      	b.n	8002da8 <get_register_value+0x448>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8002bca:	01da      	lsls	r2, r3, #7
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bdc:	015b      	lsls	r3, r3, #5
 8002bde:	441a      	add	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002bf0:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002bf2:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
		break;
 8002c12:	e0c9      	b.n	8002da8 <get_register_value+0x448>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002c1a:	01da      	lsls	r2, r3, #7
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002c22:	019b      	lsls	r3, r3, #6
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002c2c:	015b      	lsls	r3, r3, #5
 8002c2e:	441a      	add	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002c40:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002c42:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	441a      	add	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	441a      	add	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002c5e:	4413      	add	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
		break;
 8002c62:	e0a1      	b.n	8002da8 <get_register_value+0x448>

	case 18:
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002c6a:	01da      	lsls	r2, r3, #7
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002c72:	019b      	lsls	r3, r3, #6
 8002c74:	441a      	add	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002c7c:	015b      	lsls	r3, r3, #5
 8002c7e:	441a      	add	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8002c90:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002c92:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
		break;
 8002cb2:	e079      	b.n	8002da8 <get_register_value+0x448>

	case 19:
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8002cba:	01da      	lsls	r2, r3, #7
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002cc2:	019b      	lsls	r3, r3, #6
 8002cc4:	441a      	add	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002ccc:	015b      	lsls	r3, r3, #5
 8002cce:	441a      	add	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002ce0:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002ce2:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
		break;
 8002d02:	e051      	b.n	8002da8 <get_register_value+0x448>

	case 20:
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8002d0a:	01da      	lsls	r2, r3, #7
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002d12:	019b      	lsls	r3, r3, #6
 8002d14:	441a      	add	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002d1c:	015b      	lsls	r3, r3, #5
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8002d30:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002d32:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
		break;
 8002d52:	e029      	b.n	8002da8 <get_register_value+0x448>

	case 21:
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002d5a:	01da      	lsls	r2, r3, #7
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002d62:	019b      	lsls	r3, r3, #6
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002d6c:	015b      	lsls	r3, r3, #5
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002d80:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002d82:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002d9e:	4413      	add	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
		break;
 8002da2:	e001      	b.n	8002da8 <get_register_value+0x448>

	default:
		regout = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b29b      	uxth	r3, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	71fb      	strb	r3, [r7, #7]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 8002dd8:	89fa      	ldrh	r2, [r7, #14]
 8002dda:	89bb      	ldrh	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	b29b      	uxth	r3, r3
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 8002df6:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	460a      	mov	r2, r1
 8002e0e:	71fb      	strb	r3, [r7, #7]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 8002e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e18:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 8002e22:	89fa      	ldrh	r2, [r7, #14]
 8002e24:	89bb      	ldrh	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	79bb      	ldrb	r3, [r7, #6]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b29b      	uxth	r3, r3
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8002e48:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e4c:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 8002e56:	89fa      	ldrh	r2, [r7, #14]
 8002e58:	89bb      	ldrh	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <HAL_MspInit+0x30>)
 8002e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e78:	4a08      	ldr	r2, [pc, #32]	@ (8002e9c <HAL_MspInit+0x30>)
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_MspInit+0x30>)
 8002e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	58024400 	.word	0x58024400

08002ea0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	@ 0x38
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a9c      	ldr	r2, [pc, #624]	@ (8003130 <HAL_SPI_MspInit+0x290>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f040 8087 	bne.w	8002fd2 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ec4:	4b9b      	ldr	r3, [pc, #620]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eca:	4a9a      	ldr	r2, [pc, #616]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ed0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ed4:	4b97      	ldr	r3, [pc, #604]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	4b94      	ldr	r3, [pc, #592]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee8:	4a92      	ldr	r2, [pc, #584]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ef2:	4b90      	ldr	r3, [pc, #576]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f00:	4b8c      	ldr	r3, [pc, #560]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f06:	4a8b      	ldr	r2, [pc, #556]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f10:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8002f1e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f30:	2305      	movs	r3, #5
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f38:	4619      	mov	r1, r3
 8002f3a:	487f      	ldr	r0, [pc, #508]	@ (8003138 <HAL_SPI_MspInit+0x298>)
 8002f3c:	f003 fd58 	bl	80069f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f50:	2305      	movs	r3, #5
 8002f52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4878      	ldr	r0, [pc, #480]	@ (800313c <HAL_SPI_MspInit+0x29c>)
 8002f5c:	f003 fd48 	bl	80069f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002f60:	4b77      	ldr	r3, [pc, #476]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f62:	4a78      	ldr	r2, [pc, #480]	@ (8003144 <HAL_SPI_MspInit+0x2a4>)
 8002f64:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002f66:	4b76      	ldr	r3, [pc, #472]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f68:	2225      	movs	r2, #37	@ 0x25
 8002f6a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6c:	4b74      	ldr	r3, [pc, #464]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	4b73      	ldr	r3, [pc, #460]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f78:	4b71      	ldr	r3, [pc, #452]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f7e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f80:	4b6f      	ldr	r3, [pc, #444]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f86:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f88:	4b6d      	ldr	r3, [pc, #436]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002f90:	4b6b      	ldr	r3, [pc, #428]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f96:	4b6a      	ldr	r3, [pc, #424]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002f98:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9e:	4b68      	ldr	r3, [pc, #416]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002fa4:	4866      	ldr	r0, [pc, #408]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002fa6:	f000 fedf 	bl	8003d68 <HAL_DMA_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8002fb0:	f7fe f8dc 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a62      	ldr	r2, [pc, #392]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002fb8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002fba:	4a61      	ldr	r2, [pc, #388]	@ (8003140 <HAL_SPI_MspInit+0x2a0>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	2023      	movs	r0, #35	@ 0x23
 8002fc6:	f000 fe9a 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002fca:	2023      	movs	r0, #35	@ 0x23
 8002fcc:	f000 feb1 	bl	8003d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002fd0:	e0aa      	b.n	8003128 <HAL_SPI_MspInit+0x288>
  else if(hspi->Instance==SPI3)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8003148 <HAL_SPI_MspInit+0x2a8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	f040 80a5 	bne.w	8003128 <HAL_SPI_MspInit+0x288>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fde:	4b55      	ldr	r3, [pc, #340]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fe4:	4a53      	ldr	r2, [pc, #332]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fee:	4b51      	ldr	r3, [pc, #324]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8002ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003002:	4a4c      	ldr	r2, [pc, #304]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800300c:	4b49      	ldr	r3, [pc, #292]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 800300e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	4b46      	ldr	r3, [pc, #280]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003020:	4a44      	ldr	r2, [pc, #272]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800302a:	4b42      	ldr	r3, [pc, #264]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 800302c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003038:	4b3e      	ldr	r3, [pc, #248]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800303e:	4a3d      	ldr	r2, [pc, #244]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003048:	4b3a      	ldr	r3, [pc, #232]	@ (8003134 <HAL_SPI_MspInit+0x294>)
 800304a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003056:	2310      	movs	r3, #16
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003066:	2306      	movs	r3, #6
 8003068:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800306e:	4619      	mov	r1, r3
 8003070:	4831      	ldr	r0, [pc, #196]	@ (8003138 <HAL_SPI_MspInit+0x298>)
 8003072:	f003 fcbd 	bl	80069f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003076:	2304      	movs	r3, #4
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003086:	2307      	movs	r3, #7
 8003088:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800308e:	4619      	mov	r1, r3
 8003090:	482e      	ldr	r0, [pc, #184]	@ (800314c <HAL_SPI_MspInit+0x2ac>)
 8003092:	f003 fcad 	bl	80069f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030a8:	2306      	movs	r3, #6
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030b0:	4619      	mov	r1, r3
 80030b2:	4827      	ldr	r0, [pc, #156]	@ (8003150 <HAL_SPI_MspInit+0x2b0>)
 80030b4:	f003 fc9c 	bl	80069f0 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream1;
 80030b8:	4b26      	ldr	r3, [pc, #152]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030ba:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_SPI_MspInit+0x2b8>)
 80030bc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80030be:	4b25      	ldr	r3, [pc, #148]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030c0:	223e      	movs	r2, #62	@ 0x3e
 80030c2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c4:	4b23      	ldr	r3, [pc, #140]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030c6:	2240      	movs	r2, #64	@ 0x40
 80030c8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ca:	4b22      	ldr	r3, [pc, #136]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d0:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030d6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030de:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030e6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80030e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030ee:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80030f4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f6:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80030fc:	4815      	ldr	r0, [pc, #84]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 80030fe:	f000 fe33 	bl	8003d68 <HAL_DMA_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 8003108:	f7fe f830 	bl	800116c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a11      	ldr	r2, [pc, #68]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 8003110:	679a      	str	r2, [r3, #120]	@ 0x78
 8003112:	4a10      	ldr	r2, [pc, #64]	@ (8003154 <HAL_SPI_MspInit+0x2b4>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	2033      	movs	r0, #51	@ 0x33
 800311e:	f000 fdee 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003122:	2033      	movs	r0, #51	@ 0x33
 8003124:	f000 fe05 	bl	8003d32 <HAL_NVIC_EnableIRQ>
}
 8003128:	bf00      	nop
 800312a:	3738      	adds	r7, #56	@ 0x38
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40013000 	.word	0x40013000
 8003134:	58024400 	.word	0x58024400
 8003138:	58020000 	.word	0x58020000
 800313c:	58020c00 	.word	0x58020c00
 8003140:	2400019c 	.word	0x2400019c
 8003144:	40020010 	.word	0x40020010
 8003148:	40003c00 	.word	0x40003c00
 800314c:	58020400 	.word	0x58020400
 8003150:	58020800 	.word	0x58020800
 8003154:	24000214 	.word	0x24000214
 8003158:	40020028 	.word	0x40020028

0800315c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	@ 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a24      	ldr	r2, [pc, #144]	@ (800320c <HAL_TIM_Base_MspInit+0xb0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10f      	bne.n	800319e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800317e:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 8003180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800318e:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 8003190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800319c:	e032      	b.n	8003204 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d12d      	bne.n	8003204 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 80031aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ae:	4a18      	ldr	r2, [pc, #96]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031b8:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 80031ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031cc:	4a10      	ldr	r2, [pc, #64]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_TIM_Base_MspInit+0xb4>)
 80031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031f4:	2301      	movs	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4619      	mov	r1, r3
 80031fe:	4805      	ldr	r0, [pc, #20]	@ (8003214 <HAL_TIM_Base_MspInit+0xb8>)
 8003200:	f003 fbf6 	bl	80069f0 <HAL_GPIO_Init>
}
 8003204:	bf00      	nop
 8003206:	3728      	adds	r7, #40	@ 0x28
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40010000 	.word	0x40010000
 8003210:	58024400 	.word	0x58024400
 8003214:	58020000 	.word	0x58020000

08003218 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0e      	ldr	r2, [pc, #56]	@ (8003260 <HAL_TIM_OC_MspInit+0x48>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d116      	bne.n	8003258 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322a:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <HAL_TIM_OC_MspInit+0x4c>)
 800322c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003230:	4a0c      	ldr	r2, [pc, #48]	@ (8003264 <HAL_TIM_OC_MspInit+0x4c>)
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <HAL_TIM_OC_MspInit+0x4c>)
 800323c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2101      	movs	r1, #1
 800324c:	201d      	movs	r0, #29
 800324e:	f000 fd56 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003252:	201d      	movs	r0, #29
 8003254:	f000 fd6d 	bl	8003d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40000400 	.word	0x40000400
 8003264:	58024400 	.word	0x58024400

08003268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	@ 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a26      	ldr	r2, [pc, #152]	@ (8003320 <HAL_TIM_MspPostInit+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d120      	bne.n	80032cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800328a:	4b26      	ldr	r3, [pc, #152]	@ (8003324 <HAL_TIM_MspPostInit+0xbc>)
 800328c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003290:	4a24      	ldr	r2, [pc, #144]	@ (8003324 <HAL_TIM_MspPostInit+0xbc>)
 8003292:	f043 0310 	orr.w	r3, r3, #16
 8003296:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800329a:	4b22      	ldr	r3, [pc, #136]	@ (8003324 <HAL_TIM_MspPostInit+0xbc>)
 800329c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b6:	2303      	movs	r3, #3
 80032b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	4818      	ldr	r0, [pc, #96]	@ (8003328 <HAL_TIM_MspPostInit+0xc0>)
 80032c6:	f003 fb93 	bl	80069f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032ca:	e024      	b.n	8003316 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d4:	d11f      	bne.n	8003316 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <HAL_TIM_MspPostInit+0xbc>)
 80032d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032dc:	4a11      	ldr	r2, [pc, #68]	@ (8003324 <HAL_TIM_MspPostInit+0xbc>)
 80032de:	f043 0302 	orr.w	r3, r3, #2
 80032e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <HAL_TIM_MspPostInit+0xbc>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003302:	2303      	movs	r3, #3
 8003304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003306:	2301      	movs	r3, #1
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	4619      	mov	r1, r3
 8003310:	4806      	ldr	r0, [pc, #24]	@ (800332c <HAL_TIM_MspPostInit+0xc4>)
 8003312:	f003 fb6d 	bl	80069f0 <HAL_GPIO_Init>
}
 8003316:	bf00      	nop
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	58024400 	.word	0x58024400
 8003328:	58021000 	.word	0x58021000
 800332c:	58020400 	.word	0x58020400

08003330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b0ba      	sub	sp, #232	@ 0xe8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	22b8      	movs	r2, #184	@ 0xb8
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f00b f811 	bl	800e378 <memset>
  if(huart->Instance==USART3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a55      	ldr	r2, [pc, #340]	@ (80034b0 <HAL_UART_MspInit+0x180>)
 800335c:	4293      	cmp	r3, r2
 800335e:	f040 80a2 	bne.w	80034a6 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003362:	f04f 0202 	mov.w	r2, #2
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003374:	f107 0318 	add.w	r3, r7, #24
 8003378:	4618      	mov	r0, r3
 800337a:	f004 fcbf 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003384:	f7fd fef2 	bl	800116c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003388:	4b4a      	ldr	r3, [pc, #296]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 800338a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800338e:	4a49      	ldr	r2, [pc, #292]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003394:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003398:	4b46      	ldr	r3, [pc, #280]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 800339a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800339e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a6:	4b43      	ldr	r3, [pc, #268]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ac:	4a41      	ldr	r2, [pc, #260]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 80033ae:	f043 0302 	orr.w	r3, r3, #2
 80033b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b6:	4b3f      	ldr	r3, [pc, #252]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 80033b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033c4:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 80033c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ca:	4a3a      	ldr	r2, [pc, #232]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 80033cc:	f043 0308 	orr.w	r3, r3, #8
 80033d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033d4:	4b37      	ldr	r3, [pc, #220]	@ (80034b4 <HAL_UART_MspInit+0x184>)
 80033d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2303      	movs	r3, #3
 80033f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033fc:	2307      	movs	r3, #7
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003402:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003406:	4619      	mov	r1, r3
 8003408:	482b      	ldr	r0, [pc, #172]	@ (80034b8 <HAL_UART_MspInit+0x188>)
 800340a:	f003 faf1 	bl	80069f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin;
 800340e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003412:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003428:	2307      	movs	r3, #7
 800342a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(STLK_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800342e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003432:	4619      	mov	r1, r3
 8003434:	4821      	ldr	r0, [pc, #132]	@ (80034bc <HAL_UART_MspInit+0x18c>)
 8003436:	f003 fadb 	bl	80069f0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800343a:	4b21      	ldr	r3, [pc, #132]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 800343c:	4a21      	ldr	r2, [pc, #132]	@ (80034c4 <HAL_UART_MspInit+0x194>)
 800343e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003440:	4b1f      	ldr	r3, [pc, #124]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003442:	222e      	movs	r2, #46	@ 0x2e
 8003444:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003446:	4b1e      	ldr	r3, [pc, #120]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003448:	2240      	movs	r2, #64	@ 0x40
 800344a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344c:	4b1c      	ldr	r3, [pc, #112]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003452:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003454:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003458:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345a:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003460:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003462:	2200      	movs	r2, #0
 8003464:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003466:	4b16      	ldr	r3, [pc, #88]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003468:	2200      	movs	r2, #0
 800346a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 800346e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003472:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003474:	4b12      	ldr	r3, [pc, #72]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003476:	2200      	movs	r2, #0
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800347a:	4811      	ldr	r0, [pc, #68]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 800347c:	f000 fc74 	bl	8003d68 <HAL_DMA_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8003486:	f7fd fe71 	bl	800116c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0c      	ldr	r2, [pc, #48]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 800348e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003490:	4a0b      	ldr	r2, [pc, #44]	@ (80034c0 <HAL_UART_MspInit+0x190>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2027      	movs	r0, #39	@ 0x27
 800349c:	f000 fc2f 	bl	8003cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034a0:	2027      	movs	r0, #39	@ 0x27
 80034a2:	f000 fc46 	bl	8003d32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80034a6:	bf00      	nop
 80034a8:	37e8      	adds	r7, #232	@ 0xe8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40004800 	.word	0x40004800
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58020400 	.word	0x58020400
 80034bc:	58020c00 	.word	0x58020c00
 80034c0:	24000404 	.word	0x24000404
 80034c4:	40020040 	.word	0x40020040

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <NMI_Handler+0x4>

080034d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <HardFault_Handler+0x4>

080034d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <MemManage_Handler+0x4>

080034e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e4:	bf00      	nop
 80034e6:	e7fd      	b.n	80034e4 <BusFault_Handler+0x4>

080034e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <UsageFault_Handler+0x4>

080034f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_counter++;
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <SysTick_Handler+0x20>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	1c50      	adds	r0, r2, #1
 8003528:	f143 0100 	adc.w	r1, r3, #0
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <SysTick_Handler+0x20>)
 800352e:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003532:	f000 fac5 	bl	8003ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	24000860 	.word	0x24000860

08003540 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  TIM2->CR1 |= TIM_CR1_CEN;
 8003544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003554:	2004      	movs	r0, #4
 8003556:	f003 fc0c 	bl	8006d72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003564:	4802      	ldr	r0, [pc, #8]	@ (8003570 <DMA1_Stream0_IRQHandler+0x10>)
 8003566:	f001 ff25 	bl	80053b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2400019c 	.word	0x2400019c

08003574 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003578:	4802      	ldr	r0, [pc, #8]	@ (8003584 <DMA1_Stream1_IRQHandler+0x10>)
 800357a:	f001 ff1b 	bl	80053b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	24000214 	.word	0x24000214

08003588 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800358c:	4802      	ldr	r0, [pc, #8]	@ (8003598 <DMA1_Stream2_IRQHandler+0x10>)
 800358e:	f001 ff11 	bl	80053b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	24000404 	.word	0x24000404

0800359c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <TIM3_IRQHandler+0x10>)
 80035a2:	f007 fc46 	bl	800ae32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	24000324 	.word	0x24000324

080035b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_rx();
#endif
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <SPI1_IRQHandler+0x10>)
 80035b6:	f006 fd11 	bl	8009fdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2400008c 	.word	0x2400008c

080035c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035c8:	4802      	ldr	r0, [pc, #8]	@ (80035d4 <USART3_IRQHandler+0x10>)
 80035ca:	f008 ff75 	bl	800c4b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	24000370 	.word	0x24000370

080035d8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_tx();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80035dc:	4802      	ldr	r0, [pc, #8]	@ (80035e8 <SPI3_IRQHandler+0x10>)
 80035de:	f006 fcfd 	bl	8009fdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	24000114 	.word	0x24000114

080035ec <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 80035f4:	f7fd fdd2 	bl	800119c <sample_interrupt_routine>
}
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003608:	4a14      	ldr	r2, [pc, #80]	@ (800365c <_sbrk+0x5c>)
 800360a:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <_sbrk+0x60>)
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003614:	4b13      	ldr	r3, [pc, #76]	@ (8003664 <_sbrk+0x64>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <_sbrk+0x64>)
 800361e:	4a12      	ldr	r2, [pc, #72]	@ (8003668 <_sbrk+0x68>)
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003622:	4b10      	ldr	r3, [pc, #64]	@ (8003664 <_sbrk+0x64>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4413      	add	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	429a      	cmp	r2, r3
 800362e:	d207      	bcs.n	8003640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003630:	f00a feba 	bl	800e3a8 <__errno>
 8003634:	4603      	mov	r3, r0
 8003636:	220c      	movs	r2, #12
 8003638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800363e:	e009      	b.n	8003654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003640:	4b08      	ldr	r3, [pc, #32]	@ (8003664 <_sbrk+0x64>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <_sbrk+0x64>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <_sbrk+0x64>)
 8003650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	24050000 	.word	0x24050000
 8003660:	00000400 	.word	0x00000400
 8003664:	24000868 	.word	0x24000868
 8003668:	240009b8 	.word	0x240009b8

0800366c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003670:	4b32      	ldr	r3, [pc, #200]	@ (800373c <SystemInit+0xd0>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003676:	4a31      	ldr	r2, [pc, #196]	@ (800373c <SystemInit+0xd0>)
 8003678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800367c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003680:	4b2f      	ldr	r3, [pc, #188]	@ (8003740 <SystemInit+0xd4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	2b06      	cmp	r3, #6
 800368a:	d807      	bhi.n	800369c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800368c:	4b2c      	ldr	r3, [pc, #176]	@ (8003740 <SystemInit+0xd4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 030f 	bic.w	r3, r3, #15
 8003694:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <SystemInit+0xd4>)
 8003696:	f043 0307 	orr.w	r3, r3, #7
 800369a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800369c:	4b29      	ldr	r3, [pc, #164]	@ (8003744 <SystemInit+0xd8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <SystemInit+0xd8>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036a8:	4b26      	ldr	r3, [pc, #152]	@ (8003744 <SystemInit+0xd8>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036ae:	4b25      	ldr	r3, [pc, #148]	@ (8003744 <SystemInit+0xd8>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4924      	ldr	r1, [pc, #144]	@ (8003744 <SystemInit+0xd8>)
 80036b4:	4b24      	ldr	r3, [pc, #144]	@ (8003748 <SystemInit+0xdc>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036ba:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <SystemInit+0xd4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <SystemInit+0xd4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 030f 	bic.w	r3, r3, #15
 80036ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <SystemInit+0xd4>)
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80036d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <SystemInit+0xd8>)
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036dc:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <SystemInit+0xd8>)
 80036de:	2200      	movs	r2, #0
 80036e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80036e2:	4b18      	ldr	r3, [pc, #96]	@ (8003744 <SystemInit+0xd8>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80036e8:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <SystemInit+0xd8>)
 80036ea:	4a18      	ldr	r2, [pc, #96]	@ (800374c <SystemInit+0xe0>)
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <SystemInit+0xd8>)
 80036f0:	4a17      	ldr	r2, [pc, #92]	@ (8003750 <SystemInit+0xe4>)
 80036f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <SystemInit+0xd8>)
 80036f6:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <SystemInit+0xe8>)
 80036f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <SystemInit+0xd8>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <SystemInit+0xd8>)
 8003702:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <SystemInit+0xe8>)
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003706:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <SystemInit+0xd8>)
 8003708:	2200      	movs	r2, #0
 800370a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <SystemInit+0xd8>)
 800370e:	4a11      	ldr	r2, [pc, #68]	@ (8003754 <SystemInit+0xe8>)
 8003710:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <SystemInit+0xd8>)
 8003714:	2200      	movs	r2, #0
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <SystemInit+0xd8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <SystemInit+0xd8>)
 800371e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003722:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003724:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <SystemInit+0xd8>)
 8003726:	2200      	movs	r2, #0
 8003728:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800372a:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <SystemInit+0xec>)
 800372c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003730:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003732:	bf00      	nop
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00
 8003740:	52002000 	.word	0x52002000
 8003744:	58024400 	.word	0x58024400
 8003748:	eaf6ed7f 	.word	0xeaf6ed7f
 800374c:	02020200 	.word	0x02020200
 8003750:	01ff0000 	.word	0x01ff0000
 8003754:	01010280 	.word	0x01010280
 8003758:	52004000 	.word	0x52004000

0800375c <loop_escape>:
uint16_t samples[2 * NUM_SAMPLED_CHANNELS];

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
 8003760:	4b07      	ldr	r3, [pc, #28]	@ (8003780 <loop_escape+0x24>)
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <loop_escape+0x28>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	bf8c      	ite	hi
 8003770:	2301      	movhi	r3, #1
 8003772:	2300      	movls	r3, #0
 8003774:	b2db      	uxtb	r3, r3
#else
	return 0;
#endif
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	24000550 	.word	0x24000550
 8003784:	24000000 	.word	0x24000000

08003788 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
#ifdef OFFLINE_TRANSFER
	// Extract 2 16-bit samples interleaved (stream A and stream B) from each 32-bit word, and save to sample_memory.
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	e020      	b.n	80037d6 <write_data_to_memory+0x4e>
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3307      	adds	r3, #7
 8003798:	4a16      	ldr	r2, [pc, #88]	@ (80037f4 <write_data_to_memory+0x6c>)
 800379a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800379e:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <write_data_to_memory+0x70>)
 80037a0:	681a      	ldr	r2, [r3, #0]
				&sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS * 2) + i],
 80037a2:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <write_data_to_memory+0x74>)
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	00d9      	lsls	r1, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	440b      	add	r3, r1
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	18d4      	adds	r4, r2, r3
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <write_data_to_memory+0x70>)
 80037b4:	681a      	ldr	r2, [r3, #0]
				&sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS * 2) + i + NUM_SAMPLED_CHANNELS]);
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <write_data_to_memory+0x74>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	00d9      	lsls	r1, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	440b      	add	r3, r1
 80037c2:	3304      	adds	r3, #4
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80037c8:	461a      	mov	r2, r3
 80037ca:	4621      	mov	r1, r4
 80037cc:	f7fd fe67 	bl	800149e <extract_ddr_words>
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	dddb      	ble.n	8003794 <write_data_to_memory+0xc>
	}
	sample_counter++;
 80037dc:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <write_data_to_memory+0x74>)
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <write_data_to_memory+0x74>)
 80037e8:	801a      	strh	r2, [r3, #0]
//	uint16_t aux2_result_A, aux2_result_B;
//	extract_ddr_words(command_sequence_MISO[34], &aux0_result_A, &aux0_result_B); // Result of AUX SLOT 1 from this command sequence
//	extract_ddr_words(command_sequence_MISO[0],  &aux1_result_A, &aux1_result_B); // Result of AUX SLOT 2 from the previous command sequence
//	extract_ddr_words(command_sequence_MISO[1],  &aux2_result_A, &aux2_result_B); // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd90      	pop	{r4, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	240004c4 	.word	0x240004c4
 80037f8:	24000554 	.word	0x24000554
 80037fc:	24000550 	.word	0x24000550

08003800 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
				&samples[i],
				&samples[i + NUM_SAMPLED_CHANNELS]);
	}
	transmit_dma_to_usart(samples, NUM_SAMPLED_CHANNELS * 2 * sizeof(uint16_t));
#endif
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * 2 * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 800381a:	f7fd fecd 	bl	80015b8 <calculate_sample_rate>
 800381e:	eeb0 7b40 	vmov.f64	d7, d0
 8003822:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 8003826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800382a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800382e:	ee17 3a90 	vmov	r3, s15
 8003832:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8003834:	8a7b      	ldrh	r3, [r7, #18]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003848:	ee17 3a90 	vmov	r3, s15
 800384c:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 800384e:	8a7a      	ldrh	r2, [r7, #18]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	fbb3 f1f2 	udiv	r1, r3, r2
 8003856:	fb01 f202 	mul.w	r2, r1, r2
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e01a      	b.n	800389a <transmit_data_offline+0x8a>
		uart_ready = 0;
 8003864:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <transmit_data_offline+0xd0>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 800386a:	4b1e      	ldr	r3, [pc, #120]	@ (80038e4 <transmit_data_offline+0xd4>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	8a7b      	ldrh	r3, [r7, #18]
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	441a      	add	r2, r3
 800387a:	8a7b      	ldrh	r3, [r7, #18]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f000 f868 	bl	8003958 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003888:	bf00      	nop
 800388a:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <transmit_data_offline+0xd0>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d1fa      	bne.n	800388a <transmit_data_offline+0x7a>
	for (int i = 0; i < num_chunks; i++) {
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3301      	adds	r3, #1
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d8e0      	bhi.n	8003864 <transmit_data_offline+0x54>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <transmit_data_offline+0xc8>
		uart_ready = 0;
 80038a8:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <transmit_data_offline+0xd0>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 80038ae:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <transmit_data_offline+0xd4>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	8a7b      	ldrh	r3, [r7, #18]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	441a      	add	r2, r3
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 f846 	bl	8003958 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 80038cc:	bf00      	nop
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <transmit_data_offline+0xd0>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d1fa      	bne.n	80038ce <transmit_data_offline+0xbe>
	}
}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	24000008 	.word	0x24000008
 80038e4:	24000554 	.word	0x24000554

080038e8 <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd fdfb 	bl	80014ec <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003902:	2000      	movs	r0, #0
 8003904:	f7fd feae 	bl	8001664 <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence(channel_numbers);
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}

0800390c <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8003914:	2380      	movs	r3, #128	@ 0x80
 8003916:	2200      	movs	r2, #0
 8003918:	490c      	ldr	r1, [pc, #48]	@ (800394c <configure_aux_commands+0x40>)
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fedc 	bl	80016d8 <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003920:	2028      	movs	r0, #40	@ 0x28
 8003922:	f7ff fa8c 	bl	8002e3e <read_command>
 8003926:	4603      	mov	r3, r0
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	4909      	ldr	r1, [pc, #36]	@ (8003950 <configure_aux_commands+0x44>)
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe f832 	bl	8001996 <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 8003932:	2029      	movs	r0, #41	@ 0x29
 8003934:	f7ff fa83 	bl	8002e3e <read_command>
 8003938:	4603      	mov	r3, r0
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	4905      	ldr	r1, [pc, #20]	@ (8003954 <configure_aux_commands+0x48>)
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fe f829 	bl	8001996 <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	24000558 	.word	0x24000558
 8003950:	24000658 	.word	0x24000658
 8003954:	24000758 	.word	0x24000758

08003958 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	461a      	mov	r2, r3
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4806      	ldr	r0, [pc, #24]	@ (8003984 <transmit_dma_to_usart+0x2c>)
 800396c:	f008 fd24 	bl	800c3b8 <HAL_UART_Transmit_DMA>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003976:	f7fd fbf9 	bl	800116c <Error_Handler>
	LL_DMA_EnableStream(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	24000370 	.word	0x24000370

08003988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800398c:	f7ff fe6e 	bl	800366c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003990:	480c      	ldr	r0, [pc, #48]	@ (80039c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003992:	490d      	ldr	r1, [pc, #52]	@ (80039c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003994:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003998:	e002      	b.n	80039a0 <LoopCopyDataInit>

0800399a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800399c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800399e:	3304      	adds	r3, #4

080039a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a4:	d3f9      	bcc.n	800399a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039a6:	4a0a      	ldr	r2, [pc, #40]	@ (80039d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039a8:	4c0a      	ldr	r4, [pc, #40]	@ (80039d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039ac:	e001      	b.n	80039b2 <LoopFillZerobss>

080039ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b0:	3204      	adds	r2, #4

080039b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b4:	d3fb      	bcc.n	80039ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039b6:	f00a fcfd 	bl	800e3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ba:	f7fc fe53 	bl	8000664 <main>
  bx  lr
 80039be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80039c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80039c8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80039cc:	08010fc8 	.word	0x08010fc8
  ldr r2, =_sbss
 80039d0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80039d4:	240009b8 	.word	0x240009b8

080039d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d8:	e7fe      	b.n	80039d8 <ADC3_IRQHandler>
	...

080039dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e2:	2003      	movs	r0, #3
 80039e4:	f000 f980 	bl	8003ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039e8:	f003 ffb2 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <HAL_Init+0x68>)
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	4913      	ldr	r1, [pc, #76]	@ (8003a48 <HAL_Init+0x6c>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_Init+0x68>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a48 <HAL_Init+0x6c>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a4c <HAL_Init+0x70>)
 8003a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a20:	4a0b      	ldr	r2, [pc, #44]	@ (8003a50 <HAL_Init+0x74>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a26:	2000      	movs	r0, #0
 8003a28:	f000 f814 	bl	8003a54 <HAL_InitTick>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e002      	b.n	8003a3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a36:	f7ff fa19 	bl	8002e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58024400 	.word	0x58024400
 8003a48:	0800ee28 	.word	0x0800ee28
 8003a4c:	24000010 	.word	0x24000010
 8003a50:	2400000c 	.word	0x2400000c

08003a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a5c:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <HAL_InitTick+0x60>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e021      	b.n	8003aac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a68:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <HAL_InitTick+0x64>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_InitTick+0x60>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f965 	bl	8003d4e <HAL_SYSTICK_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00e      	b.n	8003aac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d80a      	bhi.n	8003aaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a94:	2200      	movs	r2, #0
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a9c:	f000 f92f 	bl	8003cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa0:	4a06      	ldr	r2, [pc, #24]	@ (8003abc <HAL_InitTick+0x68>)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	24000018 	.word	0x24000018
 8003ab8:	2400000c 	.word	0x2400000c
 8003abc:	24000014 	.word	0x24000014

08003ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_IncTick+0x20>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_IncTick+0x24>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	4a04      	ldr	r2, [pc, #16]	@ (8003ae4 <HAL_IncTick+0x24>)
 8003ad2:	6013      	str	r3, [r2, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	24000018 	.word	0x24000018
 8003ae4:	2400086c 	.word	0x2400086c

08003ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return uwTick;
 8003aec:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <HAL_GetTick+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	2400086c 	.word	0x2400086c

08003b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7ff ffee 	bl	8003ae8 <HAL_GetTick>
 8003b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b18:	d005      	beq.n	8003b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_Delay+0x44>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b26:	bf00      	nop
 8003b28:	f7ff ffde 	bl	8003ae8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d8f7      	bhi.n	8003b28 <HAL_Delay+0x28>
  {
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	24000018 	.word	0x24000018

08003b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <__NVIC_SetPriorityGrouping+0x40>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b64:	4013      	ands	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b76:	4a04      	ldr	r2, [pc, #16]	@ (8003b88 <__NVIC_SetPriorityGrouping+0x40>)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	60d3      	str	r3, [r2, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000ed00 	.word	0xe000ed00
 8003b8c:	05fa0000 	.word	0x05fa0000

08003b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b94:	4b04      	ldr	r3, [pc, #16]	@ (8003ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 0307 	and.w	r3, r3, #7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	db0b      	blt.n	8003bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4907      	ldr	r1, [pc, #28]	@ (8003be4 <__NVIC_EnableIRQ+0x38>)
 8003bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2001      	movs	r0, #1
 8003bce:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	@ (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	@ (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf28      	it	cs
 8003c5a:	2304      	movcs	r3, #4
 8003c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d902      	bls.n	8003c6c <NVIC_EncodePriority+0x30>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <NVIC_EncodePriority+0x32>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	401a      	ands	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43d9      	mvns	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	4313      	orrs	r3, r2
         );
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	@ 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb4:	d301      	bcc.n	8003cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00f      	b.n	8003cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <SysTick_Config+0x40>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cc2:	210f      	movs	r1, #15
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cc8:	f7ff ff8e 	bl	8003be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <SysTick_Config+0x40>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd2:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <SysTick_Config+0x40>)
 8003cd4:	2207      	movs	r2, #7
 8003cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	e000e010 	.word	0xe000e010

08003ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff29 	bl	8003b48 <__NVIC_SetPriorityGrouping>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d0c:	f7ff ff40 	bl	8003b90 <__NVIC_GetPriorityGrouping>
 8003d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	6978      	ldr	r0, [r7, #20]
 8003d18:	f7ff ff90 	bl	8003c3c <NVIC_EncodePriority>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff5f 	bl	8003be8 <__NVIC_SetPriority>
}
 8003d2a:	bf00      	nop
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff33 	bl	8003bac <__NVIC_EnableIRQ>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff ffa4 	bl	8003ca4 <SysTick_Config>
 8003d5c:	4603      	mov	r3, r0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff feba 	bl	8003ae8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e312      	b.n	80043a6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a66      	ldr	r2, [pc, #408]	@ (8003f20 <HAL_DMA_Init+0x1b8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04a      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a65      	ldr	r2, [pc, #404]	@ (8003f24 <HAL_DMA_Init+0x1bc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d045      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a63      	ldr	r2, [pc, #396]	@ (8003f28 <HAL_DMA_Init+0x1c0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a62      	ldr	r2, [pc, #392]	@ (8003f2c <HAL_DMA_Init+0x1c4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d03b      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a60      	ldr	r2, [pc, #384]	@ (8003f30 <HAL_DMA_Init+0x1c8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d036      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f34 <HAL_DMA_Init+0x1cc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d031      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f38 <HAL_DMA_Init+0x1d0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02c      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a5c      	ldr	r2, [pc, #368]	@ (8003f3c <HAL_DMA_Init+0x1d4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d027      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f40 <HAL_DMA_Init+0x1d8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d022      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a59      	ldr	r2, [pc, #356]	@ (8003f44 <HAL_DMA_Init+0x1dc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01d      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a57      	ldr	r2, [pc, #348]	@ (8003f48 <HAL_DMA_Init+0x1e0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a56      	ldr	r2, [pc, #344]	@ (8003f4c <HAL_DMA_Init+0x1e4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a54      	ldr	r2, [pc, #336]	@ (8003f50 <HAL_DMA_Init+0x1e8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a53      	ldr	r2, [pc, #332]	@ (8003f54 <HAL_DMA_Init+0x1ec>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a51      	ldr	r2, [pc, #324]	@ (8003f58 <HAL_DMA_Init+0x1f0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_DMA_Init+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a50      	ldr	r2, [pc, #320]	@ (8003f5c <HAL_DMA_Init+0x1f4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA_Init+0xbc>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_DMA_Init+0xbe>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 813c 	beq.w	80040a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a37      	ldr	r2, [pc, #220]	@ (8003f20 <HAL_DMA_Init+0x1b8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d04a      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a36      	ldr	r2, [pc, #216]	@ (8003f24 <HAL_DMA_Init+0x1bc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d045      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a34      	ldr	r2, [pc, #208]	@ (8003f28 <HAL_DMA_Init+0x1c0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d040      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a33      	ldr	r2, [pc, #204]	@ (8003f2c <HAL_DMA_Init+0x1c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d03b      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a31      	ldr	r2, [pc, #196]	@ (8003f30 <HAL_DMA_Init+0x1c8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d036      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a30      	ldr	r2, [pc, #192]	@ (8003f34 <HAL_DMA_Init+0x1cc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d031      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <HAL_DMA_Init+0x1d0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_DMA_Init+0x1d4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d027      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	@ (8003f40 <HAL_DMA_Init+0x1d8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f44 <HAL_DMA_Init+0x1dc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d01d      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	@ (8003f48 <HAL_DMA_Init+0x1e0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a27      	ldr	r2, [pc, #156]	@ (8003f4c <HAL_DMA_Init+0x1e4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <HAL_DMA_Init+0x1e8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a24      	ldr	r2, [pc, #144]	@ (8003f54 <HAL_DMA_Init+0x1ec>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	@ (8003f58 <HAL_DMA_Init+0x1f0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_Init+0x174>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <HAL_DMA_Init+0x1f4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <HAL_DMA_Init+0x186>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e007      	b.n	8003efe <HAL_DMA_Init+0x196>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003efe:	e02f      	b.n	8003f60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f00:	f7ff fdf2 	bl	8003ae8 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d928      	bls.n	8003f60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2203      	movs	r2, #3
 8003f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e242      	b.n	80043a6 <HAL_DMA_Init+0x63e>
 8003f20:	40020010 	.word	0x40020010
 8003f24:	40020028 	.word	0x40020028
 8003f28:	40020040 	.word	0x40020040
 8003f2c:	40020058 	.word	0x40020058
 8003f30:	40020070 	.word	0x40020070
 8003f34:	40020088 	.word	0x40020088
 8003f38:	400200a0 	.word	0x400200a0
 8003f3c:	400200b8 	.word	0x400200b8
 8003f40:	40020410 	.word	0x40020410
 8003f44:	40020428 	.word	0x40020428
 8003f48:	40020440 	.word	0x40020440
 8003f4c:	40020458 	.word	0x40020458
 8003f50:	40020470 	.word	0x40020470
 8003f54:	40020488 	.word	0x40020488
 8003f58:	400204a0 	.word	0x400204a0
 8003f5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1c8      	bne.n	8003f00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4b83      	ldr	r3, [pc, #524]	@ (8004188 <HAL_DMA_Init+0x420>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d107      	bne.n	8003fc4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b28      	cmp	r3, #40	@ 0x28
 8003fca:	d903      	bls.n	8003fd4 <HAL_DMA_Init+0x26c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fd2:	d91f      	bls.n	8004014 <HAL_DMA_Init+0x2ac>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fda:	d903      	bls.n	8003fe4 <HAL_DMA_Init+0x27c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b42      	cmp	r3, #66	@ 0x42
 8003fe2:	d917      	bls.n	8004014 <HAL_DMA_Init+0x2ac>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b46      	cmp	r3, #70	@ 0x46
 8003fea:	d903      	bls.n	8003ff4 <HAL_DMA_Init+0x28c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b48      	cmp	r3, #72	@ 0x48
 8003ff2:	d90f      	bls.n	8004014 <HAL_DMA_Init+0x2ac>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b4e      	cmp	r3, #78	@ 0x4e
 8003ffa:	d903      	bls.n	8004004 <HAL_DMA_Init+0x29c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b52      	cmp	r3, #82	@ 0x52
 8004002:	d907      	bls.n	8004014 <HAL_DMA_Init+0x2ac>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b73      	cmp	r3, #115	@ 0x73
 800400a:	d905      	bls.n	8004018 <HAL_DMA_Init+0x2b0>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b77      	cmp	r3, #119	@ 0x77
 8004012:	d801      	bhi.n	8004018 <HAL_DMA_Init+0x2b0>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_DMA_Init+0x2b2>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004024:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0307 	bic.w	r3, r3, #7
 800403c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	2b04      	cmp	r3, #4
 800404e:	d117      	bne.n	8004080 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00e      	beq.n	8004080 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f002 fb3a 	bl	80066dc <DMA_CheckFifoParam>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2240      	movs	r2, #64	@ 0x40
 8004072:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e192      	b.n	80043a6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f002 fa75 	bl	8006578 <DMA_CalcBaseAndBitshift>
 800408e:	4603      	mov	r3, r0
 8004090:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	223f      	movs	r2, #63	@ 0x3f
 800409c:	409a      	lsls	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	e0c8      	b.n	8004236 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a38      	ldr	r2, [pc, #224]	@ (800418c <HAL_DMA_Init+0x424>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a37      	ldr	r2, [pc, #220]	@ (8004190 <HAL_DMA_Init+0x428>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a35      	ldr	r2, [pc, #212]	@ (8004194 <HAL_DMA_Init+0x42c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a34      	ldr	r2, [pc, #208]	@ (8004198 <HAL_DMA_Init+0x430>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a32      	ldr	r2, [pc, #200]	@ (800419c <HAL_DMA_Init+0x434>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a31      	ldr	r2, [pc, #196]	@ (80041a0 <HAL_DMA_Init+0x438>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2f      	ldr	r2, [pc, #188]	@ (80041a4 <HAL_DMA_Init+0x43c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_Init+0x38c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2e      	ldr	r2, [pc, #184]	@ (80041a8 <HAL_DMA_Init+0x440>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_Init+0x390>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_DMA_Init+0x392>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8092 	beq.w	8004224 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a21      	ldr	r2, [pc, #132]	@ (800418c <HAL_DMA_Init+0x424>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d021      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a20      	ldr	r2, [pc, #128]	@ (8004190 <HAL_DMA_Init+0x428>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01c      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1e      	ldr	r2, [pc, #120]	@ (8004194 <HAL_DMA_Init+0x42c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d017      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <HAL_DMA_Init+0x430>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d012      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <HAL_DMA_Init+0x434>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00d      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1a      	ldr	r2, [pc, #104]	@ (80041a0 <HAL_DMA_Init+0x438>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d008      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <HAL_DMA_Init+0x43c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d003      	beq.n	800414e <HAL_DMA_Init+0x3e6>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <HAL_DMA_Init+0x440>)
 800414c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <HAL_DMA_Init+0x444>)
 800416a:	4013      	ands	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b40      	cmp	r3, #64	@ 0x40
 8004174:	d01c      	beq.n	80041b0 <HAL_DMA_Init+0x448>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b80      	cmp	r3, #128	@ 0x80
 800417c:	d102      	bne.n	8004184 <HAL_DMA_Init+0x41c>
 800417e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004182:	e016      	b.n	80041b2 <HAL_DMA_Init+0x44a>
 8004184:	2300      	movs	r3, #0
 8004186:	e014      	b.n	80041b2 <HAL_DMA_Init+0x44a>
 8004188:	fe10803f 	.word	0xfe10803f
 800418c:	58025408 	.word	0x58025408
 8004190:	5802541c 	.word	0x5802541c
 8004194:	58025430 	.word	0x58025430
 8004198:	58025444 	.word	0x58025444
 800419c:	58025458 	.word	0x58025458
 80041a0:	5802546c 	.word	0x5802546c
 80041a4:	58025480 	.word	0x58025480
 80041a8:	58025494 	.word	0x58025494
 80041ac:	fffe000f 	.word	0xfffe000f
 80041b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	4b6e      	ldr	r3, [pc, #440]	@ (80043b0 <HAL_DMA_Init+0x648>)
 80041f8:	4413      	add	r3, r2
 80041fa:	4a6e      	ldr	r2, [pc, #440]	@ (80043b4 <HAL_DMA_Init+0x64c>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	009a      	lsls	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f002 f9b5 	bl	8006578 <DMA_CalcBaseAndBitshift>
 800420e:	4603      	mov	r3, r0
 8004210:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2201      	movs	r2, #1
 800421c:	409a      	lsls	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	e008      	b.n	8004236 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2240      	movs	r2, #64	@ 0x40
 8004228:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2203      	movs	r2, #3
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0b7      	b.n	80043a6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5f      	ldr	r2, [pc, #380]	@ (80043b8 <HAL_DMA_Init+0x650>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d072      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a5d      	ldr	r2, [pc, #372]	@ (80043bc <HAL_DMA_Init+0x654>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d06d      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5c      	ldr	r2, [pc, #368]	@ (80043c0 <HAL_DMA_Init+0x658>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d068      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5a      	ldr	r2, [pc, #360]	@ (80043c4 <HAL_DMA_Init+0x65c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d063      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a59      	ldr	r2, [pc, #356]	@ (80043c8 <HAL_DMA_Init+0x660>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d05e      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a57      	ldr	r2, [pc, #348]	@ (80043cc <HAL_DMA_Init+0x664>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d059      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a56      	ldr	r2, [pc, #344]	@ (80043d0 <HAL_DMA_Init+0x668>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d054      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a54      	ldr	r2, [pc, #336]	@ (80043d4 <HAL_DMA_Init+0x66c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04f      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a53      	ldr	r2, [pc, #332]	@ (80043d8 <HAL_DMA_Init+0x670>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d04a      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a51      	ldr	r2, [pc, #324]	@ (80043dc <HAL_DMA_Init+0x674>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d045      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a50      	ldr	r2, [pc, #320]	@ (80043e0 <HAL_DMA_Init+0x678>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d040      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a4e      	ldr	r2, [pc, #312]	@ (80043e4 <HAL_DMA_Init+0x67c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03b      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a4d      	ldr	r2, [pc, #308]	@ (80043e8 <HAL_DMA_Init+0x680>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d036      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	@ (80043ec <HAL_DMA_Init+0x684>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a4a      	ldr	r2, [pc, #296]	@ (80043f0 <HAL_DMA_Init+0x688>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d02c      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a48      	ldr	r2, [pc, #288]	@ (80043f4 <HAL_DMA_Init+0x68c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d027      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a47      	ldr	r2, [pc, #284]	@ (80043f8 <HAL_DMA_Init+0x690>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a45      	ldr	r2, [pc, #276]	@ (80043fc <HAL_DMA_Init+0x694>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a44      	ldr	r2, [pc, #272]	@ (8004400 <HAL_DMA_Init+0x698>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a42      	ldr	r2, [pc, #264]	@ (8004404 <HAL_DMA_Init+0x69c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a41      	ldr	r2, [pc, #260]	@ (8004408 <HAL_DMA_Init+0x6a0>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3f      	ldr	r2, [pc, #252]	@ (800440c <HAL_DMA_Init+0x6a4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3e      	ldr	r2, [pc, #248]	@ (8004410 <HAL_DMA_Init+0x6a8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_DMA_Init+0x5be>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a3c      	ldr	r2, [pc, #240]	@ (8004414 <HAL_DMA_Init+0x6ac>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_DMA_Init+0x5c2>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_DMA_Init+0x5c4>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d032      	beq.n	8004396 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f002 fa4f 	bl	80067d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b80      	cmp	r3, #128	@ 0x80
 800433c:	d102      	bne.n	8004344 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004358:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_DMA_Init+0x61c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b08      	cmp	r3, #8
 8004368:	d80c      	bhi.n	8004384 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f002 facc 	bl	8006908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	e008      	b.n	8004396 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	a7fdabf8 	.word	0xa7fdabf8
 80043b4:	cccccccd 	.word	0xcccccccd
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8
 80043f8:	58025408 	.word	0x58025408
 80043fc:	5802541c 	.word	0x5802541c
 8004400:	58025430 	.word	0x58025430
 8004404:	58025444 	.word	0x58025444
 8004408:	58025458 	.word	0x58025458
 800440c:	5802546c 	.word	0x5802546c
 8004410:	58025480 	.word	0x58025480
 8004414:	58025494 	.word	0x58025494

08004418 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e226      	b.n	8004882 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_DMA_Start_IT+0x2a>
 800443e:	2302      	movs	r3, #2
 8004440:	e21f      	b.n	8004882 <HAL_DMA_Start_IT+0x46a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	f040 820a 	bne.w	800486c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a68      	ldr	r2, [pc, #416]	@ (800460c <HAL_DMA_Start_IT+0x1f4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d04a      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a66      	ldr	r2, [pc, #408]	@ (8004610 <HAL_DMA_Start_IT+0x1f8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d045      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a65      	ldr	r2, [pc, #404]	@ (8004614 <HAL_DMA_Start_IT+0x1fc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d040      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a63      	ldr	r2, [pc, #396]	@ (8004618 <HAL_DMA_Start_IT+0x200>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d03b      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a62      	ldr	r2, [pc, #392]	@ (800461c <HAL_DMA_Start_IT+0x204>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d036      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a60      	ldr	r2, [pc, #384]	@ (8004620 <HAL_DMA_Start_IT+0x208>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d031      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a5f      	ldr	r2, [pc, #380]	@ (8004624 <HAL_DMA_Start_IT+0x20c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d02c      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004628 <HAL_DMA_Start_IT+0x210>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d027      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5c      	ldr	r2, [pc, #368]	@ (800462c <HAL_DMA_Start_IT+0x214>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004630 <HAL_DMA_Start_IT+0x218>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01d      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a59      	ldr	r2, [pc, #356]	@ (8004634 <HAL_DMA_Start_IT+0x21c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d018      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a57      	ldr	r2, [pc, #348]	@ (8004638 <HAL_DMA_Start_IT+0x220>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a56      	ldr	r2, [pc, #344]	@ (800463c <HAL_DMA_Start_IT+0x224>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a54      	ldr	r2, [pc, #336]	@ (8004640 <HAL_DMA_Start_IT+0x228>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a53      	ldr	r2, [pc, #332]	@ (8004644 <HAL_DMA_Start_IT+0x22c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_DMA_Start_IT+0xee>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a51      	ldr	r2, [pc, #324]	@ (8004648 <HAL_DMA_Start_IT+0x230>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <HAL_DMA_Start_IT+0x100>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e007      	b.n	8004528 <HAL_DMA_Start_IT+0x110>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 fe76 	bl	8006220 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a34      	ldr	r2, [pc, #208]	@ (800460c <HAL_DMA_Start_IT+0x1f4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04a      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a33      	ldr	r2, [pc, #204]	@ (8004610 <HAL_DMA_Start_IT+0x1f8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d045      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a31      	ldr	r2, [pc, #196]	@ (8004614 <HAL_DMA_Start_IT+0x1fc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d040      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a30      	ldr	r2, [pc, #192]	@ (8004618 <HAL_DMA_Start_IT+0x200>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d03b      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a2e      	ldr	r2, [pc, #184]	@ (800461c <HAL_DMA_Start_IT+0x204>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d036      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a2d      	ldr	r2, [pc, #180]	@ (8004620 <HAL_DMA_Start_IT+0x208>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2b      	ldr	r2, [pc, #172]	@ (8004624 <HAL_DMA_Start_IT+0x20c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a2a      	ldr	r2, [pc, #168]	@ (8004628 <HAL_DMA_Start_IT+0x210>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d027      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a28      	ldr	r2, [pc, #160]	@ (800462c <HAL_DMA_Start_IT+0x214>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a27      	ldr	r2, [pc, #156]	@ (8004630 <HAL_DMA_Start_IT+0x218>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a25      	ldr	r2, [pc, #148]	@ (8004634 <HAL_DMA_Start_IT+0x21c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a24      	ldr	r2, [pc, #144]	@ (8004638 <HAL_DMA_Start_IT+0x220>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a22      	ldr	r2, [pc, #136]	@ (800463c <HAL_DMA_Start_IT+0x224>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a21      	ldr	r2, [pc, #132]	@ (8004640 <HAL_DMA_Start_IT+0x228>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004644 <HAL_DMA_Start_IT+0x22c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_Start_IT+0x1bc>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004648 <HAL_DMA_Start_IT+0x230>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_DMA_Start_IT+0x1c0>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_DMA_Start_IT+0x1c2>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d036      	beq.n	800464c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 021e 	bic.w	r2, r3, #30
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0216 	orr.w	r2, r2, #22
 80045f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d03e      	beq.n	8004678 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e035      	b.n	8004678 <HAL_DMA_Start_IT+0x260>
 800460c:	40020010 	.word	0x40020010
 8004610:	40020028 	.word	0x40020028
 8004614:	40020040 	.word	0x40020040
 8004618:	40020058 	.word	0x40020058
 800461c:	40020070 	.word	0x40020070
 8004620:	40020088 	.word	0x40020088
 8004624:	400200a0 	.word	0x400200a0
 8004628:	400200b8 	.word	0x400200b8
 800462c:	40020410 	.word	0x40020410
 8004630:	40020428 	.word	0x40020428
 8004634:	40020440 	.word	0x40020440
 8004638:	40020458 	.word	0x40020458
 800463c:	40020470 	.word	0x40020470
 8004640:	40020488 	.word	0x40020488
 8004644:	400204a0 	.word	0x400204a0
 8004648:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 020e 	bic.w	r2, r3, #14
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 020a 	orr.w	r2, r2, #10
 800465e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0204 	orr.w	r2, r2, #4
 8004676:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a83      	ldr	r2, [pc, #524]	@ (800488c <HAL_DMA_Start_IT+0x474>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d072      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a82      	ldr	r2, [pc, #520]	@ (8004890 <HAL_DMA_Start_IT+0x478>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d06d      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a80      	ldr	r2, [pc, #512]	@ (8004894 <HAL_DMA_Start_IT+0x47c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d068      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7f      	ldr	r2, [pc, #508]	@ (8004898 <HAL_DMA_Start_IT+0x480>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d063      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a7d      	ldr	r2, [pc, #500]	@ (800489c <HAL_DMA_Start_IT+0x484>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d05e      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7c      	ldr	r2, [pc, #496]	@ (80048a0 <HAL_DMA_Start_IT+0x488>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d059      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a7a      	ldr	r2, [pc, #488]	@ (80048a4 <HAL_DMA_Start_IT+0x48c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d054      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a79      	ldr	r2, [pc, #484]	@ (80048a8 <HAL_DMA_Start_IT+0x490>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d04f      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a77      	ldr	r2, [pc, #476]	@ (80048ac <HAL_DMA_Start_IT+0x494>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d04a      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a76      	ldr	r2, [pc, #472]	@ (80048b0 <HAL_DMA_Start_IT+0x498>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d045      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a74      	ldr	r2, [pc, #464]	@ (80048b4 <HAL_DMA_Start_IT+0x49c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d040      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a73      	ldr	r2, [pc, #460]	@ (80048b8 <HAL_DMA_Start_IT+0x4a0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d03b      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a71      	ldr	r2, [pc, #452]	@ (80048bc <HAL_DMA_Start_IT+0x4a4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d036      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a70      	ldr	r2, [pc, #448]	@ (80048c0 <HAL_DMA_Start_IT+0x4a8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d031      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6e      	ldr	r2, [pc, #440]	@ (80048c4 <HAL_DMA_Start_IT+0x4ac>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d02c      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6d      	ldr	r2, [pc, #436]	@ (80048c8 <HAL_DMA_Start_IT+0x4b0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d027      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a6b      	ldr	r2, [pc, #428]	@ (80048cc <HAL_DMA_Start_IT+0x4b4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d022      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6a      	ldr	r2, [pc, #424]	@ (80048d0 <HAL_DMA_Start_IT+0x4b8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d01d      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a68      	ldr	r2, [pc, #416]	@ (80048d4 <HAL_DMA_Start_IT+0x4bc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a67      	ldr	r2, [pc, #412]	@ (80048d8 <HAL_DMA_Start_IT+0x4c0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a65      	ldr	r2, [pc, #404]	@ (80048dc <HAL_DMA_Start_IT+0x4c4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a64      	ldr	r2, [pc, #400]	@ (80048e0 <HAL_DMA_Start_IT+0x4c8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a62      	ldr	r2, [pc, #392]	@ (80048e4 <HAL_DMA_Start_IT+0x4cc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_DMA_Start_IT+0x350>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a61      	ldr	r2, [pc, #388]	@ (80048e8 <HAL_DMA_Start_IT+0x4d0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_DMA_Start_IT+0x354>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_DMA_Start_IT+0x356>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01a      	beq.n	80047a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800478a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a37      	ldr	r2, [pc, #220]	@ (800488c <HAL_DMA_Start_IT+0x474>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d04a      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a36      	ldr	r2, [pc, #216]	@ (8004890 <HAL_DMA_Start_IT+0x478>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d045      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a34      	ldr	r2, [pc, #208]	@ (8004894 <HAL_DMA_Start_IT+0x47c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d040      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <HAL_DMA_Start_IT+0x480>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d03b      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a31      	ldr	r2, [pc, #196]	@ (800489c <HAL_DMA_Start_IT+0x484>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d036      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a30      	ldr	r2, [pc, #192]	@ (80048a0 <HAL_DMA_Start_IT+0x488>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d031      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	@ (80048a4 <HAL_DMA_Start_IT+0x48c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02c      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	@ (80048a8 <HAL_DMA_Start_IT+0x490>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d027      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2b      	ldr	r2, [pc, #172]	@ (80048ac <HAL_DMA_Start_IT+0x494>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d022      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2a      	ldr	r2, [pc, #168]	@ (80048b0 <HAL_DMA_Start_IT+0x498>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d01d      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a28      	ldr	r2, [pc, #160]	@ (80048b4 <HAL_DMA_Start_IT+0x49c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a27      	ldr	r2, [pc, #156]	@ (80048b8 <HAL_DMA_Start_IT+0x4a0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <HAL_DMA_Start_IT+0x4a4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a24      	ldr	r2, [pc, #144]	@ (80048c0 <HAL_DMA_Start_IT+0x4a8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	@ (80048c4 <HAL_DMA_Start_IT+0x4ac>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_DMA_Start_IT+0x430>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	@ (80048c8 <HAL_DMA_Start_IT+0x4b0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <HAL_DMA_Start_IT+0x442>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e012      	b.n	8004880 <HAL_DMA_Start_IT+0x468>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e009      	b.n	8004880 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40020010 	.word	0x40020010
 8004890:	40020028 	.word	0x40020028
 8004894:	40020040 	.word	0x40020040
 8004898:	40020058 	.word	0x40020058
 800489c:	40020070 	.word	0x40020070
 80048a0:	40020088 	.word	0x40020088
 80048a4:	400200a0 	.word	0x400200a0
 80048a8:	400200b8 	.word	0x400200b8
 80048ac:	40020410 	.word	0x40020410
 80048b0:	40020428 	.word	0x40020428
 80048b4:	40020440 	.word	0x40020440
 80048b8:	40020458 	.word	0x40020458
 80048bc:	40020470 	.word	0x40020470
 80048c0:	40020488 	.word	0x40020488
 80048c4:	400204a0 	.word	0x400204a0
 80048c8:	400204b8 	.word	0x400204b8
 80048cc:	58025408 	.word	0x58025408
 80048d0:	5802541c 	.word	0x5802541c
 80048d4:	58025430 	.word	0x58025430
 80048d8:	58025444 	.word	0x58025444
 80048dc:	58025458 	.word	0x58025458
 80048e0:	5802546c 	.word	0x5802546c
 80048e4:	58025480 	.word	0x58025480
 80048e8:	58025494 	.word	0x58025494

080048ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048f4:	f7ff f8f8 	bl	8003ae8 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e2dc      	b.n	8004ebe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d008      	beq.n	8004922 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e2cd      	b.n	8004ebe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a76      	ldr	r2, [pc, #472]	@ (8004b00 <HAL_DMA_Abort+0x214>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d04a      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a74      	ldr	r2, [pc, #464]	@ (8004b04 <HAL_DMA_Abort+0x218>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d045      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a73      	ldr	r2, [pc, #460]	@ (8004b08 <HAL_DMA_Abort+0x21c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d040      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a71      	ldr	r2, [pc, #452]	@ (8004b0c <HAL_DMA_Abort+0x220>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d03b      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a70      	ldr	r2, [pc, #448]	@ (8004b10 <HAL_DMA_Abort+0x224>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d036      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	@ (8004b14 <HAL_DMA_Abort+0x228>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d031      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6d      	ldr	r2, [pc, #436]	@ (8004b18 <HAL_DMA_Abort+0x22c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d02c      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6b      	ldr	r2, [pc, #428]	@ (8004b1c <HAL_DMA_Abort+0x230>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d027      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6a      	ldr	r2, [pc, #424]	@ (8004b20 <HAL_DMA_Abort+0x234>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d022      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a68      	ldr	r2, [pc, #416]	@ (8004b24 <HAL_DMA_Abort+0x238>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01d      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a67      	ldr	r2, [pc, #412]	@ (8004b28 <HAL_DMA_Abort+0x23c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d018      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a65      	ldr	r2, [pc, #404]	@ (8004b2c <HAL_DMA_Abort+0x240>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a64      	ldr	r2, [pc, #400]	@ (8004b30 <HAL_DMA_Abort+0x244>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a62      	ldr	r2, [pc, #392]	@ (8004b34 <HAL_DMA_Abort+0x248>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a61      	ldr	r2, [pc, #388]	@ (8004b38 <HAL_DMA_Abort+0x24c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d004      	beq.n	80049c2 <HAL_DMA_Abort+0xd6>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a5f      	ldr	r2, [pc, #380]	@ (8004b3c <HAL_DMA_Abort+0x250>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_DMA_Abort+0xda>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HAL_DMA_Abort+0xdc>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 021e 	bic.w	r2, r2, #30
 80049da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e00a      	b.n	8004a0a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 020e 	bic.w	r2, r2, #14
 8004a02:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b00 <HAL_DMA_Abort+0x214>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d072      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3a      	ldr	r2, [pc, #232]	@ (8004b04 <HAL_DMA_Abort+0x218>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d06d      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a39      	ldr	r2, [pc, #228]	@ (8004b08 <HAL_DMA_Abort+0x21c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d068      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a37      	ldr	r2, [pc, #220]	@ (8004b0c <HAL_DMA_Abort+0x220>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d063      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a36      	ldr	r2, [pc, #216]	@ (8004b10 <HAL_DMA_Abort+0x224>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d05e      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a34      	ldr	r2, [pc, #208]	@ (8004b14 <HAL_DMA_Abort+0x228>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d059      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a33      	ldr	r2, [pc, #204]	@ (8004b18 <HAL_DMA_Abort+0x22c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d054      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a31      	ldr	r2, [pc, #196]	@ (8004b1c <HAL_DMA_Abort+0x230>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04f      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <HAL_DMA_Abort+0x234>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d04a      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <HAL_DMA_Abort+0x238>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d045      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <HAL_DMA_Abort+0x23c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d040      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <HAL_DMA_Abort+0x240>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d03b      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <HAL_DMA_Abort+0x244>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d036      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <HAL_DMA_Abort+0x248>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d031      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_DMA_Abort+0x24c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d02c      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	@ (8004b3c <HAL_DMA_Abort+0x250>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d027      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a24      	ldr	r2, [pc, #144]	@ (8004b40 <HAL_DMA_Abort+0x254>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d022      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <HAL_DMA_Abort+0x258>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01d      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	@ (8004b48 <HAL_DMA_Abort+0x25c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d018      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <HAL_DMA_Abort+0x260>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <HAL_DMA_Abort+0x264>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00e      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <HAL_DMA_Abort+0x268>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	@ (8004b58 <HAL_DMA_Abort+0x26c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_DMA_Abort+0x20e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <HAL_DMA_Abort+0x270>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d132      	bne.n	8004b60 <HAL_DMA_Abort+0x274>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e031      	b.n	8004b62 <HAL_DMA_Abort+0x276>
 8004afe:	bf00      	nop
 8004b00:	40020010 	.word	0x40020010
 8004b04:	40020028 	.word	0x40020028
 8004b08:	40020040 	.word	0x40020040
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	40020070 	.word	0x40020070
 8004b14:	40020088 	.word	0x40020088
 8004b18:	400200a0 	.word	0x400200a0
 8004b1c:	400200b8 	.word	0x400200b8
 8004b20:	40020410 	.word	0x40020410
 8004b24:	40020428 	.word	0x40020428
 8004b28:	40020440 	.word	0x40020440
 8004b2c:	40020458 	.word	0x40020458
 8004b30:	40020470 	.word	0x40020470
 8004b34:	40020488 	.word	0x40020488
 8004b38:	400204a0 	.word	0x400204a0
 8004b3c:	400204b8 	.word	0x400204b8
 8004b40:	58025408 	.word	0x58025408
 8004b44:	5802541c 	.word	0x5802541c
 8004b48:	58025430 	.word	0x58025430
 8004b4c:	58025444 	.word	0x58025444
 8004b50:	58025458 	.word	0x58025458
 8004b54:	5802546c 	.word	0x5802546c
 8004b58:	58025480 	.word	0x58025480
 8004b5c:	58025494 	.word	0x58025494
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6d      	ldr	r2, [pc, #436]	@ (8004d30 <HAL_DMA_Abort+0x444>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d04a      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6b      	ldr	r2, [pc, #428]	@ (8004d34 <HAL_DMA_Abort+0x448>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d045      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6a      	ldr	r2, [pc, #424]	@ (8004d38 <HAL_DMA_Abort+0x44c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d040      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a68      	ldr	r2, [pc, #416]	@ (8004d3c <HAL_DMA_Abort+0x450>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d03b      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a67      	ldr	r2, [pc, #412]	@ (8004d40 <HAL_DMA_Abort+0x454>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d036      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a65      	ldr	r2, [pc, #404]	@ (8004d44 <HAL_DMA_Abort+0x458>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d031      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a64      	ldr	r2, [pc, #400]	@ (8004d48 <HAL_DMA_Abort+0x45c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d02c      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a62      	ldr	r2, [pc, #392]	@ (8004d4c <HAL_DMA_Abort+0x460>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d027      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a61      	ldr	r2, [pc, #388]	@ (8004d50 <HAL_DMA_Abort+0x464>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d022      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a5f      	ldr	r2, [pc, #380]	@ (8004d54 <HAL_DMA_Abort+0x468>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01d      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a5e      	ldr	r2, [pc, #376]	@ (8004d58 <HAL_DMA_Abort+0x46c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d5c <HAL_DMA_Abort+0x470>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d013      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d60 <HAL_DMA_Abort+0x474>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a59      	ldr	r2, [pc, #356]	@ (8004d64 <HAL_DMA_Abort+0x478>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a58      	ldr	r2, [pc, #352]	@ (8004d68 <HAL_DMA_Abort+0x47c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_DMA_Abort+0x32a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a56      	ldr	r2, [pc, #344]	@ (8004d6c <HAL_DMA_Abort+0x480>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d108      	bne.n	8004c28 <HAL_DMA_Abort+0x33c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e007      	b.n	8004c38 <HAL_DMA_Abort+0x34c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c38:	e013      	b.n	8004c62 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c3a:	f7fe ff55 	bl	8003ae8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d90c      	bls.n	8004c62 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e12d      	b.n	8004ebe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2f      	ldr	r2, [pc, #188]	@ (8004d30 <HAL_DMA_Abort+0x444>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d04a      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d34 <HAL_DMA_Abort+0x448>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d045      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2c      	ldr	r2, [pc, #176]	@ (8004d38 <HAL_DMA_Abort+0x44c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d040      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2a      	ldr	r2, [pc, #168]	@ (8004d3c <HAL_DMA_Abort+0x450>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d03b      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a29      	ldr	r2, [pc, #164]	@ (8004d40 <HAL_DMA_Abort+0x454>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d036      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	@ (8004d44 <HAL_DMA_Abort+0x458>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d031      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a26      	ldr	r2, [pc, #152]	@ (8004d48 <HAL_DMA_Abort+0x45c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d02c      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a24      	ldr	r2, [pc, #144]	@ (8004d4c <HAL_DMA_Abort+0x460>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d027      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a23      	ldr	r2, [pc, #140]	@ (8004d50 <HAL_DMA_Abort+0x464>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d022      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	@ (8004d54 <HAL_DMA_Abort+0x468>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01d      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a20      	ldr	r2, [pc, #128]	@ (8004d58 <HAL_DMA_Abort+0x46c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d018      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_DMA_Abort+0x470>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1d      	ldr	r2, [pc, #116]	@ (8004d60 <HAL_DMA_Abort+0x474>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <HAL_DMA_Abort+0x478>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d009      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004d68 <HAL_DMA_Abort+0x47c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_DMA_Abort+0x422>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a18      	ldr	r2, [pc, #96]	@ (8004d6c <HAL_DMA_Abort+0x480>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d101      	bne.n	8004d12 <HAL_DMA_Abort+0x426>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <HAL_DMA_Abort+0x428>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02b      	beq.n	8004d70 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d1c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	223f      	movs	r2, #63	@ 0x3f
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	609a      	str	r2, [r3, #8]
 8004d2e:	e02a      	b.n	8004d86 <HAL_DMA_Abort+0x49a>
 8004d30:	40020010 	.word	0x40020010
 8004d34:	40020028 	.word	0x40020028
 8004d38:	40020040 	.word	0x40020040
 8004d3c:	40020058 	.word	0x40020058
 8004d40:	40020070 	.word	0x40020070
 8004d44:	40020088 	.word	0x40020088
 8004d48:	400200a0 	.word	0x400200a0
 8004d4c:	400200b8 	.word	0x400200b8
 8004d50:	40020410 	.word	0x40020410
 8004d54:	40020428 	.word	0x40020428
 8004d58:	40020440 	.word	0x40020440
 8004d5c:	40020458 	.word	0x40020458
 8004d60:	40020470 	.word	0x40020470
 8004d64:	40020488 	.word	0x40020488
 8004d68:	400204a0 	.word	0x400204a0
 8004d6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d74:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	2201      	movs	r2, #1
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4f      	ldr	r2, [pc, #316]	@ (8004ec8 <HAL_DMA_Abort+0x5dc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d072      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a4d      	ldr	r2, [pc, #308]	@ (8004ecc <HAL_DMA_Abort+0x5e0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d06d      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed0 <HAL_DMA_Abort+0x5e4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d068      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed4 <HAL_DMA_Abort+0x5e8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d063      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a49      	ldr	r2, [pc, #292]	@ (8004ed8 <HAL_DMA_Abort+0x5ec>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d05e      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a47      	ldr	r2, [pc, #284]	@ (8004edc <HAL_DMA_Abort+0x5f0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d059      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a46      	ldr	r2, [pc, #280]	@ (8004ee0 <HAL_DMA_Abort+0x5f4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d054      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a44      	ldr	r2, [pc, #272]	@ (8004ee4 <HAL_DMA_Abort+0x5f8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d04f      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a43      	ldr	r2, [pc, #268]	@ (8004ee8 <HAL_DMA_Abort+0x5fc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d04a      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a41      	ldr	r2, [pc, #260]	@ (8004eec <HAL_DMA_Abort+0x600>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d045      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a40      	ldr	r2, [pc, #256]	@ (8004ef0 <HAL_DMA_Abort+0x604>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d040      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ef4 <HAL_DMA_Abort+0x608>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d03b      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3d      	ldr	r2, [pc, #244]	@ (8004ef8 <HAL_DMA_Abort+0x60c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d036      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004efc <HAL_DMA_Abort+0x610>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d031      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a3a      	ldr	r2, [pc, #232]	@ (8004f00 <HAL_DMA_Abort+0x614>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d02c      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a38      	ldr	r2, [pc, #224]	@ (8004f04 <HAL_DMA_Abort+0x618>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d027      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a37      	ldr	r2, [pc, #220]	@ (8004f08 <HAL_DMA_Abort+0x61c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d022      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	@ (8004f0c <HAL_DMA_Abort+0x620>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01d      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a34      	ldr	r2, [pc, #208]	@ (8004f10 <HAL_DMA_Abort+0x624>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d018      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a32      	ldr	r2, [pc, #200]	@ (8004f14 <HAL_DMA_Abort+0x628>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a31      	ldr	r2, [pc, #196]	@ (8004f18 <HAL_DMA_Abort+0x62c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00e      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f1c <HAL_DMA_Abort+0x630>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d009      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2e      	ldr	r2, [pc, #184]	@ (8004f20 <HAL_DMA_Abort+0x634>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d004      	beq.n	8004e76 <HAL_DMA_Abort+0x58a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	@ (8004f24 <HAL_DMA_Abort+0x638>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d101      	bne.n	8004e7a <HAL_DMA_Abort+0x58e>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_DMA_Abort+0x590>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d015      	beq.n	8004eac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00c      	beq.n	8004eac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004eaa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8
 8004f08:	58025408 	.word	0x58025408
 8004f0c:	5802541c 	.word	0x5802541c
 8004f10:	58025430 	.word	0x58025430
 8004f14:	58025444 	.word	0x58025444
 8004f18:	58025458 	.word	0x58025458
 8004f1c:	5802546c 	.word	0x5802546c
 8004f20:	58025480 	.word	0x58025480
 8004f24:	58025494 	.word	0x58025494

08004f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e237      	b.n	80053aa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d004      	beq.n	8004f50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2280      	movs	r2, #128	@ 0x80
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e22c      	b.n	80053aa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5c      	ldr	r2, [pc, #368]	@ (80050c8 <HAL_DMA_Abort_IT+0x1a0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d04a      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80050cc <HAL_DMA_Abort_IT+0x1a4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d045      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a59      	ldr	r2, [pc, #356]	@ (80050d0 <HAL_DMA_Abort_IT+0x1a8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d040      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a58      	ldr	r2, [pc, #352]	@ (80050d4 <HAL_DMA_Abort_IT+0x1ac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03b      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a56      	ldr	r2, [pc, #344]	@ (80050d8 <HAL_DMA_Abort_IT+0x1b0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d036      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a55      	ldr	r2, [pc, #340]	@ (80050dc <HAL_DMA_Abort_IT+0x1b4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d031      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a53      	ldr	r2, [pc, #332]	@ (80050e0 <HAL_DMA_Abort_IT+0x1b8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02c      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a52      	ldr	r2, [pc, #328]	@ (80050e4 <HAL_DMA_Abort_IT+0x1bc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d027      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a50      	ldr	r2, [pc, #320]	@ (80050e8 <HAL_DMA_Abort_IT+0x1c0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a4f      	ldr	r2, [pc, #316]	@ (80050ec <HAL_DMA_Abort_IT+0x1c4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a4d      	ldr	r2, [pc, #308]	@ (80050f0 <HAL_DMA_Abort_IT+0x1c8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80050f4 <HAL_DMA_Abort_IT+0x1cc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80050f8 <HAL_DMA_Abort_IT+0x1d0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a49      	ldr	r2, [pc, #292]	@ (80050fc <HAL_DMA_Abort_IT+0x1d4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a47      	ldr	r2, [pc, #284]	@ (8005100 <HAL_DMA_Abort_IT+0x1d8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a46      	ldr	r2, [pc, #280]	@ (8005104 <HAL_DMA_Abort_IT+0x1dc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_DMA_Abort_IT+0xcc>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <HAL_DMA_Abort_IT+0xce>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8086 	beq.w	8005108 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2204      	movs	r2, #4
 8005000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <HAL_DMA_Abort_IT+0x1a0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04a      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a2e      	ldr	r2, [pc, #184]	@ (80050cc <HAL_DMA_Abort_IT+0x1a4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d045      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2c      	ldr	r2, [pc, #176]	@ (80050d0 <HAL_DMA_Abort_IT+0x1a8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d040      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a2b      	ldr	r2, [pc, #172]	@ (80050d4 <HAL_DMA_Abort_IT+0x1ac>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d03b      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a29      	ldr	r2, [pc, #164]	@ (80050d8 <HAL_DMA_Abort_IT+0x1b0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a28      	ldr	r2, [pc, #160]	@ (80050dc <HAL_DMA_Abort_IT+0x1b4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <HAL_DMA_Abort_IT+0x1b8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a25      	ldr	r2, [pc, #148]	@ (80050e4 <HAL_DMA_Abort_IT+0x1bc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d027      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a23      	ldr	r2, [pc, #140]	@ (80050e8 <HAL_DMA_Abort_IT+0x1c0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <HAL_DMA_Abort_IT+0x1c4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d01d      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a20      	ldr	r2, [pc, #128]	@ (80050f0 <HAL_DMA_Abort_IT+0x1c8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <HAL_DMA_Abort_IT+0x1cc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1d      	ldr	r2, [pc, #116]	@ (80050f8 <HAL_DMA_Abort_IT+0x1d0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1c      	ldr	r2, [pc, #112]	@ (80050fc <HAL_DMA_Abort_IT+0x1d4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1a      	ldr	r2, [pc, #104]	@ (8005100 <HAL_DMA_Abort_IT+0x1d8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_DMA_Abort_IT+0x17c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a19      	ldr	r2, [pc, #100]	@ (8005104 <HAL_DMA_Abort_IT+0x1dc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <HAL_DMA_Abort_IT+0x18e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e178      	b.n	80053a8 <HAL_DMA_Abort_IT+0x480>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e16f      	b.n	80053a8 <HAL_DMA_Abort_IT+0x480>
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 020e 	bic.w	r2, r2, #14
 8005116:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6c      	ldr	r2, [pc, #432]	@ (80052d0 <HAL_DMA_Abort_IT+0x3a8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d04a      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a6b      	ldr	r2, [pc, #428]	@ (80052d4 <HAL_DMA_Abort_IT+0x3ac>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d045      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a69      	ldr	r2, [pc, #420]	@ (80052d8 <HAL_DMA_Abort_IT+0x3b0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d040      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a68      	ldr	r2, [pc, #416]	@ (80052dc <HAL_DMA_Abort_IT+0x3b4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d03b      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a66      	ldr	r2, [pc, #408]	@ (80052e0 <HAL_DMA_Abort_IT+0x3b8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d036      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a65      	ldr	r2, [pc, #404]	@ (80052e4 <HAL_DMA_Abort_IT+0x3bc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d031      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a63      	ldr	r2, [pc, #396]	@ (80052e8 <HAL_DMA_Abort_IT+0x3c0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d02c      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a62      	ldr	r2, [pc, #392]	@ (80052ec <HAL_DMA_Abort_IT+0x3c4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d027      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a60      	ldr	r2, [pc, #384]	@ (80052f0 <HAL_DMA_Abort_IT+0x3c8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d022      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5f      	ldr	r2, [pc, #380]	@ (80052f4 <HAL_DMA_Abort_IT+0x3cc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d01d      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5d      	ldr	r2, [pc, #372]	@ (80052f8 <HAL_DMA_Abort_IT+0x3d0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d018      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a5c      	ldr	r2, [pc, #368]	@ (80052fc <HAL_DMA_Abort_IT+0x3d4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5a      	ldr	r2, [pc, #360]	@ (8005300 <HAL_DMA_Abort_IT+0x3d8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a59      	ldr	r2, [pc, #356]	@ (8005304 <HAL_DMA_Abort_IT+0x3dc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a57      	ldr	r2, [pc, #348]	@ (8005308 <HAL_DMA_Abort_IT+0x3e0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x290>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a56      	ldr	r2, [pc, #344]	@ (800530c <HAL_DMA_Abort_IT+0x3e4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d108      	bne.n	80051ca <HAL_DMA_Abort_IT+0x2a2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e007      	b.n	80051da <HAL_DMA_Abort_IT+0x2b2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <HAL_DMA_Abort_IT+0x3a8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d072      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3a      	ldr	r2, [pc, #232]	@ (80052d4 <HAL_DMA_Abort_IT+0x3ac>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d06d      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a39      	ldr	r2, [pc, #228]	@ (80052d8 <HAL_DMA_Abort_IT+0x3b0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d068      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a37      	ldr	r2, [pc, #220]	@ (80052dc <HAL_DMA_Abort_IT+0x3b4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d063      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a36      	ldr	r2, [pc, #216]	@ (80052e0 <HAL_DMA_Abort_IT+0x3b8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d05e      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a34      	ldr	r2, [pc, #208]	@ (80052e4 <HAL_DMA_Abort_IT+0x3bc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d059      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a33      	ldr	r2, [pc, #204]	@ (80052e8 <HAL_DMA_Abort_IT+0x3c0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d054      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a31      	ldr	r2, [pc, #196]	@ (80052ec <HAL_DMA_Abort_IT+0x3c4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d04f      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a30      	ldr	r2, [pc, #192]	@ (80052f0 <HAL_DMA_Abort_IT+0x3c8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d04a      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2e      	ldr	r2, [pc, #184]	@ (80052f4 <HAL_DMA_Abort_IT+0x3cc>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d045      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2d      	ldr	r2, [pc, #180]	@ (80052f8 <HAL_DMA_Abort_IT+0x3d0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d040      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2b      	ldr	r2, [pc, #172]	@ (80052fc <HAL_DMA_Abort_IT+0x3d4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d03b      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2a      	ldr	r2, [pc, #168]	@ (8005300 <HAL_DMA_Abort_IT+0x3d8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d036      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a28      	ldr	r2, [pc, #160]	@ (8005304 <HAL_DMA_Abort_IT+0x3dc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a27      	ldr	r2, [pc, #156]	@ (8005308 <HAL_DMA_Abort_IT+0x3e0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d02c      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	@ (800530c <HAL_DMA_Abort_IT+0x3e4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d027      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a24      	ldr	r2, [pc, #144]	@ (8005310 <HAL_DMA_Abort_IT+0x3e8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a22      	ldr	r2, [pc, #136]	@ (8005314 <HAL_DMA_Abort_IT+0x3ec>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <HAL_DMA_Abort_IT+0x3f0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <HAL_DMA_Abort_IT+0x3f4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_DMA_Abort_IT+0x3f8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <HAL_DMA_Abort_IT+0x3fc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_DMA_Abort_IT+0x400>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_DMA_Abort_IT+0x3a2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <HAL_DMA_Abort_IT+0x404>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d132      	bne.n	8005330 <HAL_DMA_Abort_IT+0x408>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e031      	b.n	8005332 <HAL_DMA_Abort_IT+0x40a>
 80052ce:	bf00      	nop
 80052d0:	40020010 	.word	0x40020010
 80052d4:	40020028 	.word	0x40020028
 80052d8:	40020040 	.word	0x40020040
 80052dc:	40020058 	.word	0x40020058
 80052e0:	40020070 	.word	0x40020070
 80052e4:	40020088 	.word	0x40020088
 80052e8:	400200a0 	.word	0x400200a0
 80052ec:	400200b8 	.word	0x400200b8
 80052f0:	40020410 	.word	0x40020410
 80052f4:	40020428 	.word	0x40020428
 80052f8:	40020440 	.word	0x40020440
 80052fc:	40020458 	.word	0x40020458
 8005300:	40020470 	.word	0x40020470
 8005304:	40020488 	.word	0x40020488
 8005308:	400204a0 	.word	0x400204a0
 800530c:	400204b8 	.word	0x400204b8
 8005310:	58025408 	.word	0x58025408
 8005314:	5802541c 	.word	0x5802541c
 8005318:	58025430 	.word	0x58025430
 800531c:	58025444 	.word	0x58025444
 8005320:	58025458 	.word	0x58025458
 8005324:	5802546c 	.word	0x5802546c
 8005328:	58025480 	.word	0x58025480
 800532c:	58025494 	.word	0x58025494
 8005330:	2300      	movs	r3, #0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d028      	beq.n	8005388 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005344:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005350:	f003 031f 	and.w	r3, r3, #31
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005364:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00c      	beq.n	8005388 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800537c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005386:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop

080053b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	@ 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053c0:	4b67      	ldr	r3, [pc, #412]	@ (8005560 <HAL_DMA_IRQHandler+0x1ac>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a67      	ldr	r2, [pc, #412]	@ (8005564 <HAL_DMA_IRQHandler+0x1b0>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	0a9b      	lsrs	r3, r3, #10
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a5f      	ldr	r2, [pc, #380]	@ (8005568 <HAL_DMA_IRQHandler+0x1b4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d04a      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5d      	ldr	r2, [pc, #372]	@ (800556c <HAL_DMA_IRQHandler+0x1b8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d045      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005570 <HAL_DMA_IRQHandler+0x1bc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d040      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5a      	ldr	r2, [pc, #360]	@ (8005574 <HAL_DMA_IRQHandler+0x1c0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d03b      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a59      	ldr	r2, [pc, #356]	@ (8005578 <HAL_DMA_IRQHandler+0x1c4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d036      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a57      	ldr	r2, [pc, #348]	@ (800557c <HAL_DMA_IRQHandler+0x1c8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d031      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a56      	ldr	r2, [pc, #344]	@ (8005580 <HAL_DMA_IRQHandler+0x1cc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d02c      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a54      	ldr	r2, [pc, #336]	@ (8005584 <HAL_DMA_IRQHandler+0x1d0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d027      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a53      	ldr	r2, [pc, #332]	@ (8005588 <HAL_DMA_IRQHandler+0x1d4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d022      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a51      	ldr	r2, [pc, #324]	@ (800558c <HAL_DMA_IRQHandler+0x1d8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01d      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a50      	ldr	r2, [pc, #320]	@ (8005590 <HAL_DMA_IRQHandler+0x1dc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d018      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a4e      	ldr	r2, [pc, #312]	@ (8005594 <HAL_DMA_IRQHandler+0x1e0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a4d      	ldr	r2, [pc, #308]	@ (8005598 <HAL_DMA_IRQHandler+0x1e4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a4b      	ldr	r2, [pc, #300]	@ (800559c <HAL_DMA_IRQHandler+0x1e8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d009      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a4a      	ldr	r2, [pc, #296]	@ (80055a0 <HAL_DMA_IRQHandler+0x1ec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_DMA_IRQHandler+0xd2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a48      	ldr	r2, [pc, #288]	@ (80055a4 <HAL_DMA_IRQHandler+0x1f0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d101      	bne.n	800548a <HAL_DMA_IRQHandler+0xd6>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_DMA_IRQHandler+0xd8>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 842b 	beq.w	8005ce8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	2208      	movs	r2, #8
 800549c:	409a      	lsls	r2, r3
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80a2 	beq.w	80055ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005568 <HAL_DMA_IRQHandler+0x1b4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04a      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2d      	ldr	r2, [pc, #180]	@ (800556c <HAL_DMA_IRQHandler+0x1b8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d045      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005570 <HAL_DMA_IRQHandler+0x1bc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d040      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005574 <HAL_DMA_IRQHandler+0x1c0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d03b      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a28      	ldr	r2, [pc, #160]	@ (8005578 <HAL_DMA_IRQHandler+0x1c4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d036      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a27      	ldr	r2, [pc, #156]	@ (800557c <HAL_DMA_IRQHandler+0x1c8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d031      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a25      	ldr	r2, [pc, #148]	@ (8005580 <HAL_DMA_IRQHandler+0x1cc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02c      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a24      	ldr	r2, [pc, #144]	@ (8005584 <HAL_DMA_IRQHandler+0x1d0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d027      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a22      	ldr	r2, [pc, #136]	@ (8005588 <HAL_DMA_IRQHandler+0x1d4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d022      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	@ (800558c <HAL_DMA_IRQHandler+0x1d8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d01d      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <HAL_DMA_IRQHandler+0x1dc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d018      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1e      	ldr	r2, [pc, #120]	@ (8005594 <HAL_DMA_IRQHandler+0x1e0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <HAL_DMA_IRQHandler+0x1e4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00e      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <HAL_DMA_IRQHandler+0x1e8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d009      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a19      	ldr	r2, [pc, #100]	@ (80055a0 <HAL_DMA_IRQHandler+0x1ec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d004      	beq.n	8005548 <HAL_DMA_IRQHandler+0x194>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <HAL_DMA_IRQHandler+0x1f0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d12f      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x1f4>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e02e      	b.n	80055bc <HAL_DMA_IRQHandler+0x208>
 800555e:	bf00      	nop
 8005560:	2400000c 	.word	0x2400000c
 8005564:	1b4e81b5 	.word	0x1b4e81b5
 8005568:	40020010 	.word	0x40020010
 800556c:	40020028 	.word	0x40020028
 8005570:	40020040 	.word	0x40020040
 8005574:	40020058 	.word	0x40020058
 8005578:	40020070 	.word	0x40020070
 800557c:	40020088 	.word	0x40020088
 8005580:	400200a0 	.word	0x400200a0
 8005584:	400200b8 	.word	0x400200b8
 8005588:	40020410 	.word	0x40020410
 800558c:	40020428 	.word	0x40020428
 8005590:	40020440 	.word	0x40020440
 8005594:	40020458 	.word	0x40020458
 8005598:	40020470 	.word	0x40020470
 800559c:	40020488 	.word	0x40020488
 80055a0:	400204a0 	.word	0x400204a0
 80055a4:	400204b8 	.word	0x400204b8
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2208      	movs	r2, #8
 80055da:	409a      	lsls	r2, r3
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e4:	f043 0201 	orr.w	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d06e      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a69      	ldr	r2, [pc, #420]	@ (80057ac <HAL_DMA_IRQHandler+0x3f8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04a      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a67      	ldr	r2, [pc, #412]	@ (80057b0 <HAL_DMA_IRQHandler+0x3fc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d045      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a66      	ldr	r2, [pc, #408]	@ (80057b4 <HAL_DMA_IRQHandler+0x400>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d040      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a64      	ldr	r2, [pc, #400]	@ (80057b8 <HAL_DMA_IRQHandler+0x404>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d03b      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a63      	ldr	r2, [pc, #396]	@ (80057bc <HAL_DMA_IRQHandler+0x408>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d036      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a61      	ldr	r2, [pc, #388]	@ (80057c0 <HAL_DMA_IRQHandler+0x40c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d031      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a60      	ldr	r2, [pc, #384]	@ (80057c4 <HAL_DMA_IRQHandler+0x410>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d02c      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5e      	ldr	r2, [pc, #376]	@ (80057c8 <HAL_DMA_IRQHandler+0x414>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d027      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5d      	ldr	r2, [pc, #372]	@ (80057cc <HAL_DMA_IRQHandler+0x418>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5b      	ldr	r2, [pc, #364]	@ (80057d0 <HAL_DMA_IRQHandler+0x41c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a5a      	ldr	r2, [pc, #360]	@ (80057d4 <HAL_DMA_IRQHandler+0x420>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a58      	ldr	r2, [pc, #352]	@ (80057d8 <HAL_DMA_IRQHandler+0x424>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a57      	ldr	r2, [pc, #348]	@ (80057dc <HAL_DMA_IRQHandler+0x428>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a55      	ldr	r2, [pc, #340]	@ (80057e0 <HAL_DMA_IRQHandler+0x42c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a54      	ldr	r2, [pc, #336]	@ (80057e4 <HAL_DMA_IRQHandler+0x430>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x2ee>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a52      	ldr	r2, [pc, #328]	@ (80057e8 <HAL_DMA_IRQHandler+0x434>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d10a      	bne.n	80056b8 <HAL_DMA_IRQHandler+0x304>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e003      	b.n	80056c0 <HAL_DMA_IRQHandler+0x30c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00d      	beq.n	80056e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	2201      	movs	r2, #1
 80056ce:	409a      	lsls	r2, r3
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d8:	f043 0202 	orr.w	r2, r3, #2
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2204      	movs	r2, #4
 80056ea:	409a      	lsls	r2, r3
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 808f 	beq.w	8005814 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a2c      	ldr	r2, [pc, #176]	@ (80057ac <HAL_DMA_IRQHandler+0x3f8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d04a      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2a      	ldr	r2, [pc, #168]	@ (80057b0 <HAL_DMA_IRQHandler+0x3fc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d045      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a29      	ldr	r2, [pc, #164]	@ (80057b4 <HAL_DMA_IRQHandler+0x400>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d040      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a27      	ldr	r2, [pc, #156]	@ (80057b8 <HAL_DMA_IRQHandler+0x404>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d03b      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a26      	ldr	r2, [pc, #152]	@ (80057bc <HAL_DMA_IRQHandler+0x408>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d036      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a24      	ldr	r2, [pc, #144]	@ (80057c0 <HAL_DMA_IRQHandler+0x40c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d031      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a23      	ldr	r2, [pc, #140]	@ (80057c4 <HAL_DMA_IRQHandler+0x410>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d02c      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a21      	ldr	r2, [pc, #132]	@ (80057c8 <HAL_DMA_IRQHandler+0x414>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d027      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a20      	ldr	r2, [pc, #128]	@ (80057cc <HAL_DMA_IRQHandler+0x418>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a1e      	ldr	r2, [pc, #120]	@ (80057d0 <HAL_DMA_IRQHandler+0x41c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d01d      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1d      	ldr	r2, [pc, #116]	@ (80057d4 <HAL_DMA_IRQHandler+0x420>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <HAL_DMA_IRQHandler+0x424>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <HAL_DMA_IRQHandler+0x428>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	@ (80057e0 <HAL_DMA_IRQHandler+0x42c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <HAL_DMA_IRQHandler+0x430>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_DMA_IRQHandler+0x3e2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a15      	ldr	r2, [pc, #84]	@ (80057e8 <HAL_DMA_IRQHandler+0x434>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d12a      	bne.n	80057ec <HAL_DMA_IRQHandler+0x438>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e023      	b.n	80057f4 <HAL_DMA_IRQHandler+0x440>
 80057ac:	40020010 	.word	0x40020010
 80057b0:	40020028 	.word	0x40020028
 80057b4:	40020040 	.word	0x40020040
 80057b8:	40020058 	.word	0x40020058
 80057bc:	40020070 	.word	0x40020070
 80057c0:	40020088 	.word	0x40020088
 80057c4:	400200a0 	.word	0x400200a0
 80057c8:	400200b8 	.word	0x400200b8
 80057cc:	40020410 	.word	0x40020410
 80057d0:	40020428 	.word	0x40020428
 80057d4:	40020440 	.word	0x40020440
 80057d8:	40020458 	.word	0x40020458
 80057dc:	40020470 	.word	0x40020470
 80057e0:	40020488 	.word	0x40020488
 80057e4:	400204a0 	.word	0x400204a0
 80057e8:	400204b8 	.word	0x400204b8
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2300      	movs	r3, #0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00d      	beq.n	8005814 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	2204      	movs	r2, #4
 8005802:	409a      	lsls	r2, r3
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580c:	f043 0204 	orr.w	r2, r3, #4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2210      	movs	r2, #16
 800581e:	409a      	lsls	r2, r3
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a6 	beq.w	8005976 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a85      	ldr	r2, [pc, #532]	@ (8005a44 <HAL_DMA_IRQHandler+0x690>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d04a      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a83      	ldr	r2, [pc, #524]	@ (8005a48 <HAL_DMA_IRQHandler+0x694>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d045      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a82      	ldr	r2, [pc, #520]	@ (8005a4c <HAL_DMA_IRQHandler+0x698>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d040      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a80      	ldr	r2, [pc, #512]	@ (8005a50 <HAL_DMA_IRQHandler+0x69c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d03b      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a7f      	ldr	r2, [pc, #508]	@ (8005a54 <HAL_DMA_IRQHandler+0x6a0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d036      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a7d      	ldr	r2, [pc, #500]	@ (8005a58 <HAL_DMA_IRQHandler+0x6a4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d031      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a5c <HAL_DMA_IRQHandler+0x6a8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d02c      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a7a      	ldr	r2, [pc, #488]	@ (8005a60 <HAL_DMA_IRQHandler+0x6ac>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a79      	ldr	r2, [pc, #484]	@ (8005a64 <HAL_DMA_IRQHandler+0x6b0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d022      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a77      	ldr	r2, [pc, #476]	@ (8005a68 <HAL_DMA_IRQHandler+0x6b4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a76      	ldr	r2, [pc, #472]	@ (8005a6c <HAL_DMA_IRQHandler+0x6b8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d018      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a74      	ldr	r2, [pc, #464]	@ (8005a70 <HAL_DMA_IRQHandler+0x6bc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a73      	ldr	r2, [pc, #460]	@ (8005a74 <HAL_DMA_IRQHandler+0x6c0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a71      	ldr	r2, [pc, #452]	@ (8005a78 <HAL_DMA_IRQHandler+0x6c4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a70      	ldr	r2, [pc, #448]	@ (8005a7c <HAL_DMA_IRQHandler+0x6c8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_DMA_IRQHandler+0x516>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a6e      	ldr	r2, [pc, #440]	@ (8005a80 <HAL_DMA_IRQHandler+0x6cc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d10a      	bne.n	80058e0 <HAL_DMA_IRQHandler+0x52c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e009      	b.n	80058f4 <HAL_DMA_IRQHandler+0x540>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bf14      	ite	ne
 80058ee:	2301      	movne	r3, #1
 80058f0:	2300      	moveq	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d03e      	beq.n	8005976 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fc:	f003 031f 	and.w	r3, r3, #31
 8005900:	2210      	movs	r2, #16
 8005902:	409a      	lsls	r2, r3
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d108      	bne.n	8005936 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d024      	beq.n	8005976 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	4798      	blx	r3
 8005934:	e01f      	b.n	8005976 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01b      	beq.n	8005976 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
 8005946:	e016      	b.n	8005976 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d107      	bne.n	8005966 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0208 	bic.w	r2, r2, #8
 8005964:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	2220      	movs	r2, #32
 8005980:	409a      	lsls	r2, r3
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8110 	beq.w	8005bac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2c      	ldr	r2, [pc, #176]	@ (8005a44 <HAL_DMA_IRQHandler+0x690>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d04a      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a48 <HAL_DMA_IRQHandler+0x694>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d045      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a29      	ldr	r2, [pc, #164]	@ (8005a4c <HAL_DMA_IRQHandler+0x698>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d040      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a28      	ldr	r2, [pc, #160]	@ (8005a50 <HAL_DMA_IRQHandler+0x69c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d03b      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a26      	ldr	r2, [pc, #152]	@ (8005a54 <HAL_DMA_IRQHandler+0x6a0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d036      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a25      	ldr	r2, [pc, #148]	@ (8005a58 <HAL_DMA_IRQHandler+0x6a4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d031      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a23      	ldr	r2, [pc, #140]	@ (8005a5c <HAL_DMA_IRQHandler+0x6a8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02c      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a22      	ldr	r2, [pc, #136]	@ (8005a60 <HAL_DMA_IRQHandler+0x6ac>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d027      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a20      	ldr	r2, [pc, #128]	@ (8005a64 <HAL_DMA_IRQHandler+0x6b0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005a68 <HAL_DMA_IRQHandler+0x6b4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d01d      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <HAL_DMA_IRQHandler+0x6b8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005a70 <HAL_DMA_IRQHandler+0x6bc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <HAL_DMA_IRQHandler+0x6c0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a19      	ldr	r2, [pc, #100]	@ (8005a78 <HAL_DMA_IRQHandler+0x6c4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a17      	ldr	r2, [pc, #92]	@ (8005a7c <HAL_DMA_IRQHandler+0x6c8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x678>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a16      	ldr	r2, [pc, #88]	@ (8005a80 <HAL_DMA_IRQHandler+0x6cc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d12b      	bne.n	8005a84 <HAL_DMA_IRQHandler+0x6d0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0310 	and.w	r3, r3, #16
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	bf14      	ite	ne
 8005a3a:	2301      	movne	r3, #1
 8005a3c:	2300      	moveq	r3, #0
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	e02a      	b.n	8005a98 <HAL_DMA_IRQHandler+0x6e4>
 8005a42:	bf00      	nop
 8005a44:	40020010 	.word	0x40020010
 8005a48:	40020028 	.word	0x40020028
 8005a4c:	40020040 	.word	0x40020040
 8005a50:	40020058 	.word	0x40020058
 8005a54:	40020070 	.word	0x40020070
 8005a58:	40020088 	.word	0x40020088
 8005a5c:	400200a0 	.word	0x400200a0
 8005a60:	400200b8 	.word	0x400200b8
 8005a64:	40020410 	.word	0x40020410
 8005a68:	40020428 	.word	0x40020428
 8005a6c:	40020440 	.word	0x40020440
 8005a70:	40020458 	.word	0x40020458
 8005a74:	40020470 	.word	0x40020470
 8005a78:	40020488 	.word	0x40020488
 8005a7c:	400204a0 	.word	0x400204a0
 8005a80:	400204b8 	.word	0x400204b8
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf14      	ite	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	2300      	moveq	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8087 	beq.w	8005bac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d139      	bne.n	8005b2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0216 	bic.w	r2, r2, #22
 8005ac8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ad8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_DMA_IRQHandler+0x736>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0208 	bic.w	r2, r2, #8
 8005af8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	223f      	movs	r2, #63	@ 0x3f
 8005b04:	409a      	lsls	r2, r3
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 834a 	beq.w	80061b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	4798      	blx	r3
          }
          return;
 8005b2c:	e344      	b.n	80061b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d018      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02c      	beq.n	8005bac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
 8005b5a:	e027      	b.n	8005bac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d023      	beq.n	8005bac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
 8005b6c:	e01e      	b.n	8005bac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10f      	bne.n	8005b9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0210 	bic.w	r2, r2, #16
 8005b8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8306 	beq.w	80061c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8088 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7a      	ldr	r2, [pc, #488]	@ (8005dbc <HAL_DMA_IRQHandler+0xa08>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d04a      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a79      	ldr	r2, [pc, #484]	@ (8005dc0 <HAL_DMA_IRQHandler+0xa0c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d045      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a77      	ldr	r2, [pc, #476]	@ (8005dc4 <HAL_DMA_IRQHandler+0xa10>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d040      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a76      	ldr	r2, [pc, #472]	@ (8005dc8 <HAL_DMA_IRQHandler+0xa14>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d03b      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a74      	ldr	r2, [pc, #464]	@ (8005dcc <HAL_DMA_IRQHandler+0xa18>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d036      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a73      	ldr	r2, [pc, #460]	@ (8005dd0 <HAL_DMA_IRQHandler+0xa1c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d031      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a71      	ldr	r2, [pc, #452]	@ (8005dd4 <HAL_DMA_IRQHandler+0xa20>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d02c      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a70      	ldr	r2, [pc, #448]	@ (8005dd8 <HAL_DMA_IRQHandler+0xa24>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d027      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a6e      	ldr	r2, [pc, #440]	@ (8005ddc <HAL_DMA_IRQHandler+0xa28>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a6d      	ldr	r2, [pc, #436]	@ (8005de0 <HAL_DMA_IRQHandler+0xa2c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d01d      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a6b      	ldr	r2, [pc, #428]	@ (8005de4 <HAL_DMA_IRQHandler+0xa30>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a6a      	ldr	r2, [pc, #424]	@ (8005de8 <HAL_DMA_IRQHandler+0xa34>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a68      	ldr	r2, [pc, #416]	@ (8005dec <HAL_DMA_IRQHandler+0xa38>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a67      	ldr	r2, [pc, #412]	@ (8005df0 <HAL_DMA_IRQHandler+0xa3c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a65      	ldr	r2, [pc, #404]	@ (8005df4 <HAL_DMA_IRQHandler+0xa40>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x8b8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a64      	ldr	r2, [pc, #400]	@ (8005df8 <HAL_DMA_IRQHandler+0xa44>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d108      	bne.n	8005c7e <HAL_DMA_IRQHandler+0x8ca>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	e007      	b.n	8005c8e <HAL_DMA_IRQHandler+0x8da>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0201 	bic.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3301      	adds	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d307      	bcc.n	8005caa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1f2      	bne.n	8005c8e <HAL_DMA_IRQHandler+0x8da>
 8005ca8:	e000      	b.n	8005cac <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005caa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d004      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005cc2:	e003      	b.n	8005ccc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8272 	beq.w	80061c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
 8005ce6:	e26c      	b.n	80061c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a43      	ldr	r2, [pc, #268]	@ (8005dfc <HAL_DMA_IRQHandler+0xa48>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a42      	ldr	r2, [pc, #264]	@ (8005e00 <HAL_DMA_IRQHandler+0xa4c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d01d      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a40      	ldr	r2, [pc, #256]	@ (8005e04 <HAL_DMA_IRQHandler+0xa50>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e08 <HAL_DMA_IRQHandler+0xa54>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a3d      	ldr	r2, [pc, #244]	@ (8005e0c <HAL_DMA_IRQHandler+0xa58>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e10 <HAL_DMA_IRQHandler+0xa5c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3a      	ldr	r2, [pc, #232]	@ (8005e14 <HAL_DMA_IRQHandler+0xa60>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x984>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a39      	ldr	r2, [pc, #228]	@ (8005e18 <HAL_DMA_IRQHandler+0xa64>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d101      	bne.n	8005d3c <HAL_DMA_IRQHandler+0x988>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_DMA_IRQHandler+0x98a>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 823f 	beq.w	80061c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2204      	movs	r2, #4
 8005d56:	409a      	lsls	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80cd 	beq.w	8005efc <HAL_DMA_IRQHandler+0xb48>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80c7 	beq.w	8005efc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2204      	movs	r2, #4
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d049      	beq.n	8005e1c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8210 	beq.w	80061bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da4:	e20a      	b.n	80061bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8206 	beq.w	80061bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db8:	e200      	b.n	80061bc <HAL_DMA_IRQHandler+0xe08>
 8005dba:	bf00      	nop
 8005dbc:	40020010 	.word	0x40020010
 8005dc0:	40020028 	.word	0x40020028
 8005dc4:	40020040 	.word	0x40020040
 8005dc8:	40020058 	.word	0x40020058
 8005dcc:	40020070 	.word	0x40020070
 8005dd0:	40020088 	.word	0x40020088
 8005dd4:	400200a0 	.word	0x400200a0
 8005dd8:	400200b8 	.word	0x400200b8
 8005ddc:	40020410 	.word	0x40020410
 8005de0:	40020428 	.word	0x40020428
 8005de4:	40020440 	.word	0x40020440
 8005de8:	40020458 	.word	0x40020458
 8005dec:	40020470 	.word	0x40020470
 8005df0:	40020488 	.word	0x40020488
 8005df4:	400204a0 	.word	0x400204a0
 8005df8:	400204b8 	.word	0x400204b8
 8005dfc:	58025408 	.word	0x58025408
 8005e00:	5802541c 	.word	0x5802541c
 8005e04:	58025430 	.word	0x58025430
 8005e08:	58025444 	.word	0x58025444
 8005e0c:	58025458 	.word	0x58025458
 8005e10:	5802546c 	.word	0x5802546c
 8005e14:	58025480 	.word	0x58025480
 8005e18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d160      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a7f      	ldr	r2, [pc, #508]	@ (8006028 <HAL_DMA_IRQHandler+0xc74>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d04a      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a7d      	ldr	r2, [pc, #500]	@ (800602c <HAL_DMA_IRQHandler+0xc78>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d045      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a7c      	ldr	r2, [pc, #496]	@ (8006030 <HAL_DMA_IRQHandler+0xc7c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d040      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a7a      	ldr	r2, [pc, #488]	@ (8006034 <HAL_DMA_IRQHandler+0xc80>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d03b      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a79      	ldr	r2, [pc, #484]	@ (8006038 <HAL_DMA_IRQHandler+0xc84>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d036      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a77      	ldr	r2, [pc, #476]	@ (800603c <HAL_DMA_IRQHandler+0xc88>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d031      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a76      	ldr	r2, [pc, #472]	@ (8006040 <HAL_DMA_IRQHandler+0xc8c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d02c      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a74      	ldr	r2, [pc, #464]	@ (8006044 <HAL_DMA_IRQHandler+0xc90>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d027      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a73      	ldr	r2, [pc, #460]	@ (8006048 <HAL_DMA_IRQHandler+0xc94>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d022      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a71      	ldr	r2, [pc, #452]	@ (800604c <HAL_DMA_IRQHandler+0xc98>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d01d      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a70      	ldr	r2, [pc, #448]	@ (8006050 <HAL_DMA_IRQHandler+0xc9c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a6e      	ldr	r2, [pc, #440]	@ (8006054 <HAL_DMA_IRQHandler+0xca0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a6d      	ldr	r2, [pc, #436]	@ (8006058 <HAL_DMA_IRQHandler+0xca4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a6b      	ldr	r2, [pc, #428]	@ (800605c <HAL_DMA_IRQHandler+0xca8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6a      	ldr	r2, [pc, #424]	@ (8006060 <HAL_DMA_IRQHandler+0xcac>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_DMA_IRQHandler+0xb12>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <HAL_DMA_IRQHandler+0xcb0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d108      	bne.n	8005ed8 <HAL_DMA_IRQHandler+0xb24>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0208 	bic.w	r2, r2, #8
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e007      	b.n	8005ee8 <HAL_DMA_IRQHandler+0xb34>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0204 	bic.w	r2, r2, #4
 8005ee6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8165 	beq.w	80061bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efa:	e15f      	b.n	80061bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	2202      	movs	r2, #2
 8005f06:	409a      	lsls	r2, r3
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80c5 	beq.w	800609c <HAL_DMA_IRQHandler+0xce8>
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80bf 	beq.w	800609c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2202      	movs	r2, #2
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d018      	beq.n	8005f6a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 813a 	beq.w	80061c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f54:	e134      	b.n	80061c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 8130 	beq.w	80061c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f68:	e12a      	b.n	80061c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 8089 	bne.w	8006088 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8006028 <HAL_DMA_IRQHandler+0xc74>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d04a      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a29      	ldr	r2, [pc, #164]	@ (800602c <HAL_DMA_IRQHandler+0xc78>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d045      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a28      	ldr	r2, [pc, #160]	@ (8006030 <HAL_DMA_IRQHandler+0xc7c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d040      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a26      	ldr	r2, [pc, #152]	@ (8006034 <HAL_DMA_IRQHandler+0xc80>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d03b      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a25      	ldr	r2, [pc, #148]	@ (8006038 <HAL_DMA_IRQHandler+0xc84>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d036      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a23      	ldr	r2, [pc, #140]	@ (800603c <HAL_DMA_IRQHandler+0xc88>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d031      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a22      	ldr	r2, [pc, #136]	@ (8006040 <HAL_DMA_IRQHandler+0xc8c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d02c      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	@ (8006044 <HAL_DMA_IRQHandler+0xc90>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d027      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1f      	ldr	r2, [pc, #124]	@ (8006048 <HAL_DMA_IRQHandler+0xc94>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800604c <HAL_DMA_IRQHandler+0xc98>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	@ (8006050 <HAL_DMA_IRQHandler+0xc9c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8006054 <HAL_DMA_IRQHandler+0xca0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a19      	ldr	r2, [pc, #100]	@ (8006058 <HAL_DMA_IRQHandler+0xca4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	@ (800605c <HAL_DMA_IRQHandler+0xca8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a16      	ldr	r2, [pc, #88]	@ (8006060 <HAL_DMA_IRQHandler+0xcac>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_DMA_IRQHandler+0xc62>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a14      	ldr	r2, [pc, #80]	@ (8006064 <HAL_DMA_IRQHandler+0xcb0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d128      	bne.n	8006068 <HAL_DMA_IRQHandler+0xcb4>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0214 	bic.w	r2, r2, #20
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e027      	b.n	8006078 <HAL_DMA_IRQHandler+0xcc4>
 8006028:	40020010 	.word	0x40020010
 800602c:	40020028 	.word	0x40020028
 8006030:	40020040 	.word	0x40020040
 8006034:	40020058 	.word	0x40020058
 8006038:	40020070 	.word	0x40020070
 800603c:	40020088 	.word	0x40020088
 8006040:	400200a0 	.word	0x400200a0
 8006044:	400200b8 	.word	0x400200b8
 8006048:	40020410 	.word	0x40020410
 800604c:	40020428 	.word	0x40020428
 8006050:	40020440 	.word	0x40020440
 8006054:	40020458 	.word	0x40020458
 8006058:	40020470 	.word	0x40020470
 800605c:	40020488 	.word	0x40020488
 8006060:	400204a0 	.word	0x400204a0
 8006064:	400204b8 	.word	0x400204b8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 020a 	bic.w	r2, r2, #10
 8006076:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8097 	beq.w	80061c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800609a:	e091      	b.n	80061c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	2208      	movs	r2, #8
 80060a6:	409a      	lsls	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8088 	beq.w	80061c2 <HAL_DMA_IRQHandler+0xe0e>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8082 	beq.w	80061c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a41      	ldr	r2, [pc, #260]	@ (80061c8 <HAL_DMA_IRQHandler+0xe14>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a3f      	ldr	r2, [pc, #252]	@ (80061cc <HAL_DMA_IRQHandler+0xe18>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a3e      	ldr	r2, [pc, #248]	@ (80061d0 <HAL_DMA_IRQHandler+0xe1c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a3c      	ldr	r2, [pc, #240]	@ (80061d4 <HAL_DMA_IRQHandler+0xe20>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3b      	ldr	r2, [pc, #236]	@ (80061d8 <HAL_DMA_IRQHandler+0xe24>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a39      	ldr	r2, [pc, #228]	@ (80061dc <HAL_DMA_IRQHandler+0xe28>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a38      	ldr	r2, [pc, #224]	@ (80061e0 <HAL_DMA_IRQHandler+0xe2c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a36      	ldr	r2, [pc, #216]	@ (80061e4 <HAL_DMA_IRQHandler+0xe30>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a35      	ldr	r2, [pc, #212]	@ (80061e8 <HAL_DMA_IRQHandler+0xe34>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a33      	ldr	r2, [pc, #204]	@ (80061ec <HAL_DMA_IRQHandler+0xe38>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a32      	ldr	r2, [pc, #200]	@ (80061f0 <HAL_DMA_IRQHandler+0xe3c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a30      	ldr	r2, [pc, #192]	@ (80061f4 <HAL_DMA_IRQHandler+0xe40>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2f      	ldr	r2, [pc, #188]	@ (80061f8 <HAL_DMA_IRQHandler+0xe44>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <HAL_DMA_IRQHandler+0xe48>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2c      	ldr	r2, [pc, #176]	@ (8006200 <HAL_DMA_IRQHandler+0xe4c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_IRQHandler+0xdaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2a      	ldr	r2, [pc, #168]	@ (8006204 <HAL_DMA_IRQHandler+0xe50>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d108      	bne.n	8006170 <HAL_DMA_IRQHandler+0xdbc>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 021c 	bic.w	r2, r2, #28
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e007      	b.n	8006180 <HAL_DMA_IRQHandler+0xdcc>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 020e 	bic.w	r2, r2, #14
 800617e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2201      	movs	r2, #1
 800618a:	409a      	lsls	r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
 80061b6:	e004      	b.n	80061c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061c2:	3728      	adds	r7, #40	@ 0x28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40020010 	.word	0x40020010
 80061cc:	40020028 	.word	0x40020028
 80061d0:	40020040 	.word	0x40020040
 80061d4:	40020058 	.word	0x40020058
 80061d8:	40020070 	.word	0x40020070
 80061dc:	40020088 	.word	0x40020088
 80061e0:	400200a0 	.word	0x400200a0
 80061e4:	400200b8 	.word	0x400200b8
 80061e8:	40020410 	.word	0x40020410
 80061ec:	40020428 	.word	0x40020428
 80061f0:	40020440 	.word	0x40020440
 80061f4:	40020458 	.word	0x40020458
 80061f8:	40020470 	.word	0x40020470
 80061fc:	40020488 	.word	0x40020488
 8006200:	400204a0 	.word	0x400204a0
 8006204:	400204b8 	.word	0x400204b8

08006208 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006232:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006238:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a7f      	ldr	r2, [pc, #508]	@ (800643c <DMA_SetConfig+0x21c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d072      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a7d      	ldr	r2, [pc, #500]	@ (8006440 <DMA_SetConfig+0x220>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d06d      	beq.n	800632a <DMA_SetConfig+0x10a>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a7c      	ldr	r2, [pc, #496]	@ (8006444 <DMA_SetConfig+0x224>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d068      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a7a      	ldr	r2, [pc, #488]	@ (8006448 <DMA_SetConfig+0x228>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d063      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a79      	ldr	r2, [pc, #484]	@ (800644c <DMA_SetConfig+0x22c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d05e      	beq.n	800632a <DMA_SetConfig+0x10a>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a77      	ldr	r2, [pc, #476]	@ (8006450 <DMA_SetConfig+0x230>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d059      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a76      	ldr	r2, [pc, #472]	@ (8006454 <DMA_SetConfig+0x234>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d054      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a74      	ldr	r2, [pc, #464]	@ (8006458 <DMA_SetConfig+0x238>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d04f      	beq.n	800632a <DMA_SetConfig+0x10a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a73      	ldr	r2, [pc, #460]	@ (800645c <DMA_SetConfig+0x23c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04a      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a71      	ldr	r2, [pc, #452]	@ (8006460 <DMA_SetConfig+0x240>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d045      	beq.n	800632a <DMA_SetConfig+0x10a>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a70      	ldr	r2, [pc, #448]	@ (8006464 <DMA_SetConfig+0x244>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006468 <DMA_SetConfig+0x248>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a6d      	ldr	r2, [pc, #436]	@ (800646c <DMA_SetConfig+0x24c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d036      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a6b      	ldr	r2, [pc, #428]	@ (8006470 <DMA_SetConfig+0x250>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d031      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006474 <DMA_SetConfig+0x254>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02c      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a68      	ldr	r2, [pc, #416]	@ (8006478 <DMA_SetConfig+0x258>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d027      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a67      	ldr	r2, [pc, #412]	@ (800647c <DMA_SetConfig+0x25c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a65      	ldr	r2, [pc, #404]	@ (8006480 <DMA_SetConfig+0x260>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a64      	ldr	r2, [pc, #400]	@ (8006484 <DMA_SetConfig+0x264>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <DMA_SetConfig+0x10a>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a62      	ldr	r2, [pc, #392]	@ (8006488 <DMA_SetConfig+0x268>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a61      	ldr	r2, [pc, #388]	@ (800648c <DMA_SetConfig+0x26c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <DMA_SetConfig+0x10a>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a5f      	ldr	r2, [pc, #380]	@ (8006490 <DMA_SetConfig+0x270>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a5e      	ldr	r2, [pc, #376]	@ (8006494 <DMA_SetConfig+0x274>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <DMA_SetConfig+0x10a>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a5c      	ldr	r2, [pc, #368]	@ (8006498 <DMA_SetConfig+0x278>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d101      	bne.n	800632e <DMA_SetConfig+0x10e>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <DMA_SetConfig+0x110>
 800632e:	2300      	movs	r3, #0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800633c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800634e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a39      	ldr	r2, [pc, #228]	@ (800643c <DMA_SetConfig+0x21c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d04a      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a38      	ldr	r2, [pc, #224]	@ (8006440 <DMA_SetConfig+0x220>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d045      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a36      	ldr	r2, [pc, #216]	@ (8006444 <DMA_SetConfig+0x224>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d040      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a35      	ldr	r2, [pc, #212]	@ (8006448 <DMA_SetConfig+0x228>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d03b      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a33      	ldr	r2, [pc, #204]	@ (800644c <DMA_SetConfig+0x22c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d036      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a32      	ldr	r2, [pc, #200]	@ (8006450 <DMA_SetConfig+0x230>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d031      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a30      	ldr	r2, [pc, #192]	@ (8006454 <DMA_SetConfig+0x234>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02c      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2f      	ldr	r2, [pc, #188]	@ (8006458 <DMA_SetConfig+0x238>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d027      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2d      	ldr	r2, [pc, #180]	@ (800645c <DMA_SetConfig+0x23c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d022      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006460 <DMA_SetConfig+0x240>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006464 <DMA_SetConfig+0x244>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d018      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a29      	ldr	r2, [pc, #164]	@ (8006468 <DMA_SetConfig+0x248>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a27      	ldr	r2, [pc, #156]	@ (800646c <DMA_SetConfig+0x24c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a26      	ldr	r2, [pc, #152]	@ (8006470 <DMA_SetConfig+0x250>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a24      	ldr	r2, [pc, #144]	@ (8006474 <DMA_SetConfig+0x254>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <DMA_SetConfig+0x1d0>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a23      	ldr	r2, [pc, #140]	@ (8006478 <DMA_SetConfig+0x258>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d101      	bne.n	80063f4 <DMA_SetConfig+0x1d4>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <DMA_SetConfig+0x1d6>
 80063f4:	2300      	movs	r3, #0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d059      	beq.n	80064ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	223f      	movs	r2, #63	@ 0x3f
 8006404:	409a      	lsls	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006418:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d138      	bne.n	800649c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800643a:	e086      	b.n	800654a <DMA_SetConfig+0x32a>
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
 800647c:	58025408 	.word	0x58025408
 8006480:	5802541c 	.word	0x5802541c
 8006484:	58025430 	.word	0x58025430
 8006488:	58025444 	.word	0x58025444
 800648c:	58025458 	.word	0x58025458
 8006490:	5802546c 	.word	0x5802546c
 8006494:	58025480 	.word	0x58025480
 8006498:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]
}
 80064ac:	e04d      	b.n	800654a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <DMA_SetConfig+0x338>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d022      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a27      	ldr	r2, [pc, #156]	@ (800655c <DMA_SetConfig+0x33c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01d      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a26      	ldr	r2, [pc, #152]	@ (8006560 <DMA_SetConfig+0x340>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a24      	ldr	r2, [pc, #144]	@ (8006564 <DMA_SetConfig+0x344>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a23      	ldr	r2, [pc, #140]	@ (8006568 <DMA_SetConfig+0x348>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a21      	ldr	r2, [pc, #132]	@ (800656c <DMA_SetConfig+0x34c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a20      	ldr	r2, [pc, #128]	@ (8006570 <DMA_SetConfig+0x350>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <DMA_SetConfig+0x2de>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <DMA_SetConfig+0x354>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d101      	bne.n	8006502 <DMA_SetConfig+0x2e2>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <DMA_SetConfig+0x2e4>
 8006502:	2300      	movs	r3, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d020      	beq.n	800654a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2201      	movs	r2, #1
 8006512:	409a      	lsls	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d108      	bne.n	800653a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	60da      	str	r2, [r3, #12]
}
 8006538:	e007      	b.n	800654a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	58025408 	.word	0x58025408
 800655c:	5802541c 	.word	0x5802541c
 8006560:	58025430 	.word	0x58025430
 8006564:	58025444 	.word	0x58025444
 8006568:	58025458 	.word	0x58025458
 800656c:	5802546c 	.word	0x5802546c
 8006570:	58025480 	.word	0x58025480
 8006574:	58025494 	.word	0x58025494

08006578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a42      	ldr	r2, [pc, #264]	@ (8006690 <DMA_CalcBaseAndBitshift+0x118>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d04a      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a41      	ldr	r2, [pc, #260]	@ (8006694 <DMA_CalcBaseAndBitshift+0x11c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d045      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a3f      	ldr	r2, [pc, #252]	@ (8006698 <DMA_CalcBaseAndBitshift+0x120>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d040      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a3e      	ldr	r2, [pc, #248]	@ (800669c <DMA_CalcBaseAndBitshift+0x124>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d03b      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a3c      	ldr	r2, [pc, #240]	@ (80066a0 <DMA_CalcBaseAndBitshift+0x128>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d036      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a3b      	ldr	r2, [pc, #236]	@ (80066a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d031      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a39      	ldr	r2, [pc, #228]	@ (80066a8 <DMA_CalcBaseAndBitshift+0x130>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02c      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a38      	ldr	r2, [pc, #224]	@ (80066ac <DMA_CalcBaseAndBitshift+0x134>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d027      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a36      	ldr	r2, [pc, #216]	@ (80066b0 <DMA_CalcBaseAndBitshift+0x138>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a35      	ldr	r2, [pc, #212]	@ (80066b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a33      	ldr	r2, [pc, #204]	@ (80066b8 <DMA_CalcBaseAndBitshift+0x140>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a32      	ldr	r2, [pc, #200]	@ (80066bc <DMA_CalcBaseAndBitshift+0x144>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a30      	ldr	r2, [pc, #192]	@ (80066c0 <DMA_CalcBaseAndBitshift+0x148>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2f      	ldr	r2, [pc, #188]	@ (80066c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a2d      	ldr	r2, [pc, #180]	@ (80066c8 <DMA_CalcBaseAndBitshift+0x150>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <DMA_CalcBaseAndBitshift+0xa8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a2c      	ldr	r2, [pc, #176]	@ (80066cc <DMA_CalcBaseAndBitshift+0x154>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d101      	bne.n	8006624 <DMA_CalcBaseAndBitshift+0xac>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <DMA_CalcBaseAndBitshift+0xae>
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d024      	beq.n	8006674 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3b10      	subs	r3, #16
 8006632:	4a27      	ldr	r2, [pc, #156]	@ (80066d0 <DMA_CalcBaseAndBitshift+0x158>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	4a24      	ldr	r2, [pc, #144]	@ (80066d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006644:	5cd3      	ldrb	r3, [r2, r3]
 8006646:	461a      	mov	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b03      	cmp	r3, #3
 8006650:	d908      	bls.n	8006664 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	4b1f      	ldr	r3, [pc, #124]	@ (80066d8 <DMA_CalcBaseAndBitshift+0x160>)
 800665a:	4013      	ands	r3, r2
 800665c:	1d1a      	adds	r2, r3, #4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	659a      	str	r2, [r3, #88]	@ 0x58
 8006662:	e00d      	b.n	8006680 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	4b1b      	ldr	r3, [pc, #108]	@ (80066d8 <DMA_CalcBaseAndBitshift+0x160>)
 800666c:	4013      	ands	r3, r2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6593      	str	r3, [r2, #88]	@ 0x58
 8006672:	e005      	b.n	8006680 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40020010 	.word	0x40020010
 8006694:	40020028 	.word	0x40020028
 8006698:	40020040 	.word	0x40020040
 800669c:	40020058 	.word	0x40020058
 80066a0:	40020070 	.word	0x40020070
 80066a4:	40020088 	.word	0x40020088
 80066a8:	400200a0 	.word	0x400200a0
 80066ac:	400200b8 	.word	0x400200b8
 80066b0:	40020410 	.word	0x40020410
 80066b4:	40020428 	.word	0x40020428
 80066b8:	40020440 	.word	0x40020440
 80066bc:	40020458 	.word	0x40020458
 80066c0:	40020470 	.word	0x40020470
 80066c4:	40020488 	.word	0x40020488
 80066c8:	400204a0 	.word	0x400204a0
 80066cc:	400204b8 	.word	0x400204b8
 80066d0:	aaaaaaab 	.word	0xaaaaaaab
 80066d4:	0800ee38 	.word	0x0800ee38
 80066d8:	fffffc00 	.word	0xfffffc00

080066dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d120      	bne.n	8006732 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d858      	bhi.n	80067aa <DMA_CheckFifoParam+0xce>
 80066f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006700 <DMA_CheckFifoParam+0x24>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006711 	.word	0x08006711
 8006704:	08006723 	.word	0x08006723
 8006708:	08006711 	.word	0x08006711
 800670c:	080067ab 	.word	0x080067ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d048      	beq.n	80067ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006720:	e045      	b.n	80067ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800672a:	d142      	bne.n	80067b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006730:	e03f      	b.n	80067b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673a:	d123      	bne.n	8006784 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	2b03      	cmp	r3, #3
 8006742:	d838      	bhi.n	80067b6 <DMA_CheckFifoParam+0xda>
 8006744:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <DMA_CheckFifoParam+0x70>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	0800675d 	.word	0x0800675d
 8006750:	08006763 	.word	0x08006763
 8006754:	0800675d 	.word	0x0800675d
 8006758:	08006775 	.word	0x08006775
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
        break;
 8006760:	e030      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d025      	beq.n	80067ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006772:	e022      	b.n	80067ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800677c:	d11f      	bne.n	80067be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006782:	e01c      	b.n	80067be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	2b02      	cmp	r3, #2
 800678a:	d902      	bls.n	8006792 <DMA_CheckFifoParam+0xb6>
 800678c:	2b03      	cmp	r3, #3
 800678e:	d003      	beq.n	8006798 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006790:	e018      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]
        break;
 8006796:	e015      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
    break;
 80067a8:	e00b      	b.n	80067c2 <DMA_CheckFifoParam+0xe6>
        break;
 80067aa:	bf00      	nop
 80067ac:	e00a      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        break;
 80067ae:	bf00      	nop
 80067b0:	e008      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        break;
 80067b2:	bf00      	nop
 80067b4:	e006      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        break;
 80067b6:	bf00      	nop
 80067b8:	e004      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        break;
 80067ba:	bf00      	nop
 80067bc:	e002      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
        break;
 80067be:	bf00      	nop
 80067c0:	e000      	b.n	80067c4 <DMA_CheckFifoParam+0xe8>
    break;
 80067c2:	bf00      	nop
    }
  }

  return status;
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop

080067d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a38      	ldr	r2, [pc, #224]	@ (80068c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d022      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a36      	ldr	r2, [pc, #216]	@ (80068cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01d      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a35      	ldr	r2, [pc, #212]	@ (80068d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d018      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a33      	ldr	r2, [pc, #204]	@ (80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a32      	ldr	r2, [pc, #200]	@ (80068d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a30      	ldr	r2, [pc, #192]	@ (80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2f      	ldr	r2, [pc, #188]	@ (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a2d      	ldr	r2, [pc, #180]	@ (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01a      	beq.n	8006872 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	3b08      	subs	r3, #8
 8006844:	4a28      	ldr	r2, [pc, #160]	@ (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	091b      	lsrs	r3, r3, #4
 800684c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4b26      	ldr	r3, [pc, #152]	@ (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006852:	4413      	add	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a24      	ldr	r2, [pc, #144]	@ (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006860:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 031f 	and.w	r3, r3, #31
 8006868:	2201      	movs	r2, #1
 800686a:	409a      	lsls	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006870:	e024      	b.n	80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	3b10      	subs	r3, #16
 800687a:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4a1c      	ldr	r2, [pc, #112]	@ (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d806      	bhi.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4a1b      	ldr	r2, [pc, #108]	@ (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d902      	bls.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3308      	adds	r3, #8
 8006898:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4b18      	ldr	r3, [pc, #96]	@ (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a16      	ldr	r2, [pc, #88]	@ (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2201      	movs	r2, #1
 80068b6:	409a      	lsls	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068bc:	bf00      	nop
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	58025408 	.word	0x58025408
 80068cc:	5802541c 	.word	0x5802541c
 80068d0:	58025430 	.word	0x58025430
 80068d4:	58025444 	.word	0x58025444
 80068d8:	58025458 	.word	0x58025458
 80068dc:	5802546c 	.word	0x5802546c
 80068e0:	58025480 	.word	0x58025480
 80068e4:	58025494 	.word	0x58025494
 80068e8:	cccccccd 	.word	0xcccccccd
 80068ec:	16009600 	.word	0x16009600
 80068f0:	58025880 	.word	0x58025880
 80068f4:	aaaaaaab 	.word	0xaaaaaaab
 80068f8:	400204b8 	.word	0x400204b8
 80068fc:	4002040f 	.word	0x4002040f
 8006900:	10008200 	.word	0x10008200
 8006904:	40020880 	.word	0x40020880

08006908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d04a      	beq.n	80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b08      	cmp	r3, #8
 8006922:	d847      	bhi.n	80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a25      	ldr	r2, [pc, #148]	@ (80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a24      	ldr	r2, [pc, #144]	@ (80069c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d01d      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a22      	ldr	r2, [pc, #136]	@ (80069c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d018      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a21      	ldr	r2, [pc, #132]	@ (80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1f      	ldr	r2, [pc, #124]	@ (80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1e      	ldr	r2, [pc, #120]	@ (80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d009      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1b      	ldr	r2, [pc, #108]	@ (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d101      	bne.n	8006978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006974:	2301      	movs	r3, #1
 8006976:	e000      	b.n	800697a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006978:	2300      	movs	r3, #0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4b17      	ldr	r3, [pc, #92]	@ (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	461a      	mov	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006990:	671a      	str	r2, [r3, #112]	@ 0x70
 8006992:	e009      	b.n	80069a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4b14      	ldr	r3, [pc, #80]	@ (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a11      	ldr	r2, [pc, #68]	@ (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2201      	movs	r2, #1
 80069ae:	409a      	lsls	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	58025408 	.word	0x58025408
 80069c4:	5802541c 	.word	0x5802541c
 80069c8:	58025430 	.word	0x58025430
 80069cc:	58025444 	.word	0x58025444
 80069d0:	58025458 	.word	0x58025458
 80069d4:	5802546c 	.word	0x5802546c
 80069d8:	58025480 	.word	0x58025480
 80069dc:	58025494 	.word	0x58025494
 80069e0:	1600963f 	.word	0x1600963f
 80069e4:	58025940 	.word	0x58025940
 80069e8:	1000823f 	.word	0x1000823f
 80069ec:	40020940 	.word	0x40020940

080069f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b089      	sub	sp, #36	@ 0x24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069fe:	4b86      	ldr	r3, [pc, #536]	@ (8006c18 <HAL_GPIO_Init+0x228>)
 8006a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a02:	e18c      	b.n	8006d1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	2101      	movs	r1, #1
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a10:	4013      	ands	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 817e 	beq.w	8006d18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d005      	beq.n	8006a34 <HAL_GPIO_Init+0x44>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d130      	bne.n	8006a96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	2203      	movs	r2, #3
 8006a40:	fa02 f303 	lsl.w	r3, r2, r3
 8006a44:	43db      	mvns	r3, r3
 8006a46:	69ba      	ldr	r2, [r7, #24]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	43db      	mvns	r3, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	4013      	ands	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	091b      	lsrs	r3, r3, #4
 8006a80:	f003 0201 	and.w	r2, r3, #1
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d017      	beq.n	8006ad2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	2203      	movs	r2, #3
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d123      	bne.n	8006b26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	08da      	lsrs	r2, r3, #3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3208      	adds	r2, #8
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4013      	ands	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	08da      	lsrs	r2, r3, #3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3208      	adds	r2, #8
 8006b20:	69b9      	ldr	r1, [r7, #24]
 8006b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	2203      	movs	r2, #3
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43db      	mvns	r3, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f003 0203 	and.w	r2, r3, #3
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80d8 	beq.w	8006d18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b68:	4b2c      	ldr	r3, [pc, #176]	@ (8006c1c <HAL_GPIO_Init+0x22c>)
 8006b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006c1c <HAL_GPIO_Init+0x22c>)
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006b78:	4b28      	ldr	r3, [pc, #160]	@ (8006c1c <HAL_GPIO_Init+0x22c>)
 8006b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b86:	4a26      	ldr	r2, [pc, #152]	@ (8006c20 <HAL_GPIO_Init+0x230>)
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	089b      	lsrs	r3, r3, #2
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	220f      	movs	r2, #15
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	@ (8006c24 <HAL_GPIO_Init+0x234>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d04a      	beq.n	8006c48 <HAL_GPIO_Init+0x258>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c28 <HAL_GPIO_Init+0x238>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d02b      	beq.n	8006c12 <HAL_GPIO_Init+0x222>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c2c <HAL_GPIO_Init+0x23c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d025      	beq.n	8006c0e <HAL_GPIO_Init+0x21e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c30 <HAL_GPIO_Init+0x240>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d01f      	beq.n	8006c0a <HAL_GPIO_Init+0x21a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a19      	ldr	r2, [pc, #100]	@ (8006c34 <HAL_GPIO_Init+0x244>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d019      	beq.n	8006c06 <HAL_GPIO_Init+0x216>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	@ (8006c38 <HAL_GPIO_Init+0x248>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_GPIO_Init+0x212>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a17      	ldr	r2, [pc, #92]	@ (8006c3c <HAL_GPIO_Init+0x24c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d00d      	beq.n	8006bfe <HAL_GPIO_Init+0x20e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a16      	ldr	r2, [pc, #88]	@ (8006c40 <HAL_GPIO_Init+0x250>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d007      	beq.n	8006bfa <HAL_GPIO_Init+0x20a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a15      	ldr	r2, [pc, #84]	@ (8006c44 <HAL_GPIO_Init+0x254>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <HAL_GPIO_Init+0x206>
 8006bf2:	2309      	movs	r3, #9
 8006bf4:	e029      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	e027      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006bfa:	2307      	movs	r3, #7
 8006bfc:	e025      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006bfe:	2306      	movs	r3, #6
 8006c00:	e023      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006c02:	2305      	movs	r3, #5
 8006c04:	e021      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006c06:	2304      	movs	r3, #4
 8006c08:	e01f      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e01d      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e01b      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e019      	b.n	8006c4a <HAL_GPIO_Init+0x25a>
 8006c16:	bf00      	nop
 8006c18:	58000080 	.word	0x58000080
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	58000400 	.word	0x58000400
 8006c24:	58020000 	.word	0x58020000
 8006c28:	58020400 	.word	0x58020400
 8006c2c:	58020800 	.word	0x58020800
 8006c30:	58020c00 	.word	0x58020c00
 8006c34:	58021000 	.word	0x58021000
 8006c38:	58021400 	.word	0x58021400
 8006c3c:	58021800 	.word	0x58021800
 8006c40:	58021c00 	.word	0x58021c00
 8006c44:	58022400 	.word	0x58022400
 8006c48:	2300      	movs	r3, #0
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	f002 0203 	and.w	r2, r2, #3
 8006c50:	0092      	lsls	r2, r2, #2
 8006c52:	4093      	lsls	r3, r2
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c5a:	4938      	ldr	r1, [pc, #224]	@ (8006d3c <HAL_GPIO_Init+0x34c>)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	3302      	adds	r3, #2
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	43db      	mvns	r3, r3
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	4013      	ands	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006cbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	43db      	mvns	r3, r3
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f ae6b 	bne.w	8006a04 <HAL_GPIO_Init+0x14>
  }
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	3724      	adds	r7, #36	@ 0x24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	58000400 	.word	0x58000400

08006d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	807b      	strh	r3, [r7, #2]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d50:	787b      	ldrb	r3, [r7, #1]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d5c:	e003      	b.n	8006d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d5e:	887b      	ldrh	r3, [r7, #2]
 8006d60:	041a      	lsls	r2, r3, #16
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	619a      	str	r2, [r3, #24]
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	4603      	mov	r3, r0
 8006d7a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d80:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f804 	bl	8006da6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	4603      	mov	r3, r0
 8006dae:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006dc4:	4b19      	ldr	r3, [pc, #100]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d00a      	beq.n	8006de6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006dd0:	4b16      	ldr	r3, [pc, #88]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d001      	beq.n	8006de2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e01f      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e01d      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006de6:	4b11      	ldr	r3, [pc, #68]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f023 0207 	bic.w	r2, r3, #7
 8006dee:	490f      	ldr	r1, [pc, #60]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006df6:	f7fc fe77 	bl	8003ae8 <HAL_GetTick>
 8006dfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dfc:	e009      	b.n	8006e12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dfe:	f7fc fe73 	bl	8003ae8 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e0c:	d901      	bls.n	8006e12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e007      	b.n	8006e22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e12:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <HAL_PWREx_ConfigSupply+0x70>)
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1e:	d1ee      	bne.n	8006dfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024800 	.word	0x58024800

08006e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08c      	sub	sp, #48	@ 0x30
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e3c8      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 8087 	beq.w	8006f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e50:	4b88      	ldr	r3, [pc, #544]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e5a:	4b86      	ldr	r3, [pc, #536]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d007      	beq.n	8006e76 <HAL_RCC_OscConfig+0x46>
 8006e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e68:	2b18      	cmp	r3, #24
 8006e6a:	d110      	bne.n	8006e8e <HAL_RCC_OscConfig+0x5e>
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d10b      	bne.n	8006e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e76:	4b7f      	ldr	r3, [pc, #508]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d06c      	beq.n	8006f5c <HAL_RCC_OscConfig+0x12c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d168      	bne.n	8006f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e3a2      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e96:	d106      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x76>
 8006e98:	4b76      	ldr	r3, [pc, #472]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a75      	ldr	r2, [pc, #468]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e02e      	b.n	8006f04 <HAL_RCC_OscConfig+0xd4>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10c      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x98>
 8006eae:	4b71      	ldr	r3, [pc, #452]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a70      	ldr	r2, [pc, #448]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	4b6e      	ldr	r3, [pc, #440]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e01d      	b.n	8006f04 <HAL_RCC_OscConfig+0xd4>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCC_OscConfig+0xbc>
 8006ed2:	4b68      	ldr	r3, [pc, #416]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a67      	ldr	r2, [pc, #412]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	4b65      	ldr	r3, [pc, #404]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a64      	ldr	r2, [pc, #400]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e00b      	b.n	8006f04 <HAL_RCC_OscConfig+0xd4>
 8006eec:	4b61      	ldr	r3, [pc, #388]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a60      	ldr	r2, [pc, #384]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a5d      	ldr	r2, [pc, #372]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d013      	beq.n	8006f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fc fdec 	bl	8003ae8 <HAL_GetTick>
 8006f10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fc fde8 	bl	8003ae8 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	@ 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e356      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f26:	4b53      	ldr	r3, [pc, #332]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0xe4>
 8006f32:	e014      	b.n	8006f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fc fdd8 	bl	8003ae8 <HAL_GetTick>
 8006f38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f3c:	f7fc fdd4 	bl	8003ae8 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b64      	cmp	r3, #100	@ 0x64
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e342      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f4e:	4b49      	ldr	r3, [pc, #292]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x10c>
 8006f5a:	e000      	b.n	8006f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 808c 	beq.w	8007084 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f6c:	4b41      	ldr	r3, [pc, #260]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f76:	4b3f      	ldr	r3, [pc, #252]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_RCC_OscConfig+0x162>
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	2b18      	cmp	r3, #24
 8006f86:	d137      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x1c8>
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d132      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f92:	4b38      	ldr	r3, [pc, #224]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0304 	and.w	r3, r3, #4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_RCC_OscConfig+0x17a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e314      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006faa:	4b32      	ldr	r3, [pc, #200]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 0219 	bic.w	r2, r3, #25
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	492f      	ldr	r1, [pc, #188]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fc fd94 	bl	8003ae8 <HAL_GetTick>
 8006fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fc4:	f7fc fd90 	bl	8003ae8 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e2fe      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fd6:	4b27      	ldr	r3, [pc, #156]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe2:	4b24      	ldr	r3, [pc, #144]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	061b      	lsls	r3, r3, #24
 8006ff0:	4920      	ldr	r1, [pc, #128]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff6:	e045      	b.n	8007084 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d026      	beq.n	800704e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007000:	4b1c      	ldr	r3, [pc, #112]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f023 0219 	bic.w	r2, r3, #25
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4919      	ldr	r1, [pc, #100]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fc fd69 	bl	8003ae8 <HAL_GetTick>
 8007016:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800701a:	f7fc fd65 	bl	8003ae8 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e2d3      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800702c:	4b11      	ldr	r3, [pc, #68]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	4b0e      	ldr	r3, [pc, #56]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	061b      	lsls	r3, r3, #24
 8007046:	490b      	ldr	r1, [pc, #44]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8007048:	4313      	orrs	r3, r2
 800704a:	604b      	str	r3, [r1, #4]
 800704c:	e01a      	b.n	8007084 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a08      	ldr	r2, [pc, #32]	@ (8007074 <HAL_RCC_OscConfig+0x244>)
 8007054:	f023 0301 	bic.w	r3, r3, #1
 8007058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705a:	f7fc fd45 	bl	8003ae8 <HAL_GetTick>
 800705e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007060:	e00a      	b.n	8007078 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007062:	f7fc fd41 	bl	8003ae8 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d903      	bls.n	8007078 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e2af      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
 8007074:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007078:	4b96      	ldr	r3, [pc, #600]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ee      	bne.n	8007062 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d06a      	beq.n	8007166 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007090:	4b90      	ldr	r3, [pc, #576]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007098:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800709a:	4b8e      	ldr	r3, [pc, #568]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d007      	beq.n	80070b6 <HAL_RCC_OscConfig+0x286>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b18      	cmp	r3, #24
 80070aa:	d11b      	bne.n	80070e4 <HAL_RCC_OscConfig+0x2b4>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d116      	bne.n	80070e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070b6:	4b87      	ldr	r3, [pc, #540]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_RCC_OscConfig+0x29e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	2b80      	cmp	r3, #128	@ 0x80
 80070c8:	d001      	beq.n	80070ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e282      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070ce:	4b81      	ldr	r3, [pc, #516]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	061b      	lsls	r3, r3, #24
 80070dc:	497d      	ldr	r1, [pc, #500]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070e2:	e040      	b.n	8007166 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d023      	beq.n	8007134 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80070ec:	4b79      	ldr	r3, [pc, #484]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a78      	ldr	r2, [pc, #480]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80070f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fc fcf6 	bl	8003ae8 <HAL_GetTick>
 80070fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007100:	f7fc fcf2 	bl	8003ae8 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e260      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007112:	4b70      	ldr	r3, [pc, #448]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800711e:	4b6d      	ldr	r3, [pc, #436]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	061b      	lsls	r3, r3, #24
 800712c:	4969      	ldr	r1, [pc, #420]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800712e:	4313      	orrs	r3, r2
 8007130:	60cb      	str	r3, [r1, #12]
 8007132:	e018      	b.n	8007166 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007134:	4b67      	ldr	r3, [pc, #412]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a66      	ldr	r2, [pc, #408]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800713a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800713e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007140:	f7fc fcd2 	bl	8003ae8 <HAL_GetTick>
 8007144:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007146:	e008      	b.n	800715a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007148:	f7fc fcce 	bl	8003ae8 <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e23c      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800715a:	4b5e      	ldr	r3, [pc, #376]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d036      	beq.n	80071e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d019      	beq.n	80071ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800717a:	4b56      	ldr	r3, [pc, #344]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800717c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800717e:	4a55      	ldr	r2, [pc, #340]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7fc fcaf 	bl	8003ae8 <HAL_GetTick>
 800718a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800718e:	f7fc fcab 	bl	8003ae8 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e219      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071a0:	4b4c      	ldr	r3, [pc, #304]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80071a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x35e>
 80071ac:	e018      	b.n	80071e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071ae:	4b49      	ldr	r3, [pc, #292]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80071b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b2:	4a48      	ldr	r2, [pc, #288]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ba:	f7fc fc95 	bl	8003ae8 <HAL_GetTick>
 80071be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c2:	f7fc fc91 	bl	8003ae8 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e1ff      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071d4:	4b3f      	ldr	r3, [pc, #252]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80071d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f0      	bne.n	80071c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d036      	beq.n	800725a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d019      	beq.n	8007228 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071f4:	4b37      	ldr	r3, [pc, #220]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a36      	ldr	r2, [pc, #216]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80071fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007200:	f7fc fc72 	bl	8003ae8 <HAL_GetTick>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007208:	f7fc fc6e 	bl	8003ae8 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e1dc      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800721a:	4b2e      	ldr	r3, [pc, #184]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f0      	beq.n	8007208 <HAL_RCC_OscConfig+0x3d8>
 8007226:	e018      	b.n	800725a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007228:	4b2a      	ldr	r3, [pc, #168]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a29      	ldr	r2, [pc, #164]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 800722e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007232:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007234:	f7fc fc58 	bl	8003ae8 <HAL_GetTick>
 8007238:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800723a:	e008      	b.n	800724e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800723c:	f7fc fc54 	bl	8003ae8 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b02      	cmp	r3, #2
 8007248:	d901      	bls.n	800724e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e1c2      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800724e:	4b21      	ldr	r3, [pc, #132]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f0      	bne.n	800723c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 8086 	beq.w	8007374 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007268:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <HAL_RCC_OscConfig+0x4a8>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1a      	ldr	r2, [pc, #104]	@ (80072d8 <HAL_RCC_OscConfig+0x4a8>)
 800726e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007274:	f7fc fc38 	bl	8003ae8 <HAL_GetTick>
 8007278:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727c:	f7fc fc34 	bl	8003ae8 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b64      	cmp	r3, #100	@ 0x64
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e1a2      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800728e:	4b12      	ldr	r3, [pc, #72]	@ (80072d8 <HAL_RCC_OscConfig+0x4a8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d106      	bne.n	80072b0 <HAL_RCC_OscConfig+0x480>
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	4a0b      	ldr	r2, [pc, #44]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ae:	e032      	b.n	8007316 <HAL_RCC_OscConfig+0x4e6>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d111      	bne.n	80072dc <HAL_RCC_OscConfig+0x4ac>
 80072b8:	4b06      	ldr	r3, [pc, #24]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80072ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072bc:	4a05      	ldr	r2, [pc, #20]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c4:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c8:	4a02      	ldr	r2, [pc, #8]	@ (80072d4 <HAL_RCC_OscConfig+0x4a4>)
 80072ca:	f023 0304 	bic.w	r3, r3, #4
 80072ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d0:	e021      	b.n	8007316 <HAL_RCC_OscConfig+0x4e6>
 80072d2:	bf00      	nop
 80072d4:	58024400 	.word	0x58024400
 80072d8:	58024800 	.word	0x58024800
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b05      	cmp	r3, #5
 80072e2:	d10c      	bne.n	80072fe <HAL_RCC_OscConfig+0x4ce>
 80072e4:	4b83      	ldr	r3, [pc, #524]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e8:	4a82      	ldr	r2, [pc, #520]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80072ea:	f043 0304 	orr.w	r3, r3, #4
 80072ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f0:	4b80      	ldr	r3, [pc, #512]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f4:	4a7f      	ldr	r2, [pc, #508]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80072fc:	e00b      	b.n	8007316 <HAL_RCC_OscConfig+0x4e6>
 80072fe:	4b7d      	ldr	r3, [pc, #500]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007302:	4a7c      	ldr	r2, [pc, #496]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	6713      	str	r3, [r2, #112]	@ 0x70
 800730a:	4b7a      	ldr	r3, [pc, #488]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730e:	4a79      	ldr	r2, [pc, #484]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007310:	f023 0304 	bic.w	r3, r3, #4
 8007314:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d015      	beq.n	800734a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fc fbe3 	bl	8003ae8 <HAL_GetTick>
 8007322:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007324:	e00a      	b.n	800733c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fc fbdf 	bl	8003ae8 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e14b      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800733c:	4b6d      	ldr	r3, [pc, #436]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800733e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0ee      	beq.n	8007326 <HAL_RCC_OscConfig+0x4f6>
 8007348:	e014      	b.n	8007374 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734a:	f7fc fbcd 	bl	8003ae8 <HAL_GetTick>
 800734e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007350:	e00a      	b.n	8007368 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007352:	f7fc fbc9 	bl	8003ae8 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007360:	4293      	cmp	r3, r2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e135      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007368:	4b62      	ldr	r3, [pc, #392]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800736a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1ee      	bne.n	8007352 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 812a 	beq.w	80075d2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800737e:	4b5d      	ldr	r3, [pc, #372]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007386:	2b18      	cmp	r3, #24
 8007388:	f000 80ba 	beq.w	8007500 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007390:	2b02      	cmp	r3, #2
 8007392:	f040 8095 	bne.w	80074c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007396:	4b57      	ldr	r3, [pc, #348]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a56      	ldr	r2, [pc, #344]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800739c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a2:	f7fc fba1 	bl	8003ae8 <HAL_GetTick>
 80073a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073aa:	f7fc fb9d 	bl	8003ae8 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e10b      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073bc:	4b4d      	ldr	r3, [pc, #308]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f0      	bne.n	80073aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073c8:	4b4a      	ldr	r3, [pc, #296]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80073ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073cc:	4b4a      	ldr	r3, [pc, #296]	@ (80074f8 <HAL_RCC_OscConfig+0x6c8>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073d8:	0112      	lsls	r2, r2, #4
 80073da:	430a      	orrs	r2, r1
 80073dc:	4945      	ldr	r1, [pc, #276]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	3b01      	subs	r3, #1
 80073e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f0:	3b01      	subs	r3, #1
 80073f2:	025b      	lsls	r3, r3, #9
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	3b01      	subs	r3, #1
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800740a:	3b01      	subs	r3, #1
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007412:	4938      	ldr	r1, [pc, #224]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007414:	4313      	orrs	r3, r2
 8007416:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007418:	4b36      	ldr	r3, [pc, #216]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007424:	4b33      	ldr	r3, [pc, #204]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007428:	4b34      	ldr	r3, [pc, #208]	@ (80074fc <HAL_RCC_OscConfig+0x6cc>)
 800742a:	4013      	ands	r3, r2
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007430:	00d2      	lsls	r2, r2, #3
 8007432:	4930      	ldr	r1, [pc, #192]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007434:	4313      	orrs	r3, r2
 8007436:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007438:	4b2e      	ldr	r3, [pc, #184]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	f023 020c 	bic.w	r2, r3, #12
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	492b      	ldr	r1, [pc, #172]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007446:	4313      	orrs	r3, r2
 8007448:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800744a:	4b2a      	ldr	r3, [pc, #168]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800744c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744e:	f023 0202 	bic.w	r2, r3, #2
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007456:	4927      	ldr	r1, [pc, #156]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007458:	4313      	orrs	r3, r2
 800745a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800745c:	4b25      	ldr	r3, [pc, #148]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	4a24      	ldr	r2, [pc, #144]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007468:	4b22      	ldr	r3, [pc, #136]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800746a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746c:	4a21      	ldr	r2, [pc, #132]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800746e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007474:	4b1f      	ldr	r3, [pc, #124]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007478:	4a1e      	ldr	r2, [pc, #120]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800747a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800747e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007480:	4b1c      	ldr	r3, [pc, #112]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	4a1b      	ldr	r2, [pc, #108]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800748c:	4b19      	ldr	r3, [pc, #100]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a18      	ldr	r2, [pc, #96]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fc fb26 	bl	8003ae8 <HAL_GetTick>
 800749c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a0:	f7fc fb22 	bl	8003ae8 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e090      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074b2:	4b10      	ldr	r3, [pc, #64]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x670>
 80074be:	e088      	b.n	80075d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a0b      	ldr	r2, [pc, #44]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80074c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074cc:	f7fc fb0c 	bl	8003ae8 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d4:	f7fc fb08 	bl	8003ae8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e076      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074e6:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <HAL_RCC_OscConfig+0x6c4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x6a4>
 80074f2:	e06e      	b.n	80075d2 <HAL_RCC_OscConfig+0x7a2>
 80074f4:	58024400 	.word	0x58024400
 80074f8:	fffffc0c 	.word	0xfffffc0c
 80074fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007500:	4b36      	ldr	r3, [pc, #216]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007506:	4b35      	ldr	r3, [pc, #212]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	2b01      	cmp	r3, #1
 8007512:	d031      	beq.n	8007578 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f003 0203 	and.w	r2, r3, #3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800751e:	429a      	cmp	r2, r3
 8007520:	d12a      	bne.n	8007578 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	091b      	lsrs	r3, r3, #4
 8007526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d122      	bne.n	8007578 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d11a      	bne.n	8007578 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	0a5b      	lsrs	r3, r3, #9
 8007546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d111      	bne.n	8007578 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d108      	bne.n	8007578 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	0e1b      	lsrs	r3, r3, #24
 800756a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007572:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d001      	beq.n	800757c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e02b      	b.n	80075d4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800757c:	4b17      	ldr	r3, [pc, #92]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 800757e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007586:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	429a      	cmp	r2, r3
 8007590:	d01f      	beq.n	80075d2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007592:	4b12      	ldr	r3, [pc, #72]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 8007594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007596:	4a11      	ldr	r2, [pc, #68]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 8007598:	f023 0301 	bic.w	r3, r3, #1
 800759c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800759e:	f7fc faa3 	bl	8003ae8 <HAL_GetTick>
 80075a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80075a4:	bf00      	nop
 80075a6:	f7fc fa9f 	bl	8003ae8 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d0f9      	beq.n	80075a6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075b2:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 80075b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075b6:	4b0a      	ldr	r3, [pc, #40]	@ (80075e0 <HAL_RCC_OscConfig+0x7b0>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075be:	00d2      	lsls	r2, r2, #3
 80075c0:	4906      	ldr	r1, [pc, #24]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075c6:	4b05      	ldr	r3, [pc, #20]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a04      	ldr	r2, [pc, #16]	@ (80075dc <HAL_RCC_OscConfig+0x7ac>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3730      	adds	r7, #48	@ 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	58024400 	.word	0x58024400
 80075e0:	ffff0007 	.word	0xffff0007

080075e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e19c      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075f8:	4b8a      	ldr	r3, [pc, #552]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d910      	bls.n	8007628 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007606:	4b87      	ldr	r3, [pc, #540]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f023 020f 	bic.w	r2, r3, #15
 800760e:	4985      	ldr	r1, [pc, #532]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	4313      	orrs	r3, r2
 8007614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007616:	4b83      	ldr	r3, [pc, #524]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d001      	beq.n	8007628 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e184      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d010      	beq.n	8007656 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	4b7b      	ldr	r3, [pc, #492]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007640:	429a      	cmp	r2, r3
 8007642:	d908      	bls.n	8007656 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007644:	4b78      	ldr	r3, [pc, #480]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	4975      	ldr	r1, [pc, #468]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007652:	4313      	orrs	r3, r2
 8007654:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d010      	beq.n	8007684 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	4b70      	ldr	r3, [pc, #448]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800766e:	429a      	cmp	r2, r3
 8007670:	d908      	bls.n	8007684 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007672:	4b6d      	ldr	r3, [pc, #436]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	496a      	ldr	r1, [pc, #424]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007680:	4313      	orrs	r3, r2
 8007682:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	d010      	beq.n	80076b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699a      	ldr	r2, [r3, #24]
 8007694:	4b64      	ldr	r3, [pc, #400]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800769c:	429a      	cmp	r2, r3
 800769e:	d908      	bls.n	80076b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076a0:	4b61      	ldr	r3, [pc, #388]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	495e      	ldr	r1, [pc, #376]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d010      	beq.n	80076e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	4b59      	ldr	r3, [pc, #356]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d908      	bls.n	80076e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076ce:	4b56      	ldr	r3, [pc, #344]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	4953      	ldr	r1, [pc, #332]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d010      	beq.n	800770e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d908      	bls.n	800770e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f023 020f 	bic.w	r2, r3, #15
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4947      	ldr	r1, [pc, #284]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 800770a:	4313      	orrs	r3, r2
 800770c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d055      	beq.n	80077c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800771a:	4b43      	ldr	r3, [pc, #268]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	4940      	ldr	r1, [pc, #256]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007728:	4313      	orrs	r3, r2
 800772a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d107      	bne.n	8007744 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007734:	4b3c      	ldr	r3, [pc, #240]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d121      	bne.n	8007784 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e0f6      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d107      	bne.n	800775c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800774c:	4b36      	ldr	r3, [pc, #216]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d115      	bne.n	8007784 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0ea      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d107      	bne.n	8007774 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007764:	4b30      	ldr	r3, [pc, #192]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d109      	bne.n	8007784 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0de      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007774:	4b2c      	ldr	r3, [pc, #176]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e0d6      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007784:	4b28      	ldr	r3, [pc, #160]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	f023 0207 	bic.w	r2, r3, #7
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4925      	ldr	r1, [pc, #148]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 8007792:	4313      	orrs	r3, r2
 8007794:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007796:	f7fc f9a7 	bl	8003ae8 <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779c:	e00a      	b.n	80077b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800779e:	f7fc f9a3 	bl	8003ae8 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d901      	bls.n	80077b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e0be      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d1eb      	bne.n	800779e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d010      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68da      	ldr	r2, [r3, #12]
 80077d6:	4b14      	ldr	r3, [pc, #80]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	429a      	cmp	r2, r3
 80077e0:	d208      	bcs.n	80077f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e2:	4b11      	ldr	r3, [pc, #68]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f023 020f 	bic.w	r2, r3, #15
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	490e      	ldr	r1, [pc, #56]	@ (8007828 <HAL_RCC_ClockConfig+0x244>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d214      	bcs.n	800782c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 020f 	bic.w	r2, r3, #15
 800780a:	4906      	ldr	r1, [pc, #24]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007812:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <HAL_RCC_ClockConfig+0x240>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d005      	beq.n	800782c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e086      	b.n	8007932 <HAL_RCC_ClockConfig+0x34e>
 8007824:	52002000 	.word	0x52002000
 8007828:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d010      	beq.n	800785a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	4b3f      	ldr	r3, [pc, #252]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007844:	429a      	cmp	r2, r3
 8007846:	d208      	bcs.n	800785a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007848:	4b3c      	ldr	r3, [pc, #240]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	4939      	ldr	r1, [pc, #228]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 8007856:	4313      	orrs	r3, r2
 8007858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0308 	and.w	r3, r3, #8
 8007862:	2b00      	cmp	r3, #0
 8007864:	d010      	beq.n	8007888 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695a      	ldr	r2, [r3, #20]
 800786a:	4b34      	ldr	r3, [pc, #208]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007872:	429a      	cmp	r2, r3
 8007874:	d208      	bcs.n	8007888 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007876:	4b31      	ldr	r3, [pc, #196]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	492e      	ldr	r1, [pc, #184]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 8007884:	4313      	orrs	r3, r2
 8007886:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	d010      	beq.n	80078b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699a      	ldr	r2, [r3, #24]
 8007898:	4b28      	ldr	r3, [pc, #160]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d208      	bcs.n	80078b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078a4:	4b25      	ldr	r3, [pc, #148]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	4922      	ldr	r1, [pc, #136]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d010      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	69da      	ldr	r2, [r3, #28]
 80078c6:	4b1d      	ldr	r3, [pc, #116]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d208      	bcs.n	80078e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078d2:	4b1a      	ldr	r3, [pc, #104]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	4917      	ldr	r1, [pc, #92]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078e4:	f000 f834 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4b14      	ldr	r3, [pc, #80]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	f003 030f 	and.w	r3, r3, #15
 80078f4:	4912      	ldr	r1, [pc, #72]	@ (8007940 <HAL_RCC_ClockConfig+0x35c>)
 80078f6:	5ccb      	ldrb	r3, [r1, r3]
 80078f8:	f003 031f 	and.w	r3, r3, #31
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007902:	4b0e      	ldr	r3, [pc, #56]	@ (800793c <HAL_RCC_ClockConfig+0x358>)
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	4a0d      	ldr	r2, [pc, #52]	@ (8007940 <HAL_RCC_ClockConfig+0x35c>)
 800790c:	5cd3      	ldrb	r3, [r2, r3]
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
 8007918:	4a0a      	ldr	r2, [pc, #40]	@ (8007944 <HAL_RCC_ClockConfig+0x360>)
 800791a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800791c:	4a0a      	ldr	r2, [pc, #40]	@ (8007948 <HAL_RCC_ClockConfig+0x364>)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007922:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <HAL_RCC_ClockConfig+0x368>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f7fc f894 	bl	8003a54 <HAL_InitTick>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	58024400 	.word	0x58024400
 8007940:	0800ee28 	.word	0x0800ee28
 8007944:	24000010 	.word	0x24000010
 8007948:	2400000c 	.word	0x2400000c
 800794c:	24000014 	.word	0x24000014

08007950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007950:	b480      	push	{r7}
 8007952:	b089      	sub	sp, #36	@ 0x24
 8007954:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007956:	4bb3      	ldr	r3, [pc, #716]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800795e:	2b18      	cmp	r3, #24
 8007960:	f200 8155 	bhi.w	8007c0e <HAL_RCC_GetSysClockFreq+0x2be>
 8007964:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	080079d1 	.word	0x080079d1
 8007970:	08007c0f 	.word	0x08007c0f
 8007974:	08007c0f 	.word	0x08007c0f
 8007978:	08007c0f 	.word	0x08007c0f
 800797c:	08007c0f 	.word	0x08007c0f
 8007980:	08007c0f 	.word	0x08007c0f
 8007984:	08007c0f 	.word	0x08007c0f
 8007988:	08007c0f 	.word	0x08007c0f
 800798c:	080079f7 	.word	0x080079f7
 8007990:	08007c0f 	.word	0x08007c0f
 8007994:	08007c0f 	.word	0x08007c0f
 8007998:	08007c0f 	.word	0x08007c0f
 800799c:	08007c0f 	.word	0x08007c0f
 80079a0:	08007c0f 	.word	0x08007c0f
 80079a4:	08007c0f 	.word	0x08007c0f
 80079a8:	08007c0f 	.word	0x08007c0f
 80079ac:	080079fd 	.word	0x080079fd
 80079b0:	08007c0f 	.word	0x08007c0f
 80079b4:	08007c0f 	.word	0x08007c0f
 80079b8:	08007c0f 	.word	0x08007c0f
 80079bc:	08007c0f 	.word	0x08007c0f
 80079c0:	08007c0f 	.word	0x08007c0f
 80079c4:	08007c0f 	.word	0x08007c0f
 80079c8:	08007c0f 	.word	0x08007c0f
 80079cc:	08007a03 	.word	0x08007a03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079d0:	4b94      	ldr	r3, [pc, #592]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079dc:	4b91      	ldr	r3, [pc, #580]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	08db      	lsrs	r3, r3, #3
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	4a90      	ldr	r2, [pc, #576]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079e8:	fa22 f303 	lsr.w	r3, r2, r3
 80079ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079ee:	e111      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079f0:	4b8d      	ldr	r3, [pc, #564]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079f2:	61bb      	str	r3, [r7, #24]
      break;
 80079f4:	e10e      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079f6:	4b8d      	ldr	r3, [pc, #564]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079f8:	61bb      	str	r3, [r7, #24]
      break;
 80079fa:	e10b      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079fc:	4b8c      	ldr	r3, [pc, #560]	@ (8007c30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079fe:	61bb      	str	r3, [r7, #24]
      break;
 8007a00:	e108      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a02:	4b88      	ldr	r3, [pc, #544]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a0c:	4b85      	ldr	r3, [pc, #532]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a18:	4b82      	ldr	r3, [pc, #520]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a22:	4b80      	ldr	r3, [pc, #512]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a26:	08db      	lsrs	r3, r3, #3
 8007a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	fb02 f303 	mul.w	r3, r2, r3
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80e1 	beq.w	8007c08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	f000 8083 	beq.w	8007b54 <HAL_RCC_GetSysClockFreq+0x204>
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	f200 80a1 	bhi.w	8007b98 <HAL_RCC_GetSysClockFreq+0x248>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <HAL_RCC_GetSysClockFreq+0x114>
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d056      	beq.n	8007b10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a62:	e099      	b.n	8007b98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a64:	4b6f      	ldr	r3, [pc, #444]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d02d      	beq.n	8007acc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a70:	4b6c      	ldr	r3, [pc, #432]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	08db      	lsrs	r3, r3, #3
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	4a6b      	ldr	r2, [pc, #428]	@ (8007c28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9a:	4b62      	ldr	r3, [pc, #392]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007aca:	e087      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ade:	4b51      	ldr	r3, [pc, #324]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8007af2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b0e:	e065      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	ee07 3a90 	vmov	s15, r3
 8007b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b22:	4b40      	ldr	r3, [pc, #256]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b32:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b52:	e043      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b66:	4b2f      	ldr	r3, [pc, #188]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b96:	e021      	b.n	8007bdc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007baa:	4b1e      	ldr	r3, [pc, #120]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bbe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bdc:	4b11      	ldr	r3, [pc, #68]	@ (8007c24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	0a5b      	lsrs	r3, r3, #9
 8007be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007be6:	3301      	adds	r3, #1
 8007be8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	ee07 3a90 	vmov	s15, r3
 8007bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c00:	ee17 3a90 	vmov	r3, s15
 8007c04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c06:	e005      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	61bb      	str	r3, [r7, #24]
      break;
 8007c0c:	e002      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c0e:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c10:	61bb      	str	r3, [r7, #24]
      break;
 8007c12:	bf00      	nop
  }

  return sysclockfreq;
 8007c14:	69bb      	ldr	r3, [r7, #24]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3724      	adds	r7, #36	@ 0x24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	58024400 	.word	0x58024400
 8007c28:	03d09000 	.word	0x03d09000
 8007c2c:	003d0900 	.word	0x003d0900
 8007c30:	007f2815 	.word	0x007f2815
 8007c34:	46000000 	.word	0x46000000
 8007c38:	4c742400 	.word	0x4c742400
 8007c3c:	4a742400 	.word	0x4a742400
 8007c40:	4afe502a 	.word	0x4afe502a

08007c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c4a:	f7ff fe81 	bl	8007950 <HAL_RCC_GetSysClockFreq>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	4b10      	ldr	r3, [pc, #64]	@ (8007c94 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	0a1b      	lsrs	r3, r3, #8
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	490f      	ldr	r1, [pc, #60]	@ (8007c98 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c5c:	5ccb      	ldrb	r3, [r1, r3]
 8007c5e:	f003 031f 	and.w	r3, r3, #31
 8007c62:	fa22 f303 	lsr.w	r3, r2, r3
 8007c66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c68:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	4a09      	ldr	r2, [pc, #36]	@ (8007c98 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c72:	5cd3      	ldrb	r3, [r2, r3]
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	4a07      	ldr	r2, [pc, #28]	@ (8007c9c <HAL_RCC_GetHCLKFreq+0x58>)
 8007c80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c82:	4a07      	ldr	r2, [pc, #28]	@ (8007ca0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c88:	4b04      	ldr	r3, [pc, #16]	@ (8007c9c <HAL_RCC_GetHCLKFreq+0x58>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	58024400 	.word	0x58024400
 8007c98:	0800ee28 	.word	0x0800ee28
 8007c9c:	24000010 	.word	0x24000010
 8007ca0:	2400000c 	.word	0x2400000c

08007ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ca8:	f7ff ffcc 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8007cac:	4602      	mov	r2, r0
 8007cae:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	091b      	lsrs	r3, r3, #4
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	4904      	ldr	r1, [pc, #16]	@ (8007ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cba:	5ccb      	ldrb	r3, [r1, r3]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	58024400 	.word	0x58024400
 8007ccc:	0800ee28 	.word	0x0800ee28

08007cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cd4:	f7ff ffb6 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	4904      	ldr	r1, [pc, #16]	@ (8007cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ce6:	5ccb      	ldrb	r3, [r1, r3]
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	0800ee28 	.word	0x0800ee28

08007cfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d00:	b0c6      	sub	sp, #280	@ 0x118
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007d20:	2500      	movs	r5, #0
 8007d22:	ea54 0305 	orrs.w	r3, r4, r5
 8007d26:	d049      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d32:	d02f      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d38:	d828      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d3e:	d01a      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d44:	d822      	bhi.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d4e:	d007      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d50:	e01c      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d52:	4bab      	ldr	r3, [pc, #684]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d56:	4aaa      	ldr	r2, [pc, #680]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d5e:	e01a      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	3308      	adds	r3, #8
 8007d66:	2102      	movs	r1, #2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f001 fc25 	bl	80095b8 <RCCEx_PLL2_Config>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d74:	e00f      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	3328      	adds	r3, #40	@ 0x28
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 fccc 	bl	800971c <RCCEx_PLL3_Config>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d8a:	e004      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007d92:	e000      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007d9e:	4b98      	ldr	r3, [pc, #608]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dac:	4a94      	ldr	r2, [pc, #592]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dae:	430b      	orrs	r3, r1
 8007db0:	6513      	str	r3, [r2, #80]	@ 0x50
 8007db2:	e003      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007dc8:	f04f 0900 	mov.w	r9, #0
 8007dcc:	ea58 0309 	orrs.w	r3, r8, r9
 8007dd0:	d047      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d82a      	bhi.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007df9 	.word	0x08007df9
 8007de8:	08007e07 	.word	0x08007e07
 8007dec:	08007e1d 	.word	0x08007e1d
 8007df0:	08007e3b 	.word	0x08007e3b
 8007df4:	08007e3b 	.word	0x08007e3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df8:	4b81      	ldr	r3, [pc, #516]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	4a80      	ldr	r2, [pc, #512]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e04:	e01a      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 fbd2 	bl	80095b8 <RCCEx_PLL2_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e1a:	e00f      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e20:	3328      	adds	r3, #40	@ 0x28
 8007e22:	2100      	movs	r1, #0
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 fc79 	bl	800971c <RCCEx_PLL3_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e30:	e004      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007e38:	e000      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e44:	4b6e      	ldr	r3, [pc, #440]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e48:	f023 0107 	bic.w	r1, r3, #7
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e52:	4a6b      	ldr	r2, [pc, #428]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e58:	e003      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8007e6e:	f04f 0b00 	mov.w	fp, #0
 8007e72:	ea5a 030b 	orrs.w	r3, sl, fp
 8007e76:	d05b      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e80:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007e84:	d03b      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007e86:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007e8a:	d834      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007e8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e90:	d037      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007e92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007e96:	d82e      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007e98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007e9c:	d033      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007e9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007ea2:	d828      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ea8:	d01a      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007eaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eae:	d822      	bhi.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007eb8:	d007      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007eba:	e01c      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ebc:	4b50      	ldr	r3, [pc, #320]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ec8:	e01e      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ece:	3308      	adds	r3, #8
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fb70 	bl	80095b8 <RCCEx_PLL2_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007ede:	e013      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee4:	3328      	adds	r3, #40	@ 0x28
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 fc17 	bl	800971c <RCCEx_PLL3_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ef4:	e008      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007efc:	e004      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007efe:	bf00      	nop
 8007f00:	e002      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f02:	bf00      	nop
 8007f04:	e000      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f10:	4b3b      	ldr	r3, [pc, #236]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f14:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f20:	4a37      	ldr	r2, [pc, #220]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f22:	430b      	orrs	r3, r1
 8007f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f26:	e003      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	d05d      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f58:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007f5c:	d03b      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007f5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007f62:	d834      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f68:	d037      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007f6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f6e:	d82e      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f74:	d033      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007f76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f7a:	d828      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f80:	d01a      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007f82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f86:	d822      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f90:	d007      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007f92:	e01c      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f94:	4b1a      	ldr	r3, [pc, #104]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4a19      	ldr	r2, [pc, #100]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fa0:	e01e      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa6:	3308      	adds	r3, #8
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 fb04 	bl	80095b8 <RCCEx_PLL2_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fb6:	e013      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fbc:	3328      	adds	r3, #40	@ 0x28
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fbab 	bl	800971c <RCCEx_PLL3_Config>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fd4:	e004      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007fd6:	bf00      	nop
 8007fd8:	e002      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007fda:	bf00      	nop
 8007fdc:	e000      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8007fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10d      	bne.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fe8:	4b05      	ldr	r3, [pc, #20]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007ff8:	4a01      	ldr	r2, [pc, #4]	@ (8008000 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ffa:	430b      	orrs	r3, r1
 8007ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ffe:	e005      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008008:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800800c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008018:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800801c:	2300      	movs	r3, #0
 800801e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008022:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008026:	460b      	mov	r3, r1
 8008028:	4313      	orrs	r3, r2
 800802a:	d03a      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008032:	2b30      	cmp	r3, #48	@ 0x30
 8008034:	d01f      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008036:	2b30      	cmp	r3, #48	@ 0x30
 8008038:	d819      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800803a:	2b20      	cmp	r3, #32
 800803c:	d00c      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800803e:	2b20      	cmp	r3, #32
 8008040:	d815      	bhi.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d019      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008046:	2b10      	cmp	r3, #16
 8008048:	d111      	bne.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800804a:	4baa      	ldr	r3, [pc, #680]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800804c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804e:	4aa9      	ldr	r2, [pc, #676]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008056:	e011      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800805c:	3308      	adds	r3, #8
 800805e:	2102      	movs	r1, #2
 8008060:	4618      	mov	r0, r3
 8008062:	f001 faa9 	bl	80095b8 <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800806c:	e006      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008074:	e002      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008076:	bf00      	nop
 8008078:	e000      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800807a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800807c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008084:	4b9b      	ldr	r3, [pc, #620]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008088:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008092:	4a98      	ldr	r2, [pc, #608]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008094:	430b      	orrs	r3, r1
 8008096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008098:	e003      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800809e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80080ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80080b2:	2300      	movs	r3, #0
 80080b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80080bc:	460b      	mov	r3, r1
 80080be:	4313      	orrs	r3, r2
 80080c0:	d051      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80080c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080cc:	d035      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80080ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080d2:	d82e      	bhi.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80080d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080d8:	d031      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80080da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80080de:	d828      	bhi.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e4:	d01a      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80080e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ea:	d822      	bhi.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80080f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080f4:	d007      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80080f6:	e01c      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f8:	4b7e      	ldr	r3, [pc, #504]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	4a7d      	ldr	r2, [pc, #500]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008102:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008104:	e01c      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810a:	3308      	adds	r3, #8
 800810c:	2100      	movs	r1, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f001 fa52 	bl	80095b8 <RCCEx_PLL2_Config>
 8008114:	4603      	mov	r3, r0
 8008116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800811a:	e011      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008120:	3328      	adds	r3, #40	@ 0x28
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f001 faf9 	bl	800971c <RCCEx_PLL3_Config>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008130:	e006      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008138:	e002      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800813e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008148:	4b6a      	ldr	r3, [pc, #424]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800814a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800814c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008156:	4a67      	ldr	r2, [pc, #412]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008158:	430b      	orrs	r3, r1
 800815a:	6513      	str	r3, [r2, #80]	@ 0x50
 800815c:	e003      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008162:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008172:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008176:	2300      	movs	r3, #0
 8008178:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800817c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008180:	460b      	mov	r3, r1
 8008182:	4313      	orrs	r3, r2
 8008184:	d053      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800818c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008190:	d033      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008192:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008196:	d82c      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008198:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800819c:	d02f      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800819e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081a2:	d826      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081a8:	d02b      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80081aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081ae:	d820      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081b4:	d012      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80081b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ba:	d81a      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d022      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80081c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081c4:	d115      	bne.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ca:	3308      	adds	r3, #8
 80081cc:	2101      	movs	r1, #1
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 f9f2 	bl	80095b8 <RCCEx_PLL2_Config>
 80081d4:	4603      	mov	r3, r0
 80081d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081da:	e015      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e0:	3328      	adds	r3, #40	@ 0x28
 80081e2:	2101      	movs	r1, #1
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fa99 	bl	800971c <RCCEx_PLL3_Config>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80081f0:	e00a      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80081f8:	e006      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80081fa:	bf00      	nop
 80081fc:	e004      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80081fe:	bf00      	nop
 8008200:	e002      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008210:	4b38      	ldr	r3, [pc, #224]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008214:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800821c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800821e:	4a35      	ldr	r2, [pc, #212]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008220:	430b      	orrs	r3, r1
 8008222:	6513      	str	r3, [r2, #80]	@ 0x50
 8008224:	e003      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008226:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800822a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800822e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800823a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800823e:	2300      	movs	r3, #0
 8008240:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008244:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008248:	460b      	mov	r3, r1
 800824a:	4313      	orrs	r3, r2
 800824c:	d058      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800824e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008252:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800825a:	d033      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800825c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008260:	d82c      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008266:	d02f      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800826c:	d826      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800826e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008272:	d02b      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008274:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008278:	d820      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800827a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827e:	d012      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008284:	d81a      	bhi.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d022      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800828a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800828e:	d115      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	3308      	adds	r3, #8
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f001 f98d 	bl	80095b8 <RCCEx_PLL2_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082a4:	e015      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082aa:	3328      	adds	r3, #40	@ 0x28
 80082ac:	2101      	movs	r1, #1
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fa34 	bl	800971c <RCCEx_PLL3_Config>
 80082b4:	4603      	mov	r3, r0
 80082b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082ba:	e00a      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082c2:	e006      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082c4:	bf00      	nop
 80082c6:	e004      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082c8:	bf00      	nop
 80082ca:	e002      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082cc:	bf00      	nop
 80082ce:	e000      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10e      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082da:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082ea:	4a02      	ldr	r2, [pc, #8]	@ (80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082ec:	430b      	orrs	r3, r1
 80082ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80082f0:	e006      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80082f2:	bf00      	nop
 80082f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800830c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008310:	2300      	movs	r3, #0
 8008312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008316:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800831a:	460b      	mov	r3, r1
 800831c:	4313      	orrs	r3, r2
 800831e:	d037      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800832a:	d00e      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800832c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008330:	d816      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d018      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800833a:	d111      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800833c:	4bc4      	ldr	r3, [pc, #784]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800833e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008340:	4ac3      	ldr	r2, [pc, #780]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008348:	e00f      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800834a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800834e:	3308      	adds	r3, #8
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f930 	bl	80095b8 <RCCEx_PLL2_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800835e:	e004      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008366:	e000      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800836a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008372:	4bb7      	ldr	r3, [pc, #732]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008376:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800837a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800837e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008380:	4ab3      	ldr	r2, [pc, #716]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008382:	430b      	orrs	r3, r1
 8008384:	6513      	str	r3, [r2, #80]	@ 0x50
 8008386:	e003      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800838c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800839c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80083aa:	460b      	mov	r3, r1
 80083ac:	4313      	orrs	r3, r2
 80083ae:	d039      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d81c      	bhi.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	080083fd 	.word	0x080083fd
 80083c4:	080083d1 	.word	0x080083d1
 80083c8:	080083df 	.word	0x080083df
 80083cc:	080083fd 	.word	0x080083fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d0:	4b9f      	ldr	r3, [pc, #636]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	4a9e      	ldr	r2, [pc, #632]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083dc:	e00f      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e2:	3308      	adds	r3, #8
 80083e4:	2102      	movs	r1, #2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f001 f8e6 	bl	80095b8 <RCCEx_PLL2_Config>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80083f2:	e004      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083fa:	e000      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80083fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10a      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008406:	4b92      	ldr	r3, [pc, #584]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800840a:	f023 0103 	bic.w	r1, r3, #3
 800840e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008414:	4a8e      	ldr	r2, [pc, #568]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008416:	430b      	orrs	r3, r1
 8008418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800841a:	e003      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008420:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008434:	2300      	movs	r3, #0
 8008436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800843a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800843e:	460b      	mov	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	f000 8099 	beq.w	8008578 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008446:	4b83      	ldr	r3, [pc, #524]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a82      	ldr	r2, [pc, #520]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800844c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008450:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008452:	f7fb fb49 	bl	8003ae8 <HAL_GetTick>
 8008456:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800845a:	e00b      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800845c:	f7fb fb44 	bl	8003ae8 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b64      	cmp	r3, #100	@ 0x64
 800846a:	d903      	bls.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008472:	e005      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008474:	4b77      	ldr	r3, [pc, #476]	@ (8008654 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0ed      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008480:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008484:	2b00      	cmp	r3, #0
 8008486:	d173      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008488:	4b71      	ldr	r3, [pc, #452]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008494:	4053      	eors	r3, r2
 8008496:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849a:	2b00      	cmp	r3, #0
 800849c:	d015      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800849e:	4b6c      	ldr	r3, [pc, #432]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084aa:	4b69      	ldr	r3, [pc, #420]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ae:	4a68      	ldr	r2, [pc, #416]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084b6:	4b66      	ldr	r3, [pc, #408]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ba:	4a65      	ldr	r2, [pc, #404]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084c2:	4a63      	ldr	r2, [pc, #396]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084d6:	d118      	bne.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d8:	f7fb fb06 	bl	8003ae8 <HAL_GetTick>
 80084dc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084e0:	e00d      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084e2:	f7fb fb01 	bl	8003ae8 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80084ec:	1ad2      	subs	r2, r2, r3
 80084ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d903      	bls.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80084fc:	e005      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084fe:	4b54      	ldr	r3, [pc, #336]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0eb      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800850a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800850e:	2b00      	cmp	r3, #0
 8008510:	d129      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800851a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008522:	d10e      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008524:	4b4a      	ldr	r3, [pc, #296]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800852c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008530:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008534:	091a      	lsrs	r2, r3, #4
 8008536:	4b48      	ldr	r3, [pc, #288]	@ (8008658 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008538:	4013      	ands	r3, r2
 800853a:	4a45      	ldr	r2, [pc, #276]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800853c:	430b      	orrs	r3, r1
 800853e:	6113      	str	r3, [r2, #16]
 8008540:	e005      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008542:	4b43      	ldr	r3, [pc, #268]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	4a42      	ldr	r2, [pc, #264]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008548:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800854c:	6113      	str	r3, [r2, #16]
 800854e:	4b40      	ldr	r3, [pc, #256]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008550:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008556:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800855a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800855e:	4a3c      	ldr	r2, [pc, #240]	@ (8008650 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008560:	430b      	orrs	r3, r1
 8008562:	6713      	str	r3, [r2, #112]	@ 0x70
 8008564:	e008      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008566:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800856a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800856e:	e003      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008570:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008574:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f002 0301 	and.w	r3, r2, #1
 8008584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008588:	2300      	movs	r3, #0
 800858a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800858e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008592:	460b      	mov	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	f000 808f 	beq.w	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085a0:	2b28      	cmp	r3, #40	@ 0x28
 80085a2:	d871      	bhi.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80085a4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	08008691 	.word	0x08008691
 80085b0:	08008689 	.word	0x08008689
 80085b4:	08008689 	.word	0x08008689
 80085b8:	08008689 	.word	0x08008689
 80085bc:	08008689 	.word	0x08008689
 80085c0:	08008689 	.word	0x08008689
 80085c4:	08008689 	.word	0x08008689
 80085c8:	08008689 	.word	0x08008689
 80085cc:	0800865d 	.word	0x0800865d
 80085d0:	08008689 	.word	0x08008689
 80085d4:	08008689 	.word	0x08008689
 80085d8:	08008689 	.word	0x08008689
 80085dc:	08008689 	.word	0x08008689
 80085e0:	08008689 	.word	0x08008689
 80085e4:	08008689 	.word	0x08008689
 80085e8:	08008689 	.word	0x08008689
 80085ec:	08008673 	.word	0x08008673
 80085f0:	08008689 	.word	0x08008689
 80085f4:	08008689 	.word	0x08008689
 80085f8:	08008689 	.word	0x08008689
 80085fc:	08008689 	.word	0x08008689
 8008600:	08008689 	.word	0x08008689
 8008604:	08008689 	.word	0x08008689
 8008608:	08008689 	.word	0x08008689
 800860c:	08008691 	.word	0x08008691
 8008610:	08008689 	.word	0x08008689
 8008614:	08008689 	.word	0x08008689
 8008618:	08008689 	.word	0x08008689
 800861c:	08008689 	.word	0x08008689
 8008620:	08008689 	.word	0x08008689
 8008624:	08008689 	.word	0x08008689
 8008628:	08008689 	.word	0x08008689
 800862c:	08008691 	.word	0x08008691
 8008630:	08008689 	.word	0x08008689
 8008634:	08008689 	.word	0x08008689
 8008638:	08008689 	.word	0x08008689
 800863c:	08008689 	.word	0x08008689
 8008640:	08008689 	.word	0x08008689
 8008644:	08008689 	.word	0x08008689
 8008648:	08008689 	.word	0x08008689
 800864c:	08008691 	.word	0x08008691
 8008650:	58024400 	.word	0x58024400
 8008654:	58024800 	.word	0x58024800
 8008658:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800865c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008660:	3308      	adds	r3, #8
 8008662:	2101      	movs	r1, #1
 8008664:	4618      	mov	r0, r3
 8008666:	f000 ffa7 	bl	80095b8 <RCCEx_PLL2_Config>
 800866a:	4603      	mov	r3, r0
 800866c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008670:	e00f      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008676:	3328      	adds	r3, #40	@ 0x28
 8008678:	2101      	movs	r1, #1
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f84e 	bl	800971c <RCCEx_PLL3_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008686:	e004      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800868e:	e000      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800869a:	4bbf      	ldr	r3, [pc, #764]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800869c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086a8:	4abb      	ldr	r2, [pc, #748]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086aa:	430b      	orrs	r3, r1
 80086ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80086ae:	e003      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f002 0302 	and.w	r3, r2, #2
 80086c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086c8:	2300      	movs	r3, #0
 80086ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4313      	orrs	r3, r2
 80086d6:	d041      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80086d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086de:	2b05      	cmp	r3, #5
 80086e0:	d824      	bhi.n	800872c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	08008735 	.word	0x08008735
 80086ec:	08008701 	.word	0x08008701
 80086f0:	08008717 	.word	0x08008717
 80086f4:	08008735 	.word	0x08008735
 80086f8:	08008735 	.word	0x08008735
 80086fc:	08008735 	.word	0x08008735
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008704:	3308      	adds	r3, #8
 8008706:	2101      	movs	r1, #1
 8008708:	4618      	mov	r0, r3
 800870a:	f000 ff55 	bl	80095b8 <RCCEx_PLL2_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008714:	e00f      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800871a:	3328      	adds	r3, #40	@ 0x28
 800871c:	2101      	movs	r1, #1
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fffc 	bl	800971c <RCCEx_PLL3_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800872a:	e004      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008732:	e000      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800873e:	4b96      	ldr	r3, [pc, #600]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008742:	f023 0107 	bic.w	r1, r3, #7
 8008746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874c:	4a92      	ldr	r2, [pc, #584]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800874e:	430b      	orrs	r3, r1
 8008750:	6553      	str	r3, [r2, #84]	@ 0x54
 8008752:	e003      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008754:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008758:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f002 0304 	and.w	r3, r2, #4
 8008768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800876c:	2300      	movs	r3, #0
 800876e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008772:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008776:	460b      	mov	r3, r1
 8008778:	4313      	orrs	r3, r2
 800877a:	d044      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008784:	2b05      	cmp	r3, #5
 8008786:	d825      	bhi.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008788:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087dd 	.word	0x080087dd
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087bf 	.word	0x080087bf
 800879c:	080087dd 	.word	0x080087dd
 80087a0:	080087dd 	.word	0x080087dd
 80087a4:	080087dd 	.word	0x080087dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ac:	3308      	adds	r3, #8
 80087ae:	2101      	movs	r1, #1
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 ff01 	bl	80095b8 <RCCEx_PLL2_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087bc:	e00f      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c2:	3328      	adds	r3, #40	@ 0x28
 80087c4:	2101      	movs	r1, #1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 ffa8 	bl	800971c <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087d2:	e004      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087da:	e000      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80087dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087e6:	4b6c      	ldr	r3, [pc, #432]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80087e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ea:	f023 0107 	bic.w	r1, r3, #7
 80087ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	4a68      	ldr	r2, [pc, #416]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80087fc:	e003      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	f002 0320 	and.w	r3, r2, #32
 8008812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008816:	2300      	movs	r3, #0
 8008818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800881c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008820:	460b      	mov	r3, r1
 8008822:	4313      	orrs	r3, r2
 8008824:	d055      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800882e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008832:	d033      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008838:	d82c      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800883e:	d02f      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008844:	d826      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008846:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800884a:	d02b      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800884c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008850:	d820      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008856:	d012      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800885c:	d81a      	bhi.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800885e:	2b00      	cmp	r3, #0
 8008860:	d022      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008866:	d115      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886c:	3308      	adds	r3, #8
 800886e:	2100      	movs	r1, #0
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fea1 	bl	80095b8 <RCCEx_PLL2_Config>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800887c:	e015      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800887e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008882:	3328      	adds	r3, #40	@ 0x28
 8008884:	2102      	movs	r1, #2
 8008886:	4618      	mov	r0, r3
 8008888:	f000 ff48 	bl	800971c <RCCEx_PLL3_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008892:	e00a      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800889a:	e006      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800889c:	bf00      	nop
 800889e:	e004      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088a0:	bf00      	nop
 80088a2:	e002      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10b      	bne.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088b2:	4b39      	ldr	r3, [pc, #228]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088c2:	4a35      	ldr	r2, [pc, #212]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088c4:	430b      	orrs	r3, r1
 80088c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80088c8:	e003      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80088de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80088e2:	2300      	movs	r3, #0
 80088e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80088e8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80088ec:	460b      	mov	r3, r1
 80088ee:	4313      	orrs	r3, r2
 80088f0:	d058      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80088f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80088fe:	d033      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008900:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008904:	d82c      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890a:	d02f      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800890c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008910:	d826      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008916:	d02b      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800891c:	d820      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800891e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008922:	d012      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008928:	d81a      	bhi.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d022      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800892e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008932:	d115      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008938:	3308      	adds	r3, #8
 800893a:	2100      	movs	r1, #0
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fe3b 	bl	80095b8 <RCCEx_PLL2_Config>
 8008942:	4603      	mov	r3, r0
 8008944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008948:	e015      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800894a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894e:	3328      	adds	r3, #40	@ 0x28
 8008950:	2102      	movs	r1, #2
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fee2 	bl	800971c <RCCEx_PLL3_Config>
 8008958:	4603      	mov	r3, r0
 800895a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800895e:	e00a      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008966:	e006      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008968:	bf00      	nop
 800896a:	e004      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800896c:	bf00      	nop
 800896e:	e002      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008970:	bf00      	nop
 8008972:	e000      	b.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10e      	bne.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800897e:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008982:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800898e:	4a02      	ldr	r2, [pc, #8]	@ (8008998 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008990:	430b      	orrs	r3, r1
 8008992:	6593      	str	r3, [r2, #88]	@ 0x58
 8008994:	e006      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008996:	bf00      	nop
 8008998:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80089b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089b4:	2300      	movs	r3, #0
 80089b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80089be:	460b      	mov	r3, r1
 80089c0:	4313      	orrs	r3, r2
 80089c2:	d055      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80089c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80089d0:	d033      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80089d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80089d6:	d82c      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80089d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089dc:	d02f      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80089de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089e2:	d826      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80089e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089e8:	d02b      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80089ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80089ee:	d820      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80089f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089f4:	d012      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80089f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089fa:	d81a      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d022      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a04:	d115      	bne.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 fdd2 	bl	80095b8 <RCCEx_PLL2_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a1a:	e015      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a20:	3328      	adds	r3, #40	@ 0x28
 8008a22:	2102      	movs	r1, #2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fe79 	bl	800971c <RCCEx_PLL3_Config>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a30:	e00a      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a38:	e006      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a3a:	bf00      	nop
 8008a3c:	e004      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a3e:	bf00      	nop
 8008a40:	e002      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a42:	bf00      	nop
 8008a44:	e000      	b.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10b      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a50:	4ba0      	ldr	r3, [pc, #640]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a60:	4a9c      	ldr	r2, [pc, #624]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a62:	430b      	orrs	r3, r1
 8008a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a66:	e003      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	f002 0308 	and.w	r3, r2, #8
 8008a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a80:	2300      	movs	r3, #0
 8008a82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	d01e      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9c:	d10c      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa2:	3328      	adds	r3, #40	@ 0x28
 8008aa4:	2102      	movs	r1, #2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 fe38 	bl	800971c <RCCEx_PLL3_Config>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008ab8:	4b86      	ldr	r3, [pc, #536]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008abc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ac8:	4a82      	ldr	r2, [pc, #520]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008aca:	430b      	orrs	r3, r1
 8008acc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f002 0310 	and.w	r3, r2, #16
 8008ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ae4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4313      	orrs	r3, r2
 8008aec:	d01e      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008afa:	d10c      	bne.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b00:	3328      	adds	r3, #40	@ 0x28
 8008b02:	2102      	movs	r1, #2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fe09 	bl	800971c <RCCEx_PLL3_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d002      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b16:	4b6f      	ldr	r3, [pc, #444]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b26:	4a6b      	ldr	r2, [pc, #428]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008b38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b3e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008b42:	460b      	mov	r3, r1
 8008b44:	4313      	orrs	r3, r2
 8008b46:	d03e      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b54:	d022      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008b56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b5a:	d81b      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b64:	d00b      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008b66:	e015      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fd21 	bl	80095b8 <RCCEx_PLL2_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b7c:	e00f      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b82:	3328      	adds	r3, #40	@ 0x28
 8008b84:	2102      	movs	r1, #2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fdc8 	bl	800971c <RCCEx_PLL3_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008b92:	e004      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b9a:	e000      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10b      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008baa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bb6:	4a47      	ldr	r2, [pc, #284]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bbc:	e003      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008bd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008bd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4313      	orrs	r3, r2
 8008be0:	d03b      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bee:	d01f      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008bf0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bf4:	d818      	bhi.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bfa:	d003      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008bfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c00:	d007      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008c02:	e011      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c04:	4b33      	ldr	r3, [pc, #204]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	4a32      	ldr	r2, [pc, #200]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c10:	e00f      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c16:	3328      	adds	r3, #40	@ 0x28
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fd7e 	bl	800971c <RCCEx_PLL3_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c26:	e004      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c2e:	e000      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10b      	bne.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c3a:	4b26      	ldr	r3, [pc, #152]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c4a:	4a22      	ldr	r2, [pc, #136]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c4c:	430b      	orrs	r3, r1
 8008c4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c50:	e003      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008c66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c68:	2300      	movs	r3, #0
 8008c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008c70:	460b      	mov	r3, r1
 8008c72:	4313      	orrs	r3, r2
 8008c74:	d034      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c84:	d007      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008c86:	e011      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c88:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	4a11      	ldr	r2, [pc, #68]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008c94:	e00e      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	2102      	movs	r1, #2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fc8a 	bl	80095b8 <RCCEx_PLL2_Config>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008caa:	e003      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10d      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008cbc:	4b05      	ldr	r3, [pc, #20]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cca:	4a02      	ldr	r2, [pc, #8]	@ (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cd0:	e006      	b.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008cd2:	bf00      	nop
 8008cd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cee:	2300      	movs	r3, #0
 8008cf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cf2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	d00c      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d00:	3328      	adds	r3, #40	@ 0x28
 8008d02:	2102      	movs	r1, #2
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fd09 	bl	800971c <RCCEx_PLL3_Config>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008d22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d24:	2300      	movs	r3, #0
 8008d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d28:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	d036      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d3c:	d018      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d42:	d811      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d48:	d014      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d4e:	d80b      	bhi.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d011      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d58:	d106      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d5a:	4bb7      	ldr	r3, [pc, #732]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	4ab6      	ldr	r2, [pc, #728]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d66:	e008      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d6e:	e004      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008d70:	bf00      	nop
 8008d72:	e002      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008d74:	bf00      	nop
 8008d76:	e000      	b.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10a      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d82:	4bad      	ldr	r3, [pc, #692]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d90:	4aa9      	ldr	r2, [pc, #676]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d92:	430b      	orrs	r3, r1
 8008d94:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d96:	e003      	b.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008dac:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dae:	2300      	movs	r3, #0
 8008db0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008db6:	460b      	mov	r3, r1
 8008db8:	4313      	orrs	r3, r2
 8008dba:	d009      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008dbc:	4b9e      	ldr	r3, [pc, #632]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dca:	4a9b      	ldr	r2, [pc, #620]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dde:	2300      	movs	r3, #0
 8008de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008de2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008de6:	460b      	mov	r3, r1
 8008de8:	4313      	orrs	r3, r2
 8008dea:	d009      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008dec:	4b92      	ldr	r3, [pc, #584]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dfa:	4a8f      	ldr	r2, [pc, #572]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008dfc:	430b      	orrs	r3, r1
 8008dfe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e0e:	2300      	movs	r3, #0
 8008e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e16:	460b      	mov	r3, r1
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	d00e      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e1c:	4b86      	ldr	r3, [pc, #536]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4a85      	ldr	r2, [pc, #532]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e22:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e26:	6113      	str	r3, [r2, #16]
 8008e28:	4b83      	ldr	r3, [pc, #524]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e2a:	6919      	ldr	r1, [r3, #16]
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e34:	4a80      	ldr	r2, [pc, #512]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e36:	430b      	orrs	r3, r1
 8008e38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e50:	460b      	mov	r3, r1
 8008e52:	4313      	orrs	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e56:	4b78      	ldr	r3, [pc, #480]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e64:	4a74      	ldr	r2, [pc, #464]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e66:	430b      	orrs	r3, r1
 8008e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e78:	2300      	movs	r3, #0
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008e80:	460b      	mov	r3, r1
 8008e82:	4313      	orrs	r3, r2
 8008e84:	d00a      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e86:	4b6c      	ldr	r3, [pc, #432]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e96:	4a68      	ldr	r2, [pc, #416]	@ (8009038 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d011      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fb79 	bl	80095b8 <RCCEx_PLL2_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ed8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6239      	str	r1, [r7, #32]
 8008ee8:	f003 0302 	and.w	r3, r3, #2
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	d011      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008efc:	3308      	adds	r3, #8
 8008efe:	2101      	movs	r1, #1
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fb59 	bl	80095b8 <RCCEx_PLL2_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	2100      	movs	r1, #0
 8008f26:	61b9      	str	r1, [r7, #24]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	61fb      	str	r3, [r7, #28]
 8008f2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f32:	460b      	mov	r3, r1
 8008f34:	4313      	orrs	r3, r2
 8008f36:	d011      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	2102      	movs	r1, #2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f000 fb39 	bl	80095b8 <RCCEx_PLL2_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	2100      	movs	r1, #0
 8008f66:	6139      	str	r1, [r7, #16]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d011      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7c:	3328      	adds	r3, #40	@ 0x28
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fbcb 	bl	800971c <RCCEx_PLL3_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8008f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	d011      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fbc:	3328      	adds	r3, #40	@ 0x28
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fbab 	bl	800971c <RCCEx_PLL3_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8008fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6039      	str	r1, [r7, #0]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	d011      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffc:	3328      	adds	r3, #40	@ 0x28
 8008ffe:	2102      	movs	r1, #2
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fb8b 	bl	800971c <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800900c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009014:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009018:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800901c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	e000      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
}
 800902a:	4618      	mov	r0, r3
 800902c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009030:	46bd      	mov	sp, r7
 8009032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009036:	bf00      	nop
 8009038:	58024400 	.word	0x58024400

0800903c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009040:	f7fe fe00 	bl	8007c44 <HAL_RCC_GetHCLKFreq>
 8009044:	4602      	mov	r2, r0
 8009046:	4b06      	ldr	r3, [pc, #24]	@ (8009060 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	091b      	lsrs	r3, r3, #4
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	4904      	ldr	r1, [pc, #16]	@ (8009064 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009052:	5ccb      	ldrb	r3, [r1, r3]
 8009054:	f003 031f 	and.w	r3, r3, #31
 8009058:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800905c:	4618      	mov	r0, r3
 800905e:	bd80      	pop	{r7, pc}
 8009060:	58024400 	.word	0x58024400
 8009064:	0800ee28 	.word	0x0800ee28

08009068 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009068:	b480      	push	{r7}
 800906a:	b089      	sub	sp, #36	@ 0x24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009070:	4ba1      	ldr	r3, [pc, #644]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800907a:	4b9f      	ldr	r3, [pc, #636]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	0b1b      	lsrs	r3, r3, #12
 8009080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009084:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009086:	4b9c      	ldr	r3, [pc, #624]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	091b      	lsrs	r3, r3, #4
 800908c:	f003 0301 	and.w	r3, r3, #1
 8009090:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009092:	4b99      	ldr	r3, [pc, #612]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009096:	08db      	lsrs	r3, r3, #3
 8009098:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	fb02 f303 	mul.w	r3, r2, r3
 80090a2:	ee07 3a90 	vmov	s15, r3
 80090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8111 	beq.w	80092d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	f000 8083 	beq.w	80091c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	f200 80a1 	bhi.w	8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d056      	beq.n	8009180 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090d2:	e099      	b.n	8009208 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d4:	4b88      	ldr	r3, [pc, #544]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0320 	and.w	r3, r3, #32
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d02d      	beq.n	800913c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090e0:	4b85      	ldr	r3, [pc, #532]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	08db      	lsrs	r3, r3, #3
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	4a84      	ldr	r2, [pc, #528]	@ (80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80090ec:	fa22 f303 	lsr.w	r3, r2, r3
 80090f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	ee07 3a90 	vmov	s15, r3
 80090f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910a:	4b7b      	ldr	r3, [pc, #492]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	ee07 3a90 	vmov	s15, r3
 8009116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911a:	ed97 6a03 	vldr	s12, [r7, #12]
 800911e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800912e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009136:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800913a:	e087      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009146:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800914a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914e:	4b6a      	ldr	r3, [pc, #424]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009162:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917e:	e065      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800918a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800918e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009192:	4b59      	ldr	r3, [pc, #356]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091c2:	e043      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800930c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d6:	4b48      	ldr	r3, [pc, #288]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009206:	e021      	b.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921a:	4b37      	ldr	r3, [pc, #220]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922a:	ed97 6a03 	vldr	s12, [r7, #12]
 800922e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009300 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800923e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800924a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800924c:	4b2a      	ldr	r3, [pc, #168]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	0a5b      	lsrs	r3, r3, #9
 8009252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009266:	edd7 6a07 	vldr	s13, [r7, #28]
 800926a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800926e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009272:	ee17 2a90 	vmov	r2, s15
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800927a:	4b1f      	ldr	r3, [pc, #124]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009284:	ee07 3a90 	vmov	s15, r3
 8009288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009294:	edd7 6a07 	vldr	s13, [r7, #28]
 8009298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092a0:	ee17 2a90 	vmov	r2, s15
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80092a8:	4b13      	ldr	r3, [pc, #76]	@ (80092f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	0e1b      	lsrs	r3, r3, #24
 80092ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ce:	ee17 2a90 	vmov	r2, s15
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80092d6:	e008      	b.n	80092ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	609a      	str	r2, [r3, #8]
}
 80092ea:	bf00      	nop
 80092ec:	3724      	adds	r7, #36	@ 0x24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	58024400 	.word	0x58024400
 80092fc:	03d09000 	.word	0x03d09000
 8009300:	46000000 	.word	0x46000000
 8009304:	4c742400 	.word	0x4c742400
 8009308:	4a742400 	.word	0x4a742400
 800930c:	4afe502a 	.word	0x4afe502a

08009310 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009310:	b480      	push	{r7}
 8009312:	b089      	sub	sp, #36	@ 0x24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009318:	4ba1      	ldr	r3, [pc, #644]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800931a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009322:	4b9f      	ldr	r3, [pc, #636]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009326:	0d1b      	lsrs	r3, r3, #20
 8009328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800932c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800932e:	4b9c      	ldr	r3, [pc, #624]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800933a:	4b99      	ldr	r3, [pc, #612]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800933e:	08db      	lsrs	r3, r3, #3
 8009340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009344:	693a      	ldr	r2, [r7, #16]
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 8111 	beq.w	8009580 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b02      	cmp	r3, #2
 8009362:	f000 8083 	beq.w	800946c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	2b02      	cmp	r3, #2
 800936a:	f200 80a1 	bhi.w	80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d056      	beq.n	8009428 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800937a:	e099      	b.n	80094b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937c:	4b88      	ldr	r3, [pc, #544]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	d02d      	beq.n	80093e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009388:	4b85      	ldr	r3, [pc, #532]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	08db      	lsrs	r3, r3, #3
 800938e:	f003 0303 	and.w	r3, r3, #3
 8009392:	4a84      	ldr	r2, [pc, #528]	@ (80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	ee07 3a90 	vmov	s15, r3
 80093a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b7b      	ldr	r3, [pc, #492]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093e2:	e087      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b6a      	ldr	r3, [pc, #424]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009426:	e065      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b59      	ldr	r3, [pc, #356]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a03 	vldr	s12, [r7, #12]
 800944e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946a:	e043      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800947a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800947e:	4b48      	ldr	r3, [pc, #288]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800948e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009492:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800949a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800949e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ae:	e021      	b.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c2:	4b37      	ldr	r3, [pc, #220]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80095a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80094f4:	4b2a      	ldr	r3, [pc, #168]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f8:	0a5b      	lsrs	r3, r3, #9
 80094fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800950a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800951a:	ee17 2a90 	vmov	r2, s15
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009522:	4b1f      	ldr	r3, [pc, #124]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009526:	0c1b      	lsrs	r3, r3, #16
 8009528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009534:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009538:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009548:	ee17 2a90 	vmov	r2, s15
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009550:	4b13      	ldr	r3, [pc, #76]	@ (80095a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009554:	0e1b      	lsrs	r3, r3, #24
 8009556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800956a:	edd7 6a07 	vldr	s13, [r7, #28]
 800956e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009576:	ee17 2a90 	vmov	r2, s15
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800957e:	e008      	b.n	8009592 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	609a      	str	r2, [r3, #8]
}
 8009592:	bf00      	nop
 8009594:	3724      	adds	r7, #36	@ 0x24
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	58024400 	.word	0x58024400
 80095a4:	03d09000 	.word	0x03d09000
 80095a8:	46000000 	.word	0x46000000
 80095ac:	4c742400 	.word	0x4c742400
 80095b0:	4a742400 	.word	0x4a742400
 80095b4:	4afe502a 	.word	0x4afe502a

080095b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095c6:	4b53      	ldr	r3, [pc, #332]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80095c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d101      	bne.n	80095d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e099      	b.n	800970a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80095d6:	4b4f      	ldr	r3, [pc, #316]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a4e      	ldr	r2, [pc, #312]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80095dc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e2:	f7fa fa81 	bl	8003ae8 <HAL_GetTick>
 80095e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095e8:	e008      	b.n	80095fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095ea:	f7fa fa7d 	bl	8003ae8 <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d901      	bls.n	80095fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e086      	b.n	800970a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095fc:	4b45      	ldr	r3, [pc, #276]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f0      	bne.n	80095ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009608:	4b42      	ldr	r3, [pc, #264]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 800960a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	031b      	lsls	r3, r3, #12
 8009616:	493f      	ldr	r1, [pc, #252]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009618:	4313      	orrs	r3, r2
 800961a:	628b      	str	r3, [r1, #40]	@ 0x28
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	3b01      	subs	r3, #1
 8009622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	3b01      	subs	r3, #1
 800962c:	025b      	lsls	r3, r3, #9
 800962e:	b29b      	uxth	r3, r3
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	3b01      	subs	r3, #1
 8009638:	041b      	lsls	r3, r3, #16
 800963a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	3b01      	subs	r3, #1
 8009646:	061b      	lsls	r3, r3, #24
 8009648:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800964c:	4931      	ldr	r1, [pc, #196]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 800964e:	4313      	orrs	r3, r2
 8009650:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009652:	4b30      	ldr	r3, [pc, #192]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	492d      	ldr	r1, [pc, #180]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009660:	4313      	orrs	r3, r2
 8009662:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009664:	4b2b      	ldr	r3, [pc, #172]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	f023 0220 	bic.w	r2, r3, #32
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	4928      	ldr	r1, [pc, #160]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009672:	4313      	orrs	r3, r2
 8009674:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009676:	4b27      	ldr	r3, [pc, #156]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800967a:	4a26      	ldr	r2, [pc, #152]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 800967c:	f023 0310 	bic.w	r3, r3, #16
 8009680:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009682:	4b24      	ldr	r3, [pc, #144]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009686:	4b24      	ldr	r3, [pc, #144]	@ (8009718 <RCCEx_PLL2_Config+0x160>)
 8009688:	4013      	ands	r3, r2
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	69d2      	ldr	r2, [r2, #28]
 800968e:	00d2      	lsls	r2, r2, #3
 8009690:	4920      	ldr	r1, [pc, #128]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009692:	4313      	orrs	r3, r2
 8009694:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009696:	4b1f      	ldr	r3, [pc, #124]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 8009698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969a:	4a1e      	ldr	r2, [pc, #120]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 800969c:	f043 0310 	orr.w	r3, r3, #16
 80096a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d106      	bne.n	80096b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ac:	4a19      	ldr	r2, [pc, #100]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80096b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096b4:	e00f      	b.n	80096d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d106      	bne.n	80096ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096bc:	4b15      	ldr	r3, [pc, #84]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c0:	4a14      	ldr	r2, [pc, #80]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80096c8:	e005      	b.n	80096d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096ca:	4b12      	ldr	r3, [pc, #72]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ce:	4a11      	ldr	r2, [pc, #68]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80096d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a0e      	ldr	r2, [pc, #56]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e2:	f7fa fa01 	bl	8003ae8 <HAL_GetTick>
 80096e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096e8:	e008      	b.n	80096fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096ea:	f7fa f9fd 	bl	8003ae8 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d901      	bls.n	80096fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e006      	b.n	800970a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096fc:	4b05      	ldr	r3, [pc, #20]	@ (8009714 <RCCEx_PLL2_Config+0x15c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0f0      	beq.n	80096ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009708:	7bfb      	ldrb	r3, [r7, #15]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	58024400 	.word	0x58024400
 8009718:	ffff0007 	.word	0xffff0007

0800971c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800972a:	4b53      	ldr	r3, [pc, #332]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 800972c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	2b03      	cmp	r3, #3
 8009734:	d101      	bne.n	800973a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e099      	b.n	800986e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800973a:	4b4f      	ldr	r3, [pc, #316]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a4e      	ldr	r2, [pc, #312]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009740:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009746:	f7fa f9cf 	bl	8003ae8 <HAL_GetTick>
 800974a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800974c:	e008      	b.n	8009760 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800974e:	f7fa f9cb 	bl	8003ae8 <HAL_GetTick>
 8009752:	4602      	mov	r2, r0
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	2b02      	cmp	r3, #2
 800975a:	d901      	bls.n	8009760 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e086      	b.n	800986e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009760:	4b45      	ldr	r3, [pc, #276]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d1f0      	bne.n	800974e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800976c:	4b42      	ldr	r3, [pc, #264]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 800976e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009770:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	051b      	lsls	r3, r3, #20
 800977a:	493f      	ldr	r1, [pc, #252]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 800977c:	4313      	orrs	r3, r2
 800977e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	3b01      	subs	r3, #1
 8009786:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	3b01      	subs	r3, #1
 8009790:	025b      	lsls	r3, r3, #9
 8009792:	b29b      	uxth	r3, r3
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	3b01      	subs	r3, #1
 800979c:	041b      	lsls	r3, r3, #16
 800979e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097a2:	431a      	orrs	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	061b      	lsls	r3, r3, #24
 80097ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097b0:	4931      	ldr	r1, [pc, #196]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097b6:	4b30      	ldr	r3, [pc, #192]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	492d      	ldr	r1, [pc, #180]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	4928      	ldr	r1, [pc, #160]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80097da:	4b27      	ldr	r3, [pc, #156]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097de:	4a26      	ldr	r2, [pc, #152]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80097e6:	4b24      	ldr	r3, [pc, #144]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097ea:	4b24      	ldr	r3, [pc, #144]	@ (800987c <RCCEx_PLL3_Config+0x160>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	69d2      	ldr	r2, [r2, #28]
 80097f2:	00d2      	lsls	r2, r2, #3
 80097f4:	4920      	ldr	r1, [pc, #128]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80097fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d106      	bne.n	800981a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800980c:	4b1a      	ldr	r3, [pc, #104]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	4a19      	ldr	r2, [pc, #100]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009812:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009816:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009818:	e00f      	b.n	800983a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d106      	bne.n	800982e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009820:	4b15      	ldr	r3, [pc, #84]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009824:	4a14      	ldr	r2, [pc, #80]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009826:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800982a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800982c:	e005      	b.n	800983a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800982e:	4b12      	ldr	r3, [pc, #72]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009832:	4a11      	ldr	r2, [pc, #68]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009838:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800983a:	4b0f      	ldr	r3, [pc, #60]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a0e      	ldr	r2, [pc, #56]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009846:	f7fa f94f 	bl	8003ae8 <HAL_GetTick>
 800984a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800984c:	e008      	b.n	8009860 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800984e:	f7fa f94b 	bl	8003ae8 <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	2b02      	cmp	r3, #2
 800985a:	d901      	bls.n	8009860 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e006      	b.n	800986e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009860:	4b05      	ldr	r3, [pc, #20]	@ (8009878 <RCCEx_PLL3_Config+0x15c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0f0      	beq.n	800984e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	58024400 	.word	0x58024400
 800987c:	ffff0007 	.word	0xffff0007

08009880 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e10f      	b.n	8009ab2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a87      	ldr	r2, [pc, #540]	@ (8009abc <HAL_SPI_Init+0x23c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d00f      	beq.n	80098c2 <HAL_SPI_Init+0x42>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a86      	ldr	r2, [pc, #536]	@ (8009ac0 <HAL_SPI_Init+0x240>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00a      	beq.n	80098c2 <HAL_SPI_Init+0x42>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a84      	ldr	r2, [pc, #528]	@ (8009ac4 <HAL_SPI_Init+0x244>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d005      	beq.n	80098c2 <HAL_SPI_Init+0x42>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b0f      	cmp	r3, #15
 80098bc:	d901      	bls.n	80098c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e0f7      	b.n	8009ab2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 feca 	bl	800a65c <SPI_GetPacketSize>
 80098c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a7b      	ldr	r2, [pc, #492]	@ (8009abc <HAL_SPI_Init+0x23c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00c      	beq.n	80098ee <HAL_SPI_Init+0x6e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a79      	ldr	r2, [pc, #484]	@ (8009ac0 <HAL_SPI_Init+0x240>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d007      	beq.n	80098ee <HAL_SPI_Init+0x6e>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a78      	ldr	r2, [pc, #480]	@ (8009ac4 <HAL_SPI_Init+0x244>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d002      	beq.n	80098ee <HAL_SPI_Init+0x6e>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d811      	bhi.n	8009912 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098f2:	4a72      	ldr	r2, [pc, #456]	@ (8009abc <HAL_SPI_Init+0x23c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d009      	beq.n	800990c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a70      	ldr	r2, [pc, #448]	@ (8009ac0 <HAL_SPI_Init+0x240>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d004      	beq.n	800990c <HAL_SPI_Init+0x8c>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a6f      	ldr	r2, [pc, #444]	@ (8009ac4 <HAL_SPI_Init+0x244>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d104      	bne.n	8009916 <HAL_SPI_Init+0x96>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b10      	cmp	r3, #16
 8009910:	d901      	bls.n	8009916 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e0cd      	b.n	8009ab2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7f9 fab8 	bl	8002ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0201 	bic.w	r2, r2, #1
 8009946:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009952:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800995c:	d119      	bne.n	8009992 <HAL_SPI_Init+0x112>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009966:	d103      	bne.n	8009970 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800996c:	2b00      	cmp	r3, #0
 800996e:	d008      	beq.n	8009982 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10c      	bne.n	8009992 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800997c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009980:	d107      	bne.n	8009992 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009990:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00f      	beq.n	80099be <HAL_SPI_Init+0x13e>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	2b06      	cmp	r3, #6
 80099a4:	d90b      	bls.n	80099be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	e007      	b.n	80099ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80099cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	69da      	ldr	r2, [r3, #28]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d6:	431a      	orrs	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099e0:	ea42 0103 	orr.w	r1, r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	430a      	orrs	r2, r1
 80099ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a22:	431a      	orrs	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a2e:	ea42 0103 	orr.w	r1, r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d113      	bne.n	8009a6e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a58:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009a6c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0201 	bic.w	r2, r2, #1
 8009a7c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40013000 	.word	0x40013000
 8009ac0:	40003800 	.word	0x40003800
 8009ac4:	40003c00 	.word	0x40003c00

08009ac8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d001      	beq.n	8009ae6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	e126      	b.n	8009d34 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <HAL_SPI_Transmit_DMA+0x2a>
 8009aec:	88fb      	ldrh	r3, [r7, #6]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e11e      	b.n	8009d34 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d101      	bne.n	8009b04 <HAL_SPI_Transmit_DMA+0x3c>
 8009b00:	2302      	movs	r3, #2
 8009b02:	e117      	b.n	8009d34 <HAL_SPI_Transmit_DMA+0x26c>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2203      	movs	r2, #3
 8009b10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	88fa      	ldrh	r2, [r7, #6]
 8009b2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009b5c:	d108      	bne.n	8009b70 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e009      	b.n	8009b84 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009b82:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	2b0f      	cmp	r3, #15
 8009b8a:	d905      	bls.n	8009b98 <HAL_SPI_Transmit_DMA+0xd0>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b96:	d10f      	bne.n	8009bb8 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009b9c:	2b07      	cmp	r3, #7
 8009b9e:	d911      	bls.n	8009bc4 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009baa:	d00b      	beq.n	8009bc4 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bb0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009bb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bb6:	d005      	beq.n	8009bc4 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e0b7      	b.n	8009d34 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	d820      	bhi.n	8009c0e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bd6:	d109      	bne.n	8009bec <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3301      	adds	r3, #1
 8009be2:	105b      	asrs	r3, r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bf6:	d11e      	bne.n	8009c36 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3303      	adds	r3, #3
 8009c02:	109b      	asrs	r3, r3, #2
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c0c:	e013      	b.n	8009c36 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	2b0f      	cmp	r3, #15
 8009c14:	d80f      	bhi.n	8009c36 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c20:	d109      	bne.n	8009c36 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	105b      	asrs	r3, r3, #1
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c3a:	4a40      	ldr	r2, [pc, #256]	@ (8009d3c <HAL_SPI_Transmit_DMA+0x274>)
 8009c3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c42:	4a3f      	ldr	r2, [pc, #252]	@ (8009d40 <HAL_SPI_Transmit_DMA+0x278>)
 8009c44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c4a:	4a3e      	ldr	r2, [pc, #248]	@ (8009d44 <HAL_SPI_Transmit_DMA+0x27c>)
 8009c4c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c52:	2200      	movs	r2, #0
 8009c54:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c64:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3320      	adds	r3, #32
 8009c76:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009c80:	f7fa fbca 	bl	8004418 <HAL_DMA_Start_IT>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d011      	beq.n	8009cae <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c90:	f043 0210 	orr.w	r2, r3, #16
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e042      	b.n	8009d34 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cb8:	d108      	bne.n	8009ccc <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6859      	ldr	r1, [r3, #4]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4b20      	ldr	r3, [pc, #128]	@ (8009d48 <HAL_SPI_Transmit_DMA+0x280>)
 8009cc6:	400b      	ands	r3, r1
 8009cc8:	6053      	str	r3, [r2, #4]
 8009cca:	e009      	b.n	8009ce0 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d48 <HAL_SPI_Transmit_DMA+0x280>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	88f9      	ldrh	r1, [r7, #6]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	430b      	orrs	r3, r1
 8009cde:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cee:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	691a      	ldr	r2, [r3, #16]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009cfe:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0201 	orr.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d18:	d107      	bne.n	8009d2a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d28:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	0800a469 	.word	0x0800a469
 8009d40:	0800a3dd 	.word	0x0800a3dd
 8009d44:	0800a4a1 	.word	0x0800a4a1
 8009d48:	ffff0000 	.word	0xffff0000

08009d4c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d005      	beq.n	8009d72 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e127      	b.n	8009fc2 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <HAL_SPI_Receive_DMA+0x32>
 8009d78:	88fb      	ldrh	r3, [r7, #6]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d105      	bne.n	8009d8a <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e11b      	b.n	8009fc2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_SPI_Receive_DMA+0x4c>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e114      	b.n	8009fc2 <HAL_SPI_Receive_DMA+0x276>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2204      	movs	r2, #4
 8009da4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	88fa      	ldrh	r2, [r7, #6]
 8009dba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	88fa      	ldrh	r2, [r7, #6]
 8009dc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009dea:	d108      	bne.n	8009dfe <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	e009      	b.n	8009e12 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009e10:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d905      	bls.n	8009e26 <HAL_SPI_Receive_DMA+0xda>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e24:	d10f      	bne.n	8009e46 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009e2a:	2b07      	cmp	r3, #7
 8009e2c:	d911      	bls.n	8009e52 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e32:	699b      	ldr	r3, [r3, #24]
 8009e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e38:	d00b      	beq.n	8009e52 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e3e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e44:	d005      	beq.n	8009e52 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e0b7      	b.n	8009fc2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009e60:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	2b07      	cmp	r3, #7
 8009e68:	d820      	bhi.n	8009eac <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e74:	d109      	bne.n	8009e8a <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	3301      	adds	r3, #1
 8009e80:	105b      	asrs	r3, r3, #1
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e94:	d11e      	bne.n	8009ed4 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	3303      	adds	r3, #3
 8009ea0:	109b      	asrs	r3, r3, #2
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009eaa:	e013      	b.n	8009ed4 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	2b0f      	cmp	r3, #15
 8009eb2:	d80f      	bhi.n	8009ed4 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ebe:	d109      	bne.n	8009ed4 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	3301      	adds	r3, #1
 8009eca:	105b      	asrs	r3, r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8009fcc <HAL_SPI_Receive_DMA+0x280>)
 8009eda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8009fd0 <HAL_SPI_Receive_DMA+0x284>)
 8009ee2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8009fd4 <HAL_SPI_Receive_DMA+0x288>)
 8009eea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3330      	adds	r3, #48	@ 0x30
 8009efe:	4619      	mov	r1, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f04:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009f0c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8009f0e:	f7fa fa83 	bl	8004418 <HAL_DMA_Start_IT>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d011      	beq.n	8009f3c <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f1e:	f043 0210 	orr.w	r2, r3, #16
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e042      	b.n	8009fc2 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f46:	d108      	bne.n	8009f5a <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6859      	ldr	r1, [r3, #4]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	4b21      	ldr	r3, [pc, #132]	@ (8009fd8 <HAL_SPI_Receive_DMA+0x28c>)
 8009f54:	400b      	ands	r3, r1
 8009f56:	6053      	str	r3, [r2, #4]
 8009f58:	e009      	b.n	8009f6e <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd8 <HAL_SPI_Receive_DMA+0x28c>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	88f9      	ldrh	r1, [r7, #6]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	430b      	orrs	r3, r1
 8009f6c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f7c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 8009f8c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0201 	orr.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fa6:	d107      	bne.n	8009fb8 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fb6:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	0800a485 	.word	0x0800a485
 8009fd0:	0800a423 	.word	0x0800a423
 8009fd4:	0800a4a1 	.word	0x0800a4a1
 8009fd8:	ffff0000 	.word	0xffff0000

08009fdc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	@ 0x28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009ff4:	6a3a      	ldr	r2, [r7, #32]
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a004:	2300      	movs	r3, #0
 800a006:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a00e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3330      	adds	r3, #48	@ 0x30
 800a016:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d010      	beq.n	800a044 <HAL_SPI_IRQHandler+0x68>
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	f003 0308 	and.w	r3, r3, #8
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a03a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f9c3 	bl	800a3c8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a042:	e192      	b.n	800a36a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d113      	bne.n	800a076 <HAL_SPI_IRQHandler+0x9a>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10e      	bne.n	800a076 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d009      	beq.n	800a076 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
    handled = 1UL;
 800a072:	2301      	movs	r3, #1
 800a074:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10f      	bne.n	800a0a0 <HAL_SPI_IRQHandler+0xc4>
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00a      	beq.n	800a0a0 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a090:	2b00      	cmp	r3, #0
 800a092:	d105      	bne.n	800a0a0 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	4798      	blx	r3
    handled = 1UL;
 800a09c:	2301      	movs	r3, #1
 800a09e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10f      	bne.n	800a0ca <HAL_SPI_IRQHandler+0xee>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d105      	bne.n	800a0ca <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	4798      	blx	r3
    handled = 1UL;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8147 	bne.w	800a360 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 808b 	beq.w	800a1f4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0208 	orr.w	r2, r2, #8
 800a0ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	699a      	ldr	r2, [r3, #24]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f042 0210 	orr.w	r2, r2, #16
 800a0fc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	699a      	ldr	r2, [r3, #24]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a10c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f022 0208 	bic.w	r2, r2, #8
 800a11c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d13d      	bne.n	800a1a8 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a12c:	e036      	b.n	800a19c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	2b0f      	cmp	r3, #15
 800a134:	d90b      	bls.n	800a14e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a13e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a140:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a146:	1d1a      	adds	r2, r3, #4
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	665a      	str	r2, [r3, #100]	@ 0x64
 800a14c:	e01d      	b.n	800a18a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	2b07      	cmp	r3, #7
 800a154:	d90b      	bls.n	800a16e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	8812      	ldrh	r2, [r2, #0]
 800a15e:	b292      	uxth	r2, r2
 800a160:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a166:	1c9a      	adds	r2, r3, #2
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	665a      	str	r2, [r3, #100]	@ 0x64
 800a16c:	e00d      	b.n	800a18a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a17a:	7812      	ldrb	r2, [r2, #0]
 800a17c:	b2d2      	uxtb	r2, r2
 800a17e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a190:	b29b      	uxth	r3, r3
 800a192:	3b01      	subs	r3, #1
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1c2      	bne.n	800a12e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f9b7 	bl	800a51c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7f7 fc69 	bl	8001a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a1c6:	e0d0      	b.n	800a36a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a1c8:	7cfb      	ldrb	r3, [r7, #19]
 800a1ca:	2b05      	cmp	r3, #5
 800a1cc:	d103      	bne.n	800a1d6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f8dc 	bl	800a38c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a1d4:	e0c6      	b.n	800a364 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a1d6:	7cfb      	ldrb	r3, [r7, #19]
 800a1d8:	2b04      	cmp	r3, #4
 800a1da:	d103      	bne.n	800a1e4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7f7 fc4b 	bl	8001a78 <HAL_SPI_RxCpltCallback>
    return;
 800a1e2:	e0bf      	b.n	800a364 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a1e4:	7cfb      	ldrb	r3, [r7, #19]
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	f040 80bc 	bne.w	800a364 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f8c3 	bl	800a378 <HAL_SPI_TxCpltCallback>
    return;
 800a1f2:	e0b7      	b.n	800a364 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80b5 	beq.w	800a36a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00f      	beq.n	800a22a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a210:	f043 0204 	orr.w	r2, r3, #4
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	699a      	ldr	r2, [r3, #24]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a228:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00f      	beq.n	800a254 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a23a:	f043 0201 	orr.w	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	699a      	ldr	r2, [r3, #24]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a252:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00f      	beq.n	800a27e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a264:	f043 0208 	orr.w	r2, r3, #8
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	699a      	ldr	r2, [r3, #24]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a27c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00f      	beq.n	800a2a8 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a28e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	699a      	ldr	r2, [r3, #24]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f042 0220 	orr.w	r2, r2, #32
 800a2a6:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d05a      	beq.n	800a368 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f022 0201 	bic.w	r2, r2, #1
 800a2c0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6919      	ldr	r1, [r3, #16]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	4b28      	ldr	r3, [pc, #160]	@ (800a370 <HAL_SPI_IRQHandler+0x394>)
 800a2ce:	400b      	ands	r3, r1
 800a2d0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a2d8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a2dc:	d138      	bne.n	800a350 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a2ec:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d013      	beq.n	800a31e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a374 <HAL_SPI_IRQHandler+0x398>)
 800a2fc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a302:	4618      	mov	r0, r3
 800a304:	f7fa fe10 	bl	8004f28 <HAL_DMA_Abort_IT>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d007      	beq.n	800a31e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a314:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a322:	2b00      	cmp	r3, #0
 800a324:	d020      	beq.n	800a368 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a32a:	4a12      	ldr	r2, [pc, #72]	@ (800a374 <HAL_SPI_IRQHandler+0x398>)
 800a32c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a332:	4618      	mov	r0, r3
 800a334:	f7fa fdf8 	bl	8004f28 <HAL_DMA_Abort_IT>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d014      	beq.n	800a368 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a34e:	e00b      	b.n	800a368 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7f7 fb9d 	bl	8001a98 <HAL_SPI_ErrorCallback>
    return;
 800a35e:	e003      	b.n	800a368 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a360:	bf00      	nop
 800a362:	e002      	b.n	800a36a <HAL_SPI_IRQHandler+0x38e>
    return;
 800a364:	bf00      	nop
 800a366:	e000      	b.n	800a36a <HAL_SPI_IRQHandler+0x38e>
    return;
 800a368:	bf00      	nop
  }
}
 800a36a:	3728      	adds	r7, #40	@ 0x28
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	fffffc94 	.word	0xfffffc94
 800a374:	0800a4e7 	.word	0x0800a4e7

0800a378 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b07      	cmp	r3, #7
 800a3f4:	d011      	beq.n	800a41a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a400:	d103      	bne.n	800a40a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff ffb8 	bl	800a378 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a408:	e007      	b.n	800a41a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691a      	ldr	r2, [r3, #16]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f042 0208 	orr.w	r2, r2, #8
 800a418:	611a      	str	r2, [r3, #16]
}
 800a41a:	bf00      	nop
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a42e:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b07      	cmp	r3, #7
 800a43a:	d011      	beq.n	800a460 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a446:	d103      	bne.n	800a450 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f7f7 fb15 	bl	8001a78 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a44e:	e007      	b.n	800a460 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f042 0208 	orr.w	r2, r2, #8
 800a45e:	611a      	str	r2, [r3, #16]
}
 800a460:	bf00      	nop
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a474:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f7ff ff92 	bl	800a3a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a47c:	bf00      	nop
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a490:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff ff8e 	bl	800a3b4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ac:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7fb feaa 	bl	8006208 <HAL_DMA_GetError>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d011      	beq.n	800a4de <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f82e 	bl	800a51c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4c6:	f043 0210 	orr.w	r2, r3, #16
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f7f7 fadd 	bl	8001a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a4de:	bf00      	nop
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7f7 fac3 	bl	8001a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b085      	sub	sp, #20
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0208 	orr.w	r2, r2, #8
 800a53a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 0210 	orr.w	r2, r2, #16
 800a54a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0201 	bic.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6919      	ldr	r1, [r3, #16]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	4b3c      	ldr	r3, [pc, #240]	@ (800a658 <SPI_CloseTransfer+0x13c>)
 800a568:	400b      	ands	r3, r1
 800a56a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a57a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b04      	cmp	r3, #4
 800a586:	d014      	beq.n	800a5b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00f      	beq.n	800a5b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a598:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	699a      	ldr	r2, [r3, #24]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f042 0220 	orr.w	r2, r2, #32
 800a5b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d014      	beq.n	800a5e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d00f      	beq.n	800a5e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ce:	f043 0204 	orr.w	r2, r3, #4
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	699a      	ldr	r2, [r3, #24]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00f      	beq.n	800a612 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5f8:	f043 0201 	orr.w	r2, r3, #1
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	699a      	ldr	r2, [r3, #24]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a610:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00f      	beq.n	800a63c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a622:	f043 0208 	orr.w	r2, r3, #8
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a63a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a64c:	bf00      	nop
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	fffffc90 	.word	0xfffffc90

0800a65c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a668:	095b      	lsrs	r3, r3, #5
 800a66a:	3301      	adds	r3, #1
 800a66c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	3301      	adds	r3, #1
 800a674:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	3307      	adds	r3, #7
 800a67a:	08db      	lsrs	r3, r3, #3
 800a67c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	fb02 f303 	mul.w	r3, r2, r3
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b082      	sub	sp, #8
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d101      	bne.n	800a6a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e049      	b.n	800a738 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d106      	bne.n	800a6be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7f8 fd4f 	bl	800315c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f000 ffa5 	bl	800b620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2201      	movs	r2, #1
 800a712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b01      	cmp	r3, #1
 800a752:	d001      	beq.n	800a758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e05e      	b.n	800a816 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2202      	movs	r2, #2
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f042 0201 	orr.w	r2, r2, #1
 800a76e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a2b      	ldr	r2, [pc, #172]	@ (800a824 <HAL_TIM_Base_Start_IT+0xe4>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d02c      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a782:	d027      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a27      	ldr	r2, [pc, #156]	@ (800a828 <HAL_TIM_Base_Start_IT+0xe8>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d022      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a26      	ldr	r2, [pc, #152]	@ (800a82c <HAL_TIM_Base_Start_IT+0xec>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d01d      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a24      	ldr	r2, [pc, #144]	@ (800a830 <HAL_TIM_Base_Start_IT+0xf0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d018      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a23      	ldr	r2, [pc, #140]	@ (800a834 <HAL_TIM_Base_Start_IT+0xf4>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d013      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a21      	ldr	r2, [pc, #132]	@ (800a838 <HAL_TIM_Base_Start_IT+0xf8>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d00e      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a20      	ldr	r2, [pc, #128]	@ (800a83c <HAL_TIM_Base_Start_IT+0xfc>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d009      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a1e      	ldr	r2, [pc, #120]	@ (800a840 <HAL_TIM_Base_Start_IT+0x100>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d004      	beq.n	800a7d4 <HAL_TIM_Base_Start_IT+0x94>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a844 <HAL_TIM_Base_Start_IT+0x104>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d115      	bne.n	800a800 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689a      	ldr	r2, [r3, #8]
 800a7da:	4b1b      	ldr	r3, [pc, #108]	@ (800a848 <HAL_TIM_Base_Start_IT+0x108>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b06      	cmp	r3, #6
 800a7e4:	d015      	beq.n	800a812 <HAL_TIM_Base_Start_IT+0xd2>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ec:	d011      	beq.n	800a812 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f042 0201 	orr.w	r2, r2, #1
 800a7fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fe:	e008      	b.n	800a812 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f042 0201 	orr.w	r2, r2, #1
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	e000      	b.n	800a814 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a812:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	40010000 	.word	0x40010000
 800a828:	40000400 	.word	0x40000400
 800a82c:	40000800 	.word	0x40000800
 800a830:	40000c00 	.word	0x40000c00
 800a834:	40010400 	.word	0x40010400
 800a838:	40001800 	.word	0x40001800
 800a83c:	40014000 	.word	0x40014000
 800a840:	4000e000 	.word	0x4000e000
 800a844:	4000e400 	.word	0x4000e400
 800a848:	00010007 	.word	0x00010007

0800a84c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68da      	ldr	r2, [r3, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0201 	bic.w	r2, r2, #1
 800a862:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6a1a      	ldr	r2, [r3, #32]
 800a86a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a86e:	4013      	ands	r3, r2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10f      	bne.n	800a894 <HAL_TIM_Base_Stop_IT+0x48>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6a1a      	ldr	r2, [r3, #32]
 800a87a:	f240 4344 	movw	r3, #1092	@ 0x444
 800a87e:	4013      	ands	r3, r2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d107      	bne.n	800a894 <HAL_TIM_Base_Stop_IT+0x48>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0201 	bic.w	r2, r2, #1
 800a892:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a8aa:	b580      	push	{r7, lr}
 800a8ac:	b082      	sub	sp, #8
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e049      	b.n	800a950 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d106      	bne.n	800a8d6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7f8 fca1 	bl	8003218 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	f000 fe99 	bl	800b620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d109      	bne.n	800a97c <HAL_TIM_OC_Start+0x24>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b01      	cmp	r3, #1
 800a972:	bf14      	ite	ne
 800a974:	2301      	movne	r3, #1
 800a976:	2300      	moveq	r3, #0
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	e03c      	b.n	800a9f6 <HAL_TIM_OC_Start+0x9e>
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2b04      	cmp	r3, #4
 800a980:	d109      	bne.n	800a996 <HAL_TIM_OC_Start+0x3e>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	bf14      	ite	ne
 800a98e:	2301      	movne	r3, #1
 800a990:	2300      	moveq	r3, #0
 800a992:	b2db      	uxtb	r3, r3
 800a994:	e02f      	b.n	800a9f6 <HAL_TIM_OC_Start+0x9e>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d109      	bne.n	800a9b0 <HAL_TIM_OC_Start+0x58>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	e022      	b.n	800a9f6 <HAL_TIM_OC_Start+0x9e>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	2b0c      	cmp	r3, #12
 800a9b4:	d109      	bne.n	800a9ca <HAL_TIM_OC_Start+0x72>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	bf14      	ite	ne
 800a9c2:	2301      	movne	r3, #1
 800a9c4:	2300      	moveq	r3, #0
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	e015      	b.n	800a9f6 <HAL_TIM_OC_Start+0x9e>
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b10      	cmp	r3, #16
 800a9ce:	d109      	bne.n	800a9e4 <HAL_TIM_OC_Start+0x8c>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	bf14      	ite	ne
 800a9dc:	2301      	movne	r3, #1
 800a9de:	2300      	moveq	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	e008      	b.n	800a9f6 <HAL_TIM_OC_Start+0x9e>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	bf14      	ite	ne
 800a9f0:	2301      	movne	r3, #1
 800a9f2:	2300      	moveq	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e0ab      	b.n	800ab56 <HAL_TIM_OC_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d104      	bne.n	800aa0e <HAL_TIM_OC_Start+0xb6>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa0c:	e023      	b.n	800aa56 <HAL_TIM_OC_Start+0xfe>
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	2b04      	cmp	r3, #4
 800aa12:	d104      	bne.n	800aa1e <HAL_TIM_OC_Start+0xc6>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa1c:	e01b      	b.n	800aa56 <HAL_TIM_OC_Start+0xfe>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b08      	cmp	r3, #8
 800aa22:	d104      	bne.n	800aa2e <HAL_TIM_OC_Start+0xd6>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa2c:	e013      	b.n	800aa56 <HAL_TIM_OC_Start+0xfe>
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	2b0c      	cmp	r3, #12
 800aa32:	d104      	bne.n	800aa3e <HAL_TIM_OC_Start+0xe6>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa3c:	e00b      	b.n	800aa56 <HAL_TIM_OC_Start+0xfe>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b10      	cmp	r3, #16
 800aa42:	d104      	bne.n	800aa4e <HAL_TIM_OC_Start+0xf6>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2202      	movs	r2, #2
 800aa48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa4c:	e003      	b.n	800aa56 <HAL_TIM_OC_Start+0xfe>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2202      	movs	r2, #2
 800aa52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 faee 	bl	800c040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a3d      	ldr	r2, [pc, #244]	@ (800ab60 <HAL_TIM_OC_Start+0x208>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d013      	beq.n	800aa96 <HAL_TIM_OC_Start+0x13e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a3c      	ldr	r2, [pc, #240]	@ (800ab64 <HAL_TIM_OC_Start+0x20c>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d00e      	beq.n	800aa96 <HAL_TIM_OC_Start+0x13e>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a3a      	ldr	r2, [pc, #232]	@ (800ab68 <HAL_TIM_OC_Start+0x210>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d009      	beq.n	800aa96 <HAL_TIM_OC_Start+0x13e>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a39      	ldr	r2, [pc, #228]	@ (800ab6c <HAL_TIM_OC_Start+0x214>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d004      	beq.n	800aa96 <HAL_TIM_OC_Start+0x13e>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a37      	ldr	r2, [pc, #220]	@ (800ab70 <HAL_TIM_OC_Start+0x218>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d101      	bne.n	800aa9a <HAL_TIM_OC_Start+0x142>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e000      	b.n	800aa9c <HAL_TIM_OC_Start+0x144>
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d007      	beq.n	800aab0 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aaae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a2a      	ldr	r2, [pc, #168]	@ (800ab60 <HAL_TIM_OC_Start+0x208>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d02c      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac2:	d027      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a2a      	ldr	r2, [pc, #168]	@ (800ab74 <HAL_TIM_OC_Start+0x21c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d022      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a29      	ldr	r2, [pc, #164]	@ (800ab78 <HAL_TIM_OC_Start+0x220>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d01d      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a27      	ldr	r2, [pc, #156]	@ (800ab7c <HAL_TIM_OC_Start+0x224>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d018      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a1f      	ldr	r2, [pc, #124]	@ (800ab64 <HAL_TIM_OC_Start+0x20c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d013      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a23      	ldr	r2, [pc, #140]	@ (800ab80 <HAL_TIM_OC_Start+0x228>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d00e      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a1b      	ldr	r2, [pc, #108]	@ (800ab68 <HAL_TIM_OC_Start+0x210>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d009      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a1f      	ldr	r2, [pc, #124]	@ (800ab84 <HAL_TIM_OC_Start+0x22c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d004      	beq.n	800ab14 <HAL_TIM_OC_Start+0x1bc>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ab88 <HAL_TIM_OC_Start+0x230>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d115      	bne.n	800ab40 <HAL_TIM_OC_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ab8c <HAL_TIM_OC_Start+0x234>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b06      	cmp	r3, #6
 800ab24:	d015      	beq.n	800ab52 <HAL_TIM_OC_Start+0x1fa>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab2c:	d011      	beq.n	800ab52 <HAL_TIM_OC_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0201 	orr.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3e:	e008      	b.n	800ab52 <HAL_TIM_OC_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0201 	orr.w	r2, r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	e000      	b.n	800ab54 <HAL_TIM_OC_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40010000 	.word	0x40010000
 800ab64:	40010400 	.word	0x40010400
 800ab68:	40014000 	.word	0x40014000
 800ab6c:	40014400 	.word	0x40014400
 800ab70:	40014800 	.word	0x40014800
 800ab74:	40000400 	.word	0x40000400
 800ab78:	40000800 	.word	0x40000800
 800ab7c:	40000c00 	.word	0x40000c00
 800ab80:	40001800 	.word	0x40001800
 800ab84:	4000e000 	.word	0x4000e000
 800ab88:	4000e400 	.word	0x4000e400
 800ab8c:	00010007 	.word	0x00010007

0800ab90 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f001 fa4c 	bl	800c040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a3e      	ldr	r2, [pc, #248]	@ (800aca8 <HAL_TIM_OC_Stop+0x118>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d013      	beq.n	800abda <HAL_TIM_OC_Stop+0x4a>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a3d      	ldr	r2, [pc, #244]	@ (800acac <HAL_TIM_OC_Stop+0x11c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00e      	beq.n	800abda <HAL_TIM_OC_Stop+0x4a>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a3b      	ldr	r2, [pc, #236]	@ (800acb0 <HAL_TIM_OC_Stop+0x120>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d009      	beq.n	800abda <HAL_TIM_OC_Stop+0x4a>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a3a      	ldr	r2, [pc, #232]	@ (800acb4 <HAL_TIM_OC_Stop+0x124>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d004      	beq.n	800abda <HAL_TIM_OC_Stop+0x4a>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a38      	ldr	r2, [pc, #224]	@ (800acb8 <HAL_TIM_OC_Stop+0x128>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d101      	bne.n	800abde <HAL_TIM_OC_Stop+0x4e>
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <HAL_TIM_OC_Stop+0x50>
 800abde:	2300      	movs	r3, #0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d017      	beq.n	800ac14 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6a1a      	ldr	r2, [r3, #32]
 800abea:	f241 1311 	movw	r3, #4369	@ 0x1111
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10f      	bne.n	800ac14 <HAL_TIM_OC_Stop+0x84>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6a1a      	ldr	r2, [r3, #32]
 800abfa:	f240 4344 	movw	r3, #1092	@ 0x444
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d107      	bne.n	800ac14 <HAL_TIM_OC_Stop+0x84>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac12:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6a1a      	ldr	r2, [r3, #32]
 800ac1a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ac1e:	4013      	ands	r3, r2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10f      	bne.n	800ac44 <HAL_TIM_OC_Stop+0xb4>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6a1a      	ldr	r2, [r3, #32]
 800ac2a:	f240 4344 	movw	r3, #1092	@ 0x444
 800ac2e:	4013      	ands	r3, r2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d107      	bne.n	800ac44 <HAL_TIM_OC_Stop+0xb4>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 0201 	bic.w	r2, r2, #1
 800ac42:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d104      	bne.n	800ac54 <HAL_TIM_OC_Stop+0xc4>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac52:	e023      	b.n	800ac9c <HAL_TIM_OC_Stop+0x10c>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d104      	bne.n	800ac64 <HAL_TIM_OC_Stop+0xd4>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac62:	e01b      	b.n	800ac9c <HAL_TIM_OC_Stop+0x10c>
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	d104      	bne.n	800ac74 <HAL_TIM_OC_Stop+0xe4>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac72:	e013      	b.n	800ac9c <HAL_TIM_OC_Stop+0x10c>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b0c      	cmp	r3, #12
 800ac78:	d104      	bne.n	800ac84 <HAL_TIM_OC_Stop+0xf4>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac82:	e00b      	b.n	800ac9c <HAL_TIM_OC_Stop+0x10c>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b10      	cmp	r3, #16
 800ac88:	d104      	bne.n	800ac94 <HAL_TIM_OC_Stop+0x104>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac92:	e003      	b.n	800ac9c <HAL_TIM_OC_Stop+0x10c>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	40010000 	.word	0x40010000
 800acac:	40010400 	.word	0x40010400
 800acb0:	40014000 	.word	0x40014000
 800acb4:	40014400 	.word	0x40014400
 800acb8:	40014800 	.word	0x40014800

0800acbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e049      	b.n	800ad62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d106      	bne.n	800ace8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f841 	bl	800ad6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2202      	movs	r2, #2
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f000 fc90 	bl	800b620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e041      	b.n	800ae16 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d106      	bne.n	800adac <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f839 	bl	800ae1e <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3304      	adds	r3, #4
 800adbc:	4619      	mov	r1, r3
 800adbe:	4610      	mov	r0, r2
 800adc0:	f000 fc2e 	bl	800b620 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f022 0208 	bic.w	r2, r2, #8
 800add2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6819      	ldr	r1, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	430a      	orrs	r2, r1
 800ade2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d020      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f003 0302 	and.w	r3, r3, #2
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d01b      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f06f 0202 	mvn.w	r2, #2
 800ae66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fbb1 	bl	800b5e4 <HAL_TIM_IC_CaptureCallback>
 800ae82:	e005      	b.n	800ae90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fba3 	bl	800b5d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fbb4 	bl	800b5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f003 0304 	and.w	r3, r3, #4
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d020      	beq.n	800aee2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01b      	beq.n	800aee2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f06f 0204 	mvn.w	r2, #4
 800aeb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2202      	movs	r2, #2
 800aeb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fb8b 	bl	800b5e4 <HAL_TIM_IC_CaptureCallback>
 800aece:	e005      	b.n	800aedc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fb7d 	bl	800b5d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fb8e 	bl	800b5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d020      	beq.n	800af2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f003 0308 	and.w	r3, r3, #8
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d01b      	beq.n	800af2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f06f 0208 	mvn.w	r2, #8
 800aefe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2204      	movs	r2, #4
 800af04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f003 0303 	and.w	r3, r3, #3
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fb65 	bl	800b5e4 <HAL_TIM_IC_CaptureCallback>
 800af1a:	e005      	b.n	800af28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fb57 	bl	800b5d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fb68 	bl	800b5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	f003 0310 	and.w	r3, r3, #16
 800af34:	2b00      	cmp	r3, #0
 800af36:	d020      	beq.n	800af7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d01b      	beq.n	800af7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f06f 0210 	mvn.w	r2, #16
 800af4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2208      	movs	r2, #8
 800af50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	69db      	ldr	r3, [r3, #28]
 800af58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d003      	beq.n	800af68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fb3f 	bl	800b5e4 <HAL_TIM_IC_CaptureCallback>
 800af66:	e005      	b.n	800af74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fb31 	bl	800b5d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fb42 	bl	800b5f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00c      	beq.n	800af9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f003 0301 	and.w	r3, r3, #1
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d007      	beq.n	800af9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f06f 0201 	mvn.w	r2, #1
 800af96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7f8 fb27 	bl	80035ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d104      	bne.n	800afb2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00c      	beq.n	800afcc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800afc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f001 f992 	bl	800c2f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00c      	beq.n	800aff0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d007      	beq.n	800aff0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800afe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f001 f98a 	bl	800c304 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00c      	beq.n	800b014 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b00c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fafc 	bl	800b60c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00c      	beq.n	800b038 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f003 0320 	and.w	r3, r3, #32
 800b024:	2b00      	cmp	r3, #0
 800b026:	d007      	beq.n	800b038 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0220 	mvn.w	r2, #32
 800b030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f001 f952 	bl	800c2dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b038:	bf00      	nop
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b056:	2b01      	cmp	r3, #1
 800b058:	d101      	bne.n	800b05e <HAL_TIM_OC_ConfigChannel+0x1e>
 800b05a:	2302      	movs	r3, #2
 800b05c:	e066      	b.n	800b12c <HAL_TIM_OC_ConfigChannel+0xec>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2b14      	cmp	r3, #20
 800b06a:	d857      	bhi.n	800b11c <HAL_TIM_OC_ConfigChannel+0xdc>
 800b06c:	a201      	add	r2, pc, #4	@ (adr r2, 800b074 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b072:	bf00      	nop
 800b074:	0800b0c9 	.word	0x0800b0c9
 800b078:	0800b11d 	.word	0x0800b11d
 800b07c:	0800b11d 	.word	0x0800b11d
 800b080:	0800b11d 	.word	0x0800b11d
 800b084:	0800b0d7 	.word	0x0800b0d7
 800b088:	0800b11d 	.word	0x0800b11d
 800b08c:	0800b11d 	.word	0x0800b11d
 800b090:	0800b11d 	.word	0x0800b11d
 800b094:	0800b0e5 	.word	0x0800b0e5
 800b098:	0800b11d 	.word	0x0800b11d
 800b09c:	0800b11d 	.word	0x0800b11d
 800b0a0:	0800b11d 	.word	0x0800b11d
 800b0a4:	0800b0f3 	.word	0x0800b0f3
 800b0a8:	0800b11d 	.word	0x0800b11d
 800b0ac:	0800b11d 	.word	0x0800b11d
 800b0b0:	0800b11d 	.word	0x0800b11d
 800b0b4:	0800b101 	.word	0x0800b101
 800b0b8:	0800b11d 	.word	0x0800b11d
 800b0bc:	0800b11d 	.word	0x0800b11d
 800b0c0:	0800b11d 	.word	0x0800b11d
 800b0c4:	0800b10f 	.word	0x0800b10f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fb58 	bl	800b784 <TIM_OC1_SetConfig>
      break;
 800b0d4:	e025      	b.n	800b122 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fbe1 	bl	800b8a4 <TIM_OC2_SetConfig>
      break;
 800b0e2:	e01e      	b.n	800b122 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fc64 	bl	800b9b8 <TIM_OC3_SetConfig>
      break;
 800b0f0:	e017      	b.n	800b122 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 fce5 	bl	800bac8 <TIM_OC4_SetConfig>
      break;
 800b0fe:	e010      	b.n	800b122 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68b9      	ldr	r1, [r7, #8]
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fd48 	bl	800bb9c <TIM_OC5_SetConfig>
      break;
 800b10c:	e009      	b.n	800b122 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fda5 	bl	800bc64 <TIM_OC6_SetConfig>
      break;
 800b11a:	e002      	b.n	800b122 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]
      break;
 800b120:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d101      	bne.n	800b152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b14e:	2302      	movs	r3, #2
 800b150:	e0ff      	b.n	800b352 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b14      	cmp	r3, #20
 800b15e:	f200 80f0 	bhi.w	800b342 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b162:	a201      	add	r2, pc, #4	@ (adr r2, 800b168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b1bd 	.word	0x0800b1bd
 800b16c:	0800b343 	.word	0x0800b343
 800b170:	0800b343 	.word	0x0800b343
 800b174:	0800b343 	.word	0x0800b343
 800b178:	0800b1fd 	.word	0x0800b1fd
 800b17c:	0800b343 	.word	0x0800b343
 800b180:	0800b343 	.word	0x0800b343
 800b184:	0800b343 	.word	0x0800b343
 800b188:	0800b23f 	.word	0x0800b23f
 800b18c:	0800b343 	.word	0x0800b343
 800b190:	0800b343 	.word	0x0800b343
 800b194:	0800b343 	.word	0x0800b343
 800b198:	0800b27f 	.word	0x0800b27f
 800b19c:	0800b343 	.word	0x0800b343
 800b1a0:	0800b343 	.word	0x0800b343
 800b1a4:	0800b343 	.word	0x0800b343
 800b1a8:	0800b2c1 	.word	0x0800b2c1
 800b1ac:	0800b343 	.word	0x0800b343
 800b1b0:	0800b343 	.word	0x0800b343
 800b1b4:	0800b343 	.word	0x0800b343
 800b1b8:	0800b301 	.word	0x0800b301
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 fade 	bl	800b784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	699a      	ldr	r2, [r3, #24]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f042 0208 	orr.w	r2, r2, #8
 800b1d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	699a      	ldr	r2, [r3, #24]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f022 0204 	bic.w	r2, r2, #4
 800b1e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6999      	ldr	r1, [r3, #24]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	691a      	ldr	r2, [r3, #16]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	619a      	str	r2, [r3, #24]
      break;
 800b1fa:	e0a5      	b.n	800b348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	4618      	mov	r0, r3
 800b204:	f000 fb4e 	bl	800b8a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	699a      	ldr	r2, [r3, #24]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699a      	ldr	r2, [r3, #24]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6999      	ldr	r1, [r3, #24]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	021a      	lsls	r2, r3, #8
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	430a      	orrs	r2, r1
 800b23a:	619a      	str	r2, [r3, #24]
      break;
 800b23c:	e084      	b.n	800b348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	4618      	mov	r0, r3
 800b246:	f000 fbb7 	bl	800b9b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f042 0208 	orr.w	r2, r2, #8
 800b258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69da      	ldr	r2, [r3, #28]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f022 0204 	bic.w	r2, r2, #4
 800b268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69d9      	ldr	r1, [r3, #28]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	61da      	str	r2, [r3, #28]
      break;
 800b27c:	e064      	b.n	800b348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68b9      	ldr	r1, [r7, #8]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fc1f 	bl	800bac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69da      	ldr	r2, [r3, #28]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	69da      	ldr	r2, [r3, #28]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69d9      	ldr	r1, [r3, #28]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	021a      	lsls	r2, r3, #8
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	430a      	orrs	r2, r1
 800b2bc:	61da      	str	r2, [r3, #28]
      break;
 800b2be:	e043      	b.n	800b348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fc68 	bl	800bb9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f042 0208 	orr.w	r2, r2, #8
 800b2da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f022 0204 	bic.w	r2, r2, #4
 800b2ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	691a      	ldr	r2, [r3, #16]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b2fe:	e023      	b.n	800b348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fcac 	bl	800bc64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b31a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b32a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	021a      	lsls	r2, r3, #8
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	430a      	orrs	r2, r1
 800b33e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b340:	e002      	b.n	800b348 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	75fb      	strb	r3, [r7, #23]
      break;
 800b346:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b350:	7dfb      	ldrb	r3, [r7, #23]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop

0800b35c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_TIM_ConfigClockSource+0x1c>
 800b374:	2302      	movs	r3, #2
 800b376:	e0dc      	b.n	800b532 <HAL_TIM_ConfigClockSource+0x1d6>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	4b6a      	ldr	r3, [pc, #424]	@ (800b53c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b394:	4013      	ands	r3, r2
 800b396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b39e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a64      	ldr	r2, [pc, #400]	@ (800b540 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	f000 80a9 	beq.w	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3b4:	4a62      	ldr	r2, [pc, #392]	@ (800b540 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	f200 80ae 	bhi.w	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3bc:	4a61      	ldr	r2, [pc, #388]	@ (800b544 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f000 80a1 	beq.w	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3c4:	4a5f      	ldr	r2, [pc, #380]	@ (800b544 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f200 80a6 	bhi.w	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3cc:	4a5e      	ldr	r2, [pc, #376]	@ (800b548 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	f000 8099 	beq.w	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3d4:	4a5c      	ldr	r2, [pc, #368]	@ (800b548 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	f200 809e 	bhi.w	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3e0:	f000 8091 	beq.w	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3e8:	f200 8096 	bhi.w	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3f0:	f000 8089 	beq.w	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3f8:	f200 808e 	bhi.w	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b400:	d03e      	beq.n	800b480 <HAL_TIM_ConfigClockSource+0x124>
 800b402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b406:	f200 8087 	bhi.w	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b40a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b40e:	f000 8086 	beq.w	800b51e <HAL_TIM_ConfigClockSource+0x1c2>
 800b412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b416:	d87f      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b418:	2b70      	cmp	r3, #112	@ 0x70
 800b41a:	d01a      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0xf6>
 800b41c:	2b70      	cmp	r3, #112	@ 0x70
 800b41e:	d87b      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b420:	2b60      	cmp	r3, #96	@ 0x60
 800b422:	d050      	beq.n	800b4c6 <HAL_TIM_ConfigClockSource+0x16a>
 800b424:	2b60      	cmp	r3, #96	@ 0x60
 800b426:	d877      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b428:	2b50      	cmp	r3, #80	@ 0x50
 800b42a:	d03c      	beq.n	800b4a6 <HAL_TIM_ConfigClockSource+0x14a>
 800b42c:	2b50      	cmp	r3, #80	@ 0x50
 800b42e:	d873      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b430:	2b40      	cmp	r3, #64	@ 0x40
 800b432:	d058      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0x18a>
 800b434:	2b40      	cmp	r3, #64	@ 0x40
 800b436:	d86f      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b438:	2b30      	cmp	r3, #48	@ 0x30
 800b43a:	d064      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b43c:	2b30      	cmp	r3, #48	@ 0x30
 800b43e:	d86b      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b440:	2b20      	cmp	r3, #32
 800b442:	d060      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b444:	2b20      	cmp	r3, #32
 800b446:	d867      	bhi.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d05c      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b44c:	2b10      	cmp	r3, #16
 800b44e:	d05a      	beq.n	800b506 <HAL_TIM_ConfigClockSource+0x1aa>
 800b450:	e062      	b.n	800b518 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b462:	f000 fdcd 	bl	800c000 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	609a      	str	r2, [r3, #8]
      break;
 800b47e:	e04f      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b490:	f000 fdb6 	bl	800c000 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4a2:	609a      	str	r2, [r3, #8]
      break;
 800b4a4:	e03c      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f000 fd26 	bl	800bf04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2150      	movs	r1, #80	@ 0x50
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fd80 	bl	800bfc4 <TIM_ITRx_SetConfig>
      break;
 800b4c4:	e02c      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f000 fd45 	bl	800bf62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2160      	movs	r1, #96	@ 0x60
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fd70 	bl	800bfc4 <TIM_ITRx_SetConfig>
      break;
 800b4e4:	e01c      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f000 fd06 	bl	800bf04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2140      	movs	r1, #64	@ 0x40
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fd60 	bl	800bfc4 <TIM_ITRx_SetConfig>
      break;
 800b504:	e00c      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f000 fd57 	bl	800bfc4 <TIM_ITRx_SetConfig>
      break;
 800b516:	e003      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	73fb      	strb	r3, [r7, #15]
      break;
 800b51c:	e000      	b.n	800b520 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b51e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b530:	7bfb      	ldrb	r3, [r7, #15]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	ffceff88 	.word	0xffceff88
 800b540:	00100040 	.word	0x00100040
 800b544:	00100030 	.word	0x00100030
 800b548:	00100020 	.word	0x00100020

0800b54c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d101      	bne.n	800b564 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b560:	2302      	movs	r3, #2
 800b562:	e031      	b.n	800b5c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fbda 	bl	800bd30 <TIM_SlaveTimer_SetConfig>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d009      	beq.n	800b596 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e018      	b.n	800b5c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68da      	ldr	r2, [r3, #12]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b5a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b5b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b614:	bf00      	nop
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a4a      	ldr	r2, [pc, #296]	@ (800b75c <TIM_Base_SetConfig+0x13c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d013      	beq.n	800b660 <TIM_Base_SetConfig+0x40>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b63e:	d00f      	beq.n	800b660 <TIM_Base_SetConfig+0x40>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a47      	ldr	r2, [pc, #284]	@ (800b760 <TIM_Base_SetConfig+0x140>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d00b      	beq.n	800b660 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a46      	ldr	r2, [pc, #280]	@ (800b764 <TIM_Base_SetConfig+0x144>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d007      	beq.n	800b660 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a45      	ldr	r2, [pc, #276]	@ (800b768 <TIM_Base_SetConfig+0x148>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d003      	beq.n	800b660 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a44      	ldr	r2, [pc, #272]	@ (800b76c <TIM_Base_SetConfig+0x14c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d108      	bne.n	800b672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	4a39      	ldr	r2, [pc, #228]	@ (800b75c <TIM_Base_SetConfig+0x13c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d027      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b680:	d023      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a36      	ldr	r2, [pc, #216]	@ (800b760 <TIM_Base_SetConfig+0x140>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d01f      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a35      	ldr	r2, [pc, #212]	@ (800b764 <TIM_Base_SetConfig+0x144>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d01b      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a34      	ldr	r2, [pc, #208]	@ (800b768 <TIM_Base_SetConfig+0x148>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d017      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a33      	ldr	r2, [pc, #204]	@ (800b76c <TIM_Base_SetConfig+0x14c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d013      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a32      	ldr	r2, [pc, #200]	@ (800b770 <TIM_Base_SetConfig+0x150>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d00f      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a31      	ldr	r2, [pc, #196]	@ (800b774 <TIM_Base_SetConfig+0x154>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d00b      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a30      	ldr	r2, [pc, #192]	@ (800b778 <TIM_Base_SetConfig+0x158>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d007      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a2f      	ldr	r2, [pc, #188]	@ (800b77c <TIM_Base_SetConfig+0x15c>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d003      	beq.n	800b6ca <TIM_Base_SetConfig+0xaa>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a2e      	ldr	r2, [pc, #184]	@ (800b780 <TIM_Base_SetConfig+0x160>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d108      	bne.n	800b6dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a16      	ldr	r2, [pc, #88]	@ (800b75c <TIM_Base_SetConfig+0x13c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d00f      	beq.n	800b728 <TIM_Base_SetConfig+0x108>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a18      	ldr	r2, [pc, #96]	@ (800b76c <TIM_Base_SetConfig+0x14c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d00b      	beq.n	800b728 <TIM_Base_SetConfig+0x108>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a17      	ldr	r2, [pc, #92]	@ (800b770 <TIM_Base_SetConfig+0x150>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d007      	beq.n	800b728 <TIM_Base_SetConfig+0x108>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a16      	ldr	r2, [pc, #88]	@ (800b774 <TIM_Base_SetConfig+0x154>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d003      	beq.n	800b728 <TIM_Base_SetConfig+0x108>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a15      	ldr	r2, [pc, #84]	@ (800b778 <TIM_Base_SetConfig+0x158>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d103      	bne.n	800b730 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	691a      	ldr	r2, [r3, #16]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d105      	bne.n	800b74e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	611a      	str	r2, [r3, #16]
  }
}
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	40010000 	.word	0x40010000
 800b760:	40000400 	.word	0x40000400
 800b764:	40000800 	.word	0x40000800
 800b768:	40000c00 	.word	0x40000c00
 800b76c:	40010400 	.word	0x40010400
 800b770:	40014000 	.word	0x40014000
 800b774:	40014400 	.word	0x40014400
 800b778:	40014800 	.word	0x40014800
 800b77c:	4000e000 	.word	0x4000e000
 800b780:	4000e400 	.word	0x4000e400

0800b784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a1b      	ldr	r3, [r3, #32]
 800b798:	f023 0201 	bic.w	r2, r3, #1
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4b37      	ldr	r3, [pc, #220]	@ (800b88c <TIM_OC1_SetConfig+0x108>)
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f023 0302 	bic.w	r3, r3, #2
 800b7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a2d      	ldr	r2, [pc, #180]	@ (800b890 <TIM_OC1_SetConfig+0x10c>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d00f      	beq.n	800b800 <TIM_OC1_SetConfig+0x7c>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a2c      	ldr	r2, [pc, #176]	@ (800b894 <TIM_OC1_SetConfig+0x110>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d00b      	beq.n	800b800 <TIM_OC1_SetConfig+0x7c>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a2b      	ldr	r2, [pc, #172]	@ (800b898 <TIM_OC1_SetConfig+0x114>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d007      	beq.n	800b800 <TIM_OC1_SetConfig+0x7c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b89c <TIM_OC1_SetConfig+0x118>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d003      	beq.n	800b800 <TIM_OC1_SetConfig+0x7c>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4a29      	ldr	r2, [pc, #164]	@ (800b8a0 <TIM_OC1_SetConfig+0x11c>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d10c      	bne.n	800b81a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f023 0308 	bic.w	r3, r3, #8
 800b806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f023 0304 	bic.w	r3, r3, #4
 800b818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1c      	ldr	r2, [pc, #112]	@ (800b890 <TIM_OC1_SetConfig+0x10c>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00f      	beq.n	800b842 <TIM_OC1_SetConfig+0xbe>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a1b      	ldr	r2, [pc, #108]	@ (800b894 <TIM_OC1_SetConfig+0x110>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00b      	beq.n	800b842 <TIM_OC1_SetConfig+0xbe>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a1a      	ldr	r2, [pc, #104]	@ (800b898 <TIM_OC1_SetConfig+0x114>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d007      	beq.n	800b842 <TIM_OC1_SetConfig+0xbe>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a19      	ldr	r2, [pc, #100]	@ (800b89c <TIM_OC1_SetConfig+0x118>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d003      	beq.n	800b842 <TIM_OC1_SetConfig+0xbe>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4a18      	ldr	r2, [pc, #96]	@ (800b8a0 <TIM_OC1_SetConfig+0x11c>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d111      	bne.n	800b866 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	4313      	orrs	r3, r2
 800b85a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	4313      	orrs	r3, r2
 800b864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	fffeff8f 	.word	0xfffeff8f
 800b890:	40010000 	.word	0x40010000
 800b894:	40010400 	.word	0x40010400
 800b898:	40014000 	.word	0x40014000
 800b89c:	40014400 	.word	0x40014400
 800b8a0:	40014800 	.word	0x40014800

0800b8a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b087      	sub	sp, #28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a1b      	ldr	r3, [r3, #32]
 800b8b8:	f023 0210 	bic.w	r2, r3, #16
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	4b34      	ldr	r3, [pc, #208]	@ (800b9a0 <TIM_OC2_SetConfig+0xfc>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f023 0320 	bic.w	r3, r3, #32
 800b8ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a29      	ldr	r2, [pc, #164]	@ (800b9a4 <TIM_OC2_SetConfig+0x100>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d003      	beq.n	800b90c <TIM_OC2_SetConfig+0x68>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a28      	ldr	r2, [pc, #160]	@ (800b9a8 <TIM_OC2_SetConfig+0x104>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d10d      	bne.n	800b928 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b926:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a1e      	ldr	r2, [pc, #120]	@ (800b9a4 <TIM_OC2_SetConfig+0x100>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00f      	beq.n	800b950 <TIM_OC2_SetConfig+0xac>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a1d      	ldr	r2, [pc, #116]	@ (800b9a8 <TIM_OC2_SetConfig+0x104>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d00b      	beq.n	800b950 <TIM_OC2_SetConfig+0xac>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a1c      	ldr	r2, [pc, #112]	@ (800b9ac <TIM_OC2_SetConfig+0x108>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <TIM_OC2_SetConfig+0xac>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1b      	ldr	r2, [pc, #108]	@ (800b9b0 <TIM_OC2_SetConfig+0x10c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d003      	beq.n	800b950 <TIM_OC2_SetConfig+0xac>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a1a      	ldr	r2, [pc, #104]	@ (800b9b4 <TIM_OC2_SetConfig+0x110>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d113      	bne.n	800b978 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b95e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	693a      	ldr	r2, [r7, #16]
 800b968:	4313      	orrs	r3, r2
 800b96a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4313      	orrs	r3, r2
 800b976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685a      	ldr	r2, [r3, #4]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	feff8fff 	.word	0xfeff8fff
 800b9a4:	40010000 	.word	0x40010000
 800b9a8:	40010400 	.word	0x40010400
 800b9ac:	40014000 	.word	0x40014000
 800b9b0:	40014400 	.word	0x40014400
 800b9b4:	40014800 	.word	0x40014800

0800b9b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b087      	sub	sp, #28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	4b33      	ldr	r3, [pc, #204]	@ (800bab0 <TIM_OC3_SetConfig+0xf8>)
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f023 0303 	bic.w	r3, r3, #3
 800b9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a28      	ldr	r2, [pc, #160]	@ (800bab4 <TIM_OC3_SetConfig+0xfc>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d003      	beq.n	800ba1e <TIM_OC3_SetConfig+0x66>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	4a27      	ldr	r2, [pc, #156]	@ (800bab8 <TIM_OC3_SetConfig+0x100>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d10d      	bne.n	800ba3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ba24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ba38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bab4 <TIM_OC3_SetConfig+0xfc>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00f      	beq.n	800ba62 <TIM_OC3_SetConfig+0xaa>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a1c      	ldr	r2, [pc, #112]	@ (800bab8 <TIM_OC3_SetConfig+0x100>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d00b      	beq.n	800ba62 <TIM_OC3_SetConfig+0xaa>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1b      	ldr	r2, [pc, #108]	@ (800babc <TIM_OC3_SetConfig+0x104>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d007      	beq.n	800ba62 <TIM_OC3_SetConfig+0xaa>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a1a      	ldr	r2, [pc, #104]	@ (800bac0 <TIM_OC3_SetConfig+0x108>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d003      	beq.n	800ba62 <TIM_OC3_SetConfig+0xaa>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a19      	ldr	r2, [pc, #100]	@ (800bac4 <TIM_OC3_SetConfig+0x10c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d113      	bne.n	800ba8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	011b      	lsls	r3, r3, #4
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	011b      	lsls	r3, r3, #4
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	621a      	str	r2, [r3, #32]
}
 800baa4:	bf00      	nop
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	fffeff8f 	.word	0xfffeff8f
 800bab4:	40010000 	.word	0x40010000
 800bab8:	40010400 	.word	0x40010400
 800babc:	40014000 	.word	0x40014000
 800bac0:	40014400 	.word	0x40014400
 800bac4:	40014800 	.word	0x40014800

0800bac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bac8:	b480      	push	{r7}
 800baca:	b087      	sub	sp, #28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a1b      	ldr	r3, [r3, #32]
 800badc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800baf0:	68fa      	ldr	r2, [r7, #12]
 800baf2:	4b24      	ldr	r3, [pc, #144]	@ (800bb84 <TIM_OC4_SetConfig+0xbc>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	021b      	lsls	r3, r3, #8
 800bb06:	68fa      	ldr	r2, [r7, #12]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	031b      	lsls	r3, r3, #12
 800bb1a:	693a      	ldr	r2, [r7, #16]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a19      	ldr	r2, [pc, #100]	@ (800bb88 <TIM_OC4_SetConfig+0xc0>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00f      	beq.n	800bb48 <TIM_OC4_SetConfig+0x80>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a18      	ldr	r2, [pc, #96]	@ (800bb8c <TIM_OC4_SetConfig+0xc4>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d00b      	beq.n	800bb48 <TIM_OC4_SetConfig+0x80>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a17      	ldr	r2, [pc, #92]	@ (800bb90 <TIM_OC4_SetConfig+0xc8>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d007      	beq.n	800bb48 <TIM_OC4_SetConfig+0x80>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a16      	ldr	r2, [pc, #88]	@ (800bb94 <TIM_OC4_SetConfig+0xcc>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d003      	beq.n	800bb48 <TIM_OC4_SetConfig+0x80>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a15      	ldr	r2, [pc, #84]	@ (800bb98 <TIM_OC4_SetConfig+0xd0>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d109      	bne.n	800bb5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	695b      	ldr	r3, [r3, #20]
 800bb54:	019b      	lsls	r3, r3, #6
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	693a      	ldr	r2, [r7, #16]
 800bb74:	621a      	str	r2, [r3, #32]
}
 800bb76:	bf00      	nop
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	feff8fff 	.word	0xfeff8fff
 800bb88:	40010000 	.word	0x40010000
 800bb8c:	40010400 	.word	0x40010400
 800bb90:	40014000 	.word	0x40014000
 800bb94:	40014400 	.word	0x40014400
 800bb98:	40014800 	.word	0x40014800

0800bb9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a1b      	ldr	r3, [r3, #32]
 800bbaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	4b21      	ldr	r3, [pc, #132]	@ (800bc4c <TIM_OC5_SetConfig+0xb0>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bbdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	041b      	lsls	r3, r3, #16
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a18      	ldr	r2, [pc, #96]	@ (800bc50 <TIM_OC5_SetConfig+0xb4>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d00f      	beq.n	800bc12 <TIM_OC5_SetConfig+0x76>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a17      	ldr	r2, [pc, #92]	@ (800bc54 <TIM_OC5_SetConfig+0xb8>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d00b      	beq.n	800bc12 <TIM_OC5_SetConfig+0x76>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a16      	ldr	r2, [pc, #88]	@ (800bc58 <TIM_OC5_SetConfig+0xbc>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d007      	beq.n	800bc12 <TIM_OC5_SetConfig+0x76>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a15      	ldr	r2, [pc, #84]	@ (800bc5c <TIM_OC5_SetConfig+0xc0>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d003      	beq.n	800bc12 <TIM_OC5_SetConfig+0x76>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a14      	ldr	r2, [pc, #80]	@ (800bc60 <TIM_OC5_SetConfig+0xc4>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d109      	bne.n	800bc26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	695b      	ldr	r3, [r3, #20]
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	621a      	str	r2, [r3, #32]
}
 800bc40:	bf00      	nop
 800bc42:	371c      	adds	r7, #28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	fffeff8f 	.word	0xfffeff8f
 800bc50:	40010000 	.word	0x40010000
 800bc54:	40010400 	.word	0x40010400
 800bc58:	40014000 	.word	0x40014000
 800bc5c:	40014400 	.word	0x40014400
 800bc60:	40014800 	.word	0x40014800

0800bc64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b087      	sub	sp, #28
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a1b      	ldr	r3, [r3, #32]
 800bc78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	4b22      	ldr	r3, [pc, #136]	@ (800bd18 <TIM_OC6_SetConfig+0xb4>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	021b      	lsls	r3, r3, #8
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	051b      	lsls	r3, r3, #20
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a19      	ldr	r2, [pc, #100]	@ (800bd1c <TIM_OC6_SetConfig+0xb8>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d00f      	beq.n	800bcdc <TIM_OC6_SetConfig+0x78>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a18      	ldr	r2, [pc, #96]	@ (800bd20 <TIM_OC6_SetConfig+0xbc>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d00b      	beq.n	800bcdc <TIM_OC6_SetConfig+0x78>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a17      	ldr	r2, [pc, #92]	@ (800bd24 <TIM_OC6_SetConfig+0xc0>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d007      	beq.n	800bcdc <TIM_OC6_SetConfig+0x78>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a16      	ldr	r2, [pc, #88]	@ (800bd28 <TIM_OC6_SetConfig+0xc4>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d003      	beq.n	800bcdc <TIM_OC6_SetConfig+0x78>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a15      	ldr	r2, [pc, #84]	@ (800bd2c <TIM_OC6_SetConfig+0xc8>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d109      	bne.n	800bcf0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bce2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	029b      	lsls	r3, r3, #10
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	621a      	str	r2, [r3, #32]
}
 800bd0a:	bf00      	nop
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
 800bd16:	bf00      	nop
 800bd18:	feff8fff 	.word	0xfeff8fff
 800bd1c:	40010000 	.word	0x40010000
 800bd20:	40010400 	.word	0x40010400
 800bd24:	40014000 	.word	0x40014000
 800bd28:	40014400 	.word	0x40014400
 800bd2c:	40014800 	.word	0x40014800

0800bd30 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	4b65      	ldr	r3, [pc, #404]	@ (800bee0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	4b62      	ldr	r3, [pc, #392]	@ (800bee4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	693a      	ldr	r2, [r7, #16]
 800bd70:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4a5c      	ldr	r2, [pc, #368]	@ (800bee8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	f000 80ab 	beq.w	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bd7e:	4a5a      	ldr	r2, [pc, #360]	@ (800bee8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	f200 80a4 	bhi.w	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bd86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd8a:	f000 80a3 	beq.w	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bd8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd92:	f200 809c 	bhi.w	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bd96:	4a55      	ldr	r2, [pc, #340]	@ (800beec <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	f000 809b 	beq.w	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bd9e:	4a53      	ldr	r2, [pc, #332]	@ (800beec <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	f200 8094 	bhi.w	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bda6:	4a52      	ldr	r2, [pc, #328]	@ (800bef0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	f000 8093 	beq.w	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bdae:	4a50      	ldr	r2, [pc, #320]	@ (800bef0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	f200 808c 	bhi.w	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bdb6:	4a4f      	ldr	r2, [pc, #316]	@ (800bef4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	f000 808b 	beq.w	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bdbe:	4a4d      	ldr	r2, [pc, #308]	@ (800bef4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	f200 8084 	bhi.w	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bdc6:	4a4c      	ldr	r2, [pc, #304]	@ (800bef8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	f000 8083 	beq.w	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bdce:	4a4a      	ldr	r2, [pc, #296]	@ (800bef8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d87c      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bdd4:	4a49      	ldr	r2, [pc, #292]	@ (800befc <TIM_SlaveTimer_SetConfig+0x1cc>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d07c      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bdda:	4a48      	ldr	r2, [pc, #288]	@ (800befc <TIM_SlaveTimer_SetConfig+0x1cc>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d876      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bde0:	4a47      	ldr	r2, [pc, #284]	@ (800bf00 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d076      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bde6:	4a46      	ldr	r2, [pc, #280]	@ (800bf00 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d870      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bdec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bdf0:	d070      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bdf2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bdf6:	d86a      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800bdf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdfc:	d06a      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800bdfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be02:	d864      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be04:	2b70      	cmp	r3, #112	@ 0x70
 800be06:	d01a      	beq.n	800be3e <TIM_SlaveTimer_SetConfig+0x10e>
 800be08:	2b70      	cmp	r3, #112	@ 0x70
 800be0a:	d860      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be0c:	2b60      	cmp	r3, #96	@ 0x60
 800be0e:	d054      	beq.n	800beba <TIM_SlaveTimer_SetConfig+0x18a>
 800be10:	2b60      	cmp	r3, #96	@ 0x60
 800be12:	d85c      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be14:	2b50      	cmp	r3, #80	@ 0x50
 800be16:	d046      	beq.n	800bea6 <TIM_SlaveTimer_SetConfig+0x176>
 800be18:	2b50      	cmp	r3, #80	@ 0x50
 800be1a:	d858      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be1c:	2b40      	cmp	r3, #64	@ 0x40
 800be1e:	d019      	beq.n	800be54 <TIM_SlaveTimer_SetConfig+0x124>
 800be20:	2b40      	cmp	r3, #64	@ 0x40
 800be22:	d854      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be24:	2b30      	cmp	r3, #48	@ 0x30
 800be26:	d055      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800be28:	2b30      	cmp	r3, #48	@ 0x30
 800be2a:	d850      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d051      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800be30:	2b20      	cmp	r3, #32
 800be32:	d84c      	bhi.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
 800be34:	2b00      	cmp	r3, #0
 800be36:	d04d      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800be38:	2b10      	cmp	r3, #16
 800be3a:	d04b      	beq.n	800bed4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800be3c:	e047      	b.n	800bece <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800be4e:	f000 f8d7 	bl	800c000 <TIM_ETR_SetConfig>
      break;
 800be52:	e040      	b.n	800bed6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b05      	cmp	r3, #5
 800be5a:	d101      	bne.n	800be60 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e03b      	b.n	800bed8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6a1a      	ldr	r2, [r3, #32]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 0201 	bic.w	r2, r2, #1
 800be76:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be86:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	68ba      	ldr	r2, [r7, #8]
 800be90:	4313      	orrs	r3, r2
 800be92:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	621a      	str	r2, [r3, #32]
      break;
 800bea4:	e017      	b.n	800bed6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800beb2:	461a      	mov	r2, r3
 800beb4:	f000 f826 	bl	800bf04 <TIM_TI1_ConfigInputStage>
      break;
 800beb8:	e00d      	b.n	800bed6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bec6:	461a      	mov	r2, r3
 800bec8:	f000 f84b 	bl	800bf62 <TIM_TI2_ConfigInputStage>
      break;
 800becc:	e003      	b.n	800bed6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	75fb      	strb	r3, [r7, #23]
      break;
 800bed2:	e000      	b.n	800bed6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800bed4:	bf00      	nop
  }

  return status;
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	ffcfff8f 	.word	0xffcfff8f
 800bee4:	fffefff8 	.word	0xfffefff8
 800bee8:	00200010 	.word	0x00200010
 800beec:	00100070 	.word	0x00100070
 800bef0:	00100060 	.word	0x00100060
 800bef4:	00100050 	.word	0x00100050
 800bef8:	00100040 	.word	0x00100040
 800befc:	00100030 	.word	0x00100030
 800bf00:	00100020 	.word	0x00100020

0800bf04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b087      	sub	sp, #28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6a1b      	ldr	r3, [r3, #32]
 800bf14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	f023 0201 	bic.w	r2, r3, #1
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bf2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f023 030a 	bic.w	r3, r3, #10
 800bf40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	621a      	str	r2, [r3, #32]
}
 800bf56:	bf00      	nop
 800bf58:	371c      	adds	r7, #28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b087      	sub	sp, #28
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	60f8      	str	r0, [r7, #12]
 800bf6a:	60b9      	str	r1, [r7, #8]
 800bf6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	f023 0210 	bic.w	r2, r3, #16
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bf8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	031b      	lsls	r3, r3, #12
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bf9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	621a      	str	r2, [r3, #32]
}
 800bfb6:	bf00      	nop
 800bfb8:	371c      	adds	r7, #28
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
	...

0800bfc4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4b09      	ldr	r3, [pc, #36]	@ (800bffc <TIM_ITRx_SetConfig+0x38>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	f043 0307 	orr.w	r3, r3, #7
 800bfe6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	609a      	str	r2, [r3, #8]
}
 800bfee:	bf00      	nop
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	ffcfff8f 	.word	0xffcfff8f

0800c000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c01a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	021a      	lsls	r2, r3, #8
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	431a      	orrs	r2, r3
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	4313      	orrs	r3, r2
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	697a      	ldr	r2, [r7, #20]
 800c032:	609a      	str	r2, [r3, #8]
}
 800c034:	bf00      	nop
 800c036:	371c      	adds	r7, #28
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f003 031f 	and.w	r3, r3, #31
 800c052:	2201      	movs	r2, #1
 800c054:	fa02 f303 	lsl.w	r3, r2, r3
 800c058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6a1a      	ldr	r2, [r3, #32]
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	43db      	mvns	r3, r3
 800c062:	401a      	ands	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6a1a      	ldr	r2, [r3, #32]
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f003 031f 	and.w	r3, r3, #31
 800c072:	6879      	ldr	r1, [r7, #4]
 800c074:	fa01 f303 	lsl.w	r3, r1, r3
 800c078:	431a      	orrs	r2, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	621a      	str	r2, [r3, #32]
}
 800c07e:	bf00      	nop
 800c080:	371c      	adds	r7, #28
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
	...

0800c08c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d101      	bne.n	800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e077      	b.n	800c194 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a35      	ldr	r2, [pc, #212]	@ (800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d004      	beq.n	800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a34      	ldr	r2, [pc, #208]	@ (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d108      	bne.n	800c0ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c0de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a25      	ldr	r2, [pc, #148]	@ (800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d02c      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c116:	d027      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a22      	ldr	r2, [pc, #136]	@ (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d022      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a21      	ldr	r2, [pc, #132]	@ (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d01d      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a1f      	ldr	r2, [pc, #124]	@ (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d018      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a1a      	ldr	r2, [pc, #104]	@ (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a1b      	ldr	r2, [pc, #108]	@ (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00e      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1a      	ldr	r2, [pc, #104]	@ (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a18      	ldr	r2, [pc, #96]	@ (800c1bc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a17      	ldr	r2, [pc, #92]	@ (800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d10c      	bne.n	800c182 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c16e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	4313      	orrs	r3, r2
 800c178:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	40010000 	.word	0x40010000
 800c1a4:	40010400 	.word	0x40010400
 800c1a8:	40000400 	.word	0x40000400
 800c1ac:	40000800 	.word	0x40000800
 800c1b0:	40000c00 	.word	0x40000c00
 800c1b4:	40001800 	.word	0x40001800
 800c1b8:	40014000 	.word	0x40014000
 800c1bc:	4000e000 	.word	0x4000e000
 800c1c0:	4000e400 	.word	0x4000e400

0800c1c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d101      	bne.n	800c1e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c1dc:	2302      	movs	r3, #2
 800c1de:	e073      	b.n	800c2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	4313      	orrs	r3, r2
 800c202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	4313      	orrs	r3, r2
 800c210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c246:	4313      	orrs	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	699b      	ldr	r3, [r3, #24]
 800c254:	041b      	lsls	r3, r3, #16
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	69db      	ldr	r3, [r3, #28]
 800c264:	4313      	orrs	r3, r2
 800c266:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a19      	ldr	r2, [pc, #100]	@ (800c2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d004      	beq.n	800c27c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a18      	ldr	r2, [pc, #96]	@ (800c2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d11c      	bne.n	800c2b6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c286:	051b      	lsls	r3, r3, #20
 800c288:	4313      	orrs	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	6a1b      	ldr	r3, [r3, #32]
 800c296:	4313      	orrs	r3, r2
 800c298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	40010000 	.word	0x40010000
 800c2d8:	40010400 	.word	0x40010400

0800c2dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c30c:	bf00      	nop
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e042      	b.n	800c3b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7f6 fff7 	bl	8003330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2224      	movs	r2, #36	@ 0x24
 800c346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f022 0201 	bic.w	r2, r2, #1
 800c358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f001 faee 	bl	800d944 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fc7f 	bl	800cc6c <UART_SetConfig>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b01      	cmp	r3, #1
 800c372:	d101      	bne.n	800c378 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	e01b      	b.n	800c3b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689a      	ldr	r2, [r3, #8]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f042 0201 	orr.w	r2, r2, #1
 800c3a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f001 fb6d 	bl	800da88 <UART_CheckIdleState>
 800c3ae:	4603      	mov	r3, r0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08a      	sub	sp, #40	@ 0x28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3cc:	2b20      	cmp	r3, #32
 800c3ce:	d167      	bne.n	800c4a0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d002      	beq.n	800c3dc <HAL_UART_Transmit_DMA+0x24>
 800c3d6:	88fb      	ldrh	r3, [r7, #6]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d101      	bne.n	800c3e0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e060      	b.n	800c4a2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	88fa      	ldrh	r2, [r7, #6]
 800c3ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2221      	movs	r2, #33	@ 0x21
 800c402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d028      	beq.n	800c460 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c412:	4a26      	ldr	r2, [pc, #152]	@ (800c4ac <HAL_UART_Transmit_DMA+0xf4>)
 800c414:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c41a:	4a25      	ldr	r2, [pc, #148]	@ (800c4b0 <HAL_UART_Transmit_DMA+0xf8>)
 800c41c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c422:	4a24      	ldr	r2, [pc, #144]	@ (800c4b4 <HAL_UART_Transmit_DMA+0xfc>)
 800c424:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c42a:	2200      	movs	r2, #0
 800c42c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c436:	4619      	mov	r1, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	3328      	adds	r3, #40	@ 0x28
 800c43e:	461a      	mov	r2, r3
 800c440:	88fb      	ldrh	r3, [r7, #6]
 800c442:	f7f7 ffe9 	bl	8004418 <HAL_DMA_Start_IT>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d009      	beq.n	800c460 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2210      	movs	r2, #16
 800c450:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2220      	movs	r2, #32
 800c458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e020      	b.n	800c4a2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2240      	movs	r2, #64	@ 0x40
 800c466:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3308      	adds	r3, #8
 800c46e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	e853 3f00 	ldrex	r3, [r3]
 800c476:	613b      	str	r3, [r7, #16]
   return(result);
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3308      	adds	r3, #8
 800c486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c488:	623a      	str	r2, [r7, #32]
 800c48a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48c:	69f9      	ldr	r1, [r7, #28]
 800c48e:	6a3a      	ldr	r2, [r7, #32]
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	61bb      	str	r3, [r7, #24]
   return(result);
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1e5      	bne.n	800c468 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	e000      	b.n	800c4a2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c4a0:	2302      	movs	r3, #2
  }
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3728      	adds	r7, #40	@ 0x28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0800de05 	.word	0x0800de05
 800c4b0:	0800de9b 	.word	0x0800de9b
 800c4b4:	0800deb7 	.word	0x0800deb7

0800c4b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b0ba      	sub	sp, #232	@ 0xe8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c4e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c4ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d11b      	bne.n	800c52c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4f8:	f003 0320 	and.w	r3, r3, #32
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d015      	beq.n	800c52c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c504:	f003 0320 	and.w	r3, r3, #32
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d105      	bne.n	800c518 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c50c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d009      	beq.n	800c52c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 8377 	beq.w	800cc10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	4798      	blx	r3
      }
      return;
 800c52a:	e371      	b.n	800cc10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c52c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 8123 	beq.w	800c77c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c536:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c53a:	4b8d      	ldr	r3, [pc, #564]	@ (800c770 <HAL_UART_IRQHandler+0x2b8>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c542:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c546:	4b8b      	ldr	r3, [pc, #556]	@ (800c774 <HAL_UART_IRQHandler+0x2bc>)
 800c548:	4013      	ands	r3, r2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 8116 	beq.w	800c77c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c554:	f003 0301 	and.w	r3, r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d011      	beq.n	800c580 <HAL_UART_IRQHandler+0xc8>
 800c55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00b      	beq.n	800c580 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2201      	movs	r2, #1
 800c56e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c576:	f043 0201 	orr.w	r2, r3, #1
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c584:	f003 0302 	and.w	r3, r3, #2
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d011      	beq.n	800c5b0 <HAL_UART_IRQHandler+0xf8>
 800c58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00b      	beq.n	800c5b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2202      	movs	r2, #2
 800c59e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5a6:	f043 0204 	orr.w	r2, r3, #4
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d011      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x128>
 800c5bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5c0:	f003 0301 	and.w	r3, r3, #1
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2204      	movs	r2, #4
 800c5ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d6:	f043 0202 	orr.w	r2, r3, #2
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5e4:	f003 0308 	and.w	r3, r3, #8
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d017      	beq.n	800c61c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d105      	bne.n	800c604 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c5f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c5fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c770 <HAL_UART_IRQHandler+0x2b8>)
 800c5fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2208      	movs	r2, #8
 800c60a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c612:	f043 0208 	orr.w	r2, r3, #8
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c624:	2b00      	cmp	r3, #0
 800c626:	d012      	beq.n	800c64e <HAL_UART_IRQHandler+0x196>
 800c628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c62c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00c      	beq.n	800c64e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c63c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c644:	f043 0220 	orr.w	r2, r3, #32
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 82dd 	beq.w	800cc14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c65e:	f003 0320 	and.w	r3, r3, #32
 800c662:	2b00      	cmp	r3, #0
 800c664:	d013      	beq.n	800c68e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c66a:	f003 0320 	and.w	r3, r3, #32
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d105      	bne.n	800c67e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c694:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6a2:	2b40      	cmp	r3, #64	@ 0x40
 800c6a4:	d005      	beq.n	800c6b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c6aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d054      	beq.n	800c75c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 fb40 	bl	800dd38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c2:	2b40      	cmp	r3, #64	@ 0x40
 800c6c4:	d146      	bne.n	800c754 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c6d4:	e853 3f00 	ldrex	r3, [r3]
 800c6d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c6dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c6e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c6f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c6f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c6fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c702:	e841 2300 	strex	r3, r2, [r1]
 800c706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c70a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1d9      	bne.n	800c6c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d017      	beq.n	800c74c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c722:	4a15      	ldr	r2, [pc, #84]	@ (800c778 <HAL_UART_IRQHandler+0x2c0>)
 800c724:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7f8 fbfb 	bl	8004f28 <HAL_DMA_Abort_IT>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d019      	beq.n	800c76c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c73e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c746:	4610      	mov	r0, r2
 800c748:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c74a:	e00f      	b.n	800c76c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fa77 	bl	800cc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c752:	e00b      	b.n	800c76c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fa73 	bl	800cc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c75a:	e007      	b.n	800c76c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fa6f 	bl	800cc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c76a:	e253      	b.n	800cc14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c76c:	bf00      	nop
    return;
 800c76e:	e251      	b.n	800cc14 <HAL_UART_IRQHandler+0x75c>
 800c770:	10000001 	.word	0x10000001
 800c774:	04000120 	.word	0x04000120
 800c778:	0800df37 	.word	0x0800df37

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c780:	2b01      	cmp	r3, #1
 800c782:	f040 81e7 	bne.w	800cb54 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c78a:	f003 0310 	and.w	r3, r3, #16
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 81e0 	beq.w	800cb54 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c798:	f003 0310 	and.w	r3, r3, #16
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 81d9 	beq.w	800cb54 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2210      	movs	r2, #16
 800c7a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7b4:	2b40      	cmp	r3, #64	@ 0x40
 800c7b6:	f040 8151 	bne.w	800ca5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a96      	ldr	r2, [pc, #600]	@ (800ca1c <HAL_UART_IRQHandler+0x564>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d068      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a93      	ldr	r2, [pc, #588]	@ (800ca20 <HAL_UART_IRQHandler+0x568>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d061      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a91      	ldr	r2, [pc, #580]	@ (800ca24 <HAL_UART_IRQHandler+0x56c>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d05a      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a8e      	ldr	r2, [pc, #568]	@ (800ca28 <HAL_UART_IRQHandler+0x570>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d053      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a8c      	ldr	r2, [pc, #560]	@ (800ca2c <HAL_UART_IRQHandler+0x574>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d04c      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a89      	ldr	r2, [pc, #548]	@ (800ca30 <HAL_UART_IRQHandler+0x578>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d045      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a87      	ldr	r2, [pc, #540]	@ (800ca34 <HAL_UART_IRQHandler+0x57c>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d03e      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a84      	ldr	r2, [pc, #528]	@ (800ca38 <HAL_UART_IRQHandler+0x580>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d037      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a82      	ldr	r2, [pc, #520]	@ (800ca3c <HAL_UART_IRQHandler+0x584>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d030      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a7f      	ldr	r2, [pc, #508]	@ (800ca40 <HAL_UART_IRQHandler+0x588>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d029      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a7d      	ldr	r2, [pc, #500]	@ (800ca44 <HAL_UART_IRQHandler+0x58c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d022      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a7a      	ldr	r2, [pc, #488]	@ (800ca48 <HAL_UART_IRQHandler+0x590>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d01b      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a78      	ldr	r2, [pc, #480]	@ (800ca4c <HAL_UART_IRQHandler+0x594>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d014      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a75      	ldr	r2, [pc, #468]	@ (800ca50 <HAL_UART_IRQHandler+0x598>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00d      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a73      	ldr	r2, [pc, #460]	@ (800ca54 <HAL_UART_IRQHandler+0x59c>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d006      	beq.n	800c89a <HAL_UART_IRQHandler+0x3e2>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a70      	ldr	r2, [pc, #448]	@ (800ca58 <HAL_UART_IRQHandler+0x5a0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d106      	bne.n	800c8a8 <HAL_UART_IRQHandler+0x3f0>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	e005      	b.n	800c8b4 <HAL_UART_IRQHandler+0x3fc>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	685b      	ldr	r3, [r3, #4]
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 81ab 	beq.w	800cc18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	f080 81a3 	bcs.w	800cc18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8e2:	69db      	ldr	r3, [r3, #28]
 800c8e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8e8:	f000 8087 	beq.w	800c9fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c8f8:	e853 3f00 	ldrex	r3, [r3]
 800c8fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	461a      	mov	r2, r3
 800c912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c916:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c91a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c922:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c926:	e841 2300 	strex	r3, r2, [r1]
 800c92a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c92e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1da      	bne.n	800c8ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3308      	adds	r3, #8
 800c93c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c940:	e853 3f00 	ldrex	r3, [r3]
 800c944:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c948:	f023 0301 	bic.w	r3, r3, #1
 800c94c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3308      	adds	r3, #8
 800c956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c95a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c95e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c960:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c962:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c966:	e841 2300 	strex	r3, r2, [r1]
 800c96a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c96c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1e1      	bne.n	800c936 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	3308      	adds	r3, #8
 800c978:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c97c:	e853 3f00 	ldrex	r3, [r3]
 800c980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	3308      	adds	r3, #8
 800c992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c996:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c998:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c99c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c99e:	e841 2300 	strex	r3, r2, [r1]
 800c9a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c9a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1e3      	bne.n	800c972 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9c8:	f023 0310 	bic.w	r3, r3, #16
 800c9cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9da:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9e2:	e841 2300 	strex	r3, r2, [r1]
 800c9e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1e4      	bne.n	800c9b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f7 ff79 	bl	80048ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f91d 	bl	800cc54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca1a:	e0fd      	b.n	800cc18 <HAL_UART_IRQHandler+0x760>
 800ca1c:	40020010 	.word	0x40020010
 800ca20:	40020028 	.word	0x40020028
 800ca24:	40020040 	.word	0x40020040
 800ca28:	40020058 	.word	0x40020058
 800ca2c:	40020070 	.word	0x40020070
 800ca30:	40020088 	.word	0x40020088
 800ca34:	400200a0 	.word	0x400200a0
 800ca38:	400200b8 	.word	0x400200b8
 800ca3c:	40020410 	.word	0x40020410
 800ca40:	40020428 	.word	0x40020428
 800ca44:	40020440 	.word	0x40020440
 800ca48:	40020458 	.word	0x40020458
 800ca4c:	40020470 	.word	0x40020470
 800ca50:	40020488 	.word	0x40020488
 800ca54:	400204a0 	.word	0x400204a0
 800ca58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f000 80cf 	beq.w	800cc1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ca7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 80ca 	beq.w	800cc1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca90:	e853 3f00 	ldrex	r3, [r3]
 800ca94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	461a      	mov	r2, r3
 800caa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800caaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800caac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cab2:	e841 2300 	strex	r3, r2, [r1]
 800cab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e4      	bne.n	800ca88 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3308      	adds	r3, #8
 800cac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	623b      	str	r3, [r7, #32]
   return(result);
 800cace:	6a3a      	ldr	r2, [r7, #32]
 800cad0:	4b55      	ldr	r3, [pc, #340]	@ (800cc28 <HAL_UART_IRQHandler+0x770>)
 800cad2:	4013      	ands	r3, r2
 800cad4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	3308      	adds	r3, #8
 800cade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cae2:	633a      	str	r2, [r7, #48]	@ 0x30
 800cae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caea:	e841 2300 	strex	r3, r2, [r1]
 800caee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800caf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1e3      	bne.n	800cabe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2220      	movs	r2, #32
 800cafa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2200      	movs	r2, #0
 800cb08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	e853 3f00 	ldrex	r3, [r3]
 800cb16:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f023 0310 	bic.w	r3, r3, #16
 800cb1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cb2c:	61fb      	str	r3, [r7, #28]
 800cb2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb30:	69b9      	ldr	r1, [r7, #24]
 800cb32:	69fa      	ldr	r2, [r7, #28]
 800cb34:	e841 2300 	strex	r3, r2, [r1]
 800cb38:	617b      	str	r3, [r7, #20]
   return(result);
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1e4      	bne.n	800cb0a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2202      	movs	r2, #2
 800cb44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f881 	bl	800cc54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb52:	e063      	b.n	800cc1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d00e      	beq.n	800cb7e <HAL_UART_IRQHandler+0x6c6>
 800cb60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d008      	beq.n	800cb7e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cb74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f001 fa1e 	bl	800dfb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb7c:	e051      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d014      	beq.n	800cbb4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d105      	bne.n	800cba2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cb96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d008      	beq.n	800cbb4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d03a      	beq.n	800cc20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	4798      	blx	r3
    }
    return;
 800cbb2:	e035      	b.n	800cc20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d009      	beq.n	800cbd4 <HAL_UART_IRQHandler+0x71c>
 800cbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d003      	beq.n	800cbd4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f001 f9c8 	bl	800df62 <UART_EndTransmit_IT>
    return;
 800cbd2:	e026      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <HAL_UART_IRQHandler+0x73c>
 800cbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbe4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d003      	beq.n	800cbf4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f001 f9f7 	bl	800dfe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cbf2:	e016      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cbf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d010      	beq.n	800cc22 <HAL_UART_IRQHandler+0x76a>
 800cc00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	da0c      	bge.n	800cc22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f001 f9df 	bl	800dfcc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc0e:	e008      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
      return;
 800cc10:	bf00      	nop
 800cc12:	e006      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
    return;
 800cc14:	bf00      	nop
 800cc16:	e004      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
      return;
 800cc18:	bf00      	nop
 800cc1a:	e002      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
      return;
 800cc1c:	bf00      	nop
 800cc1e:	e000      	b.n	800cc22 <HAL_UART_IRQHandler+0x76a>
    return;
 800cc20:	bf00      	nop
  }
}
 800cc22:	37e8      	adds	r7, #232	@ 0xe8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	effffffe 	.word	0xeffffffe

0800cc2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc48:	bf00      	nop
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc70:	b092      	sub	sp, #72	@ 0x48
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	431a      	orrs	r2, r3
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	69db      	ldr	r3, [r3, #28]
 800cc90:	4313      	orrs	r3, r2
 800cc92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	4bbe      	ldr	r3, [pc, #760]	@ (800cf94 <UART_SetConfig+0x328>)
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	6812      	ldr	r2, [r2, #0]
 800cca2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cca4:	430b      	orrs	r3, r1
 800cca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	430a      	orrs	r2, r1
 800ccbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	699b      	ldr	r3, [r3, #24]
 800ccc2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4ab3      	ldr	r2, [pc, #716]	@ (800cf98 <UART_SetConfig+0x32c>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d004      	beq.n	800ccd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	6a1b      	ldr	r3, [r3, #32]
 800ccd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	689a      	ldr	r2, [r3, #8]
 800ccde:	4baf      	ldr	r3, [pc, #700]	@ (800cf9c <UART_SetConfig+0x330>)
 800cce0:	4013      	ands	r3, r2
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	6812      	ldr	r2, [r2, #0]
 800cce6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cce8:	430b      	orrs	r3, r1
 800ccea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf2:	f023 010f 	bic.w	r1, r3, #15
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	430a      	orrs	r2, r1
 800cd00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4aa6      	ldr	r2, [pc, #664]	@ (800cfa0 <UART_SetConfig+0x334>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d177      	bne.n	800cdfc <UART_SetConfig+0x190>
 800cd0c:	4ba5      	ldr	r3, [pc, #660]	@ (800cfa4 <UART_SetConfig+0x338>)
 800cd0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd14:	2b28      	cmp	r3, #40	@ 0x28
 800cd16:	d86d      	bhi.n	800cdf4 <UART_SetConfig+0x188>
 800cd18:	a201      	add	r2, pc, #4	@ (adr r2, 800cd20 <UART_SetConfig+0xb4>)
 800cd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1e:	bf00      	nop
 800cd20:	0800cdc5 	.word	0x0800cdc5
 800cd24:	0800cdf5 	.word	0x0800cdf5
 800cd28:	0800cdf5 	.word	0x0800cdf5
 800cd2c:	0800cdf5 	.word	0x0800cdf5
 800cd30:	0800cdf5 	.word	0x0800cdf5
 800cd34:	0800cdf5 	.word	0x0800cdf5
 800cd38:	0800cdf5 	.word	0x0800cdf5
 800cd3c:	0800cdf5 	.word	0x0800cdf5
 800cd40:	0800cdcd 	.word	0x0800cdcd
 800cd44:	0800cdf5 	.word	0x0800cdf5
 800cd48:	0800cdf5 	.word	0x0800cdf5
 800cd4c:	0800cdf5 	.word	0x0800cdf5
 800cd50:	0800cdf5 	.word	0x0800cdf5
 800cd54:	0800cdf5 	.word	0x0800cdf5
 800cd58:	0800cdf5 	.word	0x0800cdf5
 800cd5c:	0800cdf5 	.word	0x0800cdf5
 800cd60:	0800cdd5 	.word	0x0800cdd5
 800cd64:	0800cdf5 	.word	0x0800cdf5
 800cd68:	0800cdf5 	.word	0x0800cdf5
 800cd6c:	0800cdf5 	.word	0x0800cdf5
 800cd70:	0800cdf5 	.word	0x0800cdf5
 800cd74:	0800cdf5 	.word	0x0800cdf5
 800cd78:	0800cdf5 	.word	0x0800cdf5
 800cd7c:	0800cdf5 	.word	0x0800cdf5
 800cd80:	0800cddd 	.word	0x0800cddd
 800cd84:	0800cdf5 	.word	0x0800cdf5
 800cd88:	0800cdf5 	.word	0x0800cdf5
 800cd8c:	0800cdf5 	.word	0x0800cdf5
 800cd90:	0800cdf5 	.word	0x0800cdf5
 800cd94:	0800cdf5 	.word	0x0800cdf5
 800cd98:	0800cdf5 	.word	0x0800cdf5
 800cd9c:	0800cdf5 	.word	0x0800cdf5
 800cda0:	0800cde5 	.word	0x0800cde5
 800cda4:	0800cdf5 	.word	0x0800cdf5
 800cda8:	0800cdf5 	.word	0x0800cdf5
 800cdac:	0800cdf5 	.word	0x0800cdf5
 800cdb0:	0800cdf5 	.word	0x0800cdf5
 800cdb4:	0800cdf5 	.word	0x0800cdf5
 800cdb8:	0800cdf5 	.word	0x0800cdf5
 800cdbc:	0800cdf5 	.word	0x0800cdf5
 800cdc0:	0800cded 	.word	0x0800cded
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdca:	e326      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cdcc:	2304      	movs	r3, #4
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd2:	e322      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cdd4:	2308      	movs	r3, #8
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdda:	e31e      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cddc:	2310      	movs	r3, #16
 800cdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde2:	e31a      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cde4:	2320      	movs	r3, #32
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdea:	e316      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cdec:	2340      	movs	r3, #64	@ 0x40
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf2:	e312      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cdf4:	2380      	movs	r3, #128	@ 0x80
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfa:	e30e      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a69      	ldr	r2, [pc, #420]	@ (800cfa8 <UART_SetConfig+0x33c>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d130      	bne.n	800ce68 <UART_SetConfig+0x1fc>
 800ce06:	4b67      	ldr	r3, [pc, #412]	@ (800cfa4 <UART_SetConfig+0x338>)
 800ce08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce0a:	f003 0307 	and.w	r3, r3, #7
 800ce0e:	2b05      	cmp	r3, #5
 800ce10:	d826      	bhi.n	800ce60 <UART_SetConfig+0x1f4>
 800ce12:	a201      	add	r2, pc, #4	@ (adr r2, 800ce18 <UART_SetConfig+0x1ac>)
 800ce14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce18:	0800ce31 	.word	0x0800ce31
 800ce1c:	0800ce39 	.word	0x0800ce39
 800ce20:	0800ce41 	.word	0x0800ce41
 800ce24:	0800ce49 	.word	0x0800ce49
 800ce28:	0800ce51 	.word	0x0800ce51
 800ce2c:	0800ce59 	.word	0x0800ce59
 800ce30:	2300      	movs	r3, #0
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce36:	e2f0      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce38:	2304      	movs	r3, #4
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce3e:	e2ec      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce40:	2308      	movs	r3, #8
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce46:	e2e8      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce48:	2310      	movs	r3, #16
 800ce4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4e:	e2e4      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce50:	2320      	movs	r3, #32
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce56:	e2e0      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce58:	2340      	movs	r3, #64	@ 0x40
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5e:	e2dc      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce60:	2380      	movs	r3, #128	@ 0x80
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce66:	e2d8      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a4f      	ldr	r2, [pc, #316]	@ (800cfac <UART_SetConfig+0x340>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d130      	bne.n	800ced4 <UART_SetConfig+0x268>
 800ce72:	4b4c      	ldr	r3, [pc, #304]	@ (800cfa4 <UART_SetConfig+0x338>)
 800ce74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b05      	cmp	r3, #5
 800ce7c:	d826      	bhi.n	800cecc <UART_SetConfig+0x260>
 800ce7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce84 <UART_SetConfig+0x218>)
 800ce80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce84:	0800ce9d 	.word	0x0800ce9d
 800ce88:	0800cea5 	.word	0x0800cea5
 800ce8c:	0800cead 	.word	0x0800cead
 800ce90:	0800ceb5 	.word	0x0800ceb5
 800ce94:	0800cebd 	.word	0x0800cebd
 800ce98:	0800cec5 	.word	0x0800cec5
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cea2:	e2ba      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cea4:	2304      	movs	r3, #4
 800cea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceaa:	e2b6      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ceac:	2308      	movs	r3, #8
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb2:	e2b2      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ceb4:	2310      	movs	r3, #16
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceba:	e2ae      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cebc:	2320      	movs	r3, #32
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec2:	e2aa      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cec4:	2340      	movs	r3, #64	@ 0x40
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceca:	e2a6      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cecc:	2380      	movs	r3, #128	@ 0x80
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced2:	e2a2      	b.n	800d41a <UART_SetConfig+0x7ae>
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a35      	ldr	r2, [pc, #212]	@ (800cfb0 <UART_SetConfig+0x344>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d130      	bne.n	800cf40 <UART_SetConfig+0x2d4>
 800cede:	4b31      	ldr	r3, [pc, #196]	@ (800cfa4 <UART_SetConfig+0x338>)
 800cee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cee2:	f003 0307 	and.w	r3, r3, #7
 800cee6:	2b05      	cmp	r3, #5
 800cee8:	d826      	bhi.n	800cf38 <UART_SetConfig+0x2cc>
 800ceea:	a201      	add	r2, pc, #4	@ (adr r2, 800cef0 <UART_SetConfig+0x284>)
 800ceec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef0:	0800cf09 	.word	0x0800cf09
 800cef4:	0800cf11 	.word	0x0800cf11
 800cef8:	0800cf19 	.word	0x0800cf19
 800cefc:	0800cf21 	.word	0x0800cf21
 800cf00:	0800cf29 	.word	0x0800cf29
 800cf04:	0800cf31 	.word	0x0800cf31
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e284      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf10:	2304      	movs	r3, #4
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e280      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf18:	2308      	movs	r3, #8
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e27c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf20:	2310      	movs	r3, #16
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf26:	e278      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf28:	2320      	movs	r3, #32
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2e:	e274      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf30:	2340      	movs	r3, #64	@ 0x40
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf36:	e270      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf38:	2380      	movs	r3, #128	@ 0x80
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3e:	e26c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a1b      	ldr	r2, [pc, #108]	@ (800cfb4 <UART_SetConfig+0x348>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d142      	bne.n	800cfd0 <UART_SetConfig+0x364>
 800cf4a:	4b16      	ldr	r3, [pc, #88]	@ (800cfa4 <UART_SetConfig+0x338>)
 800cf4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf4e:	f003 0307 	and.w	r3, r3, #7
 800cf52:	2b05      	cmp	r3, #5
 800cf54:	d838      	bhi.n	800cfc8 <UART_SetConfig+0x35c>
 800cf56:	a201      	add	r2, pc, #4	@ (adr r2, 800cf5c <UART_SetConfig+0x2f0>)
 800cf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5c:	0800cf75 	.word	0x0800cf75
 800cf60:	0800cf7d 	.word	0x0800cf7d
 800cf64:	0800cf85 	.word	0x0800cf85
 800cf68:	0800cf8d 	.word	0x0800cf8d
 800cf6c:	0800cfb9 	.word	0x0800cfb9
 800cf70:	0800cfc1 	.word	0x0800cfc1
 800cf74:	2300      	movs	r3, #0
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf7a:	e24e      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf7c:	2304      	movs	r3, #4
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf82:	e24a      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf84:	2308      	movs	r3, #8
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e246      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf8c:	2310      	movs	r3, #16
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf92:	e242      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cf94:	cfff69f3 	.word	0xcfff69f3
 800cf98:	58000c00 	.word	0x58000c00
 800cf9c:	11fff4ff 	.word	0x11fff4ff
 800cfa0:	40011000 	.word	0x40011000
 800cfa4:	58024400 	.word	0x58024400
 800cfa8:	40004400 	.word	0x40004400
 800cfac:	40004800 	.word	0x40004800
 800cfb0:	40004c00 	.word	0x40004c00
 800cfb4:	40005000 	.word	0x40005000
 800cfb8:	2320      	movs	r3, #32
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e22c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cfc0:	2340      	movs	r3, #64	@ 0x40
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc6:	e228      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cfc8:	2380      	movs	r3, #128	@ 0x80
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfce:	e224      	b.n	800d41a <UART_SetConfig+0x7ae>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4ab1      	ldr	r2, [pc, #708]	@ (800d29c <UART_SetConfig+0x630>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d176      	bne.n	800d0c8 <UART_SetConfig+0x45c>
 800cfda:	4bb1      	ldr	r3, [pc, #708]	@ (800d2a0 <UART_SetConfig+0x634>)
 800cfdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cfe2:	2b28      	cmp	r3, #40	@ 0x28
 800cfe4:	d86c      	bhi.n	800d0c0 <UART_SetConfig+0x454>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <UART_SetConfig+0x380>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d091 	.word	0x0800d091
 800cff0:	0800d0c1 	.word	0x0800d0c1
 800cff4:	0800d0c1 	.word	0x0800d0c1
 800cff8:	0800d0c1 	.word	0x0800d0c1
 800cffc:	0800d0c1 	.word	0x0800d0c1
 800d000:	0800d0c1 	.word	0x0800d0c1
 800d004:	0800d0c1 	.word	0x0800d0c1
 800d008:	0800d0c1 	.word	0x0800d0c1
 800d00c:	0800d099 	.word	0x0800d099
 800d010:	0800d0c1 	.word	0x0800d0c1
 800d014:	0800d0c1 	.word	0x0800d0c1
 800d018:	0800d0c1 	.word	0x0800d0c1
 800d01c:	0800d0c1 	.word	0x0800d0c1
 800d020:	0800d0c1 	.word	0x0800d0c1
 800d024:	0800d0c1 	.word	0x0800d0c1
 800d028:	0800d0c1 	.word	0x0800d0c1
 800d02c:	0800d0a1 	.word	0x0800d0a1
 800d030:	0800d0c1 	.word	0x0800d0c1
 800d034:	0800d0c1 	.word	0x0800d0c1
 800d038:	0800d0c1 	.word	0x0800d0c1
 800d03c:	0800d0c1 	.word	0x0800d0c1
 800d040:	0800d0c1 	.word	0x0800d0c1
 800d044:	0800d0c1 	.word	0x0800d0c1
 800d048:	0800d0c1 	.word	0x0800d0c1
 800d04c:	0800d0a9 	.word	0x0800d0a9
 800d050:	0800d0c1 	.word	0x0800d0c1
 800d054:	0800d0c1 	.word	0x0800d0c1
 800d058:	0800d0c1 	.word	0x0800d0c1
 800d05c:	0800d0c1 	.word	0x0800d0c1
 800d060:	0800d0c1 	.word	0x0800d0c1
 800d064:	0800d0c1 	.word	0x0800d0c1
 800d068:	0800d0c1 	.word	0x0800d0c1
 800d06c:	0800d0b1 	.word	0x0800d0b1
 800d070:	0800d0c1 	.word	0x0800d0c1
 800d074:	0800d0c1 	.word	0x0800d0c1
 800d078:	0800d0c1 	.word	0x0800d0c1
 800d07c:	0800d0c1 	.word	0x0800d0c1
 800d080:	0800d0c1 	.word	0x0800d0c1
 800d084:	0800d0c1 	.word	0x0800d0c1
 800d088:	0800d0c1 	.word	0x0800d0c1
 800d08c:	0800d0b9 	.word	0x0800d0b9
 800d090:	2301      	movs	r3, #1
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e1c0      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d098:	2304      	movs	r3, #4
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e1bc      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d0a0:	2308      	movs	r3, #8
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e1b8      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d0a8:	2310      	movs	r3, #16
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	e1b4      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d0b0:	2320      	movs	r3, #32
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	e1b0      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d0b8:	2340      	movs	r3, #64	@ 0x40
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0be:	e1ac      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d0c0:	2380      	movs	r3, #128	@ 0x80
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c6:	e1a8      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a75      	ldr	r2, [pc, #468]	@ (800d2a4 <UART_SetConfig+0x638>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d130      	bne.n	800d134 <UART_SetConfig+0x4c8>
 800d0d2:	4b73      	ldr	r3, [pc, #460]	@ (800d2a0 <UART_SetConfig+0x634>)
 800d0d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0d6:	f003 0307 	and.w	r3, r3, #7
 800d0da:	2b05      	cmp	r3, #5
 800d0dc:	d826      	bhi.n	800d12c <UART_SetConfig+0x4c0>
 800d0de:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e4 <UART_SetConfig+0x478>)
 800d0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e4:	0800d0fd 	.word	0x0800d0fd
 800d0e8:	0800d105 	.word	0x0800d105
 800d0ec:	0800d10d 	.word	0x0800d10d
 800d0f0:	0800d115 	.word	0x0800d115
 800d0f4:	0800d11d 	.word	0x0800d11d
 800d0f8:	0800d125 	.word	0x0800d125
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e18a      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d104:	2304      	movs	r3, #4
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e186      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d10c:	2308      	movs	r3, #8
 800d10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d112:	e182      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d114:	2310      	movs	r3, #16
 800d116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d11a:	e17e      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d11c:	2320      	movs	r3, #32
 800d11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d122:	e17a      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d124:	2340      	movs	r3, #64	@ 0x40
 800d126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12a:	e176      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d12c:	2380      	movs	r3, #128	@ 0x80
 800d12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d132:	e172      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a5b      	ldr	r2, [pc, #364]	@ (800d2a8 <UART_SetConfig+0x63c>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d130      	bne.n	800d1a0 <UART_SetConfig+0x534>
 800d13e:	4b58      	ldr	r3, [pc, #352]	@ (800d2a0 <UART_SetConfig+0x634>)
 800d140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d142:	f003 0307 	and.w	r3, r3, #7
 800d146:	2b05      	cmp	r3, #5
 800d148:	d826      	bhi.n	800d198 <UART_SetConfig+0x52c>
 800d14a:	a201      	add	r2, pc, #4	@ (adr r2, 800d150 <UART_SetConfig+0x4e4>)
 800d14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d150:	0800d169 	.word	0x0800d169
 800d154:	0800d171 	.word	0x0800d171
 800d158:	0800d179 	.word	0x0800d179
 800d15c:	0800d181 	.word	0x0800d181
 800d160:	0800d189 	.word	0x0800d189
 800d164:	0800d191 	.word	0x0800d191
 800d168:	2300      	movs	r3, #0
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d16e:	e154      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d170:	2304      	movs	r3, #4
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d176:	e150      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d178:	2308      	movs	r3, #8
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17e:	e14c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d180:	2310      	movs	r3, #16
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d186:	e148      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d188:	2320      	movs	r3, #32
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18e:	e144      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d190:	2340      	movs	r3, #64	@ 0x40
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d196:	e140      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d198:	2380      	movs	r3, #128	@ 0x80
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19e:	e13c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a41      	ldr	r2, [pc, #260]	@ (800d2ac <UART_SetConfig+0x640>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	f040 8082 	bne.w	800d2b0 <UART_SetConfig+0x644>
 800d1ac:	4b3c      	ldr	r3, [pc, #240]	@ (800d2a0 <UART_SetConfig+0x634>)
 800d1ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d1b4:	2b28      	cmp	r3, #40	@ 0x28
 800d1b6:	d86d      	bhi.n	800d294 <UART_SetConfig+0x628>
 800d1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c0 <UART_SetConfig+0x554>)
 800d1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1be:	bf00      	nop
 800d1c0:	0800d265 	.word	0x0800d265
 800d1c4:	0800d295 	.word	0x0800d295
 800d1c8:	0800d295 	.word	0x0800d295
 800d1cc:	0800d295 	.word	0x0800d295
 800d1d0:	0800d295 	.word	0x0800d295
 800d1d4:	0800d295 	.word	0x0800d295
 800d1d8:	0800d295 	.word	0x0800d295
 800d1dc:	0800d295 	.word	0x0800d295
 800d1e0:	0800d26d 	.word	0x0800d26d
 800d1e4:	0800d295 	.word	0x0800d295
 800d1e8:	0800d295 	.word	0x0800d295
 800d1ec:	0800d295 	.word	0x0800d295
 800d1f0:	0800d295 	.word	0x0800d295
 800d1f4:	0800d295 	.word	0x0800d295
 800d1f8:	0800d295 	.word	0x0800d295
 800d1fc:	0800d295 	.word	0x0800d295
 800d200:	0800d275 	.word	0x0800d275
 800d204:	0800d295 	.word	0x0800d295
 800d208:	0800d295 	.word	0x0800d295
 800d20c:	0800d295 	.word	0x0800d295
 800d210:	0800d295 	.word	0x0800d295
 800d214:	0800d295 	.word	0x0800d295
 800d218:	0800d295 	.word	0x0800d295
 800d21c:	0800d295 	.word	0x0800d295
 800d220:	0800d27d 	.word	0x0800d27d
 800d224:	0800d295 	.word	0x0800d295
 800d228:	0800d295 	.word	0x0800d295
 800d22c:	0800d295 	.word	0x0800d295
 800d230:	0800d295 	.word	0x0800d295
 800d234:	0800d295 	.word	0x0800d295
 800d238:	0800d295 	.word	0x0800d295
 800d23c:	0800d295 	.word	0x0800d295
 800d240:	0800d285 	.word	0x0800d285
 800d244:	0800d295 	.word	0x0800d295
 800d248:	0800d295 	.word	0x0800d295
 800d24c:	0800d295 	.word	0x0800d295
 800d250:	0800d295 	.word	0x0800d295
 800d254:	0800d295 	.word	0x0800d295
 800d258:	0800d295 	.word	0x0800d295
 800d25c:	0800d295 	.word	0x0800d295
 800d260:	0800d28d 	.word	0x0800d28d
 800d264:	2301      	movs	r3, #1
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e0d6      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d26c:	2304      	movs	r3, #4
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e0d2      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d274:	2308      	movs	r3, #8
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e0ce      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d27c:	2310      	movs	r3, #16
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d282:	e0ca      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d284:	2320      	movs	r3, #32
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28a:	e0c6      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d28c:	2340      	movs	r3, #64	@ 0x40
 800d28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d292:	e0c2      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d294:	2380      	movs	r3, #128	@ 0x80
 800d296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d29a:	e0be      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d29c:	40011400 	.word	0x40011400
 800d2a0:	58024400 	.word	0x58024400
 800d2a4:	40007800 	.word	0x40007800
 800d2a8:	40007c00 	.word	0x40007c00
 800d2ac:	40011800 	.word	0x40011800
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4aad      	ldr	r2, [pc, #692]	@ (800d56c <UART_SetConfig+0x900>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d176      	bne.n	800d3a8 <UART_SetConfig+0x73c>
 800d2ba:	4bad      	ldr	r3, [pc, #692]	@ (800d570 <UART_SetConfig+0x904>)
 800d2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2c2:	2b28      	cmp	r3, #40	@ 0x28
 800d2c4:	d86c      	bhi.n	800d3a0 <UART_SetConfig+0x734>
 800d2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d2cc <UART_SetConfig+0x660>)
 800d2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2cc:	0800d371 	.word	0x0800d371
 800d2d0:	0800d3a1 	.word	0x0800d3a1
 800d2d4:	0800d3a1 	.word	0x0800d3a1
 800d2d8:	0800d3a1 	.word	0x0800d3a1
 800d2dc:	0800d3a1 	.word	0x0800d3a1
 800d2e0:	0800d3a1 	.word	0x0800d3a1
 800d2e4:	0800d3a1 	.word	0x0800d3a1
 800d2e8:	0800d3a1 	.word	0x0800d3a1
 800d2ec:	0800d379 	.word	0x0800d379
 800d2f0:	0800d3a1 	.word	0x0800d3a1
 800d2f4:	0800d3a1 	.word	0x0800d3a1
 800d2f8:	0800d3a1 	.word	0x0800d3a1
 800d2fc:	0800d3a1 	.word	0x0800d3a1
 800d300:	0800d3a1 	.word	0x0800d3a1
 800d304:	0800d3a1 	.word	0x0800d3a1
 800d308:	0800d3a1 	.word	0x0800d3a1
 800d30c:	0800d381 	.word	0x0800d381
 800d310:	0800d3a1 	.word	0x0800d3a1
 800d314:	0800d3a1 	.word	0x0800d3a1
 800d318:	0800d3a1 	.word	0x0800d3a1
 800d31c:	0800d3a1 	.word	0x0800d3a1
 800d320:	0800d3a1 	.word	0x0800d3a1
 800d324:	0800d3a1 	.word	0x0800d3a1
 800d328:	0800d3a1 	.word	0x0800d3a1
 800d32c:	0800d389 	.word	0x0800d389
 800d330:	0800d3a1 	.word	0x0800d3a1
 800d334:	0800d3a1 	.word	0x0800d3a1
 800d338:	0800d3a1 	.word	0x0800d3a1
 800d33c:	0800d3a1 	.word	0x0800d3a1
 800d340:	0800d3a1 	.word	0x0800d3a1
 800d344:	0800d3a1 	.word	0x0800d3a1
 800d348:	0800d3a1 	.word	0x0800d3a1
 800d34c:	0800d391 	.word	0x0800d391
 800d350:	0800d3a1 	.word	0x0800d3a1
 800d354:	0800d3a1 	.word	0x0800d3a1
 800d358:	0800d3a1 	.word	0x0800d3a1
 800d35c:	0800d3a1 	.word	0x0800d3a1
 800d360:	0800d3a1 	.word	0x0800d3a1
 800d364:	0800d3a1 	.word	0x0800d3a1
 800d368:	0800d3a1 	.word	0x0800d3a1
 800d36c:	0800d399 	.word	0x0800d399
 800d370:	2301      	movs	r3, #1
 800d372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d376:	e050      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d378:	2304      	movs	r3, #4
 800d37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d37e:	e04c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d380:	2308      	movs	r3, #8
 800d382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d386:	e048      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d388:	2310      	movs	r3, #16
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d38e:	e044      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d390:	2320      	movs	r3, #32
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d396:	e040      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d398:	2340      	movs	r3, #64	@ 0x40
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39e:	e03c      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d3a0:	2380      	movs	r3, #128	@ 0x80
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e038      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a71      	ldr	r2, [pc, #452]	@ (800d574 <UART_SetConfig+0x908>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d130      	bne.n	800d414 <UART_SetConfig+0x7a8>
 800d3b2:	4b6f      	ldr	r3, [pc, #444]	@ (800d570 <UART_SetConfig+0x904>)
 800d3b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3b6:	f003 0307 	and.w	r3, r3, #7
 800d3ba:	2b05      	cmp	r3, #5
 800d3bc:	d826      	bhi.n	800d40c <UART_SetConfig+0x7a0>
 800d3be:	a201      	add	r2, pc, #4	@ (adr r2, 800d3c4 <UART_SetConfig+0x758>)
 800d3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3c4:	0800d3dd 	.word	0x0800d3dd
 800d3c8:	0800d3e5 	.word	0x0800d3e5
 800d3cc:	0800d3ed 	.word	0x0800d3ed
 800d3d0:	0800d3f5 	.word	0x0800d3f5
 800d3d4:	0800d3fd 	.word	0x0800d3fd
 800d3d8:	0800d405 	.word	0x0800d405
 800d3dc:	2302      	movs	r3, #2
 800d3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3e2:	e01a      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d3e4:	2304      	movs	r3, #4
 800d3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ea:	e016      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d3ec:	2308      	movs	r3, #8
 800d3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3f2:	e012      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d3f4:	2310      	movs	r3, #16
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3fa:	e00e      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d3fc:	2320      	movs	r3, #32
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d402:	e00a      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d404:	2340      	movs	r3, #64	@ 0x40
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40a:	e006      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d40c:	2380      	movs	r3, #128	@ 0x80
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d412:	e002      	b.n	800d41a <UART_SetConfig+0x7ae>
 800d414:	2380      	movs	r3, #128	@ 0x80
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a55      	ldr	r2, [pc, #340]	@ (800d574 <UART_SetConfig+0x908>)
 800d420:	4293      	cmp	r3, r2
 800d422:	f040 80f8 	bne.w	800d616 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d426:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d42a:	2b20      	cmp	r3, #32
 800d42c:	dc46      	bgt.n	800d4bc <UART_SetConfig+0x850>
 800d42e:	2b02      	cmp	r3, #2
 800d430:	db75      	blt.n	800d51e <UART_SetConfig+0x8b2>
 800d432:	3b02      	subs	r3, #2
 800d434:	2b1e      	cmp	r3, #30
 800d436:	d872      	bhi.n	800d51e <UART_SetConfig+0x8b2>
 800d438:	a201      	add	r2, pc, #4	@ (adr r2, 800d440 <UART_SetConfig+0x7d4>)
 800d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43e:	bf00      	nop
 800d440:	0800d4c3 	.word	0x0800d4c3
 800d444:	0800d51f 	.word	0x0800d51f
 800d448:	0800d4cb 	.word	0x0800d4cb
 800d44c:	0800d51f 	.word	0x0800d51f
 800d450:	0800d51f 	.word	0x0800d51f
 800d454:	0800d51f 	.word	0x0800d51f
 800d458:	0800d4db 	.word	0x0800d4db
 800d45c:	0800d51f 	.word	0x0800d51f
 800d460:	0800d51f 	.word	0x0800d51f
 800d464:	0800d51f 	.word	0x0800d51f
 800d468:	0800d51f 	.word	0x0800d51f
 800d46c:	0800d51f 	.word	0x0800d51f
 800d470:	0800d51f 	.word	0x0800d51f
 800d474:	0800d51f 	.word	0x0800d51f
 800d478:	0800d4eb 	.word	0x0800d4eb
 800d47c:	0800d51f 	.word	0x0800d51f
 800d480:	0800d51f 	.word	0x0800d51f
 800d484:	0800d51f 	.word	0x0800d51f
 800d488:	0800d51f 	.word	0x0800d51f
 800d48c:	0800d51f 	.word	0x0800d51f
 800d490:	0800d51f 	.word	0x0800d51f
 800d494:	0800d51f 	.word	0x0800d51f
 800d498:	0800d51f 	.word	0x0800d51f
 800d49c:	0800d51f 	.word	0x0800d51f
 800d4a0:	0800d51f 	.word	0x0800d51f
 800d4a4:	0800d51f 	.word	0x0800d51f
 800d4a8:	0800d51f 	.word	0x0800d51f
 800d4ac:	0800d51f 	.word	0x0800d51f
 800d4b0:	0800d51f 	.word	0x0800d51f
 800d4b4:	0800d51f 	.word	0x0800d51f
 800d4b8:	0800d511 	.word	0x0800d511
 800d4bc:	2b40      	cmp	r3, #64	@ 0x40
 800d4be:	d02a      	beq.n	800d516 <UART_SetConfig+0x8aa>
 800d4c0:	e02d      	b.n	800d51e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d4c2:	f7fb fdbb 	bl	800903c <HAL_RCCEx_GetD3PCLK1Freq>
 800d4c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d4c8:	e02f      	b.n	800d52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fb fdca 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d8:	e027      	b.n	800d52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4da:	f107 0318 	add.w	r3, r7, #24
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fb ff16 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4e8:	e01f      	b.n	800d52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4ea:	4b21      	ldr	r3, [pc, #132]	@ (800d570 <UART_SetConfig+0x904>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 0320 	and.w	r3, r3, #32
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d009      	beq.n	800d50a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d4f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d570 <UART_SetConfig+0x904>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	08db      	lsrs	r3, r3, #3
 800d4fc:	f003 0303 	and.w	r3, r3, #3
 800d500:	4a1d      	ldr	r2, [pc, #116]	@ (800d578 <UART_SetConfig+0x90c>)
 800d502:	fa22 f303 	lsr.w	r3, r2, r3
 800d506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d508:	e00f      	b.n	800d52a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d50a:	4b1b      	ldr	r3, [pc, #108]	@ (800d578 <UART_SetConfig+0x90c>)
 800d50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d50e:	e00c      	b.n	800d52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d510:	4b1a      	ldr	r3, [pc, #104]	@ (800d57c <UART_SetConfig+0x910>)
 800d512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d514:	e009      	b.n	800d52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d51c:	e005      	b.n	800d52a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 81ee 	beq.w	800d90e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d536:	4a12      	ldr	r2, [pc, #72]	@ (800d580 <UART_SetConfig+0x914>)
 800d538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d53c:	461a      	mov	r2, r3
 800d53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d540:	fbb3 f3f2 	udiv	r3, r3, r2
 800d544:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	4613      	mov	r3, r2
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	4413      	add	r3, r2
 800d550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d552:	429a      	cmp	r2, r3
 800d554:	d305      	bcc.n	800d562 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d55c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d55e:	429a      	cmp	r2, r3
 800d560:	d910      	bls.n	800d584 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d568:	e1d1      	b.n	800d90e <UART_SetConfig+0xca2>
 800d56a:	bf00      	nop
 800d56c:	40011c00 	.word	0x40011c00
 800d570:	58024400 	.word	0x58024400
 800d574:	58000c00 	.word	0x58000c00
 800d578:	03d09000 	.word	0x03d09000
 800d57c:	003d0900 	.word	0x003d0900
 800d580:	0800ee40 	.word	0x0800ee40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d586:	2200      	movs	r2, #0
 800d588:	60bb      	str	r3, [r7, #8]
 800d58a:	60fa      	str	r2, [r7, #12]
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d590:	4ac0      	ldr	r2, [pc, #768]	@ (800d894 <UART_SetConfig+0xc28>)
 800d592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d596:	b29b      	uxth	r3, r3
 800d598:	2200      	movs	r2, #0
 800d59a:	603b      	str	r3, [r7, #0]
 800d59c:	607a      	str	r2, [r7, #4]
 800d59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d5a6:	f7f2 feb3 	bl	8000310 <__aeabi_uldivmod>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f04f 0200 	mov.w	r2, #0
 800d5b6:	f04f 0300 	mov.w	r3, #0
 800d5ba:	020b      	lsls	r3, r1, #8
 800d5bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d5c0:	0202      	lsls	r2, r0, #8
 800d5c2:	6979      	ldr	r1, [r7, #20]
 800d5c4:	6849      	ldr	r1, [r1, #4]
 800d5c6:	0849      	lsrs	r1, r1, #1
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	eb12 0804 	adds.w	r8, r2, r4
 800d5d2:	eb43 0905 	adc.w	r9, r3, r5
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	469a      	mov	sl, r3
 800d5de:	4693      	mov	fp, r2
 800d5e0:	4652      	mov	r2, sl
 800d5e2:	465b      	mov	r3, fp
 800d5e4:	4640      	mov	r0, r8
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	f7f2 fe92 	bl	8000310 <__aeabi_uldivmod>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d5fa:	d308      	bcc.n	800d60e <UART_SetConfig+0x9a2>
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d602:	d204      	bcs.n	800d60e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d60a:	60da      	str	r2, [r3, #12]
 800d60c:	e17f      	b.n	800d90e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d60e:	2301      	movs	r3, #1
 800d610:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d614:	e17b      	b.n	800d90e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d61e:	f040 80bd 	bne.w	800d79c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d622:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d626:	2b20      	cmp	r3, #32
 800d628:	dc48      	bgt.n	800d6bc <UART_SetConfig+0xa50>
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	db7b      	blt.n	800d726 <UART_SetConfig+0xaba>
 800d62e:	2b20      	cmp	r3, #32
 800d630:	d879      	bhi.n	800d726 <UART_SetConfig+0xaba>
 800d632:	a201      	add	r2, pc, #4	@ (adr r2, 800d638 <UART_SetConfig+0x9cc>)
 800d634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d638:	0800d6c3 	.word	0x0800d6c3
 800d63c:	0800d6cb 	.word	0x0800d6cb
 800d640:	0800d727 	.word	0x0800d727
 800d644:	0800d727 	.word	0x0800d727
 800d648:	0800d6d3 	.word	0x0800d6d3
 800d64c:	0800d727 	.word	0x0800d727
 800d650:	0800d727 	.word	0x0800d727
 800d654:	0800d727 	.word	0x0800d727
 800d658:	0800d6e3 	.word	0x0800d6e3
 800d65c:	0800d727 	.word	0x0800d727
 800d660:	0800d727 	.word	0x0800d727
 800d664:	0800d727 	.word	0x0800d727
 800d668:	0800d727 	.word	0x0800d727
 800d66c:	0800d727 	.word	0x0800d727
 800d670:	0800d727 	.word	0x0800d727
 800d674:	0800d727 	.word	0x0800d727
 800d678:	0800d6f3 	.word	0x0800d6f3
 800d67c:	0800d727 	.word	0x0800d727
 800d680:	0800d727 	.word	0x0800d727
 800d684:	0800d727 	.word	0x0800d727
 800d688:	0800d727 	.word	0x0800d727
 800d68c:	0800d727 	.word	0x0800d727
 800d690:	0800d727 	.word	0x0800d727
 800d694:	0800d727 	.word	0x0800d727
 800d698:	0800d727 	.word	0x0800d727
 800d69c:	0800d727 	.word	0x0800d727
 800d6a0:	0800d727 	.word	0x0800d727
 800d6a4:	0800d727 	.word	0x0800d727
 800d6a8:	0800d727 	.word	0x0800d727
 800d6ac:	0800d727 	.word	0x0800d727
 800d6b0:	0800d727 	.word	0x0800d727
 800d6b4:	0800d727 	.word	0x0800d727
 800d6b8:	0800d719 	.word	0x0800d719
 800d6bc:	2b40      	cmp	r3, #64	@ 0x40
 800d6be:	d02e      	beq.n	800d71e <UART_SetConfig+0xab2>
 800d6c0:	e031      	b.n	800d726 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6c2:	f7fa faef 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 800d6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6c8:	e033      	b.n	800d732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6ca:	f7fa fb01 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 800d6ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6d0:	e02f      	b.n	800d732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fb fcc6 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6e0:	e027      	b.n	800d732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6e2:	f107 0318 	add.w	r3, r7, #24
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fb fe12 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6f0:	e01f      	b.n	800d732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6f2:	4b69      	ldr	r3, [pc, #420]	@ (800d898 <UART_SetConfig+0xc2c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0320 	and.w	r3, r3, #32
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d009      	beq.n	800d712 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d6fe:	4b66      	ldr	r3, [pc, #408]	@ (800d898 <UART_SetConfig+0xc2c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	08db      	lsrs	r3, r3, #3
 800d704:	f003 0303 	and.w	r3, r3, #3
 800d708:	4a64      	ldr	r2, [pc, #400]	@ (800d89c <UART_SetConfig+0xc30>)
 800d70a:	fa22 f303 	lsr.w	r3, r2, r3
 800d70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d710:	e00f      	b.n	800d732 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d712:	4b62      	ldr	r3, [pc, #392]	@ (800d89c <UART_SetConfig+0xc30>)
 800d714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d716:	e00c      	b.n	800d732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d718:	4b61      	ldr	r3, [pc, #388]	@ (800d8a0 <UART_SetConfig+0xc34>)
 800d71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d71c:	e009      	b.n	800d732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d71e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d724:	e005      	b.n	800d732 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 80ea 	beq.w	800d90e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d73e:	4a55      	ldr	r2, [pc, #340]	@ (800d894 <UART_SetConfig+0xc28>)
 800d740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d744:	461a      	mov	r2, r3
 800d746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d748:	fbb3 f3f2 	udiv	r3, r3, r2
 800d74c:	005a      	lsls	r2, r3, #1
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	085b      	lsrs	r3, r3, #1
 800d754:	441a      	add	r2, r3
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d75e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d762:	2b0f      	cmp	r3, #15
 800d764:	d916      	bls.n	800d794 <UART_SetConfig+0xb28>
 800d766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d76c:	d212      	bcs.n	800d794 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	b29b      	uxth	r3, r3
 800d772:	f023 030f 	bic.w	r3, r3, #15
 800d776:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77a:	085b      	lsrs	r3, r3, #1
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	f003 0307 	and.w	r3, r3, #7
 800d782:	b29a      	uxth	r2, r3
 800d784:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d786:	4313      	orrs	r3, r2
 800d788:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d790:	60da      	str	r2, [r3, #12]
 800d792:	e0bc      	b.n	800d90e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d794:	2301      	movs	r3, #1
 800d796:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d79a:	e0b8      	b.n	800d90e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d79c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d7a0:	2b20      	cmp	r3, #32
 800d7a2:	dc4b      	bgt.n	800d83c <UART_SetConfig+0xbd0>
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f2c0 8087 	blt.w	800d8b8 <UART_SetConfig+0xc4c>
 800d7aa:	2b20      	cmp	r3, #32
 800d7ac:	f200 8084 	bhi.w	800d8b8 <UART_SetConfig+0xc4c>
 800d7b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d7b8 <UART_SetConfig+0xb4c>)
 800d7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b6:	bf00      	nop
 800d7b8:	0800d843 	.word	0x0800d843
 800d7bc:	0800d84b 	.word	0x0800d84b
 800d7c0:	0800d8b9 	.word	0x0800d8b9
 800d7c4:	0800d8b9 	.word	0x0800d8b9
 800d7c8:	0800d853 	.word	0x0800d853
 800d7cc:	0800d8b9 	.word	0x0800d8b9
 800d7d0:	0800d8b9 	.word	0x0800d8b9
 800d7d4:	0800d8b9 	.word	0x0800d8b9
 800d7d8:	0800d863 	.word	0x0800d863
 800d7dc:	0800d8b9 	.word	0x0800d8b9
 800d7e0:	0800d8b9 	.word	0x0800d8b9
 800d7e4:	0800d8b9 	.word	0x0800d8b9
 800d7e8:	0800d8b9 	.word	0x0800d8b9
 800d7ec:	0800d8b9 	.word	0x0800d8b9
 800d7f0:	0800d8b9 	.word	0x0800d8b9
 800d7f4:	0800d8b9 	.word	0x0800d8b9
 800d7f8:	0800d873 	.word	0x0800d873
 800d7fc:	0800d8b9 	.word	0x0800d8b9
 800d800:	0800d8b9 	.word	0x0800d8b9
 800d804:	0800d8b9 	.word	0x0800d8b9
 800d808:	0800d8b9 	.word	0x0800d8b9
 800d80c:	0800d8b9 	.word	0x0800d8b9
 800d810:	0800d8b9 	.word	0x0800d8b9
 800d814:	0800d8b9 	.word	0x0800d8b9
 800d818:	0800d8b9 	.word	0x0800d8b9
 800d81c:	0800d8b9 	.word	0x0800d8b9
 800d820:	0800d8b9 	.word	0x0800d8b9
 800d824:	0800d8b9 	.word	0x0800d8b9
 800d828:	0800d8b9 	.word	0x0800d8b9
 800d82c:	0800d8b9 	.word	0x0800d8b9
 800d830:	0800d8b9 	.word	0x0800d8b9
 800d834:	0800d8b9 	.word	0x0800d8b9
 800d838:	0800d8ab 	.word	0x0800d8ab
 800d83c:	2b40      	cmp	r3, #64	@ 0x40
 800d83e:	d037      	beq.n	800d8b0 <UART_SetConfig+0xc44>
 800d840:	e03a      	b.n	800d8b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d842:	f7fa fa2f 	bl	8007ca4 <HAL_RCC_GetPCLK1Freq>
 800d846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d848:	e03c      	b.n	800d8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d84a:	f7fa fa41 	bl	8007cd0 <HAL_RCC_GetPCLK2Freq>
 800d84e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d850:	e038      	b.n	800d8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d856:	4618      	mov	r0, r3
 800d858:	f7fb fc06 	bl	8009068 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d860:	e030      	b.n	800d8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d862:	f107 0318 	add.w	r3, r7, #24
 800d866:	4618      	mov	r0, r3
 800d868:	f7fb fd52 	bl	8009310 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d870:	e028      	b.n	800d8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d872:	4b09      	ldr	r3, [pc, #36]	@ (800d898 <UART_SetConfig+0xc2c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d012      	beq.n	800d8a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d87e:	4b06      	ldr	r3, [pc, #24]	@ (800d898 <UART_SetConfig+0xc2c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	08db      	lsrs	r3, r3, #3
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	4a04      	ldr	r2, [pc, #16]	@ (800d89c <UART_SetConfig+0xc30>)
 800d88a:	fa22 f303 	lsr.w	r3, r2, r3
 800d88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d890:	e018      	b.n	800d8c4 <UART_SetConfig+0xc58>
 800d892:	bf00      	nop
 800d894:	0800ee40 	.word	0x0800ee40
 800d898:	58024400 	.word	0x58024400
 800d89c:	03d09000 	.word	0x03d09000
 800d8a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d8a4:	4b24      	ldr	r3, [pc, #144]	@ (800d938 <UART_SetConfig+0xccc>)
 800d8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8a8:	e00c      	b.n	800d8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d8aa:	4b24      	ldr	r3, [pc, #144]	@ (800d93c <UART_SetConfig+0xcd0>)
 800d8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8ae:	e009      	b.n	800d8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8b6:	e005      	b.n	800d8c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d8c2:	bf00      	nop
    }

    if (pclk != 0U)
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d021      	beq.n	800d90e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ce:	4a1c      	ldr	r2, [pc, #112]	@ (800d940 <UART_SetConfig+0xcd4>)
 800d8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	085b      	lsrs	r3, r3, #1
 800d8e2:	441a      	add	r2, r3
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f0:	2b0f      	cmp	r3, #15
 800d8f2:	d909      	bls.n	800d908 <UART_SetConfig+0xc9c>
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8fa:	d205      	bcs.n	800d908 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	60da      	str	r2, [r3, #12]
 800d906:	e002      	b.n	800d90e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2201      	movs	r2, #1
 800d912:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2201      	movs	r2, #1
 800d91a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	2200      	movs	r2, #0
 800d922:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	2200      	movs	r2, #0
 800d928:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d92a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3748      	adds	r7, #72	@ 0x48
 800d932:	46bd      	mov	sp, r7
 800d934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d938:	03d09000 	.word	0x03d09000
 800d93c:	003d0900 	.word	0x003d0900
 800d940:	0800ee40 	.word	0x0800ee40

0800d944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d950:	f003 0308 	and.w	r3, r3, #8
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00a      	beq.n	800d96e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d00a      	beq.n	800d990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	430a      	orrs	r2, r1
 800d98e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d994:	f003 0302 	and.w	r3, r3, #2
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00a      	beq.n	800d9b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	430a      	orrs	r2, r1
 800d9b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9b6:	f003 0304 	and.w	r3, r3, #4
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00a      	beq.n	800d9d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	430a      	orrs	r2, r1
 800d9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d8:	f003 0310 	and.w	r3, r3, #16
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00a      	beq.n	800d9f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	430a      	orrs	r2, r1
 800d9f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9fa:	f003 0320 	and.w	r3, r3, #32
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00a      	beq.n	800da18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	430a      	orrs	r2, r1
 800da16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da20:	2b00      	cmp	r3, #0
 800da22:	d01a      	beq.n	800da5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	430a      	orrs	r2, r1
 800da38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da42:	d10a      	bne.n	800da5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da62:	2b00      	cmp	r3, #0
 800da64:	d00a      	beq.n	800da7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	430a      	orrs	r2, r1
 800da7a:	605a      	str	r2, [r3, #4]
  }
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b098      	sub	sp, #96	@ 0x60
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da98:	f7f6 f826 	bl	8003ae8 <HAL_GetTick>
 800da9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 0308 	and.w	r3, r3, #8
 800daa8:	2b08      	cmp	r3, #8
 800daaa:	d12f      	bne.n	800db0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800daac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dab4:	2200      	movs	r2, #0
 800dab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f88e 	bl	800dbdc <UART_WaitOnFlagUntilTimeout>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d022      	beq.n	800db0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dace:	e853 3f00 	ldrex	r3, [r3]
 800dad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dada:	653b      	str	r3, [r7, #80]	@ 0x50
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	461a      	mov	r2, r3
 800dae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800daea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800daec:	e841 2300 	strex	r3, r2, [r1]
 800daf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800daf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1e6      	bne.n	800dac6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2220      	movs	r2, #32
 800dafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db08:	2303      	movs	r3, #3
 800db0a:	e063      	b.n	800dbd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f003 0304 	and.w	r3, r3, #4
 800db16:	2b04      	cmp	r3, #4
 800db18:	d149      	bne.n	800dbae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db22:	2200      	movs	r2, #0
 800db24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f857 	bl	800dbdc <UART_WaitOnFlagUntilTimeout>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d03c      	beq.n	800dbae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3c:	e853 3f00 	ldrex	r3, [r3]
 800db40:	623b      	str	r3, [r7, #32]
   return(result);
 800db42:	6a3b      	ldr	r3, [r7, #32]
 800db44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db52:	633b      	str	r3, [r7, #48]	@ 0x30
 800db54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db5a:	e841 2300 	strex	r3, r2, [r1]
 800db5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800db60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1e6      	bne.n	800db34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3308      	adds	r3, #8
 800db6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	e853 3f00 	ldrex	r3, [r3]
 800db74:	60fb      	str	r3, [r7, #12]
   return(result);
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f023 0301 	bic.w	r3, r3, #1
 800db7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3308      	adds	r3, #8
 800db84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db86:	61fa      	str	r2, [r7, #28]
 800db88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8a:	69b9      	ldr	r1, [r7, #24]
 800db8c:	69fa      	ldr	r2, [r7, #28]
 800db8e:	e841 2300 	strex	r3, r2, [r1]
 800db92:	617b      	str	r3, [r7, #20]
   return(result);
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1e5      	bne.n	800db66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2220      	movs	r2, #32
 800db9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	e012      	b.n	800dbd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2220      	movs	r2, #32
 800dbb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2220      	movs	r2, #32
 800dbba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3758      	adds	r7, #88	@ 0x58
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	603b      	str	r3, [r7, #0]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbec:	e04f      	b.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dbf4:	d04b      	beq.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbf6:	f7f5 ff77 	bl	8003ae8 <HAL_GetTick>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	69ba      	ldr	r2, [r7, #24]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d302      	bcc.n	800dc0c <UART_WaitOnFlagUntilTimeout+0x30>
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d101      	bne.n	800dc10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dc0c:	2303      	movs	r3, #3
 800dc0e:	e04e      	b.n	800dcae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f003 0304 	and.w	r3, r3, #4
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d037      	beq.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b80      	cmp	r3, #128	@ 0x80
 800dc22:	d034      	beq.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	2b40      	cmp	r3, #64	@ 0x40
 800dc28:	d031      	beq.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	69db      	ldr	r3, [r3, #28]
 800dc30:	f003 0308 	and.w	r3, r3, #8
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d110      	bne.n	800dc5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2208      	movs	r2, #8
 800dc3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f000 f879 	bl	800dd38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2208      	movs	r2, #8
 800dc4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e029      	b.n	800dcae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	69db      	ldr	r3, [r3, #28]
 800dc60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dc68:	d111      	bne.n	800dc8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dc72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f000 f85f 	bl	800dd38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	e00f      	b.n	800dcae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	69da      	ldr	r2, [r3, #28]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	4013      	ands	r3, r2
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	bf0c      	ite	eq
 800dc9e:	2301      	moveq	r3, #1
 800dca0:	2300      	movne	r3, #0
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	461a      	mov	r2, r3
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d0a0      	beq.n	800dbee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b08f      	sub	sp, #60	@ 0x3c
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc4:	6a3b      	ldr	r3, [r7, #32]
 800dcc6:	e853 3f00 	ldrex	r3, [r3]
 800dcca:	61fb      	str	r3, [r7, #28]
   return(result);
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dcd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dce4:	e841 2300 	strex	r3, r2, [r1]
 800dce8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d1e6      	bne.n	800dcbe <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	e853 3f00 	ldrex	r3, [r3]
 800dcfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dd06:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd10:	61ba      	str	r2, [r7, #24]
 800dd12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd14:	6979      	ldr	r1, [r7, #20]
 800dd16:	69ba      	ldr	r2, [r7, #24]
 800dd18:	e841 2300 	strex	r3, r2, [r1]
 800dd1c:	613b      	str	r3, [r7, #16]
   return(result);
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e5      	bne.n	800dcf0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2220      	movs	r2, #32
 800dd28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dd2c:	bf00      	nop
 800dd2e:	373c      	adds	r7, #60	@ 0x3c
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b095      	sub	sp, #84	@ 0x54
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd48:	e853 3f00 	ldrex	r3, [r3]
 800dd4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd66:	e841 2300 	strex	r3, r2, [r1]
 800dd6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e6      	bne.n	800dd40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3308      	adds	r3, #8
 800dd78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	e853 3f00 	ldrex	r3, [r3]
 800dd80:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd82:	69fa      	ldr	r2, [r7, #28]
 800dd84:	4b1e      	ldr	r3, [pc, #120]	@ (800de00 <UART_EndRxTransfer+0xc8>)
 800dd86:	4013      	ands	r3, r2
 800dd88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3308      	adds	r3, #8
 800dd90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd9a:	e841 2300 	strex	r3, r2, [r1]
 800dd9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1e5      	bne.n	800dd72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d118      	bne.n	800dde0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	e853 3f00 	ldrex	r3, [r3]
 800ddba:	60bb      	str	r3, [r7, #8]
   return(result);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	f023 0310 	bic.w	r3, r3, #16
 800ddc2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddcc:	61bb      	str	r3, [r7, #24]
 800ddce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd0:	6979      	ldr	r1, [r7, #20]
 800ddd2:	69ba      	ldr	r2, [r7, #24]
 800ddd4:	e841 2300 	strex	r3, r2, [r1]
 800ddd8:	613b      	str	r3, [r7, #16]
   return(result);
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1e6      	bne.n	800ddae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2220      	movs	r2, #32
 800dde4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ddf4:	bf00      	nop
 800ddf6:	3754      	adds	r7, #84	@ 0x54
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	effffffe 	.word	0xeffffffe

0800de04 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b090      	sub	sp, #64	@ 0x40
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de10:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	69db      	ldr	r3, [r3, #28]
 800de16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de1a:	d037      	beq.n	800de8c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800de1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de1e:	2200      	movs	r2, #0
 800de20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3308      	adds	r3, #8
 800de2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2e:	e853 3f00 	ldrex	r3, [r3]
 800de32:	623b      	str	r3, [r7, #32]
   return(result);
 800de34:	6a3b      	ldr	r3, [r7, #32]
 800de36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3308      	adds	r3, #8
 800de42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de44:	633a      	str	r2, [r7, #48]	@ 0x30
 800de46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de4c:	e841 2300 	strex	r3, r2, [r1]
 800de50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1e5      	bne.n	800de24 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	e853 3f00 	ldrex	r3, [r3]
 800de64:	60fb      	str	r3, [r7, #12]
   return(result);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800de6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7a:	69b9      	ldr	r1, [r7, #24]
 800de7c:	69fa      	ldr	r2, [r7, #28]
 800de7e:	e841 2300 	strex	r3, r2, [r1]
 800de82:	617b      	str	r3, [r7, #20]
   return(result);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1e6      	bne.n	800de58 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de8a:	e002      	b.n	800de92 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800de8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de8e:	f7f3 fe0d 	bl	8001aac <HAL_UART_TxCpltCallback>
}
 800de92:	bf00      	nop
 800de94:	3740      	adds	r7, #64	@ 0x40
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dea6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f7fe febf 	bl	800cc2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800deae:	bf00      	nop
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b086      	sub	sp, #24
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dec2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800deca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ded2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dede:	2b80      	cmp	r3, #128	@ 0x80
 800dee0:	d109      	bne.n	800def6 <UART_DMAError+0x40>
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	2b21      	cmp	r3, #33	@ 0x21
 800dee6:	d106      	bne.n	800def6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2200      	movs	r2, #0
 800deec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800def0:	6978      	ldr	r0, [r7, #20]
 800def2:	f7ff fee0 	bl	800dcb6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df00:	2b40      	cmp	r3, #64	@ 0x40
 800df02:	d109      	bne.n	800df18 <UART_DMAError+0x62>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b22      	cmp	r3, #34	@ 0x22
 800df08:	d106      	bne.n	800df18 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800df12:	6978      	ldr	r0, [r7, #20]
 800df14:	f7ff ff10 	bl	800dd38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df1e:	f043 0210 	orr.w	r2, r3, #16
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df28:	6978      	ldr	r0, [r7, #20]
 800df2a:	f7fe fe89 	bl	800cc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df2e:	bf00      	nop
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b084      	sub	sp, #16
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2200      	movs	r2, #0
 800df48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2200      	movs	r2, #0
 800df50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f7fe fe73 	bl	800cc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df5a:	bf00      	nop
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b088      	sub	sp, #32
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	e853 3f00 	ldrex	r3, [r3]
 800df76:	60bb      	str	r3, [r7, #8]
   return(result);
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df7e:	61fb      	str	r3, [r7, #28]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	461a      	mov	r2, r3
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	61bb      	str	r3, [r7, #24]
 800df8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8c:	6979      	ldr	r1, [r7, #20]
 800df8e:	69ba      	ldr	r2, [r7, #24]
 800df90:	e841 2300 	strex	r3, r2, [r1]
 800df94:	613b      	str	r3, [r7, #16]
   return(result);
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e6      	bne.n	800df6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f7f3 fd7e 	bl	8001aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dfb0:	bf00      	nop
 800dfb2:	3720      	adds	r7, #32
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e002:	2b01      	cmp	r3, #1
 800e004:	d101      	bne.n	800e00a <HAL_UARTEx_DisableFifoMode+0x16>
 800e006:	2302      	movs	r3, #2
 800e008:	e027      	b.n	800e05a <HAL_UARTEx_DisableFifoMode+0x66>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2224      	movs	r2, #36	@ 0x24
 800e016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f022 0201 	bic.w	r2, r2, #1
 800e030:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	68fa      	ldr	r2, [r7, #12]
 800e046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2220      	movs	r2, #32
 800e04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3714      	adds	r7, #20
 800e05e:	46bd      	mov	sp, r7
 800e060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e064:	4770      	bx	lr

0800e066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e076:	2b01      	cmp	r3, #1
 800e078:	d101      	bne.n	800e07e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e07a:	2302      	movs	r3, #2
 800e07c:	e02d      	b.n	800e0da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2201      	movs	r2, #1
 800e082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2224      	movs	r2, #36	@ 0x24
 800e08a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f022 0201 	bic.w	r2, r2, #1
 800e0a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f850 	bl	800e160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b084      	sub	sp, #16
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d101      	bne.n	800e0fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e02d      	b.n	800e156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2224      	movs	r2, #36	@ 0x24
 800e106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f022 0201 	bic.w	r2, r2, #1
 800e120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	430a      	orrs	r2, r1
 800e134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f812 	bl	800e160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2220      	movs	r2, #32
 800e148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d108      	bne.n	800e182 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e180:	e031      	b.n	800e1e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e182:	2310      	movs	r3, #16
 800e184:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e186:	2310      	movs	r3, #16
 800e188:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	0e5b      	lsrs	r3, r3, #25
 800e192:	b2db      	uxtb	r3, r3
 800e194:	f003 0307 	and.w	r3, r3, #7
 800e198:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	689b      	ldr	r3, [r3, #8]
 800e1a0:	0f5b      	lsrs	r3, r3, #29
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	f003 0307 	and.w	r3, r3, #7
 800e1a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1aa:	7bbb      	ldrb	r3, [r7, #14]
 800e1ac:	7b3a      	ldrb	r2, [r7, #12]
 800e1ae:	4911      	ldr	r1, [pc, #68]	@ (800e1f4 <UARTEx_SetNbDataToProcess+0x94>)
 800e1b0:	5c8a      	ldrb	r2, [r1, r2]
 800e1b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1b6:	7b3a      	ldrb	r2, [r7, #12]
 800e1b8:	490f      	ldr	r1, [pc, #60]	@ (800e1f8 <UARTEx_SetNbDataToProcess+0x98>)
 800e1ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1bc:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	7b7a      	ldrb	r2, [r7, #13]
 800e1cc:	4909      	ldr	r1, [pc, #36]	@ (800e1f4 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ce:	5c8a      	ldrb	r2, [r1, r2]
 800e1d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1d4:	7b7a      	ldrb	r2, [r7, #13]
 800e1d6:	4908      	ldr	r1, [pc, #32]	@ (800e1f8 <UARTEx_SetNbDataToProcess+0x98>)
 800e1d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1da:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e1e6:	bf00      	nop
 800e1e8:	3714      	adds	r7, #20
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	0800ee58 	.word	0x0800ee58
 800e1f8:	0800ee60 	.word	0x0800ee60

0800e1fc <malloc>:
 800e1fc:	4b02      	ldr	r3, [pc, #8]	@ (800e208 <malloc+0xc>)
 800e1fe:	4601      	mov	r1, r0
 800e200:	6818      	ldr	r0, [r3, #0]
 800e202:	f000 b82d 	b.w	800e260 <_malloc_r>
 800e206:	bf00      	nop
 800e208:	2400001c 	.word	0x2400001c

0800e20c <free>:
 800e20c:	4b02      	ldr	r3, [pc, #8]	@ (800e218 <free+0xc>)
 800e20e:	4601      	mov	r1, r0
 800e210:	6818      	ldr	r0, [r3, #0]
 800e212:	f000 b8f5 	b.w	800e400 <_free_r>
 800e216:	bf00      	nop
 800e218:	2400001c 	.word	0x2400001c

0800e21c <sbrk_aligned>:
 800e21c:	b570      	push	{r4, r5, r6, lr}
 800e21e:	4e0f      	ldr	r6, [pc, #60]	@ (800e25c <sbrk_aligned+0x40>)
 800e220:	460c      	mov	r4, r1
 800e222:	6831      	ldr	r1, [r6, #0]
 800e224:	4605      	mov	r5, r0
 800e226:	b911      	cbnz	r1, 800e22e <sbrk_aligned+0x12>
 800e228:	f000 f8ae 	bl	800e388 <_sbrk_r>
 800e22c:	6030      	str	r0, [r6, #0]
 800e22e:	4621      	mov	r1, r4
 800e230:	4628      	mov	r0, r5
 800e232:	f000 f8a9 	bl	800e388 <_sbrk_r>
 800e236:	1c43      	adds	r3, r0, #1
 800e238:	d103      	bne.n	800e242 <sbrk_aligned+0x26>
 800e23a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e23e:	4620      	mov	r0, r4
 800e240:	bd70      	pop	{r4, r5, r6, pc}
 800e242:	1cc4      	adds	r4, r0, #3
 800e244:	f024 0403 	bic.w	r4, r4, #3
 800e248:	42a0      	cmp	r0, r4
 800e24a:	d0f8      	beq.n	800e23e <sbrk_aligned+0x22>
 800e24c:	1a21      	subs	r1, r4, r0
 800e24e:	4628      	mov	r0, r5
 800e250:	f000 f89a 	bl	800e388 <_sbrk_r>
 800e254:	3001      	adds	r0, #1
 800e256:	d1f2      	bne.n	800e23e <sbrk_aligned+0x22>
 800e258:	e7ef      	b.n	800e23a <sbrk_aligned+0x1e>
 800e25a:	bf00      	nop
 800e25c:	24000870 	.word	0x24000870

0800e260 <_malloc_r>:
 800e260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e264:	1ccd      	adds	r5, r1, #3
 800e266:	f025 0503 	bic.w	r5, r5, #3
 800e26a:	3508      	adds	r5, #8
 800e26c:	2d0c      	cmp	r5, #12
 800e26e:	bf38      	it	cc
 800e270:	250c      	movcc	r5, #12
 800e272:	2d00      	cmp	r5, #0
 800e274:	4606      	mov	r6, r0
 800e276:	db01      	blt.n	800e27c <_malloc_r+0x1c>
 800e278:	42a9      	cmp	r1, r5
 800e27a:	d904      	bls.n	800e286 <_malloc_r+0x26>
 800e27c:	230c      	movs	r3, #12
 800e27e:	6033      	str	r3, [r6, #0]
 800e280:	2000      	movs	r0, #0
 800e282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e35c <_malloc_r+0xfc>
 800e28a:	f000 f869 	bl	800e360 <__malloc_lock>
 800e28e:	f8d8 3000 	ldr.w	r3, [r8]
 800e292:	461c      	mov	r4, r3
 800e294:	bb44      	cbnz	r4, 800e2e8 <_malloc_r+0x88>
 800e296:	4629      	mov	r1, r5
 800e298:	4630      	mov	r0, r6
 800e29a:	f7ff ffbf 	bl	800e21c <sbrk_aligned>
 800e29e:	1c43      	adds	r3, r0, #1
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	d158      	bne.n	800e356 <_malloc_r+0xf6>
 800e2a4:	f8d8 4000 	ldr.w	r4, [r8]
 800e2a8:	4627      	mov	r7, r4
 800e2aa:	2f00      	cmp	r7, #0
 800e2ac:	d143      	bne.n	800e336 <_malloc_r+0xd6>
 800e2ae:	2c00      	cmp	r4, #0
 800e2b0:	d04b      	beq.n	800e34a <_malloc_r+0xea>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	eb04 0903 	add.w	r9, r4, r3
 800e2bc:	f000 f864 	bl	800e388 <_sbrk_r>
 800e2c0:	4581      	cmp	r9, r0
 800e2c2:	d142      	bne.n	800e34a <_malloc_r+0xea>
 800e2c4:	6821      	ldr	r1, [r4, #0]
 800e2c6:	1a6d      	subs	r5, r5, r1
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f7ff ffa6 	bl	800e21c <sbrk_aligned>
 800e2d0:	3001      	adds	r0, #1
 800e2d2:	d03a      	beq.n	800e34a <_malloc_r+0xea>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	442b      	add	r3, r5
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	f8d8 3000 	ldr.w	r3, [r8]
 800e2de:	685a      	ldr	r2, [r3, #4]
 800e2e0:	bb62      	cbnz	r2, 800e33c <_malloc_r+0xdc>
 800e2e2:	f8c8 7000 	str.w	r7, [r8]
 800e2e6:	e00f      	b.n	800e308 <_malloc_r+0xa8>
 800e2e8:	6822      	ldr	r2, [r4, #0]
 800e2ea:	1b52      	subs	r2, r2, r5
 800e2ec:	d420      	bmi.n	800e330 <_malloc_r+0xd0>
 800e2ee:	2a0b      	cmp	r2, #11
 800e2f0:	d917      	bls.n	800e322 <_malloc_r+0xc2>
 800e2f2:	1961      	adds	r1, r4, r5
 800e2f4:	42a3      	cmp	r3, r4
 800e2f6:	6025      	str	r5, [r4, #0]
 800e2f8:	bf18      	it	ne
 800e2fa:	6059      	strne	r1, [r3, #4]
 800e2fc:	6863      	ldr	r3, [r4, #4]
 800e2fe:	bf08      	it	eq
 800e300:	f8c8 1000 	streq.w	r1, [r8]
 800e304:	5162      	str	r2, [r4, r5]
 800e306:	604b      	str	r3, [r1, #4]
 800e308:	4630      	mov	r0, r6
 800e30a:	f000 f82f 	bl	800e36c <__malloc_unlock>
 800e30e:	f104 000b 	add.w	r0, r4, #11
 800e312:	1d23      	adds	r3, r4, #4
 800e314:	f020 0007 	bic.w	r0, r0, #7
 800e318:	1ac2      	subs	r2, r0, r3
 800e31a:	bf1c      	itt	ne
 800e31c:	1a1b      	subne	r3, r3, r0
 800e31e:	50a3      	strne	r3, [r4, r2]
 800e320:	e7af      	b.n	800e282 <_malloc_r+0x22>
 800e322:	6862      	ldr	r2, [r4, #4]
 800e324:	42a3      	cmp	r3, r4
 800e326:	bf0c      	ite	eq
 800e328:	f8c8 2000 	streq.w	r2, [r8]
 800e32c:	605a      	strne	r2, [r3, #4]
 800e32e:	e7eb      	b.n	800e308 <_malloc_r+0xa8>
 800e330:	4623      	mov	r3, r4
 800e332:	6864      	ldr	r4, [r4, #4]
 800e334:	e7ae      	b.n	800e294 <_malloc_r+0x34>
 800e336:	463c      	mov	r4, r7
 800e338:	687f      	ldr	r7, [r7, #4]
 800e33a:	e7b6      	b.n	800e2aa <_malloc_r+0x4a>
 800e33c:	461a      	mov	r2, r3
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	42a3      	cmp	r3, r4
 800e342:	d1fb      	bne.n	800e33c <_malloc_r+0xdc>
 800e344:	2300      	movs	r3, #0
 800e346:	6053      	str	r3, [r2, #4]
 800e348:	e7de      	b.n	800e308 <_malloc_r+0xa8>
 800e34a:	230c      	movs	r3, #12
 800e34c:	6033      	str	r3, [r6, #0]
 800e34e:	4630      	mov	r0, r6
 800e350:	f000 f80c 	bl	800e36c <__malloc_unlock>
 800e354:	e794      	b.n	800e280 <_malloc_r+0x20>
 800e356:	6005      	str	r5, [r0, #0]
 800e358:	e7d6      	b.n	800e308 <_malloc_r+0xa8>
 800e35a:	bf00      	nop
 800e35c:	24000874 	.word	0x24000874

0800e360 <__malloc_lock>:
 800e360:	4801      	ldr	r0, [pc, #4]	@ (800e368 <__malloc_lock+0x8>)
 800e362:	f000 b84b 	b.w	800e3fc <__retarget_lock_acquire_recursive>
 800e366:	bf00      	nop
 800e368:	240009b0 	.word	0x240009b0

0800e36c <__malloc_unlock>:
 800e36c:	4801      	ldr	r0, [pc, #4]	@ (800e374 <__malloc_unlock+0x8>)
 800e36e:	f000 b846 	b.w	800e3fe <__retarget_lock_release_recursive>
 800e372:	bf00      	nop
 800e374:	240009b0 	.word	0x240009b0

0800e378 <memset>:
 800e378:	4402      	add	r2, r0
 800e37a:	4603      	mov	r3, r0
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d100      	bne.n	800e382 <memset+0xa>
 800e380:	4770      	bx	lr
 800e382:	f803 1b01 	strb.w	r1, [r3], #1
 800e386:	e7f9      	b.n	800e37c <memset+0x4>

0800e388 <_sbrk_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d06      	ldr	r5, [pc, #24]	@ (800e3a4 <_sbrk_r+0x1c>)
 800e38c:	2300      	movs	r3, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	602b      	str	r3, [r5, #0]
 800e394:	f7f5 f934 	bl	8003600 <_sbrk>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_sbrk_r+0x1a>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_sbrk_r+0x1a>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	240009b4 	.word	0x240009b4

0800e3a8 <__errno>:
 800e3a8:	4b01      	ldr	r3, [pc, #4]	@ (800e3b0 <__errno+0x8>)
 800e3aa:	6818      	ldr	r0, [r3, #0]
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	2400001c 	.word	0x2400001c

0800e3b4 <__libc_init_array>:
 800e3b4:	b570      	push	{r4, r5, r6, lr}
 800e3b6:	4d0d      	ldr	r5, [pc, #52]	@ (800e3ec <__libc_init_array+0x38>)
 800e3b8:	4c0d      	ldr	r4, [pc, #52]	@ (800e3f0 <__libc_init_array+0x3c>)
 800e3ba:	1b64      	subs	r4, r4, r5
 800e3bc:	10a4      	asrs	r4, r4, #2
 800e3be:	2600      	movs	r6, #0
 800e3c0:	42a6      	cmp	r6, r4
 800e3c2:	d109      	bne.n	800e3d8 <__libc_init_array+0x24>
 800e3c4:	4d0b      	ldr	r5, [pc, #44]	@ (800e3f4 <__libc_init_array+0x40>)
 800e3c6:	4c0c      	ldr	r4, [pc, #48]	@ (800e3f8 <__libc_init_array+0x44>)
 800e3c8:	f000 fd22 	bl	800ee10 <_init>
 800e3cc:	1b64      	subs	r4, r4, r5
 800e3ce:	10a4      	asrs	r4, r4, #2
 800e3d0:	2600      	movs	r6, #0
 800e3d2:	42a6      	cmp	r6, r4
 800e3d4:	d105      	bne.n	800e3e2 <__libc_init_array+0x2e>
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
 800e3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3dc:	4798      	blx	r3
 800e3de:	3601      	adds	r6, #1
 800e3e0:	e7ee      	b.n	800e3c0 <__libc_init_array+0xc>
 800e3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3e6:	4798      	blx	r3
 800e3e8:	3601      	adds	r6, #1
 800e3ea:	e7f2      	b.n	800e3d2 <__libc_init_array+0x1e>
 800e3ec:	08010fc0 	.word	0x08010fc0
 800e3f0:	08010fc0 	.word	0x08010fc0
 800e3f4:	08010fc0 	.word	0x08010fc0
 800e3f8:	08010fc4 	.word	0x08010fc4

0800e3fc <__retarget_lock_acquire_recursive>:
 800e3fc:	4770      	bx	lr

0800e3fe <__retarget_lock_release_recursive>:
 800e3fe:	4770      	bx	lr

0800e400 <_free_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4605      	mov	r5, r0
 800e404:	2900      	cmp	r1, #0
 800e406:	d041      	beq.n	800e48c <_free_r+0x8c>
 800e408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e40c:	1f0c      	subs	r4, r1, #4
 800e40e:	2b00      	cmp	r3, #0
 800e410:	bfb8      	it	lt
 800e412:	18e4      	addlt	r4, r4, r3
 800e414:	f7ff ffa4 	bl	800e360 <__malloc_lock>
 800e418:	4a1d      	ldr	r2, [pc, #116]	@ (800e490 <_free_r+0x90>)
 800e41a:	6813      	ldr	r3, [r2, #0]
 800e41c:	b933      	cbnz	r3, 800e42c <_free_r+0x2c>
 800e41e:	6063      	str	r3, [r4, #4]
 800e420:	6014      	str	r4, [r2, #0]
 800e422:	4628      	mov	r0, r5
 800e424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e428:	f7ff bfa0 	b.w	800e36c <__malloc_unlock>
 800e42c:	42a3      	cmp	r3, r4
 800e42e:	d908      	bls.n	800e442 <_free_r+0x42>
 800e430:	6820      	ldr	r0, [r4, #0]
 800e432:	1821      	adds	r1, r4, r0
 800e434:	428b      	cmp	r3, r1
 800e436:	bf01      	itttt	eq
 800e438:	6819      	ldreq	r1, [r3, #0]
 800e43a:	685b      	ldreq	r3, [r3, #4]
 800e43c:	1809      	addeq	r1, r1, r0
 800e43e:	6021      	streq	r1, [r4, #0]
 800e440:	e7ed      	b.n	800e41e <_free_r+0x1e>
 800e442:	461a      	mov	r2, r3
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	b10b      	cbz	r3, 800e44c <_free_r+0x4c>
 800e448:	42a3      	cmp	r3, r4
 800e44a:	d9fa      	bls.n	800e442 <_free_r+0x42>
 800e44c:	6811      	ldr	r1, [r2, #0]
 800e44e:	1850      	adds	r0, r2, r1
 800e450:	42a0      	cmp	r0, r4
 800e452:	d10b      	bne.n	800e46c <_free_r+0x6c>
 800e454:	6820      	ldr	r0, [r4, #0]
 800e456:	4401      	add	r1, r0
 800e458:	1850      	adds	r0, r2, r1
 800e45a:	4283      	cmp	r3, r0
 800e45c:	6011      	str	r1, [r2, #0]
 800e45e:	d1e0      	bne.n	800e422 <_free_r+0x22>
 800e460:	6818      	ldr	r0, [r3, #0]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	6053      	str	r3, [r2, #4]
 800e466:	4408      	add	r0, r1
 800e468:	6010      	str	r0, [r2, #0]
 800e46a:	e7da      	b.n	800e422 <_free_r+0x22>
 800e46c:	d902      	bls.n	800e474 <_free_r+0x74>
 800e46e:	230c      	movs	r3, #12
 800e470:	602b      	str	r3, [r5, #0]
 800e472:	e7d6      	b.n	800e422 <_free_r+0x22>
 800e474:	6820      	ldr	r0, [r4, #0]
 800e476:	1821      	adds	r1, r4, r0
 800e478:	428b      	cmp	r3, r1
 800e47a:	bf04      	itt	eq
 800e47c:	6819      	ldreq	r1, [r3, #0]
 800e47e:	685b      	ldreq	r3, [r3, #4]
 800e480:	6063      	str	r3, [r4, #4]
 800e482:	bf04      	itt	eq
 800e484:	1809      	addeq	r1, r1, r0
 800e486:	6021      	streq	r1, [r4, #0]
 800e488:	6054      	str	r4, [r2, #4]
 800e48a:	e7ca      	b.n	800e422 <_free_r+0x22>
 800e48c:	bd38      	pop	{r3, r4, r5, pc}
 800e48e:	bf00      	nop
 800e490:	24000874 	.word	0x24000874
 800e494:	00000000 	.word	0x00000000

0800e498 <log>:
 800e498:	b4f0      	push	{r4, r5, r6, r7}
 800e49a:	ee10 0a90 	vmov	r0, s1
 800e49e:	ee10 3a10 	vmov	r3, s0
 800e4a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e4a6:	429c      	cmp	r4, r3
 800e4a8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 800e4ac:	4c70      	ldr	r4, [pc, #448]	@ (800e670 <log+0x1d8>)
 800e4ae:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800e4b2:	418c      	sbcs	r4, r1
 800e4b4:	ed2d 8b02 	vpush	{d8}
 800e4b8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e4bc:	d35a      	bcc.n	800e574 <log+0xdc>
 800e4be:	4a6d      	ldr	r2, [pc, #436]	@ (800e674 <log+0x1dc>)
 800e4c0:	4290      	cmp	r0, r2
 800e4c2:	bf08      	it	eq
 800e4c4:	2b00      	cmpeq	r3, #0
 800e4c6:	f000 80c4 	beq.w	800e652 <log+0x1ba>
 800e4ca:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e4ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e4d2:	4b69      	ldr	r3, [pc, #420]	@ (800e678 <log+0x1e0>)
 800e4d4:	ee20 2b00 	vmul.f64	d2, d0, d0
 800e4d8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800e4dc:	ee20 4b02 	vmul.f64	d4, d0, d2
 800e4e0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800e4e4:	eea6 7b00 	vfma.f64	d7, d6, d0
 800e4e8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800e4ec:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800e4f0:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e4f4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800e4f8:	eea5 6b00 	vfma.f64	d6, d5, d0
 800e4fc:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 800e500:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800e504:	eea5 6b02 	vfma.f64	d6, d5, d2
 800e508:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800e50c:	eea3 5b00 	vfma.f64	d5, d3, d0
 800e510:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800e514:	eea3 5b02 	vfma.f64	d5, d3, d2
 800e518:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 800e51c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e520:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e524:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800e528:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e52c:	eeb0 2b47 	vmov.f64	d2, d7
 800e530:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 800e658 <log+0x1c0>
 800e534:	eeb0 6b40 	vmov.f64	d6, d0
 800e538:	eeb0 3b40 	vmov.f64	d3, d0
 800e53c:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e540:	eea0 6b47 	vfms.f64	d6, d0, d7
 800e544:	ee30 8b46 	vsub.f64	d8, d0, d6
 800e548:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e54c:	eea1 3b05 	vfma.f64	d3, d1, d5
 800e550:	ee30 7b43 	vsub.f64	d7, d0, d3
 800e554:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e558:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e55c:	ee25 5b08 	vmul.f64	d5, d5, d8
 800e560:	eea5 7b00 	vfma.f64	d7, d5, d0
 800e564:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e568:	ee33 0b07 	vadd.f64	d0, d3, d7
 800e56c:	ecbd 8b02 	vpop	{d8}
 800e570:	bcf0      	pop	{r4, r5, r6, r7}
 800e572:	4770      	bx	lr
 800e574:	f1a2 0410 	sub.w	r4, r2, #16
 800e578:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 800e57c:	428c      	cmp	r4, r1
 800e57e:	d923      	bls.n	800e5c8 <log+0x130>
 800e580:	18d9      	adds	r1, r3, r3
 800e582:	eb40 0400 	adc.w	r4, r0, r0
 800e586:	4321      	orrs	r1, r4
 800e588:	d105      	bne.n	800e596 <log+0xfe>
 800e58a:	ecbd 8b02 	vpop	{d8}
 800e58e:	2001      	movs	r0, #1
 800e590:	bcf0      	pop	{r4, r5, r6, r7}
 800e592:	f000 bbf9 	b.w	800ed88 <__math_divzero>
 800e596:	4939      	ldr	r1, [pc, #228]	@ (800e67c <log+0x1e4>)
 800e598:	4288      	cmp	r0, r1
 800e59a:	bf08      	it	eq
 800e59c:	2b00      	cmpeq	r3, #0
 800e59e:	d0e5      	beq.n	800e56c <log+0xd4>
 800e5a0:	0413      	lsls	r3, r2, #16
 800e5a2:	d403      	bmi.n	800e5ac <log+0x114>
 800e5a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800e5a8:	4393      	bics	r3, r2
 800e5aa:	d104      	bne.n	800e5b6 <log+0x11e>
 800e5ac:	ecbd 8b02 	vpop	{d8}
 800e5b0:	bcf0      	pop	{r4, r5, r6, r7}
 800e5b2:	f000 bc01 	b.w	800edb8 <__math_invalid>
 800e5b6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e660 <log+0x1c8>
 800e5ba:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e5be:	ec53 2b17 	vmov	r2, r3, d7
 800e5c2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 800e5cc:	492a      	ldr	r1, [pc, #168]	@ (800e678 <log+0x1e0>)
 800e5ce:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800e5d2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800e5d6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 800e5da:	0d15      	lsrs	r5, r2, #20
 800e5dc:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 800e5e0:	052d      	lsls	r5, r5, #20
 800e5e2:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 800e5e6:	1e1e      	subs	r6, r3, #0
 800e5e8:	1b47      	subs	r7, r0, r5
 800e5ea:	ec47 6b16 	vmov	d6, r6, r7
 800e5ee:	1512      	asrs	r2, r2, #20
 800e5f0:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e5f4:	ee07 2a90 	vmov	s15, r2
 800e5f8:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e5fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e600:	ed91 4b00 	vldr	d4, [r1]
 800e604:	ee25 1b02 	vmul.f64	d1, d5, d2
 800e608:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 800e60c:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e610:	ee35 4b07 	vadd.f64	d4, d5, d7
 800e614:	ee37 0b44 	vsub.f64	d0, d7, d4
 800e618:	ed91 7b02 	vldr	d7, [r1, #8]
 800e61c:	ee30 0b05 	vadd.f64	d0, d0, d5
 800e620:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e624:	ed91 7b04 	vldr	d7, [r1, #16]
 800e628:	ed91 6b08 	vldr	d6, [r1, #32]
 800e62c:	eea7 0b02 	vfma.f64	d0, d7, d2
 800e630:	ed91 7b06 	vldr	d7, [r1, #24]
 800e634:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 800e638:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e63c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 800e640:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e644:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e648:	eea1 0b07 	vfma.f64	d0, d1, d7
 800e64c:	ee30 0b04 	vadd.f64	d0, d0, d4
 800e650:	e78c      	b.n	800e56c <log+0xd4>
 800e652:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800e668 <log+0x1d0>
 800e656:	e789      	b.n	800e56c <log+0xd4>
 800e658:	00000000 	.word	0x00000000
 800e65c:	41a00000 	.word	0x41a00000
 800e660:	00000000 	.word	0x00000000
 800e664:	43300000 	.word	0x43300000
	...
 800e670:	000308ff 	.word	0x000308ff
 800e674:	3ff00000 	.word	0x3ff00000
 800e678:	0800ee68 	.word	0x0800ee68
 800e67c:	7ff00000 	.word	0x7ff00000

0800e680 <log10>:
 800e680:	b508      	push	{r3, lr}
 800e682:	ed2d 8b02 	vpush	{d8}
 800e686:	eeb0 8b40 	vmov.f64	d8, d0
 800e68a:	f000 fadd 	bl	800ec48 <__ieee754_log10>
 800e68e:	eeb4 8b48 	vcmp.f64	d8, d8
 800e692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e696:	d60f      	bvs.n	800e6b8 <log10+0x38>
 800e698:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	d80a      	bhi.n	800e6b8 <log10+0x38>
 800e6a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6aa:	d108      	bne.n	800e6be <log10+0x3e>
 800e6ac:	f7ff fe7c 	bl	800e3a8 <__errno>
 800e6b0:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800e6d8 <log10+0x58>
 800e6b4:	2322      	movs	r3, #34	@ 0x22
 800e6b6:	6003      	str	r3, [r0, #0]
 800e6b8:	ecbd 8b02 	vpop	{d8}
 800e6bc:	bd08      	pop	{r3, pc}
 800e6be:	f7ff fe73 	bl	800e3a8 <__errno>
 800e6c2:	ecbd 8b02 	vpop	{d8}
 800e6c6:	2321      	movs	r3, #33	@ 0x21
 800e6c8:	6003      	str	r3, [r0, #0]
 800e6ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e6ce:	4804      	ldr	r0, [pc, #16]	@ (800e6e0 <log10+0x60>)
 800e6d0:	f000 bab2 	b.w	800ec38 <nan>
 800e6d4:	f3af 8000 	nop.w
 800e6d8:	00000000 	.word	0x00000000
 800e6dc:	fff00000 	.word	0xfff00000
 800e6e0:	0800f6f8 	.word	0x0800f6f8

0800e6e4 <checkint>:
 800e6e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e6e8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	b570      	push	{r4, r5, r6, lr}
 800e6f0:	dd2a      	ble.n	800e748 <checkint+0x64>
 800e6f2:	f240 4333 	movw	r3, #1075	@ 0x433
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	dc24      	bgt.n	800e744 <checkint+0x60>
 800e6fa:	1a9b      	subs	r3, r3, r2
 800e6fc:	f1a3 0620 	sub.w	r6, r3, #32
 800e700:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e704:	fa02 f403 	lsl.w	r4, r2, r3
 800e708:	fa02 f606 	lsl.w	r6, r2, r6
 800e70c:	f1c3 0520 	rsb	r5, r3, #32
 800e710:	fa22 f505 	lsr.w	r5, r2, r5
 800e714:	4334      	orrs	r4, r6
 800e716:	432c      	orrs	r4, r5
 800e718:	409a      	lsls	r2, r3
 800e71a:	ea20 0202 	bic.w	r2, r0, r2
 800e71e:	ea21 0404 	bic.w	r4, r1, r4
 800e722:	4322      	orrs	r2, r4
 800e724:	f1a3 0420 	sub.w	r4, r3, #32
 800e728:	f1c3 0220 	rsb	r2, r3, #32
 800e72c:	d10c      	bne.n	800e748 <checkint+0x64>
 800e72e:	40d8      	lsrs	r0, r3
 800e730:	fa01 f302 	lsl.w	r3, r1, r2
 800e734:	4318      	orrs	r0, r3
 800e736:	40e1      	lsrs	r1, r4
 800e738:	4308      	orrs	r0, r1
 800e73a:	f000 0001 	and.w	r0, r0, #1
 800e73e:	f1d0 0002 	rsbs	r0, r0, #2
 800e742:	bd70      	pop	{r4, r5, r6, pc}
 800e744:	2002      	movs	r0, #2
 800e746:	e7fc      	b.n	800e742 <checkint+0x5e>
 800e748:	2000      	movs	r0, #0
 800e74a:	e7fa      	b.n	800e742 <checkint+0x5e>
 800e74c:	0000      	movs	r0, r0
	...

0800e750 <pow>:
 800e750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e754:	ee10 4a90 	vmov	r4, s1
 800e758:	ed2d 8b0a 	vpush	{d8-d12}
 800e75c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800e760:	ee11 aa90 	vmov	sl, s3
 800e764:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800e768:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800e76c:	429a      	cmp	r2, r3
 800e76e:	ee10 5a10 	vmov	r5, s0
 800e772:	ee11 0a10 	vmov	r0, s2
 800e776:	b087      	sub	sp, #28
 800e778:	46c4      	mov	ip, r8
 800e77a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800e77e:	d806      	bhi.n	800e78e <pow+0x3e>
 800e780:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800e784:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800e788:	2b7f      	cmp	r3, #127	@ 0x7f
 800e78a:	f240 8157 	bls.w	800ea3c <pow+0x2ec>
 800e78e:	1802      	adds	r2, r0, r0
 800e790:	eb4a 010a 	adc.w	r1, sl, sl
 800e794:	f06f 0b01 	mvn.w	fp, #1
 800e798:	1e57      	subs	r7, r2, #1
 800e79a:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800e79e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800e7a2:	45bb      	cmp	fp, r7
 800e7a4:	eb7e 0303 	sbcs.w	r3, lr, r3
 800e7a8:	d242      	bcs.n	800e830 <pow+0xe0>
 800e7aa:	ea52 0301 	orrs.w	r3, r2, r1
 800e7ae:	f04f 0300 	mov.w	r3, #0
 800e7b2:	d10c      	bne.n	800e7ce <pow+0x7e>
 800e7b4:	196d      	adds	r5, r5, r5
 800e7b6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800e7ba:	4164      	adcs	r4, r4
 800e7bc:	42ab      	cmp	r3, r5
 800e7be:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e7c2:	41a3      	sbcs	r3, r4
 800e7c4:	f0c0 808f 	bcc.w	800e8e6 <pow+0x196>
 800e7c8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e7cc:	e02b      	b.n	800e826 <pow+0xd6>
 800e7ce:	4ed4      	ldr	r6, [pc, #848]	@ (800eb20 <pow+0x3d0>)
 800e7d0:	42b4      	cmp	r4, r6
 800e7d2:	bf08      	it	eq
 800e7d4:	429d      	cmpeq	r5, r3
 800e7d6:	d109      	bne.n	800e7ec <pow+0x9c>
 800e7d8:	1800      	adds	r0, r0, r0
 800e7da:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800e7de:	eb4a 0a0a 	adc.w	sl, sl, sl
 800e7e2:	4283      	cmp	r3, r0
 800e7e4:	4bcf      	ldr	r3, [pc, #828]	@ (800eb24 <pow+0x3d4>)
 800e7e6:	eb73 030a 	sbcs.w	r3, r3, sl
 800e7ea:	e7eb      	b.n	800e7c4 <pow+0x74>
 800e7ec:	196d      	adds	r5, r5, r5
 800e7ee:	48ce      	ldr	r0, [pc, #824]	@ (800eb28 <pow+0x3d8>)
 800e7f0:	4164      	adcs	r4, r4
 800e7f2:	42ab      	cmp	r3, r5
 800e7f4:	eb70 0604 	sbcs.w	r6, r0, r4
 800e7f8:	d375      	bcc.n	800e8e6 <pow+0x196>
 800e7fa:	4281      	cmp	r1, r0
 800e7fc:	bf08      	it	eq
 800e7fe:	429a      	cmpeq	r2, r3
 800e800:	d171      	bne.n	800e8e6 <pow+0x196>
 800e802:	4aca      	ldr	r2, [pc, #808]	@ (800eb2c <pow+0x3dc>)
 800e804:	4294      	cmp	r4, r2
 800e806:	bf08      	it	eq
 800e808:	429d      	cmpeq	r5, r3
 800e80a:	d0dd      	beq.n	800e7c8 <pow+0x78>
 800e80c:	4294      	cmp	r4, r2
 800e80e:	ea6f 0a0a 	mvn.w	sl, sl
 800e812:	bf34      	ite	cc
 800e814:	2400      	movcc	r4, #0
 800e816:	2401      	movcs	r4, #1
 800e818:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800e81c:	4554      	cmp	r4, sl
 800e81e:	f040 81dc 	bne.w	800ebda <pow+0x48a>
 800e822:	ee21 0b01 	vmul.f64	d0, d1, d1
 800e826:	b007      	add	sp, #28
 800e828:	ecbd 8b0a 	vpop	{d8-d12}
 800e82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e830:	196f      	adds	r7, r5, r5
 800e832:	eb44 0904 	adc.w	r9, r4, r4
 800e836:	1e7a      	subs	r2, r7, #1
 800e838:	f169 0300 	sbc.w	r3, r9, #0
 800e83c:	4593      	cmp	fp, r2
 800e83e:	eb7e 0303 	sbcs.w	r3, lr, r3
 800e842:	d225      	bcs.n	800e890 <pow+0x140>
 800e844:	ee20 0b00 	vmul.f64	d0, d0, d0
 800e848:	2c00      	cmp	r4, #0
 800e84a:	da13      	bge.n	800e874 <pow+0x124>
 800e84c:	4651      	mov	r1, sl
 800e84e:	f7ff ff49 	bl	800e6e4 <checkint>
 800e852:	2801      	cmp	r0, #1
 800e854:	d10e      	bne.n	800e874 <pow+0x124>
 800e856:	eeb1 0b40 	vneg.f64	d0, d0
 800e85a:	ea57 0909 	orrs.w	r9, r7, r9
 800e85e:	d10b      	bne.n	800e878 <pow+0x128>
 800e860:	f1ba 0f00 	cmp.w	sl, #0
 800e864:	dadf      	bge.n	800e826 <pow+0xd6>
 800e866:	b007      	add	sp, #28
 800e868:	ecbd 8b0a 	vpop	{d8-d12}
 800e86c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e870:	f000 ba8a 	b.w	800ed88 <__math_divzero>
 800e874:	2000      	movs	r0, #0
 800e876:	e7f0      	b.n	800e85a <pow+0x10a>
 800e878:	f1ba 0f00 	cmp.w	sl, #0
 800e87c:	dad3      	bge.n	800e826 <pow+0xd6>
 800e87e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800e882:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e886:	ed8d 7b00 	vstr	d7, [sp]
 800e88a:	ed9d 0b00 	vldr	d0, [sp]
 800e88e:	e7ca      	b.n	800e826 <pow+0xd6>
 800e890:	2c00      	cmp	r4, #0
 800e892:	da2b      	bge.n	800e8ec <pow+0x19c>
 800e894:	4651      	mov	r1, sl
 800e896:	f7ff ff25 	bl	800e6e4 <checkint>
 800e89a:	b930      	cbnz	r0, 800e8aa <pow+0x15a>
 800e89c:	b007      	add	sp, #28
 800e89e:	ecbd 8b0a 	vpop	{d8-d12}
 800e8a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a6:	f000 ba87 	b.w	800edb8 <__math_invalid>
 800e8aa:	1e41      	subs	r1, r0, #1
 800e8ac:	4248      	negs	r0, r1
 800e8ae:	4148      	adcs	r0, r1
 800e8b0:	0480      	lsls	r0, r0, #18
 800e8b2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e8b6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800e8ba:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800e8be:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800e8c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8c4:	d92d      	bls.n	800e922 <pow+0x1d2>
 800e8c6:	4b96      	ldr	r3, [pc, #600]	@ (800eb20 <pow+0x3d0>)
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	429c      	cmp	r4, r3
 800e8cc:	bf08      	it	eq
 800e8ce:	4285      	cmpeq	r5, r0
 800e8d0:	f43f af7a 	beq.w	800e7c8 <pow+0x78>
 800e8d4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800e8d8:	428a      	cmp	r2, r1
 800e8da:	d80c      	bhi.n	800e8f6 <pow+0x1a6>
 800e8dc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e8e0:	42a8      	cmp	r0, r5
 800e8e2:	41a3      	sbcs	r3, r4
 800e8e4:	d204      	bcs.n	800e8f0 <pow+0x1a0>
 800e8e6:	ee31 0b00 	vadd.f64	d0, d1, d0
 800e8ea:	e79c      	b.n	800e826 <pow+0xd6>
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	e7e4      	b.n	800e8ba <pow+0x16a>
 800e8f0:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e8f4:	e797      	b.n	800e826 <pow+0xd6>
 800e8f6:	2d01      	cmp	r5, #1
 800e8f8:	eb74 0303 	sbcs.w	r3, r4, r3
 800e8fc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e900:	bf34      	ite	cc
 800e902:	2301      	movcc	r3, #1
 800e904:	2300      	movcs	r3, #0
 800e906:	4296      	cmp	r6, r2
 800e908:	bf8c      	ite	hi
 800e90a:	2600      	movhi	r6, #0
 800e90c:	2601      	movls	r6, #1
 800e90e:	42b3      	cmp	r3, r6
 800e910:	f000 809c 	beq.w	800ea4c <pow+0x2fc>
 800e914:	b007      	add	sp, #28
 800e916:	ecbd 8b0a 	vpop	{d8-d12}
 800e91a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91e:	f000 ba2b 	b.w	800ed78 <__math_oflow>
 800e922:	f1bc 0f00 	cmp.w	ip, #0
 800e926:	d10a      	bne.n	800e93e <pow+0x1ee>
 800e928:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800eb10 <pow+0x3c0>
 800e92c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e930:	ec53 2b17 	vmov	r2, r3, d7
 800e934:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800e938:	4615      	mov	r5, r2
 800e93a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800e93e:	4a7c      	ldr	r2, [pc, #496]	@ (800eb30 <pow+0x3e0>)
 800e940:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e944:	4422      	add	r2, r4
 800e946:	1513      	asrs	r3, r2, #20
 800e948:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800e94c:	ee03 3a10 	vmov	s6, r3
 800e950:	0d12      	lsrs	r2, r2, #20
 800e952:	4b78      	ldr	r3, [pc, #480]	@ (800eb34 <pow+0x3e4>)
 800e954:	0512      	lsls	r2, r2, #20
 800e956:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800e95a:	1aa7      	subs	r7, r4, r2
 800e95c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800e960:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800e964:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800e968:	1e2e      	subs	r6, r5, #0
 800e96a:	ec47 6b14 	vmov	d4, r6, r7
 800e96e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800e972:	eea4 6b05 	vfma.f64	d6, d4, d5
 800e976:	ed93 5b00 	vldr	d5, [r3]
 800e97a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e97e:	eea3 2b05 	vfma.f64	d2, d3, d5
 800e982:	ed93 5b02 	vldr	d5, [r3, #8]
 800e986:	ee36 4b02 	vadd.f64	d4, d6, d2
 800e98a:	ee32 2b44 	vsub.f64	d2, d2, d4
 800e98e:	eea3 7b05 	vfma.f64	d7, d3, d5
 800e992:	ed93 5b04 	vldr	d5, [r3, #16]
 800e996:	ee32 2b06 	vadd.f64	d2, d2, d6
 800e99a:	ee37 7b02 	vadd.f64	d7, d7, d2
 800e99e:	ee26 5b05 	vmul.f64	d5, d6, d5
 800e9a2:	ee26 0b05 	vmul.f64	d0, d6, d5
 800e9a6:	ee34 8b00 	vadd.f64	d8, d4, d0
 800e9aa:	eeb0 9b40 	vmov.f64	d9, d0
 800e9ae:	ee34 4b48 	vsub.f64	d4, d4, d8
 800e9b2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800e9b6:	ee34 ab00 	vadd.f64	d10, d4, d0
 800e9ba:	ed93 5b06 	vldr	d5, [r3, #24]
 800e9be:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e9c2:	ee37 7b09 	vadd.f64	d7, d7, d9
 800e9c6:	ed93 4b08 	vldr	d4, [r3, #32]
 800e9ca:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800e9ce:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800e9d2:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e9d6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800e9da:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800e9de:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e9e2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800e9e6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e9ea:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e9ee:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e9f2:	eeab 7b05 	vfma.f64	d7, d11, d5
 800e9f6:	ee38 4b07 	vadd.f64	d4, d8, d7
 800e9fa:	ee21 6b04 	vmul.f64	d6, d1, d4
 800e9fe:	ee16 3a90 	vmov	r3, s13
 800ea02:	eeb0 5b46 	vmov.f64	d5, d6
 800ea06:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800ea0a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800ea0e:	18b2      	adds	r2, r6, r2
 800ea10:	2a3e      	cmp	r2, #62	@ 0x3e
 800ea12:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800ea16:	ee38 8b44 	vsub.f64	d8, d8, d4
 800ea1a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800ea1e:	eea1 5b08 	vfma.f64	d5, d1, d8
 800ea22:	d91b      	bls.n	800ea5c <pow+0x30c>
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	da0b      	bge.n	800ea40 <pow+0x2f0>
 800ea28:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ea2c:	ee36 0b00 	vadd.f64	d0, d6, d0
 800ea30:	2800      	cmp	r0, #0
 800ea32:	f43f aef8 	beq.w	800e826 <pow+0xd6>
 800ea36:	eeb1 0b40 	vneg.f64	d0, d0
 800ea3a:	e6f4      	b.n	800e826 <pow+0xd6>
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	e77e      	b.n	800e93e <pow+0x1ee>
 800ea40:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800ea44:	d909      	bls.n	800ea5a <pow+0x30a>
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f6bf af64 	bge.w	800e914 <pow+0x1c4>
 800ea4c:	b007      	add	sp, #28
 800ea4e:	ecbd 8b0a 	vpop	{d8-d12}
 800ea52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea56:	f000 b987 	b.w	800ed68 <__math_uflow>
 800ea5a:	2600      	movs	r6, #0
 800ea5c:	4936      	ldr	r1, [pc, #216]	@ (800eb38 <pow+0x3e8>)
 800ea5e:	ed91 4b02 	vldr	d4, [r1, #8]
 800ea62:	ed91 3b00 	vldr	d3, [r1]
 800ea66:	eeb0 7b44 	vmov.f64	d7, d4
 800ea6a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ea6e:	ee17 5a10 	vmov	r5, s14
 800ea72:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ea76:	ed91 4b04 	vldr	d4, [r1, #16]
 800ea7a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800ea7e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ea82:	ed91 4b06 	vldr	d4, [r1, #24]
 800ea86:	18dc      	adds	r4, r3, r3
 800ea88:	f104 030f 	add.w	r3, r4, #15
 800ea8c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ea90:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ea94:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800ea98:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ea9c:	ee25 6b05 	vmul.f64	d6, d5, d5
 800eaa0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800eaa4:	ed91 4b08 	vldr	d4, [r1, #32]
 800eaa8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800eaac:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800eab0:	eea5 4b03 	vfma.f64	d4, d5, d3
 800eab4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800eab8:	eea6 7b04 	vfma.f64	d7, d6, d4
 800eabc:	ee26 6b06 	vmul.f64	d6, d6, d6
 800eac0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800eac4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800eac8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800eacc:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ead0:	1940      	adds	r0, r0, r5
 800ead2:	2700      	movs	r7, #0
 800ead4:	eb17 020c 	adds.w	r2, r7, ip
 800ead8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800eadc:	eea6 7b04 	vfma.f64	d7, d6, d4
 800eae0:	2e00      	cmp	r6, #0
 800eae2:	d175      	bne.n	800ebd0 <pow+0x480>
 800eae4:	42bd      	cmp	r5, r7
 800eae6:	db29      	blt.n	800eb3c <pow+0x3ec>
 800eae8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800eaec:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	ec41 0b10 	vmov	d0, r0, r1
 800eaf6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800eafa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800eb18 <pow+0x3c8>
 800eafe:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eb02:	b007      	add	sp, #28
 800eb04:	ecbd 8b0a 	vpop	{d8-d12}
 800eb08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0c:	f000 b96c 	b.w	800ede8 <__math_check_oflow>
 800eb10:	00000000 	.word	0x00000000
 800eb14:	43300000 	.word	0x43300000
 800eb18:	00000000 	.word	0x00000000
 800eb1c:	7f000000 	.word	0x7f000000
 800eb20:	3ff00000 	.word	0x3ff00000
 800eb24:	fff00000 	.word	0xfff00000
 800eb28:	ffe00000 	.word	0xffe00000
 800eb2c:	7fe00000 	.word	0x7fe00000
 800eb30:	c0196aab 	.word	0xc0196aab
 800eb34:	0800f700 	.word	0x0800f700
 800eb38:	08010748 	.word	0x08010748
 800eb3c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800eb40:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800eb44:	4610      	mov	r0, r2
 800eb46:	ec41 0b15 	vmov	d5, r0, r1
 800eb4a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800eb4e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800eb52:	ee35 7b06 	vadd.f64	d7, d5, d6
 800eb56:	eeb0 4bc7 	vabs.f64	d4, d7
 800eb5a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb62:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800ebe0 <pow+0x490>
 800eb66:	d52a      	bpl.n	800ebbe <pow+0x46e>
 800eb68:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800eb6c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800eb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb74:	ee35 5b06 	vadd.f64	d5, d5, d6
 800eb78:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800eb7c:	bf58      	it	pl
 800eb7e:	eeb0 4b43 	vmovpl.f64	d4, d3
 800eb82:	ee37 3b04 	vadd.f64	d3, d7, d4
 800eb86:	ee34 6b43 	vsub.f64	d6, d4, d3
 800eb8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800eb8e:	ee36 6b05 	vadd.f64	d6, d6, d5
 800eb92:	ee36 6b03 	vadd.f64	d6, d6, d3
 800eb96:	ee36 7b44 	vsub.f64	d7, d6, d4
 800eb9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba2:	d104      	bne.n	800ebae <pow+0x45e>
 800eba4:	4632      	mov	r2, r6
 800eba6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ebaa:	ec43 2b17 	vmov	d7, r2, r3
 800ebae:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ebb2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ebb6:	ee26 6b00 	vmul.f64	d6, d6, d0
 800ebba:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ebbe:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ebc2:	b007      	add	sp, #28
 800ebc4:	ecbd 8b0a 	vpop	{d8-d12}
 800ebc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	f000 b903 	b.w	800edd6 <__math_check_uflow>
 800ebd0:	ec43 2b10 	vmov	d0, r2, r3
 800ebd4:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ebd8:	e625      	b.n	800e826 <pow+0xd6>
 800ebda:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800ebe8 <pow+0x498>
 800ebde:	e622      	b.n	800e826 <pow+0xd6>
 800ebe0:	00000000 	.word	0x00000000
 800ebe4:	00100000 	.word	0x00100000
	...

0800ebf0 <sqrt>:
 800ebf0:	b508      	push	{r3, lr}
 800ebf2:	ed2d 8b04 	vpush	{d8-d9}
 800ebf6:	eeb0 8b40 	vmov.f64	d8, d0
 800ebfa:	f000 f819 	bl	800ec30 <__ieee754_sqrt>
 800ebfe:	eeb4 8b48 	vcmp.f64	d8, d8
 800ec02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec06:	d60c      	bvs.n	800ec22 <sqrt+0x32>
 800ec08:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800ec28 <sqrt+0x38>
 800ec0c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ec10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec14:	d505      	bpl.n	800ec22 <sqrt+0x32>
 800ec16:	f7ff fbc7 	bl	800e3a8 <__errno>
 800ec1a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ec1e:	2321      	movs	r3, #33	@ 0x21
 800ec20:	6003      	str	r3, [r0, #0]
 800ec22:	ecbd 8b04 	vpop	{d8-d9}
 800ec26:	bd08      	pop	{r3, pc}
	...

0800ec30 <__ieee754_sqrt>:
 800ec30:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ec34:	4770      	bx	lr
	...

0800ec38 <nan>:
 800ec38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ec40 <nan+0x8>
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	00000000 	.word	0x00000000
 800ec44:	7ff80000 	.word	0x7ff80000

0800ec48 <__ieee754_log10>:
 800ec48:	b510      	push	{r4, lr}
 800ec4a:	ee10 3a90 	vmov	r3, s1
 800ec4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ec52:	ed2d 8b02 	vpush	{d8}
 800ec56:	da21      	bge.n	800ec9c <__ieee754_log10+0x54>
 800ec58:	ee10 1a10 	vmov	r1, s0
 800ec5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ec60:	430a      	orrs	r2, r1
 800ec62:	d108      	bne.n	800ec76 <__ieee754_log10+0x2e>
 800ec64:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800ecf0 <__ieee754_log10+0xa8>
 800ec68:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 800ecf8 <__ieee754_log10+0xb0>
 800ec6c:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800ec70:	ecbd 8b02 	vpop	{d8}
 800ec74:	bd10      	pop	{r4, pc}
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	da02      	bge.n	800ec80 <__ieee754_log10+0x38>
 800ec7a:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ec7e:	e7f3      	b.n	800ec68 <__ieee754_log10+0x20>
 800ec80:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800ed00 <__ieee754_log10+0xb8>
 800ec84:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ec88:	ee10 3a90 	vmov	r3, s1
 800ec8c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800ec90:	4923      	ldr	r1, [pc, #140]	@ (800ed20 <__ieee754_log10+0xd8>)
 800ec92:	428b      	cmp	r3, r1
 800ec94:	dd04      	ble.n	800eca0 <__ieee754_log10+0x58>
 800ec96:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ec9a:	e7e9      	b.n	800ec70 <__ieee754_log10+0x28>
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	e7f7      	b.n	800ec90 <__ieee754_log10+0x48>
 800eca0:	1518      	asrs	r0, r3, #20
 800eca2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800eca6:	4410      	add	r0, r2
 800eca8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ecac:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 800ecb0:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800ecb4:	ee08 3a10 	vmov	s16, r3
 800ecb8:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 800ecbc:	ec53 2b10 	vmov	r2, r3, d0
 800ecc0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ecc4:	ec43 2b10 	vmov	d0, r2, r3
 800ecc8:	f7ff fbe6 	bl	800e498 <log>
 800eccc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ed08 <__ieee754_log10+0xc0>
 800ecd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ecd4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ed10 <__ieee754_log10+0xc8>
 800ecd8:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 800ecdc:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ece0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ed18 <__ieee754_log10+0xd0>
 800ece4:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ece8:	e7c2      	b.n	800ec70 <__ieee754_log10+0x28>
 800ecea:	bf00      	nop
 800ecec:	f3af 8000 	nop.w
 800ecf0:	00000000 	.word	0x00000000
 800ecf4:	c3500000 	.word	0xc3500000
	...
 800ed04:	43500000 	.word	0x43500000
 800ed08:	1526e50e 	.word	0x1526e50e
 800ed0c:	3fdbcb7b 	.word	0x3fdbcb7b
 800ed10:	11f12b36 	.word	0x11f12b36
 800ed14:	3d59fef3 	.word	0x3d59fef3
 800ed18:	509f6000 	.word	0x509f6000
 800ed1c:	3fd34413 	.word	0x3fd34413
 800ed20:	7fefffff 	.word	0x7fefffff

0800ed24 <with_errno>:
 800ed24:	b510      	push	{r4, lr}
 800ed26:	ed2d 8b02 	vpush	{d8}
 800ed2a:	eeb0 8b40 	vmov.f64	d8, d0
 800ed2e:	4604      	mov	r4, r0
 800ed30:	f7ff fb3a 	bl	800e3a8 <__errno>
 800ed34:	eeb0 0b48 	vmov.f64	d0, d8
 800ed38:	ecbd 8b02 	vpop	{d8}
 800ed3c:	6004      	str	r4, [r0, #0]
 800ed3e:	bd10      	pop	{r4, pc}

0800ed40 <xflow>:
 800ed40:	b082      	sub	sp, #8
 800ed42:	b158      	cbz	r0, 800ed5c <xflow+0x1c>
 800ed44:	eeb1 7b40 	vneg.f64	d7, d0
 800ed48:	ed8d 7b00 	vstr	d7, [sp]
 800ed4c:	ed9d 7b00 	vldr	d7, [sp]
 800ed50:	2022      	movs	r0, #34	@ 0x22
 800ed52:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed56:	b002      	add	sp, #8
 800ed58:	f7ff bfe4 	b.w	800ed24 <with_errno>
 800ed5c:	eeb0 7b40 	vmov.f64	d7, d0
 800ed60:	e7f2      	b.n	800ed48 <xflow+0x8>
 800ed62:	0000      	movs	r0, r0
 800ed64:	0000      	movs	r0, r0
	...

0800ed68 <__math_uflow>:
 800ed68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ed70 <__math_uflow+0x8>
 800ed6c:	f7ff bfe8 	b.w	800ed40 <xflow>
 800ed70:	00000000 	.word	0x00000000
 800ed74:	10000000 	.word	0x10000000

0800ed78 <__math_oflow>:
 800ed78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ed80 <__math_oflow+0x8>
 800ed7c:	f7ff bfe0 	b.w	800ed40 <xflow>
 800ed80:	00000000 	.word	0x00000000
 800ed84:	70000000 	.word	0x70000000

0800ed88 <__math_divzero>:
 800ed88:	b082      	sub	sp, #8
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800ed90:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800ed94:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800ed98:	ed8d 7b00 	vstr	d7, [sp]
 800ed9c:	ed9d 0b00 	vldr	d0, [sp]
 800eda0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800edb0 <__math_divzero+0x28>
 800eda4:	2022      	movs	r0, #34	@ 0x22
 800eda6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800edaa:	b002      	add	sp, #8
 800edac:	f7ff bfba 	b.w	800ed24 <with_errno>
	...

0800edb8 <__math_invalid>:
 800edb8:	eeb0 7b40 	vmov.f64	d7, d0
 800edbc:	eeb4 7b47 	vcmp.f64	d7, d7
 800edc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800edc8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800edcc:	d602      	bvs.n	800edd4 <__math_invalid+0x1c>
 800edce:	2021      	movs	r0, #33	@ 0x21
 800edd0:	f7ff bfa8 	b.w	800ed24 <with_errno>
 800edd4:	4770      	bx	lr

0800edd6 <__math_check_uflow>:
 800edd6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800edda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edde:	d102      	bne.n	800ede6 <__math_check_uflow+0x10>
 800ede0:	2022      	movs	r0, #34	@ 0x22
 800ede2:	f7ff bf9f 	b.w	800ed24 <with_errno>
 800ede6:	4770      	bx	lr

0800ede8 <__math_check_oflow>:
 800ede8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800ee08 <__math_check_oflow+0x20>
 800edec:	eeb0 7bc0 	vabs.f64	d7, d0
 800edf0:	eeb4 7b46 	vcmp.f64	d7, d6
 800edf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf8:	dd02      	ble.n	800ee00 <__math_check_oflow+0x18>
 800edfa:	2022      	movs	r0, #34	@ 0x22
 800edfc:	f7ff bf92 	b.w	800ed24 <with_errno>
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop
 800ee04:	f3af 8000 	nop.w
 800ee08:	ffffffff 	.word	0xffffffff
 800ee0c:	7fefffff 	.word	0x7fefffff

0800ee10 <_init>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr

0800ee1c <_fini>:
 800ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1e:	bf00      	nop
 800ee20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee22:	bc08      	pop	{r3}
 800ee24:	469e      	mov	lr, r3
 800ee26:	4770      	bx	lr
