
rhd2164_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edf0  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  0800f0c0  0800f0c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011250  08011250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011258  08011258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801125c  0801125c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08011260  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000998  24000070  080112cc  00013070  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000a08  080112cc  00013a08  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bd1f  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003313  00000000  00000000  0002edb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001528  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000108a  00000000  00000000  000335f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f71  00000000  00000000  00034682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bce6  00000000  00000000  000685f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015157d  00000000  00000000  000842d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d5856  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000618c  00000000  00000000  001d589c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000078  00000000  00000000  001dba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f0a8 	.word	0x0800f0a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800f0a8 	.word	0x0800f0a8

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	b29b      	uxth	r3, r3
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	4619      	mov	r1, r3
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f006 fcbe 	bl	8006fd4 <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fb92 	bl	8003d94 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <enable_interrupt_timer+0x16>
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <enable_interrupt_timer+0x24>)
 8000688:	f00a f9a4 	bl	800a9d4 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 800068c:	e002      	b.n	8000694 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 800068e:	4803      	ldr	r0, [pc, #12]	@ (800069c <enable_interrupt_timer+0x24>)
 8000690:	f00a fa26 	bl	800aae0 <HAL_TIM_Base_Stop_IT>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	24000324 	.word	0x24000324

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0ea      	sub	sp, #424	@ 0x1a8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f003 fae3 	bl	8003c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f87d 	bl	80007a8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ae:	f000 f8e9 	bl	8000884 <PeriphCommonClock_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006b6:	f7ff ffd3 	bl	8000660 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 fcbf 	bl	800103c <MX_GPIO_Init>
  MX_DMA_Init();
 80006be:	f000 fc8d 	bl	8000fdc <MX_DMA_Init>
  MX_TIM1_Init();
 80006c2:	f000 f9b7 	bl	8000a34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006c6:	f000 fa87 	bl	8000bd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ca:	f000 fb0d 	bl	8000ce8 <MX_TIM3_Init>
  MX_SPI3_Init();
 80006ce:	f000 f959 	bl	8000984 <MX_SPI3_Init>
  MX_SPI1_Init();
 80006d2:	f000 f907 	bl	80008e4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006d6:	f000 fc33 	bl	8000f40 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80006da:	f000 fb5d 	bl	8000d98 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  TIM1->EGR |= TIM_EGR_UG;  // update event
 80006de:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <main+0xf0>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000790 <main+0xf0>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6153      	str	r3, [r2, #20]


  // Write register values to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1LFZ1, 0b10); // enable pausing TIM3 during debug
 80006ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <main+0xf4>)
 80006ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006ee:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <main+0xf4>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB1LFZ1, 0b1); // enable pausing TIM2 during debug
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <main+0xf4>)
 80006f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006fa:	4a26      	ldr	r2, [pc, #152]	@ (8000794 <main+0xf4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB2FZ1, 0b1); // enable pausing TIM1 during debug
 8000702:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <main+0xf4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a23      	ldr	r2, [pc, #140]	@ (8000794 <main+0xf4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c

  // Allocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 800070e:	f000 fec5 	bl	800149c <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 8000712:	f000 fef1 	bl	80014f8 <initialize_spi_with_dma>

  // Set up timers used to generate 32-bit SCLK used to read DDR MISO to trigger once TRANSMIT_SPI CS goes low.
  initialize_ddr_sclk_timers();
 8000716:	f000 fefd 	bl	8001514 <initialize_ddr_sclk_timers>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 800071a:	463b      	mov	r3, r7
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fa2d 	bl	8003b7c <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 8000722:	f003 fa36 	bl	8003b92 <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f003 fa39 	bl	8003ba0 <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800072e:	2201      	movs	r2, #1
 8000730:	2101      	movs	r1, #1
 8000732:	4819      	ldr	r0, [pc, #100]	@ (8000798 <main+0xf8>)
 8000734:	f7ff ff82 	bl	800063c <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <main+0xfc>)
 800073a:	2200      	movs	r2, #0
 800073c:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff9a 	bl	8000678 <enable_interrupt_timer>
  main_loop_active = 1;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <main+0x100>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 800074a:	f003 f94d 	bl	80039e8 <loop_escape>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d106      	bne.n	8000762 <main+0xc2>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800075a:	4812      	ldr	r0, [pc, #72]	@ (80007a4 <main+0x104>)
 800075c:	f7ff ff6e 	bl	800063c <write_pin>
	  if (loop_escape()) break;
 8000760:	e7f3      	b.n	800074a <main+0xaa>
 8000762:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ff87 	bl	8000678 <enable_interrupt_timer>
  main_loop_active = 0;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <main+0x100>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]

  // Disable 32-bit SCLK timers.
  end_ddr_sclk_timers();
 8000770:	f000 fee0 	bl	8001534 <end_ddr_sclk_timers>

  // Disable SPI DMA.
  end_spi_with_dma();
 8000774:	f000 fec7 	bl	8001506 <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 8000778:	f003 f996 	bl	8003aa8 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 800077c:	f000 feb0 	bl	80014e0 <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2101      	movs	r1, #1
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <main+0xf8>)
 8000786:	f7ff ff59 	bl	800063c <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <main+0xea>
 800078e:	bf00      	nop
 8000790:	40010000 	.word	0x40010000
 8000794:	5c001000 	.word	0x5c001000
 8000798:	58020400 	.word	0x58020400
 800079c:	2400059c 	.word	0x2400059c
 80007a0:	240008a6 	.word	0x240008a6
 80007a4:	58020800 	.word	0x58020800

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	@ 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b2:	224c      	movs	r2, #76	@ 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00d ff28 	bl	800e60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00d ff22 	bl	800e60c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f006 fc41 	bl	8007050 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <SystemClock_Config+0xd8>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000880 <SystemClock_Config+0xd8>)
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <SystemClock_Config+0xd8>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ea:	bf00      	nop
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <SystemClock_Config+0xd8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007f8:	d1f8      	bne.n	80007ec <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007fe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000808:	2302      	movs	r3, #2
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 132;
 8000810:	2384      	movs	r3, #132	@ 0x84
 8000812:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000820:	2308      	movs	r3, #8
 8000822:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000824:	2300      	movs	r3, #0
 8000826:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000830:	4618      	mov	r0, r3
 8000832:	f006 fc47 	bl	80070c4 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800083c:	f000 fd90 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	233f      	movs	r3, #63	@ 0x3f
 8000842:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2303      	movs	r3, #3
 8000846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800084c:	2308      	movs	r3, #8
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000850:	2340      	movs	r3, #64	@ 0x40
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000854:	2340      	movs	r3, #64	@ 0x40
 8000856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800085c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800085e:	2340      	movs	r3, #64	@ 0x40
 8000860:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2103      	movs	r1, #3
 8000866:	4618      	mov	r0, r3
 8000868:	f007 f806 	bl	8007878 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000872:	f000 fd75 	bl	8001360 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3770      	adds	r7, #112	@ 0x70
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58024800 	.word	0x58024800

08000884 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0ae      	sub	sp, #184	@ 0xb8
 8000888:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	22b8      	movs	r2, #184	@ 0xb8
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f00d febb 	bl	800e60c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 8000896:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800089a:	f04f 0300 	mov.w	r3, #0
 800089e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 33;
 80008a6:	2321      	movs	r3, #33	@ 0x21
 80008a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80008aa:	2303      	movs	r3, #3
 80008ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008b6:	23c0      	movs	r3, #192	@ 0xc0
 80008b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4618      	mov	r0, r3
 80008cc:	f007 fb60 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008d6:	f000 fd43 	bl	8001360 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	37b8      	adds	r7, #184	@ 0xb8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e8:	4b24      	ldr	r3, [pc, #144]	@ (800097c <MX_SPI1_Init+0x98>)
 80008ea:	4a25      	ldr	r2, [pc, #148]	@ (8000980 <MX_SPI1_Init+0x9c>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008ee:	4b23      	ldr	r3, [pc, #140]	@ (800097c <MX_SPI1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <MX_SPI1_Init+0x98>)
 80008f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <MX_SPI1_Init+0x98>)
 80008fe:	221f      	movs	r2, #31
 8000900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <MX_SPI1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <MX_SPI1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800090e:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_SPI1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_SPI1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_SPI1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_SPI1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <MX_SPI1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_SPI1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000932:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_SPI1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000938:	4b10      	ldr	r3, [pc, #64]	@ (800097c <MX_SPI1_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_SPI1_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <MX_SPI1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_SPI1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <MX_SPI1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_SPI1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <MX_SPI1_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_SPI1_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_SPI1_Init+0x98>)
 800096a:	f009 f8d3 	bl	8009b14 <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000974:	f000 fcf4 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2400008c 	.word	0x2400008c
 8000980:	40013000 	.word	0x40013000

08000984 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000988:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 800098a:	4a29      	ldr	r2, [pc, #164]	@ (8000a30 <MX_SPI3_Init+0xac>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000990:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000994:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000998:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800099c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009a0:	220f      	movs	r2, #15
 80009a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009b2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80009b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009ba:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80009be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009de:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_06CYCLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000a00:	2260      	movs	r2, #96	@ 0x60
 8000a02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_SPI3_Init+0xa8>)
 8000a18:	f009 f87c 	bl	8009b14 <HAL_SPI_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000a22:	f000 fc9d 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	24000114 	.word	0x24000114
 8000a30:	40003c00 	.word	0x40003c00

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0a0      	sub	sp, #128	@ 0x80
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2234      	movs	r2, #52	@ 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00d fdc4 	bl	800e60c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a84:	4b52      	ldr	r3, [pc, #328]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000a86:	4a53      	ldr	r2, [pc, #332]	@ (8000bd4 <MX_TIM1_Init+0x1a0>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000a8a:	4b51      	ldr	r3, [pc, #324]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 8000a96:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000a98:	2205      	movs	r2, #5
 8000a9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 31;
 8000aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000aa4:	221f      	movs	r2, #31
 8000aa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa8:	4b49      	ldr	r3, [pc, #292]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aae:	4848      	ldr	r0, [pc, #288]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000ab0:	f009 ff39 	bl	800a926 <HAL_TIM_Base_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000aba:	f000 fc51 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4841      	ldr	r0, [pc, #260]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000acc:	f00a fd90 	bl	800b5f0 <HAL_TIM_ConfigClockSource>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ad6:	f000 fc43 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ada:	483d      	ldr	r0, [pc, #244]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000adc:	f00a fa38 	bl	800af50 <HAL_TIM_PWM_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000ae6:	f000 fc3b 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000aea:	2108      	movs	r1, #8
 8000aec:	4838      	ldr	r0, [pc, #224]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000aee:	f00a fa90 	bl	800b012 <HAL_TIM_OnePulse_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000af8:	f000 fc32 	bl	8001360 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000afc:	2306      	movs	r3, #6
 8000afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000b00:	2310      	movs	r3, #16
 8000b02:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4831      	ldr	r0, [pc, #196]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000b0c:	f00a fe68 	bl	800b7e0 <HAL_TIM_SlaveConfigSynchro>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000b16:	f000 fc23 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b26:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4828      	ldr	r0, [pc, #160]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000b2e:	f00b fbf7 	bl	800c320 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b38:	f000 fc12 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3c:	2360      	movs	r3, #96	@ 0x60
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000b40:	2303      	movs	r3, #3
 8000b42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	481b      	ldr	r0, [pc, #108]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000b64:	f00a fc30 	bl	800b3c8 <HAL_TIM_PWM_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000b6e:	f000 fbf7 	bl	8001360 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	699a      	ldr	r2, [r3, #24]
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f022 0208 	bic.w	r2, r2, #8
 8000b80:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000bb4:	f00b fc50 	bl	800c458 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8000bbe:	f000 fbcf 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <MX_TIM1_Init+0x19c>)
 8000bc4:	f002 fc6e 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 8000bc8:	bf00      	nop
 8000bca:	3780      	adds	r7, #128	@ 0x80
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2400028c 	.word	0x2400028c
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	@ 0x40
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c14:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000c20:	4b30      	ldr	r3, [pc, #192]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c22:	220a      	movs	r2, #10
 8000c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c32:	482c      	ldr	r0, [pc, #176]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c34:	f009 fe77 	bl	800a926 <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c3e:	f000 fb8f 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c42:	4828      	ldr	r0, [pc, #160]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c44:	f00a f984 	bl	800af50 <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c4e:	f000 fb87 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c52:	2108      	movs	r1, #8
 8000c54:	4823      	ldr	r0, [pc, #140]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c56:	f00a f9dc 	bl	800b012 <HAL_TIM_OnePulse_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c60:	f000 fb7e 	bl	8001360 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c64:	2306      	movs	r3, #6
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c68:	2370      	movs	r3, #112	@ 0x70
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000c82:	f00a fdad 	bl	800b7e0 <HAL_TIM_SlaveConfigSynchro>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000c8c:	f000 fb68 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000c90:	2360      	movs	r3, #96	@ 0x60
 8000c92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4811      	ldr	r0, [pc, #68]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000ca0:	f00b fb3e 	bl	800c320 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000caa:	f000 fb59 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000cae:	2370      	movs	r3, #112	@ 0x70
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2208      	movs	r2, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000cc6:	f00a fb7f 	bl	800b3c8 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000cd0:	f000 fb46 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cd4:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <MX_TIM2_Init+0x10c>)
 8000cd6:	f002 fbe5 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 8000cda:	bf00      	nop
 8000cdc:	3740      	adds	r7, #64	@ 0x40
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	240002d8 	.word	0x240002d8

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
 8000d08:	615a      	str	r2, [r3, #20]
 8000d0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0c:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d0e:	4a21      	ldr	r2, [pc, #132]	@ (8000d94 <MX_TIM3_Init+0xac>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d14:	2203      	movs	r2, #3
 8000d16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 13750;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d20:	f243 52b6 	movw	r2, #13750	@ 0x35b6
 8000d24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d2e:	2280      	movs	r2, #128	@ 0x80
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000d32:	4817      	ldr	r0, [pc, #92]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d34:	f009 ff03 	bl	800ab3e <HAL_TIM_OC_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d3e:	f000 fb0f 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480f      	ldr	r0, [pc, #60]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d52:	f00b fae5 	bl	800c320 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d5c:	f000 fb00 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	@ (8000d90 <MX_TIM3_Init+0xa8>)
 8000d78:	f00a faac 	bl	800b2d4 <HAL_TIM_OC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d82:	f000 faed 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	@ 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000324 	.word	0x24000324
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0a0      	sub	sp, #128	@ 0x80
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2234      	movs	r2, #52	@ 0x34
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00d fc12 	bl	800e60c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000de8:	4b53      	ldr	r3, [pc, #332]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000dea:	4a54      	ldr	r2, [pc, #336]	@ (8000f3c <MX_TIM8_Init+0x1a4>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8000dee:	4b52      	ldr	r3, [pc, #328]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b50      	ldr	r3, [pc, #320]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5;
 8000dfa:	4b4f      	ldr	r3, [pc, #316]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e00:	4b4d      	ldr	r3, [pc, #308]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 31;
 8000e06:	4b4c      	ldr	r3, [pc, #304]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e08:	221f      	movs	r2, #31
 8000e0a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e12:	4849      	ldr	r0, [pc, #292]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e14:	f009 fd87 	bl	800a926 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e1e:	f000 fa9f 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e26:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e28:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4842      	ldr	r0, [pc, #264]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e30:	f00a fbde 	bl	800b5f0 <HAL_TIM_ConfigClockSource>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000e3a:	f000 fa91 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e3e:	483e      	ldr	r0, [pc, #248]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e40:	f00a f886 	bl	800af50 <HAL_TIM_PWM_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000e4a:	f000 fa89 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4839      	ldr	r0, [pc, #228]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e52:	f00a f8de 	bl	800b012 <HAL_TIM_OnePulse_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000e5c:	f000 fa80 	bl	8001360 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e64:	2310      	movs	r3, #16
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000e68:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4832      	ldr	r0, [pc, #200]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e70:	f00a fcb6 	bl	800b7e0 <HAL_TIM_SlaveConfigSynchro>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000e7a:	f000 fa71 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e8a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4829      	ldr	r0, [pc, #164]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000e92:	f00b fa45 	bl	800c320 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000e9c:	f000 fa60 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ea0:	2370      	movs	r3, #112	@ 0x70
 8000ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eac:	2300      	movs	r3, #0
 8000eae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000eb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000ec8:	f00a fa7e 	bl	800b3c8 <HAL_TIM_PWM_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000ed2:	f000 fa45 	bl	8001360 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0208 	bic.w	r2, r2, #8
 8000ee4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000f1c:	f00b fa9c 	bl	800c458 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM8_Init+0x192>
  {
    Error_Handler();
 8000f26:	f000 fa1b 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM8_Init+0x1a0>)
 8000f2c:	f002 faba 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3780      	adds	r7, #128	@ 0x80
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	24000370 	.word	0x24000370
 8000f3c:	40010400 	.word	0x40010400

08000f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f46:	4a24      	ldr	r2, [pc, #144]	@ (8000fd8 <MX_USART3_UART_Init+0x98>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f4c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f72:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f76:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f78:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8a:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f8c:	f00b fb0e 	bl	800c5ac <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000f96:	f000 f9e3 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f9e:	f00d f9ac 	bl	800e2fa <HAL_UARTEx_SetTxFifoThreshold>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000fa8:	f000 f9da 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fac:	2100      	movs	r1, #0
 8000fae:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000fb0:	f00d f9e1 	bl	800e376 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000fba:	f000 f9d1 	bl	8001360 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000fc0:	f00d f962 	bl	800e288 <HAL_UARTEx_DisableFifoMode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000fca:	f000 f9c9 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	240003bc 	.word	0x240003bc
 8000fd8:	40004800 	.word	0x40004800

08000fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_DMA_Init+0x5c>)
 8000fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe8:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <MX_DMA_Init+0x5c>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_DMA_Init+0x5c>)
 8000ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	200b      	movs	r0, #11
 8001006:	f002 ffc4 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800100a:	200b      	movs	r0, #11
 800100c:	f002 ffdb 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	200c      	movs	r0, #12
 8001016:	f002 ffbc 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800101a:	200c      	movs	r0, #12
 800101c:	f002 ffd3 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2101      	movs	r1, #1
 8001024:	200d      	movs	r0, #13
 8001026:	f002 ffb4 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800102a:	200d      	movs	r0, #13
 800102c:	f002 ffcb 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58024400 	.word	0x58024400

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001052:	4bbc      	ldr	r3, [pc, #752]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	4aba      	ldr	r2, [pc, #744]	@ (8001344 <MX_GPIO_Init+0x308>)
 800105a:	f043 0310 	orr.w	r3, r3, #16
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001062:	4bb8      	ldr	r3, [pc, #736]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	4bb4      	ldr	r3, [pc, #720]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4ab3      	ldr	r2, [pc, #716]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4bb0      	ldr	r3, [pc, #704]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	4bad      	ldr	r3, [pc, #692]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	4aab      	ldr	r2, [pc, #684]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109e:	4ba9      	ldr	r3, [pc, #676]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4ba5      	ldr	r3, [pc, #660]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	4aa4      	ldr	r2, [pc, #656]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ca:	4b9e      	ldr	r3, [pc, #632]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010da:	4b9a      	ldr	r3, [pc, #616]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	4b96      	ldr	r3, [pc, #600]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	4a95      	ldr	r2, [pc, #596]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f8:	4b92      	ldr	r3, [pc, #584]	@ (8001344 <MX_GPIO_Init+0x308>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	4b8f      	ldr	r3, [pc, #572]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	4a8d      	ldr	r2, [pc, #564]	@ (8001344 <MX_GPIO_Init+0x308>)
 800110e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001116:	4b8b      	ldr	r3, [pc, #556]	@ (8001344 <MX_GPIO_Init+0x308>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f244 0101 	movw	r1, #16385	@ 0x4001
 800112a:	4887      	ldr	r0, [pc, #540]	@ (8001348 <MX_GPIO_Init+0x30c>)
 800112c:	f005 ff52 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001136:	4885      	ldr	r0, [pc, #532]	@ (800134c <MX_GPIO_Init+0x310>)
 8001138:	f005 ff4c 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001142:	4882      	ldr	r0, [pc, #520]	@ (800134c <MX_GPIO_Init+0x310>)
 8001144:	f005 ff46 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800114e:	4880      	ldr	r0, [pc, #512]	@ (8001350 <MX_GPIO_Init+0x314>)
 8001150:	f005 ff40 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800115a:	487e      	ldr	r0, [pc, #504]	@ (8001354 <MX_GPIO_Init+0x318>)
 800115c:	f005 ff3a 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ErrorCode_Bit_3_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2103      	movs	r1, #3
 8001164:	487c      	ldr	r0, [pc, #496]	@ (8001358 <MX_GPIO_Init+0x31c>)
 8001166:	f005 ff35 	bl	8006fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800116a:	2304      	movs	r3, #4
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4876      	ldr	r0, [pc, #472]	@ (8001358 <MX_GPIO_Init+0x31c>)
 8001180:	f005 fd80 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	486e      	ldr	r0, [pc, #440]	@ (8001354 <MX_GPIO_Init+0x318>)
 800119a:	f005 fd73 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800119e:	2332      	movs	r3, #50	@ 0x32
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ae:	230b      	movs	r3, #11
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4866      	ldr	r0, [pc, #408]	@ (8001354 <MX_GPIO_Init+0x318>)
 80011ba:	f005 fd63 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80011be:	2386      	movs	r3, #134	@ 0x86
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ce:	230b      	movs	r3, #11
 80011d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4860      	ldr	r0, [pc, #384]	@ (800135c <MX_GPIO_Init+0x320>)
 80011da:	f005 fd53 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80011de:	f244 0301 	movw	r3, #16385	@ 0x4001
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4854      	ldr	r0, [pc, #336]	@ (8001348 <MX_GPIO_Init+0x30c>)
 80011f8:	f005 fd44 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120e:	230b      	movs	r3, #11
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	484b      	ldr	r0, [pc, #300]	@ (8001348 <MX_GPIO_Init+0x30c>)
 800121a:	f005 fd33 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 800121e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4845      	ldr	r0, [pc, #276]	@ (800134c <MX_GPIO_Init+0x310>)
 8001238:	f005 fd24 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800123c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	483d      	ldr	r0, [pc, #244]	@ (800134c <MX_GPIO_Init+0x310>)
 8001256:	f005 fd15 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 800125a:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4837      	ldr	r0, [pc, #220]	@ (8001350 <MX_GPIO_Init+0x314>)
 8001274:	f005 fd06 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4830      	ldr	r0, [pc, #192]	@ (8001350 <MX_GPIO_Init+0x314>)
 800128e:	f005 fcf9 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 8001292:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	482a      	ldr	r0, [pc, #168]	@ (8001354 <MX_GPIO_Init+0x318>)
 80012ac:	f005 fcea 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012c2:	230a      	movs	r3, #10
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4823      	ldr	r0, [pc, #140]	@ (800135c <MX_GPIO_Init+0x320>)
 80012ce:	f005 fcd9 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <MX_GPIO_Init+0x314>)
 80012f0:	f005 fcc8 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4813      	ldr	r0, [pc, #76]	@ (8001358 <MX_GPIO_Init+0x31c>)
 800130c:	f005 fcba 	bl	8006c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001310:	2302      	movs	r3, #2
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	@ (8001358 <MX_GPIO_Init+0x31c>)
 8001328:	f005 fcac 	bl	8006c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2100      	movs	r1, #0
 8001330:	2008      	movs	r0, #8
 8001332:	f002 fe2e 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001336:	2008      	movs	r0, #8
 8001338:	f002 fe45 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	@ 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400
 8001348:	58020400 	.word	0x58020400
 800134c:	58020c00 	.word	0x58020c00
 8001350:	58021800 	.word	0x58021800
 8001354:	58020800 	.word	0x58020800
 8001358:	58021000 	.word	0x58021000
 800135c:	58020000 	.word	0x58020000

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <write_pin>:
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	b29b      	uxth	r3, r3
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	4619      	mov	r1, r3
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f005 fe26 	bl	8006fd4 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 8001394:	f002 fb28 	bl	80039e8 <loop_escape>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d120      	bne.n	80013e0 <sample_interrupt_routine+0x50>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013a4:	480f      	ldr	r0, [pc, #60]	@ (80013e4 <sample_interrupt_routine+0x54>)
 80013a6:	f7ff ffe1 	bl	800136c <write_pin>

	// Write aux commands to command_sequence_MOSI, advancing one sample through aux_command_list.
	cycle_aux_commands();
 80013aa:	f000 f821 	bl	80013f0 <cycle_aux_commands>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <sample_interrupt_routine+0x58>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <sample_interrupt_routine+0x2c>
		handle_comm_error(ITClip);
 80013b6:	2005      	movs	r0, #5
 80013b8:	f000 f8cc 	bl	8001554 <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c2:	480a      	ldr	r0, [pc, #40]	@ (80013ec <sample_interrupt_routine+0x5c>)
 80013c4:	f7ff ffd2 	bl	800136c <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <sample_interrupt_routine+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 80013ce:	f000 f845 	bl	800145c <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <sample_interrupt_routine+0x5c>)
 80013da:	f7ff ffc7 	bl	800136c <write_pin>
 80013de:	e000      	b.n	80013e2 <sample_interrupt_routine+0x52>
	if (loop_escape()) return;
 80013e0:	bf00      	nop
}
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58020800 	.word	0x58020800
 80013e8:	24000004 	.word	0x24000004
 80013ec:	58020c00 	.word	0x58020c00

080013f0 <cycle_aux_commands>:


// Every sample period, cycle circularly through aux_command_list, adding this sample's AUX commands to the end of
// command_sequence_MOSI array which will be transmitted via SPI.
void cycle_aux_commands()
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	e012      	b.n	8001422 <cycle_aux_commands+0x32>
		command_sequence_MOSI[CONVERT_COMMANDS_PER_SEQUENCE + i] = aux_command_list[i][aux_command_index];
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <cycle_aux_commands+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3320      	adds	r3, #32
 8001408:	4912      	ldr	r1, [pc, #72]	@ (8001454 <cycle_aux_commands+0x64>)
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	01d2      	lsls	r2, r2, #7
 800140e:	4402      	add	r2, r0
 8001410:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001414:	b291      	uxth	r1, r2
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <cycle_aux_commands+0x68>)
 8001418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3301      	adds	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	dde9      	ble.n	80013fc <cycle_aux_commands+0xc>
	}
	if (++aux_command_index >= AUX_COMMAND_LIST_LENGTH) {
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <cycle_aux_commands+0x60>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <cycle_aux_commands+0x60>)
 8001434:	4611      	mov	r1, r2
 8001436:	7019      	strb	r1, [r3, #0]
 8001438:	b253      	sxtb	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	da02      	bge.n	8001444 <cycle_aux_commands+0x54>
		aux_command_index = 0;
 800143e:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <cycle_aux_commands+0x60>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
	// Note that if any command(s) are to be used with a command list different from AUX_COMMAND_LIST_LENGTH,
	// the above code should be commented out, and the last AUX_COMMANDS_PER_SEQUENCE of command_sequence_MOSI
	// should be written here. For example, if impedance check DAC control is used, zcheck_DAC_command_list_length
	// should replace AUX_COMMAND_LIST_LENGTH and zcheck_DAC_command_slot_position should be used to correctly index
	// commands from the proper aux_command_list slot.
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	240008a4 	.word	0x240008a4
 8001454:	240005a4 	.word	0x240005a4
 8001458:	240004c8 	.word	0x240004c8

0800145c <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*)command_sequence_MISO,
 8001460:	2223      	movs	r2, #35	@ 0x23
 8001462:	490a      	ldr	r1, [pc, #40]	@ (800148c <transfer_sequence_spi_dma+0x30>)
 8001464:	480a      	ldr	r0, [pc, #40]	@ (8001490 <transfer_sequence_spi_dma+0x34>)
 8001466:	f008 fdbb 	bl	8009fe0 <HAL_SPI_Receive_DMA>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <transfer_sequence_spi_dma+0x18>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001470:	f7ff ff76 	bl	8001360 <Error_Handler>
	}


	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*)command_sequence_MOSI,
 8001474:	2223      	movs	r2, #35	@ 0x23
 8001476:	4907      	ldr	r1, [pc, #28]	@ (8001494 <transfer_sequence_spi_dma+0x38>)
 8001478:	4807      	ldr	r0, [pc, #28]	@ (8001498 <transfer_sequence_spi_dma+0x3c>)
 800147a:	f008 fc6f 	bl	8009d5c <HAL_SPI_Transmit_DMA>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <transfer_sequence_spi_dma+0x2c>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001484:	f7ff ff6c 	bl	8001360 <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	24000510 	.word	0x24000510
 8001490:	2400008c 	.word	0x2400008c
 8001494:	240004c8 	.word	0x240004c8
 8001498:	24000114 	.word	0x24000114

0800149c <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 80014a2:	f000 f983 	bl	80017ac <calculate_sample_rate>
 80014a6:	eeb0 7b40 	vmov.f64	d7, d0
 80014aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014ae:	ee17 2a90 	vmov	r2, s15
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <allocate_sample_memory+0x3c>)
 80014b4:	601a      	str	r2, [r3, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * 2 * per_channel_sample_memory_capacity;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <allocate_sample_memory+0x3c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00c ffe4 	bl	800e490 <malloc>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b03      	ldr	r3, [pc, #12]	@ (80014dc <allocate_sample_memory+0x40>)
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	24000000 	.word	0x24000000
 80014dc:	240005a0 	.word	0x240005a0

080014e0 <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	free(sample_memory);
 80014e4:	4b03      	ldr	r3, [pc, #12]	@ (80014f4 <free_sample_memory+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00c ffd9 	bl	800e4a0 <free>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	240005a0 	.word	0x240005a0

080014f8 <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 80014fc:	bf00      	nop
	LL_DMA_SetDataLength(DMA, DMA_RX_CHANNEL, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);

	// Assign RX DMA stream to correct DMAMUX request
	LL_DMA_SetPeriphRequest(DMA, DMA_RX_CHANNEL, LL_DMAMUX1_REQ_SPI1_RX);
#endif
}
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implementation.
void end_spi_with_dma()
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <initialize_ddr_sclk_timers>:


// Start timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void initialize_ddr_sclk_timers()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Start(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 8001518:	2100      	movs	r1, #0
 800151a:	4804      	ldr	r0, [pc, #16]	@ (800152c <initialize_ddr_sclk_timers+0x18>)
 800151c:	f009 fb66 	bl	800abec <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&CS_DELAY_TIM, TIM_CHANNEL_3);
 8001520:	2108      	movs	r1, #8
 8001522:	4803      	ldr	r0, [pc, #12]	@ (8001530 <initialize_ddr_sclk_timers+0x1c>)
 8001524:	f009 fb62 	bl	800abec <HAL_TIM_OC_Start>
  LL_TIM_EnableCounter(RECEIVE_SCLK_TIM);

  LL_TIM_CC_EnableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
  LL_TIM_EnableCounter(CS_DELAY_TIM);
#endif
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2400028c 	.word	0x2400028c
 8001530:	240002d8 	.word	0x240002d8

08001534 <end_ddr_sclk_timers>:

// End timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void end_ddr_sclk_timers()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Stop(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 8001538:	2100      	movs	r1, #0
 800153a:	4804      	ldr	r0, [pc, #16]	@ (800154c <end_ddr_sclk_timers+0x18>)
 800153c:	f009 fc72 	bl	800ae24 <HAL_TIM_OC_Stop>
  HAL_TIM_OC_Stop(&CS_DELAY_TIM, TIM_CHANNEL_3);
 8001540:	2108      	movs	r1, #8
 8001542:	4803      	ldr	r0, [pc, #12]	@ (8001550 <end_ddr_sclk_timers+0x1c>)
 8001544:	f009 fc6e 	bl	800ae24 <HAL_TIM_OC_Stop>
  LL_TIM_CC_DisableChannel(RECEIVE_SCLK_TIM, LL_TIM_CHANNEL_CH1);

  LL_TIM_DisableCounter(CS_DELAY_TIM);
  LL_TIM_CC_DisableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
#endif
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2400028c 	.word	0x2400028c
 8001550:	240002d8 	.word	0x240002d8

08001554 <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03f      	beq.n	80015e4 <handle_comm_error+0x90>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800156a:	4820      	ldr	r0, [pc, #128]	@ (80015ec <handle_comm_error+0x98>)
 800156c:	f7ff fefe 	bl	800136c <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	105b      	asrs	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	109b      	asrs	r3, r3, #2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	10db      	asrs	r3, r3, #3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <handle_comm_error+0x58>
 80015a2:	2201      	movs	r2, #1
 80015a4:	2140      	movs	r1, #64	@ 0x40
 80015a6:	4812      	ldr	r0, [pc, #72]	@ (80015f0 <handle_comm_error+0x9c>)
 80015a8:	f7ff fee0 	bl	800136c <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d004      	beq.n	80015bc <handle_comm_error+0x68>
 80015b2:	2201      	movs	r2, #1
 80015b4:	2120      	movs	r1, #32
 80015b6:	480e      	ldr	r0, [pc, #56]	@ (80015f0 <handle_comm_error+0x9c>)
 80015b8:	f7ff fed8 	bl	800136c <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 80015bc:	7b7b      	ldrb	r3, [r7, #13]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <handle_comm_error+0x7a>
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c8:	4809      	ldr	r0, [pc, #36]	@ (80015f0 <handle_comm_error+0x9c>)
 80015ca:	f7ff fecf 	bl	800136c <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <handle_comm_error+0x8c>
 80015d4:	2201      	movs	r2, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <handle_comm_error+0xa0>)
 80015da:	f7ff fec7 	bl	800136c <write_pin>

	// Enter infinite loop.
	while(1);
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <handle_comm_error+0x8c>
	if (error_code == 0) return;
 80015e4:	bf00      	nop
}
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	58020400 	.word	0x58020400
 80015f0:	58021800 	.word	0x58021800
 80015f4:	58021000 	.word	0x58021000

080015f8 <spi_rx_cplt_callback>:


// Callback function that executes when Reception of SPI has completed.
void spi_rx_cplt_callback()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <spi_rx_cplt_callback+0x34>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <spi_rx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <spi_rx_cplt_callback+0x38>)
 800160e:	f7ff fead 	bl	800136c <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 8001612:	f002 f9f1 	bl	80039f8 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 8001616:	f002 f9f7 	bl	8003a08 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <spi_rx_cplt_callback+0x3c>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 8001620:	e002      	b.n	8001628 <spi_rx_cplt_callback+0x30>
		reception_in_progress = 0;
 8001622:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <spi_rx_cplt_callback+0x40>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	240008a6 	.word	0x240008a6
 8001630:	58020800 	.word	0x58020800
 8001634:	24000004 	.word	0x24000004
 8001638:	240008a5 	.word	0x240008a5

0800163c <morton_deinterleave>:

// Use 'magic bits' de interleave method inspired by Jeroen Baert's blog post:
// "Morton encoding/decoding through bit interleaving: Implementations" to achieve
// high performance method of separate every other bit from a 32-bit input.
uint16_t morton_deinterleave(uint32_t x)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    x = x & 0x55555555; // Use mask to clear all even bits
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800164a:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 1)) & 0x33333333; // Shift-right by 1, duplicate, and mask data so that valid data is grouped into 2s (00xx00xx00xx...)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	085a      	lsrs	r2, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8001658:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 2)) & 0x0F0F0F0F; // Shift-right by 2, duplicate, and mask data so that valid data is grouped into 4s (0000xxxx0000xxxx...)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	089a      	lsrs	r2, r3, #2
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 8001666:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 4)) & 0x00FF00FF; // Shift-right by 4, duplicate, and mask data so that valid data is grouped into 8s (00000000xxxxxxxx00000000xxxxxxxx...)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	091a      	lsrs	r2, r3, #4
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8001674:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 8)) & 0x0000FFFF; // Shift-right by 8, duplicate, and mask data so that 16 MSB data is 0s, 16 LSB data is valid data
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	0a1a      	lsrs	r2, r3, #8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4313      	orrs	r3, r2
 800167e:	b29b      	uxth	r3, r3
 8001680:	607b      	str	r3, [r7, #4]
    return (uint16_t) x; // Cast 32-bit 0000_0000_0000_0000_xxxx_xxxx_xxxx_xxxx data into 16-bit xxxx_xxxx_xxxx_xxxx data
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	b29b      	uxth	r3, r3
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <extract_ddr_words>:


// Separate a 32-bit merged word (interleaved stream A and stream B data) into 2 distinct 16-bit words.
void extract_ddr_words(uint32_t merged_word, volatile uint16_t *word_A, volatile uint16_t *word_B)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
//		*word_B |= bit_B << i;
//	}

	// A much faster, but less obvious method uses 'magic bit' masks to copy, shift, and mask bits in several steps
	// to achieve the same result in fewer operations.
	*word_A = morton_deinterleave(merged_word); // Data stream A is all add
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff ffcc 	bl	800163c <morton_deinterleave>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	801a      	strh	r2, [r3, #0]
	*word_B = morton_deinterleave(merged_word >> 1);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	085b      	lsrs	r3, r3, #1
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ffc3 	bl	800163c <morton_deinterleave>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	801a      	strh	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <spi_error_callback+0x14>)
 80016ce:	2202      	movs	r2, #2
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	24000004 	.word	0x24000004

080016e0 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	@ 0x40
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 80016e8:	f000 f860 	bl	80017ac <calculate_sample_rate>
 80016ec:	eeb0 7b40 	vmov.f64	d7, d0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f001 f8e6 	bl	80028c8 <set_default_rhd_settings>

	uint16_t registers[22];
	for (int i = 0; i < 22; i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001700:	e00e      	b.n	8001720 <write_initial_reg_values+0x40>
		registers[i] = get_register_value(p, i);
 8001702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f001 fa27 	bl	8002b58 <get_register_value>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	3340      	adds	r3, #64	@ 0x40
 8001714:	443b      	add	r3, r7
 8001716:	f823 2c38 	strh.w	r2, [r3, #-56]
	for (int i = 0; i < 22; i++) {
 800171a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800171c:	3301      	adds	r3, #1
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001722:	2b15      	cmp	r3, #21
 8001724:	dded      	ble.n	8001702 <write_initial_reg_values+0x22>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 8001726:	203f      	movs	r0, #63	@ 0x3f
 8001728:	f001 fc85 	bl	8003036 <read_command>
 800172c:	4603      	mov	r3, r0
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fa4d 	bl	8001bce <send_spi_command>
	send_spi_command(read_command(63));
 8001734:	203f      	movs	r0, #63	@ 0x3f
 8001736:	f001 fc7e 	bl	8003036 <read_command>
 800173a:	4603      	mov	r3, r0
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fa46 	bl	8001bce <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 22; i++) {
 8001742:	2300      	movs	r3, #0
 8001744:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001746:	e013      	b.n	8001770 <write_initial_reg_values+0x90>
		send_spi_command(write_command(i, registers[i]));
 8001748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174a:	b2da      	uxtb	r2, r3
 800174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	3340      	adds	r3, #64	@ 0x40
 8001752:	443b      	add	r3, r7
 8001754:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4619      	mov	r1, r3
 800175c:	4610      	mov	r0, r2
 800175e:	f001 fc4d 	bl	8002ffc <write_command>
 8001762:	4603      	mov	r3, r0
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fa32 	bl	8001bce <send_spi_command>
	for (int i = 0; i < 22; i++) {
 800176a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176c:	3301      	adds	r3, #1
 800176e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001772:	2b15      	cmp	r3, #21
 8001774:	dde8      	ble.n	8001748 <write_initial_reg_values+0x68>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 8001776:	f001 fc38 	bl	8002fea <calibrate_command>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fa26 	bl	8001bce <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
 8001786:	e009      	b.n	800179c <write_initial_reg_values+0xbc>
		send_spi_command(read_command(40));
 8001788:	2028      	movs	r0, #40	@ 0x28
 800178a:	f001 fc54 	bl	8003036 <read_command>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fa1c 	bl	8001bce <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001798:	3301      	adds	r3, #1
 800179a:	637b      	str	r3, [r7, #52]	@ 0x34
 800179c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179e:	2b08      	cmp	r3, #8
 80017a0:	ddf2      	ble.n	8001788 <write_initial_reg_values+0xa8>
	}
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3740      	adds	r7, #64	@ 0x40
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq() * 2; // Timer clock inputs on the H7 are multiplied x2 from peripheral clock frequency, which this function reports.
 80017b2:	f006 fbc1 	bl	8007f38 <HAL_RCC_GetPCLK1Freq>
 80017b6:	4603      	mov	r3, r0
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 80017bc:	4b23      	ldr	r3, [pc, #140]	@ (800184c <calculate_sample_rate+0xa0>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <calculate_sample_rate+0xa0>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 80017c8:	4b20      	ldr	r3, [pc, #128]	@ (800184c <calculate_sample_rate+0xa0>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <calculate_sample_rate+0xa4>)
 80017d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d106      	bne.n	80017ec <calculate_sample_rate+0x40>
		ckd_factor = 2;
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017ea:	e007      	b.n	80017fc <calculate_sample_rate+0x50>
	} else if (ckd_value == 0b10) {
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d104      	bne.n	80017fc <calculate_sample_rate+0x50>
		ckd_factor = 4;
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <calculate_sample_rate+0xa8>)
 80017f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	ee07 3a90 	vmov	s15, r3
 8001804:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001808:	ed87 7b02 	vstr	d7, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8001816:	ed97 6b08 	vldr	d6, [r7, #32]
 800181a:	ed97 7b02 	vldr	d7, [r7, #8]
 800181e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001822:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001826:	ed87 7b00 	vstr	d7, [r7]
	return input_frequency / counter_period;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001834:	ed97 6b00 	vldr	d6, [r7]
 8001838:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800183c:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001840:	eeb0 0b47 	vmov.f64	d0, d7
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000324 	.word	0x24000324
 8001850:	3ff00000 	.word	0x3ff00000
 8001854:	40100000 	.word	0x40100000

08001858 <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d115      	bne.n	8001892 <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e00e      	b.n	800188a <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fb9c 	bl	8002fb0 <convert_command>
 8001878:	4603      	mov	r3, r0
 800187a:	4619      	mov	r1, r3
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <create_convert_sequence+0x70>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b1f      	cmp	r3, #31
 800188e:	dded      	ble.n	800186c <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 8001890:	e016      	b.n	80018c0 <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	e010      	b.n	80018ba <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fb84 	bl	8002fb0 <convert_command>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4619      	mov	r1, r3
 80018ac:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <create_convert_sequence+0x70>)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2b1f      	cmp	r3, #31
 80018be:	ddeb      	ble.n	8001898 <create_convert_sequence+0x40>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	240004c8 	.word	0x240004c8

080018cc <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	61fa      	str	r2, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	18d4      	adds	r4, r2, r3
 80018ec:	203f      	movs	r0, #63	@ 0x3f
 80018ee:	f001 fba2 	bl	8003036 <read_command>
 80018f2:	4603      	mov	r3, r0
 80018f4:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	61fa      	str	r2, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	18d4      	adds	r4, r2, r3
 8001902:	203f      	movs	r0, #63	@ 0x3f
 8001904:	f001 fb97 	bl	8003036 <read_command>
 8001908:	4603      	mov	r3, r0
 800190a:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 22; ++reg) {
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	e01d      	b.n	800194e <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d016      	beq.n	8001946 <create_command_list_RHD_register_config+0x7a>
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b06      	cmp	r3, #6
 800191c:	d013      	beq.n	8001946 <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	b2dd      	uxtb	r5, r3
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f001 f917 	bl	8002b58 <get_register_value>
 800192a:	4603      	mov	r3, r0
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	61fa      	str	r2, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	18d4      	adds	r4, r2, r3
 800193a:	4628      	mov	r0, r5
 800193c:	f001 fb5e 	bl	8002ffc <write_command>
 8001940:	4603      	mov	r3, r0
 8001942:	8023      	strh	r3, [r4, #0]
 8001944:	e000      	b.n	8001948 <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 8001946:	bf00      	nop
	for (int reg = 0; reg < 22; ++reg) {
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	3301      	adds	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b15      	cmp	r3, #21
 8001952:	ddde      	ble.n	8001912 <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	61fa      	str	r2, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	18d4      	adds	r4, r2, r3
 8001960:	203f      	movs	r0, #63	@ 0x3f
 8001962:	f001 fb68 	bl	8003036 <read_command>
 8001966:	4603      	mov	r3, r0
 8001968:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	61fa      	str	r2, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	18d4      	adds	r4, r2, r3
 8001976:	203e      	movs	r0, #62	@ 0x3e
 8001978:	f001 fb5d 	bl	8003036 <read_command>
 800197c:	4603      	mov	r3, r0
 800197e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	61fa      	str	r2, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	18d4      	adds	r4, r2, r3
 800198c:	203d      	movs	r0, #61	@ 0x3d
 800198e:	f001 fb52 	bl	8003036 <read_command>
 8001992:	4603      	mov	r3, r0
 8001994:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	61fa      	str	r2, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	18d4      	adds	r4, r2, r3
 80019a2:	203c      	movs	r0, #60	@ 0x3c
 80019a4:	f001 fb47 	bl	8003036 <read_command>
 80019a8:	4603      	mov	r3, r0
 80019aa:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	61fa      	str	r2, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	18d4      	adds	r4, r2, r3
 80019b8:	203b      	movs	r0, #59	@ 0x3b
 80019ba:	f001 fb3c 	bl	8003036 <read_command>
 80019be:	4603      	mov	r3, r0
 80019c0:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	61fa      	str	r2, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	18d4      	adds	r4, r2, r3
 80019ce:	2030      	movs	r0, #48	@ 0x30
 80019d0:	f001 fb31 	bl	8003036 <read_command>
 80019d4:	4603      	mov	r3, r0
 80019d6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	61fa      	str	r2, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	18d4      	adds	r4, r2, r3
 80019e4:	2031      	movs	r0, #49	@ 0x31
 80019e6:	f001 fb26 	bl	8003036 <read_command>
 80019ea:	4603      	mov	r3, r0
 80019ec:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	61fa      	str	r2, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	18d4      	adds	r4, r2, r3
 80019fa:	2032      	movs	r0, #50	@ 0x32
 80019fc:	f001 fb1b 	bl	8003036 <read_command>
 8001a00:	4603      	mov	r3, r0
 8001a02:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	61fa      	str	r2, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	18d4      	adds	r4, r2, r3
 8001a10:	2033      	movs	r0, #51	@ 0x33
 8001a12:	f001 fb10 	bl	8003036 <read_command>
 8001a16:	4603      	mov	r3, r0
 8001a18:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	1c5a      	adds	r2, r3, #1
 8001a1e:	61fa      	str	r2, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	18d4      	adds	r4, r2, r3
 8001a26:	2034      	movs	r0, #52	@ 0x34
 8001a28:	f001 fb05 	bl	8003036 <read_command>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	61fa      	str	r2, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	18d4      	adds	r4, r2, r3
 8001a3c:	2035      	movs	r0, #53	@ 0x35
 8001a3e:	f001 fafa 	bl	8003036 <read_command>
 8001a42:	4603      	mov	r3, r0
 8001a44:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	61fa      	str	r2, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	18d4      	adds	r4, r2, r3
 8001a52:	2036      	movs	r0, #54	@ 0x36
 8001a54:	f001 faef 	bl	8003036 <read_command>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	61fa      	str	r2, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	18d4      	adds	r4, r2, r3
 8001a68:	2037      	movs	r0, #55	@ 0x37
 8001a6a:	f001 fae4 	bl	8003036 <read_command>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	61fa      	str	r2, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	18d4      	adds	r4, r2, r3
 8001a7e:	2028      	movs	r0, #40	@ 0x28
 8001a80:	f001 fad9 	bl	8003036 <read_command>
 8001a84:	4603      	mov	r3, r0
 8001a86:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	61fa      	str	r2, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	18d4      	adds	r4, r2, r3
 8001a94:	2029      	movs	r0, #41	@ 0x29
 8001a96:	f001 face 	bl	8003036 <read_command>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	61fa      	str	r2, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	18d4      	adds	r4, r2, r3
 8001aaa:	202a      	movs	r0, #42	@ 0x2a
 8001aac:	f001 fac3 	bl	8003036 <read_command>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	61fa      	str	r2, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	18d4      	adds	r4, r2, r3
 8001ac0:	202b      	movs	r0, #43	@ 0x2b
 8001ac2:	f001 fab8 	bl	8003036 <read_command>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	18d4      	adds	r4, r2, r3
 8001ad6:	202c      	movs	r0, #44	@ 0x2c
 8001ad8:	f001 faad 	bl	8003036 <read_command>
 8001adc:	4603      	mov	r3, r0
 8001ade:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 22; ++reg) {
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	e00f      	b.n	8001b06 <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	b2d9      	uxtb	r1, r3
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	61fa      	str	r2, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	18d4      	adds	r4, r2, r3
 8001af6:	4608      	mov	r0, r1
 8001af8:	f001 fa9d 	bl	8003036 <read_command>
 8001afc:	4603      	mov	r3, r0
 8001afe:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 22; ++reg) {
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b15      	cmp	r3, #21
 8001b0a:	ddec      	ble.n	8001ae6 <create_command_list_RHD_register_config+0x21a>
		// Note that registers 18-21 are only 'visible' on MISO B, so if register values are being used, be sure to use MISO B read values.
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00a      	beq.n	8001b28 <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	61fa      	str	r2, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	18d4      	adds	r4, r2, r3
 8001b1e:	f001 fa64 	bl	8002fea <calibrate_command>
 8001b22:	4603      	mov	r3, r0
 8001b24:	8023      	strh	r3, [r4, #0]
 8001b26:	e00a      	b.n	8001b3e <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	61fa      	str	r2, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	18d4      	adds	r4, r2, r3
 8001b34:	203f      	movs	r0, #63	@ 0x3f
 8001b36:	f001 fa7e 	bl	8003036 <read_command>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	8023      	strh	r3, [r4, #0]
	}

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	61fa      	str	r2, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	18d4      	adds	r4, r2, r3
 8001b4a:	203f      	movs	r0, #63	@ 0x3f
 8001b4c:	f001 fa73 	bl	8003036 <read_command>
 8001b50:	4603      	mov	r3, r0
 8001b52:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 64); ++i) {
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	e00d      	b.n	8001b76 <create_command_list_RHD_register_config+0x2aa>
		command_list[command_index++] = read_command(63);
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	61fa      	str	r2, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	18d4      	adds	r4, r2, r3
 8001b66:	203f      	movs	r0, #63	@ 0x3f
 8001b68:	f001 fa65 	bl	8003036 <read_command>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 64); ++i) {
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	3301      	adds	r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3b40      	subs	r3, #64	@ 0x40
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbec      	blt.n	8001b5a <create_command_list_RHD_register_config+0x28e>
	}
	return command_index;
 8001b80:	69fb      	ldr	r3, [r7, #28]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3720      	adds	r7, #32
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}

08001b8a <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	e00a      	b.n	8001bb8 <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	617a      	str	r2, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dbf0      	blt.n	8001ba2 <create_command_list_dummy+0x18>
	}

	return command_index;
 8001bc0:	697b      	ldr	r3, [r7, #20]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data_A = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	81fb      	strh	r3, [r7, #14]
	uint16_t dummy_data_B = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	81bb      	strh	r3, [r7, #12]
	send_receive_spi_command(tx_data, &dummy_data_A, &dummy_data_B);
 8001be0:	f107 020c 	add.w	r2, r7, #12
 8001be4:	f107 010e 	add.w	r1, r7, #14
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f804 	bl	8001bf8 <send_receive_spi_command>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained results correspond to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data_A, uint16_t *rx_data_B)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	81fb      	strh	r3, [r7, #14]
	uint32_t rx_data = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
	reception_in_progress = 1;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <send_receive_spi_command+0x6c>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]

#ifdef USE_HAL
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*) &rx_data, 1) != HAL_OK)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	4813      	ldr	r0, [pc, #76]	@ (8001c68 <send_receive_spi_command+0x70>)
 8001c1a:	f008 f9e1 	bl	8009fe0 <HAL_SPI_Receive_DMA>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <send_receive_spi_command+0x30>
	{
		Error_Handler();
 8001c24:	f7ff fb9c 	bl	8001360 <Error_Handler>
	}

	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*) &tx_data, 1) != HAL_OK)
 8001c28:	f107 030e 	add.w	r3, r7, #14
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480e      	ldr	r0, [pc, #56]	@ (8001c6c <send_receive_spi_command+0x74>)
 8001c32:	f008 f893 	bl	8009d5c <HAL_SPI_Transmit_DMA>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <send_receive_spi_command+0x48>
	{
		Error_Handler();
 8001c3c:	f7ff fb90 	bl	8001360 <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &rx_data, 1);
	begin_spi_tx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001c40:	bf00      	nop
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <send_receive_spi_command+0x6c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d0fa      	beq.n	8001c42 <send_receive_spi_command+0x4a>
	extract_ddr_words(rx_data, rx_data_A, rx_data_B);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fd1d 	bl	8001692 <extract_ddr_words>
	int32_t stall = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240008a5 	.word	0x240008a5
 8001c68:	2400008c 	.word	0x2400008c
 8001c6c:	24000114 	.word	0x24000114

08001c70 <HAL_SPI_RxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when Rx has completed.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if (hspi == &RECEIVE_SPI) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_SPI_RxCpltCallback+0x1c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_SPI_RxCpltCallback+0x14>
		spi_rx_cplt_callback();
 8001c80:	f7ff fcba 	bl	80015f8 <spi_rx_cplt_callback>
	}
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2400008c 	.word	0x2400008c

08001c90 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001c98:	f7ff fd16 	bl	80016c8 <spi_error_callback>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <HAL_UART_TxCpltCallback+0x1c>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	24000008 	.word	0x24000008

08001cc4 <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	0000      	movs	r0, r0
	...

08001ce8 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	ed2d 8b02 	vpush	{d8}
 8001cee:	b0b0      	sub	sp, #192	@ 0xc0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00c fc83 	bl	800e60c <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001d06:	2301      	movs	r3, #1
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d0c:	e033      	b.n	8001d76 <set_DSP_cutoff_freq+0x8e>
		double x = pow(2.0, (double) n);
 8001d0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001d1a:	eeb0 1b47 	vmov.f64	d1, d7
 8001d1e:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001d22:	f00c fe61 	bl	800e9e8 <pow>
 8001d26:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	ed93 8b00 	vldr	d8, [r3]
 8001d30:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8001d34:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001d38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d3c:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001d40:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001d44:	eeb0 0b45 	vmov.f64	d0, d5
 8001d48:	f00c fcee 	bl	800e728 <log>
 8001d4c:	eeb0 7b40 	vmov.f64	d7, d0
 8001d50:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001d54:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 8001e60 <set_DSP_cutoff_freq+0x178>
 8001d58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	33c0      	adds	r3, #192	@ 0xc0
 8001d64:	443b      	add	r3, r7
 8001d66:	3bb0      	subs	r3, #176	@ 0xb0
 8001d68:	ed83 7b00 	vstr	d7, [r3]
	for (int n = 1; n < 16; ++n) {
 8001d6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d70:	3301      	adds	r3, #1
 8001d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d7a:	2b0f      	cmp	r3, #15
 8001d7c:	ddc7      	ble.n	8001d0e <set_DSP_cutoff_freq+0x26>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8001d7e:	ed97 0b00 	vldr	d0, [r7]
 8001d82:	f00c fdc9 	bl	800e918 <log10>
 8001d86:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 8001d8a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d8e:	ed97 6b00 	vldr	d6, [r7]
 8001d92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	dd03      	ble.n	8001da4 <set_DSP_cutoff_freq+0xbc>
		p->DSP_cutoff_freq = 1;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001da2:	e049      	b.n	8001e38 <set_DSP_cutoff_freq+0x150>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 8001da4:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8001da8:	ed97 6b00 	vldr	d6, [r7]
 8001dac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	d503      	bpl.n	8001dbe <set_DSP_cutoff_freq+0xd6>
		p->DSP_cutoff_freq = 15;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	220f      	movs	r2, #15
 8001dba:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001dbc:	e03c      	b.n	8001e38 <set_DSP_cutoff_freq+0x150>
	} else {
		double min_log_diff = 10000000.0;
 8001dbe:	a32a      	add	r3, pc, #168	@ (adr r3, 8001e68 <set_DSP_cutoff_freq+0x180>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001dce:	e02f      	b.n	8001e30 <set_DSP_cutoff_freq+0x148>
			double log_f_cutoff = log10(f_cutoff[n]);
 8001dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	33c0      	adds	r3, #192	@ 0xc0
 8001dd8:	443b      	add	r3, r7
 8001dda:	3bb0      	subs	r3, #176	@ 0xb0
 8001ddc:	ed93 7b00 	vldr	d7, [r3]
 8001de0:	eeb0 0b47 	vmov.f64	d0, d7
 8001de4:	f00c fd98 	bl	800e918 <log10>
 8001de8:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 8001dec:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001df0:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001df4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001df8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dfc:	ed97 6b2c 	vldr	d6, [r7, #176]	@ 0xb0
 8001e00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	dd0d      	ble.n	8001e26 <set_DSP_cutoff_freq+0x13e>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 8001e0a:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001e0e:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001e12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001e16:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e1a:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0
				p->DSP_cutoff_freq = n;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001e24:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8001e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	ddcb      	ble.n	8001dd0 <set_DSP_cutoff_freq+0xe8>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	33c0      	adds	r3, #192	@ 0xc0
 8001e40:	443b      	add	r3, r7
 8001e42:	3bb0      	subs	r3, #176	@ 0xb0
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e4c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e50:	37c0      	adds	r7, #192	@ 0xc0
 8001e52:	46bd      	mov	sp, r7
 8001e54:	ecbd 8b02 	vpop	{d8}
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	f3af 8000 	nop.w
 8001e60:	54442d18 	.word	0x54442d18
 8001e64:	401921fb 	.word	0x401921fb
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	416312d0 	.word	0x416312d0

08001e70 <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d00e      	beq.n	8001ea0 <set_zcheck_scale+0x30>
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	dc10      	bgt.n	8001ea8 <set_zcheck_scale+0x38>
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <set_zcheck_scale+0x20>
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d004      	beq.n	8001e98 <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 8001e8e:	e00b      	b.n	8001ea8 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e96:	e007      	b.n	8001ea8 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e9e:	e003      	b.n	8001ea8 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001ea6:	bf00      	nop
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2301      	moveq	r3, #1
 8001ec8:	2300      	movne	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db05      	blt.n	8001efa <set_zcheck_channel+0x1c>
 8001eee:	f000 fce3 	bl	80028b8 <max_num_channels_per_chip>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	db02      	blt.n	8001f00 <set_zcheck_channel+0x22>
		return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001efe:	e004      	b.n	8001f0a <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	e008      	b.n	8001f32 <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	3228      	adds	r2, #40	@ 0x28
 8001f26:	2101      	movs	r1, #1
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	f000 fcc1 	bl	80028b8 <max_num_channels_per_chip>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dbf0      	blt.n	8001f20 <power_up_all_amps+0xe>
	}
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b0a6      	sub	sp, #152	@ 0x98
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 8001f54:	a3a1      	add	r3, pc, #644	@ (adr r3, 80021dc <set_upper_bandwidth+0x294>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	4b9b      	ldr	r3, [pc, #620]	@ (80021d0 <set_upper_bandwidth+0x288>)
 8001f64:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8001f68:	a393      	add	r3, pc, #588	@ (adr r3, 80021b8 <set_upper_bandwidth+0x270>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 8001f72:	233f      	movs	r3, #63	@ 0x3f
 8001f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 8001f76:	231f      	movs	r3, #31
 8001f78:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 8001f7a:	a391      	add	r3, pc, #580	@ (adr r3, 80021c0 <set_upper_bandwidth+0x278>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b92      	ldr	r3, [pc, #584]	@ (80021d4 <set_upper_bandwidth+0x28c>)
 8001f8a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b91      	ldr	r3, [pc, #580]	@ (80021d8 <set_upper_bandwidth+0x290>)
 8001f94:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 8001f98:	233f      	movs	r3, #63	@ 0x3f
 8001f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 8001f9c:	231f      	movs	r3, #31
 8001f9e:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 8001fa0:	ed97 7b00 	vldr	d7, [r7]
 8001fa4:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 80021c8 <set_upper_bandwidth+0x280>
 8001fa8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	dd04      	ble.n	8001fbc <set_upper_bandwidth+0x74>
		upper_bandwidth = 30000.0;
 8001fb2:	a385      	add	r3, pc, #532	@ (adr r3, 80021c8 <set_upper_bandwidth+0x280>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 8001fbc:	ed97 0b00 	vldr	d0, [r7]
 8001fc0:	f000 f9ee 	bl	80023a0 <rH1_from_upper_bandwidth>
 8001fc4:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 8001fd8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fdc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001fe6:	e028      	b.n	800203a <set_upper_bandwidth+0xf2>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 8001fe8:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8001fec:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001ff0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ff4:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8001ff8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ffc:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8002000:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002004:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002008:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	d50e      	bpl.n	8002030 <set_upper_bandwidth+0xe8>
			rH1_actual += RH1Dac2Unit;
 8002012:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002016:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800201a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800201e:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8002030:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002034:	3301      	adds	r3, #1
 8002036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800203a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800203e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002040:	429a      	cmp	r2, r3
 8002042:	dbd1      	blt.n	8001fe8 <set_upper_bandwidth+0xa0>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800204a:	e024      	b.n	8002096 <set_upper_bandwidth+0x14e>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 800204c:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8002050:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8002054:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002058:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 800205c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002060:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	d50e      	bpl.n	800208c <set_upper_bandwidth+0x144>
			rH1_actual += RH1Dac1Unit;
 800206e:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002072:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8002076:	ee36 7b07 	vadd.f64	d7, d6, d7
 800207a:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 800208c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002090:	3301      	adds	r3, #1
 8002092:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002096:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800209a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800209c:	429a      	cmp	r2, r3
 800209e:	dbd5      	blt.n	800204c <set_upper_bandwidth+0x104>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 80020a0:	ed97 0b00 	vldr	d0, [r7]
 80020a4:	f000 f9c0 	bl	8002428 <rH2_from_upper_bandwidth>
 80020a8:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 80020bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020c0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020c8:	e026      	b.n	8002118 <set_upper_bandwidth+0x1d0>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 80020ca:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80020ce:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80020d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020d6:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 80020da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020de:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80020e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020e6:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	d50e      	bpl.n	8002112 <set_upper_bandwidth+0x1ca>
			rH2_actual += RH2Dac2Unit;
 80020f4:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020f8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80020fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002100:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8002112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002114:	3301      	adds	r3, #1
 8002116:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002118:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800211a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800211c:	429a      	cmp	r2, r3
 800211e:	dbd4      	blt.n	80020ca <set_upper_bandwidth+0x182>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002120:	2300      	movs	r3, #0
 8002122:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002124:	e022      	b.n	800216c <set_upper_bandwidth+0x224>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 8002126:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800212a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800212e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002132:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8002136:	ee36 7b47 	vsub.f64	d7, d6, d7
 800213a:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 800213e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	d50e      	bpl.n	8002166 <set_upper_bandwidth+0x21e>
			rH2_actual += RH2Dac1Unit;
 8002148:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 800214c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002150:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002154:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002168:	3301      	adds	r3, #1
 800216a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800216c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800216e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002170:	429a      	cmp	r2, r3
 8002172:	dbd8      	blt.n	8002126 <set_upper_bandwidth+0x1de>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 8002174:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8002178:	f000 fa2a 	bl	80025d0 <upper_bandwidth_from_rH1>
 800217c:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 8002180:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002184:	f000 fa88 	bl	8002698 <upper_bandwidth_from_rH2>
 8002188:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 800218c:	ed97 6b08 	vldr	d6, [r7, #32]
 8002190:	ed97 7b06 	vldr	d7, [r7, #24]
 8002194:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002198:	eeb0 0b47 	vmov.f64	d0, d7
 800219c:	f00c fe74 	bl	800ee88 <sqrt>
 80021a0:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 80021a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80021ac:	eeb0 0b47 	vmov.f64	d0, d7
 80021b0:	3798      	adds	r7, #152	@ 0x98
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00000000 	.word	0x00000000
 80021bc:	40dcb600 	.word	0x40dcb600
 80021c0:	00000000 	.word	0x00000000
 80021c4:	40c0fe00 	.word	0x40c0fe00
 80021c8:	00000000 	.word	0x00000000
 80021cc:	40dd4c00 	.word	0x40dd4c00
 80021d0:	4082c000 	.word	0x4082c000
 80021d4:	4087d800 	.word	0x4087d800
 80021d8:	40e2c000 	.word	0x40e2c000
 80021dc:	00000000 	.word	0x00000000
 80021e0:	40a13000 	.word	0x40a13000
 80021e4:	00000000 	.word	0x00000000

080021e8 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b096      	sub	sp, #88	@ 0x58
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 80021f4:	a362      	add	r3, pc, #392	@ (adr r3, 8002380 <set_lower_bandwidth+0x198>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 80021fe:	a362      	add	r3, pc, #392	@ (adr r3, 8002388 <set_lower_bandwidth+0x1a0>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 8002208:	a361      	add	r3, pc, #388	@ (adr r3, 8002390 <set_lower_bandwidth+0x1a8>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 8002212:	a361      	add	r3, pc, #388	@ (adr r3, 8002398 <set_lower_bandwidth+0x1b0>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 800221c:	237f      	movs	r3, #127	@ 0x7f
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 8002220:	233f      	movs	r3, #63	@ 0x3f
 8002222:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 8002224:	ed97 7b00 	vldr	d7, [r7]
 8002228:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8002370 <set_lower_bandwidth+0x188>
 800222c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	dd04      	ble.n	8002240 <set_lower_bandwidth+0x58>
    	lower_bandwidth = 1500.0;
 8002236:	a34e      	add	r3, pc, #312	@ (adr r3, 8002370 <set_lower_bandwidth+0x188>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 8002240:	ed97 0b00 	vldr	d0, [r7]
 8002244:	f000 f934 	bl	80024b0 <rL_from_lower_bandwidth>
 8002248:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 8002264:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002268:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 800226c:	ed97 7b00 	vldr	d7, [r7]
 8002270:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002378 <set_lower_bandwidth+0x190>
 8002274:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	d50e      	bpl.n	800229c <set_lower_bandwidth+0xb4>
    	rL_actual += RLDac3Unit;
 800227e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002282:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002286:	ee36 7b07 	vadd.f64	d7, d6, d7
 800228a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 800229c:	2300      	movs	r3, #0
 800229e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a0:	e026      	b.n	80022f0 <set_lower_bandwidth+0x108>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 80022a2:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80022a6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80022aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022ae:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 80022b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022b6:	ed97 6b06 	vldr	d6, [r7, #24]
 80022ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022be:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80022c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	d50e      	bpl.n	80022ea <set_lower_bandwidth+0x102>
    		rL_actual += RLDac2Unit;
 80022cc:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80022d0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80022d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022d8:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 80022ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ec:	3301      	adds	r3, #1
 80022ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbd4      	blt.n	80022a2 <set_lower_bandwidth+0xba>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022fc:	e022      	b.n	8002344 <set_lower_bandwidth+0x15c>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 80022fe:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8002302:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8002306:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800230a:	ed97 6b06 	vldr	d6, [r7, #24]
 800230e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002312:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002316:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d50e      	bpl.n	800233e <set_lower_bandwidth+0x156>
    		rL_actual += RLDac1Unit;
 8002320:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002324:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8002328:	ee36 7b07 	vadd.f64	d7, d6, d7
 800232c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 800233e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002340:	3301      	adds	r3, #1
 8002342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	429a      	cmp	r2, r3
 800234a:	dbd8      	blt.n	80022fe <set_lower_bandwidth+0x116>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 800234c:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002350:	f000 fa06 	bl	8002760 <lower_bandwidth_from_rL>
 8002354:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 8002358:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800235c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002360:	eeb0 0b47 	vmov.f64	d0, d7
 8002364:	3758      	adds	r7, #88	@ 0x58
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	00000000 	.word	0x00000000
 8002374:	40977000 	.word	0x40977000
 8002378:	33333333 	.word	0x33333333
 800237c:	3fc33333 	.word	0x3fc33333
 8002380:	00000000 	.word	0x00000000
 8002384:	40ab5800 	.word	0x40ab5800
 8002388:	00000000 	.word	0x00000000
 800238c:	4065e000 	.word	0x4065e000
 8002390:	00000000 	.word	0x00000000
 8002394:	40c8ce00 	.word	0x40c8ce00
 8002398:	00000000 	.word	0x00000000
 800239c:	4146e360 	.word	0x4146e360

080023a0 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 80023aa:	ed97 0b00 	vldr	d0, [r7]
 80023ae:	f00c fab3 	bl	800e918 <log10>
 80023b2:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 80023b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023ba:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002408 <rH1_from_upper_bandwidth+0x68>
 80023be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023c2:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002410 <rH1_from_upper_bandwidth+0x70>
 80023c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80023ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80023ce:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002418 <rH1_from_upper_bandwidth+0x78>
 80023d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80023d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023e2:	eeb0 1b47 	vmov.f64	d1, d7
 80023e6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80023ea:	f00c fafd 	bl	800e9e8 <pow>
 80023ee:	eeb0 7b40 	vmov.f64	d7, d0
 80023f2:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002420 <rH1_from_upper_bandwidth+0x80>
 80023f6:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 80023fa:	eeb0 0b47 	vmov.f64	d0, d7
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	94467382 	.word	0x94467382
 800240c:	3ff306f6 	.word	0x3ff306f6
 8002410:	c504816f 	.word	0xc504816f
 8002414:	4020318f 	.word	0x4020318f
 8002418:	c60029f1 	.word	0xc60029f1
 800241c:	3fa86833 	.word	0x3fa86833
 8002420:	e5604189 	.word	0xe5604189
 8002424:	3fef22d0 	.word	0x3fef22d0

08002428 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 8002432:	ed97 0b00 	vldr	d0, [r7]
 8002436:	f00c fa6f 	bl	800e918 <log10>
 800243a:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 800243e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002442:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002490 <rH2_from_upper_bandwidth+0x68>
 8002446:	ee27 7b06 	vmul.f64	d7, d7, d6
 800244a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002498 <rH2_from_upper_bandwidth+0x70>
 800244e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002452:	ed97 7b02 	vldr	d7, [r7, #8]
 8002456:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80024a0 <rH2_from_upper_bandwidth+0x78>
 800245a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800245e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002462:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002466:	ee36 7b07 	vadd.f64	d7, d6, d7
 800246a:	eeb0 1b47 	vmov.f64	d1, d7
 800246e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002472:	f00c fab9 	bl	800e9e8 <pow>
 8002476:	eeb0 7b40 	vmov.f64	d7, d0
 800247a:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80024a8 <rH2_from_upper_bandwidth+0x80>
 800247e:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 8002482:	eeb0 0b47 	vmov.f64	d0, d7
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	16f0068e 	.word	0x16f0068e
 8002494:	3ff15048 	.word	0x3ff15048
 8002498:	2a305532 	.word	0x2a305532
 800249c:	402033a9 	.word	0x402033a9
 80024a0:	6f3f52fc 	.word	0x6f3f52fc
 80024a4:	3fa1522a 	.word	0x3fa1522a
 80024a8:	cd35a858 	.word	0xcd35a858
 80024ac:	3ff04e3b 	.word	0x3ff04e3b

080024b0 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 80024ba:	ed97 0b00 	vldr	d0, [r7]
 80024be:	f00c fa2b 	bl	800e918 <log10>
 80024c2:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 80024c6:	ed97 7b00 	vldr	d7, [r7]
 80024ca:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 80024ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	d532      	bpl.n	800253e <rL_from_lower_bandwidth+0x8e>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80024d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80024dc:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002590 <rL_from_lower_bandwidth+0xe0>
 80024e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024e4:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002598 <rL_from_lower_bandwidth+0xe8>
 80024e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80024ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80024f0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80025a0 <rL_from_lower_bandwidth+0xf0>
 80024f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80024f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80024fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002500:	ee36 6b07 	vadd.f64	d6, d6, d7
            0.1442 * log10f * log10f * log10f));
 8002504:	ed97 7b02 	vldr	d7, [r7, #8]
 8002508:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80025a8 <rL_from_lower_bandwidth+0xf8>
 800250c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002510:	ed97 7b02 	vldr	d7, [r7, #8]
 8002514:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002518:	ed97 7b02 	vldr	d7, [r7, #8]
 800251c:	ee25 7b07 	vmul.f64	d7, d5, d7
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 8002520:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002524:	eeb0 1b47 	vmov.f64	d1, d7
 8002528:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800252c:	f00c fa5c 	bl	800e9e8 <pow>
 8002530:	eeb0 7b40 	vmov.f64	d7, d0
 8002534:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80025b0 <rL_from_lower_bandwidth+0x100>
 8002538:	ee27 7b06 	vmul.f64	d7, d7, d6
 800253c:	e021      	b.n	8002582 <rL_from_lower_bandwidth+0xd2>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 800253e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002542:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80025b8 <rL_from_lower_bandwidth+0x108>
 8002546:	ee27 7b06 	vmul.f64	d7, d7, d6
 800254a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80025c0 <rL_from_lower_bandwidth+0x110>
 800254e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002552:	ed97 7b02 	vldr	d7, [r7, #8]
 8002556:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80025c8 <rL_from_lower_bandwidth+0x118>
 800255a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800255e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002562:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002566:	ee36 7b07 	vadd.f64	d7, d6, d7
 800256a:	eeb0 1b47 	vmov.f64	d1, d7
 800256e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002572:	f00c fa39 	bl	800e9e8 <pow>
 8002576:	eeb0 7b40 	vmov.f64	d7, d0
 800257a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80025b0 <rL_from_lower_bandwidth+0x100>
 800257e:	ee27 7b06 	vmul.f64	d7, d7, d6
    }
}
 8002582:	eeb0 0b47 	vmov.f64	d0, d7
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	f3af 8000 	nop.w
 8002590:	ab367a10 	.word	0xab367a10
 8002594:	3ff3573e 	.word	0x3ff3573e
 8002598:	6e2eb1c4 	.word	0x6e2eb1c4
 800259c:	4013c1a3 	.word	0x4013c1a3
 80025a0:	35a85879 	.word	0x35a85879
 80025a4:	3fe23bcd 	.word	0x3fe23bcd
 80025a8:	460aa64c 	.word	0x460aa64c
 80025ac:	3fc27525 	.word	0x3fc27525
 80025b0:	504816f0 	.word	0x504816f0
 80025b4:	3ff018fc 	.word	0x3ff018fc
 80025b8:	1f8a0903 	.word	0x1f8a0903
 80025bc:	3fe2ee63 	.word	0x3fe2ee63
 80025c0:	0ded288d 	.word	0x0ded288d
 80025c4:	4012f0be 	.word	0x4012f0be
 80025c8:	760bf5d8 	.word	0x760bf5d8
 80025cc:	3fb5b6c3 	.word	0x3fb5b6c3

080025d0 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	ed2d 8b02 	vpush	{d8}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 80025de:	a32a      	add	r3, pc, #168	@ (adr r3, 8002688 <upper_bandwidth_from_rH1+0xb8>)
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 80025e8:	a329      	add	r3, pc, #164	@ (adr r3, 8002690 <upper_bandwidth_from_rH1+0xc0>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 80025f2:	ed97 7b00 	vldr	d7, [r7]
 80025f6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002678 <upper_bandwidth_from_rH1+0xa8>
 80025fa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025fe:	eeb0 0b46 	vmov.f64	d0, d6
 8002602:	f00c f989 	bl	800e918 <log10>
 8002606:	eeb0 7b40 	vmov.f64	d7, d0
 800260a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002680 <upper_bandwidth_from_rH1+0xb0>
 800260e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002612:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 8002616:	ed97 7b04 	vldr	d7, [r7, #16]
 800261a:	eeb1 8b47 	vneg.f64	d8, d7
 800261e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002622:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002626:	ed97 7b06 	vldr	d7, [r7, #24]
 800262a:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 800262e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002632:	ed97 7b02 	vldr	d7, [r7, #8]
 8002636:	ee25 7b07 	vmul.f64	d7, d5, d7
 800263a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800263e:	eeb0 0b47 	vmov.f64	d0, d7
 8002642:	f00c fc21 	bl	800ee88 <sqrt>
 8002646:	eeb0 7b40 	vmov.f64	d7, d0
 800264a:	ee38 6b47 	vsub.f64	d6, d8, d7
 800264e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002652:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002656:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800265a:	eeb0 1b45 	vmov.f64	d1, d5
 800265e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002662:	f00c f9c1 	bl	800e9e8 <pow>
 8002666:	eeb0 7b40 	vmov.f64	d7, d0
}
 800266a:	eeb0 0b47 	vmov.f64	d0, d7
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	ecbd 8b02 	vpop	{d8}
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e5604189 	.word	0xe5604189
 800267c:	3fef22d0 	.word	0x3fef22d0
 8002680:	c504816f 	.word	0xc504816f
 8002684:	4020318f 	.word	0x4020318f
 8002688:	c60029f1 	.word	0xc60029f1
 800268c:	3fa86833 	.word	0x3fa86833
 8002690:	94467382 	.word	0x94467382
 8002694:	bff306f6 	.word	0xbff306f6

08002698 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	ed2d 8b02 	vpush	{d8}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 80026a6:	a32a      	add	r3, pc, #168	@ (adr r3, 8002750 <upper_bandwidth_from_rH2+0xb8>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 80026b0:	a329      	add	r3, pc, #164	@ (adr r3, 8002758 <upper_bandwidth_from_rH2+0xc0>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 80026ba:	ed97 7b00 	vldr	d7, [r7]
 80026be:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002740 <upper_bandwidth_from_rH2+0xa8>
 80026c2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80026c6:	eeb0 0b46 	vmov.f64	d0, d6
 80026ca:	f00c f925 	bl	800e918 <log10>
 80026ce:	eeb0 7b40 	vmov.f64	d7, d0
 80026d2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002748 <upper_bandwidth_from_rH2+0xb0>
 80026d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026da:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 80026de:	ed97 7b04 	vldr	d7, [r7, #16]
 80026e2:	eeb1 8b47 	vneg.f64	d8, d7
 80026e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80026ea:	ee27 6b07 	vmul.f64	d6, d7, d7
 80026ee:	ed97 7b06 	vldr	d7, [r7, #24]
 80026f2:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80026f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026fa:	ed97 7b02 	vldr	d7, [r7, #8]
 80026fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002702:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002706:	eeb0 0b47 	vmov.f64	d0, d7
 800270a:	f00c fbbd 	bl	800ee88 <sqrt>
 800270e:	eeb0 7b40 	vmov.f64	d7, d0
 8002712:	ee38 6b47 	vsub.f64	d6, d8, d7
 8002716:	ed97 7b06 	vldr	d7, [r7, #24]
 800271a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800271e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002722:	eeb0 1b45 	vmov.f64	d1, d5
 8002726:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800272a:	f00c f95d 	bl	800e9e8 <pow>
 800272e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8002732:	eeb0 0b47 	vmov.f64	d0, d7
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	ecbd 8b02 	vpop	{d8}
 800273e:	bd80      	pop	{r7, pc}
 8002740:	cd35a858 	.word	0xcd35a858
 8002744:	3ff04e3b 	.word	0x3ff04e3b
 8002748:	2a305532 	.word	0x2a305532
 800274c:	402033a9 	.word	0x402033a9
 8002750:	6f3f52fc 	.word	0x6f3f52fc
 8002754:	3fa1522a 	.word	0x3fa1522a
 8002758:	16f0068e 	.word	0x16f0068e
 800275c:	bff15048 	.word	0xbff15048

08002760 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	ed2d 8b02 	vpush	{d8}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 800276e:	ed97 7b00 	vldr	d7, [r7]
 8002772:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8002870 <lower_bandwidth_from_rL+0x110>
 8002776:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	d504      	bpl.n	800278a <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002780:	a33b      	add	r3, pc, #236	@ (adr r3, 8002870 <lower_bandwidth_from_rL+0x110>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 800278a:	ed97 7b00 	vldr	d7, [r7]
 800278e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8002878 <lower_bandwidth_from_rL+0x118>
 8002792:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	d51c      	bpl.n	80027d6 <lower_bandwidth_from_rL+0x76>
        a = 0.08482;
 800279c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002898 <lower_bandwidth_from_rL+0x138>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 80027a6:	a33e      	add	r3, pc, #248	@ (adr r3, 80028a0 <lower_bandwidth_from_rL+0x140>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 80027b0:	ed97 7b00 	vldr	d7, [r7]
 80027b4:	ed9f 5b32 	vldr	d5, [pc, #200]	@ 8002880 <lower_bandwidth_from_rL+0x120>
 80027b8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80027bc:	eeb0 0b46 	vmov.f64	d0, d6
 80027c0:	f00c f8aa 	bl	800e918 <log10>
 80027c4:	eeb0 7b40 	vmov.f64	d7, d0
 80027c8:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002888 <lower_bandwidth_from_rL+0x128>
 80027cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027d0:	ed87 7b02 	vstr	d7, [r7, #8]
 80027d4:	e01b      	b.n	800280e <lower_bandwidth_from_rL+0xae>
    } else {
        a = 0.3303;
 80027d6:	a334      	add	r3, pc, #208	@ (adr r3, 80028a8 <lower_bandwidth_from_rL+0x148>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 80027e0:	a333      	add	r3, pc, #204	@ (adr r3, 80028b0 <lower_bandwidth_from_rL+0x150>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 80027ea:	ed97 7b00 	vldr	d7, [r7]
 80027ee:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8002880 <lower_bandwidth_from_rL+0x120>
 80027f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80027f6:	eeb0 0b46 	vmov.f64	d0, d6
 80027fa:	f00c f88d 	bl	800e918 <log10>
 80027fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002802:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002890 <lower_bandwidth_from_rL+0x130>
 8002806:	ee36 7b47 	vsub.f64	d7, d6, d7
 800280a:	ed87 7b02 	vstr	d7, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 800280e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002812:	eeb1 8b47 	vneg.f64	d8, d7
 8002816:	ed97 7b04 	vldr	d7, [r7, #16]
 800281a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800281e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002822:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 8002826:	ee27 5b05 	vmul.f64	d5, d7, d5
 800282a:	ed97 7b02 	vldr	d7, [r7, #8]
 800282e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002832:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002836:	eeb0 0b47 	vmov.f64	d0, d7
 800283a:	f00c fb25 	bl	800ee88 <sqrt>
 800283e:	eeb0 7b40 	vmov.f64	d7, d0
 8002842:	ee38 6b47 	vsub.f64	d6, d8, d7
 8002846:	ed97 7b06 	vldr	d7, [r7, #24]
 800284a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800284e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002852:	eeb0 1b45 	vmov.f64	d1, d5
 8002856:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800285a:	f00c f8c5 	bl	800e9e8 <pow>
 800285e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8002862:	eeb0 0b47 	vmov.f64	d0, d7
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	ecbd 8b02 	vpop	{d8}
 800286e:	bd80      	pop	{r7, pc}
 8002870:	00000000 	.word	0x00000000
 8002874:	40b3ec00 	.word	0x40b3ec00
 8002878:	00000000 	.word	0x00000000
 800287c:	40dd4c00 	.word	0x40dd4c00
 8002880:	504816f0 	.word	0x504816f0
 8002884:	3ff018fc 	.word	0x3ff018fc
 8002888:	0ded288d 	.word	0x0ded288d
 800288c:	4012f0be 	.word	0x4012f0be
 8002890:	c56d5cfb 	.word	0xc56d5cfb
 8002894:	4013f2fe 	.word	0x4013f2fe
 8002898:	760bf5d8 	.word	0x760bf5d8
 800289c:	3fb5b6c3 	.word	0x3fb5b6c3
 80028a0:	1f8a0903 	.word	0x1f8a0903
 80028a4:	bfe2ee63 	.word	0xbfe2ee63
 80028a8:	9c779a6b 	.word	0x9c779a6b
 80028ac:	3fd523a2 	.word	0x3fd523a2
 80028b0:	f5c28f5c 	.word	0xf5c28f5c
 80028b4:	bff35c28 	.word	0xbff35c28

080028b8 <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	return 64;
 80028bc:	2340      	movs	r3, #64	@ 0x40
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2203      	movs	r2, #3
 80028d4:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	p->amp_vref_enable = 1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2203      	movs	r2, #3
 80028e8:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f103 021c 	add.w	r2, r3, #28
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0120 	add.w	r1, r3, #32
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	ed93 7b00 	vldr	d7, [r3]
 8002908:	eeb0 0b47 	vmov.f64	d0, d7
 800290c:	4610      	mov	r0, r2
 800290e:	f000 f863 	bl	80029d8 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff f9ca 	bl	8001cc4 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002948:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff f9cb 	bl	8001ce8 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 800295e:	2100      	movs	r1, #0
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fa85 	bl	8001e70 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 800296c:	2100      	movs	r1, #0
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff faa0 	bl	8001eb4 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 800297a:	2100      	movs	r1, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff faae 	bl	8001ede <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 80029a8:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 80029d0 <set_default_rhd_settings+0x108>
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff facb 	bl	8001f48 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 80029b2:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fc16 	bl	80021e8 <set_lower_bandwidth>
	// R[17]D[7:0]: apwr[31:0]
	// R[18]D[7:0] = apwr[39:32]
	// R[19]D[7:0] = apwr[47:40]
	// R[20]D[7:0] = apwr[55:48]
	// R[21]D[7:0] = apwr[63:56]
	power_up_all_amps(p);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff faa8 	bl	8001f12 <power_up_all_amps>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40bd4c00 	.word	0x40bd4c00

080029d8 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 80029e6:	ed97 7b00 	vldr	d7, [r7]
 80029ea:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8002b10 <set_biases_based_on_sample_rate+0x138>
 80029ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029f2:	ed87 7b04 	vstr	d7, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 80029f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029fa:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8002b18 <set_biases_based_on_sample_rate+0x140>
 80029fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d806      	bhi.n	8002a16 <set_biases_based_on_sample_rate+0x3e>
		*adc_buffer_bias = 32;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2228      	movs	r2, #40	@ 0x28
 8002a12:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 8002a14:	e075      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 140000.0) {
 8002a16:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a1a:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002b20 <set_biases_based_on_sample_rate+0x148>
 8002a1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	d806      	bhi.n	8002a36 <set_biases_based_on_sample_rate+0x5e>
		*adc_buffer_bias = 16;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2228      	movs	r2, #40	@ 0x28
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	e065      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 175000.0) {
 8002a36:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8002b28 <set_biases_based_on_sample_rate+0x150>
 8002a3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d806      	bhi.n	8002a56 <set_biases_based_on_sample_rate+0x7e>
		*adc_buffer_bias = 8;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2228      	movs	r2, #40	@ 0x28
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	e055      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 220000.0) {
 8002a56:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a5a:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8002b30 <set_biases_based_on_sample_rate+0x158>
 8002a5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d806      	bhi.n	8002a76 <set_biases_based_on_sample_rate+0x9e>
		*adc_buffer_bias = 8;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2220      	movs	r2, #32
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	e045      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 280000.0) {
 8002a76:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7a:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002b38 <set_biases_based_on_sample_rate+0x160>
 8002a7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	d806      	bhi.n	8002a96 <set_biases_based_on_sample_rate+0xbe>
		*adc_buffer_bias = 8;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	221a      	movs	r2, #26
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	e035      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 350000.0) {
 8002a96:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a9a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8002b40 <set_biases_based_on_sample_rate+0x168>
 8002a9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	d806      	bhi.n	8002ab6 <set_biases_based_on_sample_rate+0xde>
		*adc_buffer_bias = 4;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2212      	movs	r2, #18
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	e025      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 440000.0) {
 8002ab6:	ed97 7b04 	vldr	d7, [r7, #16]
 8002aba:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002b48 <set_biases_based_on_sample_rate+0x170>
 8002abe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d806      	bhi.n	8002ad6 <set_biases_based_on_sample_rate+0xfe>
		*adc_buffer_bias = 3;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2203      	movs	r2, #3
 8002acc:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	601a      	str	r2, [r3, #0]
}
 8002ad4:	e015      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 525000.0) {
 8002ad6:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ada:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002b50 <set_biases_based_on_sample_rate+0x178>
 8002ade:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d806      	bhi.n	8002af6 <set_biases_based_on_sample_rate+0x11e>
		*adc_buffer_bias = 3;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2207      	movs	r2, #7
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	e005      	b.n	8002b02 <set_biases_based_on_sample_rate+0x12a>
		*adc_buffer_bias = 2;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2204      	movs	r2, #4
 8002b00:	601a      	str	r2, [r3, #0]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	00000000 	.word	0x00000000
 8002b14:	40418000 	.word	0x40418000
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	40fd4c00 	.word	0x40fd4c00
 8002b20:	00000000 	.word	0x00000000
 8002b24:	41011700 	.word	0x41011700
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	41055cc0 	.word	0x41055cc0
 8002b30:	00000000 	.word	0x00000000
 8002b34:	410adb00 	.word	0x410adb00
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	41111700 	.word	0x41111700
 8002b40:	00000000 	.word	0x00000000
 8002b44:	41155cc0 	.word	0x41155cc0
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	411adb00 	.word	0x411adb00
 8002b50:	00000000 	.word	0x00000000
 8002b54:	41200590 	.word	0x41200590

08002b58 <get_register_value>:


// Return the value of a selected RAM register (0-21) on the RHD2164 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b15      	cmp	r3, #21
 8002b6a:	f200 8217 	bhi.w	8002f9c <get_register_value+0x444>
 8002b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <get_register_value+0x1c>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002bcd 	.word	0x08002bcd
 8002b78:	08002bf7 	.word	0x08002bf7
 8002b7c:	08002c07 	.word	0x08002c07
 8002b80:	08002c0f 	.word	0x08002c0f
 8002b84:	08002c3f 	.word	0x08002c3f
 8002b88:	08002c67 	.word	0x08002c67
 8002b8c:	08002c97 	.word	0x08002c97
 8002b90:	08002c9d 	.word	0x08002c9d
 8002b94:	08002ca5 	.word	0x08002ca5
 8002b98:	08002cb7 	.word	0x08002cb7
 8002b9c:	08002cc9 	.word	0x08002cc9
 8002ba0:	08002cdb 	.word	0x08002cdb
 8002ba4:	08002ced 	.word	0x08002ced
 8002ba8:	08002cff 	.word	0x08002cff
 8002bac:	08002d1d 	.word	0x08002d1d
 8002bb0:	08002d6d 	.word	0x08002d6d
 8002bb4:	08002dbd 	.word	0x08002dbd
 8002bb8:	08002e0d 	.word	0x08002e0d
 8002bbc:	08002e5d 	.word	0x08002e5d
 8002bc0:	08002ead 	.word	0x08002ead
 8002bc4:	08002efd 	.word	0x08002efd
 8002bc8:	08002f4d 	.word	0x08002f4d
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	019a      	lsls	r2, r3, #6
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002bd8:	015b      	lsls	r3, r3, #5
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002bea:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002bf0:	4413      	add	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
		break;
 8002bf4:	e1d4      	b.n	8002fa0 <get_register_value+0x448>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	019a      	lsls	r2, r3, #6
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
		break;
 8002c04:	e1cc      	b.n	8002fa0 <get_register_value+0x448>

	case 2:
		regout = p->mux_bias;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	60fb      	str	r3, [r7, #12]
		break;
 8002c0c:	e1c8      	b.n	8002fa0 <get_register_value+0x448>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	441a      	add	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	441a      	add	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002c32:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002c38:	4413      	add	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
		break;
 8002c3c:	e1b0      	b.n	8002fa0 <get_register_value+0x448>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	01da      	lsls	r2, r3, #7
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	441a      	add	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c50:	015b      	lsls	r3, r3, #5
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002c60:	4413      	add	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
		break;
 8002c64:	e19c      	b.n	8002fa0 <get_register_value+0x448>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6a:	019a      	lsls	r2, r3, #6
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c82:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c90:	4413      	add	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
		break;
 8002c94:	e184      	b.n	8002fa0 <get_register_value+0x448>

	case 6:
		regout = ZcheckDac;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	60fb      	str	r3, [r7, #12]
		break;
 8002c9a:	e181      	b.n	8002fa0 <get_register_value+0x448>

	case 7:
		regout = p->zcheck_select;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ca0:	60fb      	str	r3, [r7, #12]
		break;
 8002ca2:	e17d      	b.n	8002fa0 <get_register_value+0x448>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ca8:	01da      	lsls	r2, r3, #7
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb0:	4413      	add	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
		break;
 8002cb4:	e174      	b.n	8002fa0 <get_register_value+0x448>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cba:	01da      	lsls	r2, r3, #7
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
		break;
 8002cc6:	e16b      	b.n	8002fa0 <get_register_value+0x448>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ccc:	01da      	lsls	r2, r3, #7
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
		break;
 8002cd8:	e162      	b.n	8002fa0 <get_register_value+0x448>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cde:	01da      	lsls	r2, r3, #7
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
		break;
 8002cea:	e159      	b.n	8002fa0 <get_register_value+0x448>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf0:	01da      	lsls	r2, r3, #7
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
		break;
 8002cfc:	e150      	b.n	8002fa0 <get_register_value+0x448>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d04:	01da      	lsls	r2, r3, #7
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d16:	4413      	add	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
		break;
 8002d1a:	e141      	b.n	8002fa0 <get_register_value+0x448>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002d22:	01da      	lsls	r2, r3, #7
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d2a:	019b      	lsls	r3, r3, #6
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d34:	015b      	lsls	r3, r3, #5
 8002d36:	441a      	add	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d48:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d4a:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
		break;
 8002d6a:	e119      	b.n	8002fa0 <get_register_value+0x448>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002d72:	01da      	lsls	r2, r3, #7
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d7a:	019b      	lsls	r3, r3, #6
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002d98:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d9a:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	441a      	add	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
		break;
 8002dba:	e0f1      	b.n	8002fa0 <get_register_value+0x448>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8002dc2:	01da      	lsls	r2, r3, #7
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002dca:	019b      	lsls	r3, r3, #6
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dd4:	015b      	lsls	r3, r3, #5
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002de8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002dea:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	441a      	add	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
		break;
 8002e0a:	e0c9      	b.n	8002fa0 <get_register_value+0x448>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002e12:	01da      	lsls	r2, r3, #7
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	441a      	add	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002e24:	015b      	lsls	r3, r3, #5
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002e38:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002e3a:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	441a      	add	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
		break;
 8002e5a:	e0a1      	b.n	8002fa0 <get_register_value+0x448>

	case 18:
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e62:	01da      	lsls	r2, r3, #7
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002e6a:	019b      	lsls	r3, r3, #6
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002e74:	015b      	lsls	r3, r3, #5
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8002e88:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e8a:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
		break;
 8002eaa:	e079      	b.n	8002fa0 <get_register_value+0x448>

	case 19:
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8002eb2:	01da      	lsls	r2, r3, #7
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002eba:	019b      	lsls	r3, r3, #6
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002ec4:	015b      	lsls	r3, r3, #5
 8002ec6:	441a      	add	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002ed8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002eda:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
		break;
 8002efa:	e051      	b.n	8002fa0 <get_register_value+0x448>

	case 20:
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8002f02:	01da      	lsls	r2, r3, #7
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002f0a:	019b      	lsls	r3, r3, #6
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002f14:	015b      	lsls	r3, r3, #5
 8002f16:	441a      	add	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8002f28:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002f2a:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	441a      	add	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
		break;
 8002f4a:	e029      	b.n	8002fa0 <get_register_value+0x448>

	case 21:
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002f52:	01da      	lsls	r2, r3, #7
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002f5a:	019b      	lsls	r3, r3, #6
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	441a      	add	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002f78:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f7a:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	441a      	add	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
		break;
 8002f9a:	e001      	b.n	8002fa0 <get_register_value+0x448>

	default:
		regout = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	b29b      	uxth	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	460a      	mov	r2, r1
 8002fba:	71fb      	strb	r3, [r7, #7]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 8002fcc:	79bb      	ldrb	r3, [r7, #6]
 8002fce:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 8002fd0:	89fa      	ldrh	r2, [r7, #14]
 8002fd2:	89bb      	ldrh	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	897b      	ldrh	r3, [r7, #10]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b29b      	uxth	r3, r3
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 8002fee:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	460a      	mov	r2, r1
 8003006:	71fb      	strb	r3, [r7, #7]
 8003008:	4613      	mov	r3, r2
 800300a:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 800300c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003010:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	b29b      	uxth	r3, r3
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 800301a:	89fa      	ldrh	r2, [r7, #14]
 800301c:	89bb      	ldrh	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	b29a      	uxth	r2, r3
 8003022:	79bb      	ldrb	r3, [r7, #6]
 8003024:	b29b      	uxth	r3, r3
 8003026:	4313      	orrs	r3, r2
 8003028:	b29b      	uxth	r3, r3
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 8003036:	b480      	push	{r7}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	4603      	mov	r3, r0
 800303e:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003040:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003044:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	b29b      	uxth	r3, r3
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 800304e:	89fa      	ldrh	r2, [r7, #14]
 8003050:	89bb      	ldrh	r3, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	b29b      	uxth	r3, r3
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <HAL_MspInit+0x68>)
 800306c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003070:	4a16      	ldr	r2, [pc, #88]	@ (80030cc <HAL_MspInit+0x68>)
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_MspInit+0x68>)
 800307c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	2101      	movs	r1, #1
 800308c:	f06f 000b 	mvn.w	r0, #11
 8003090:	f000 ff7f 	bl	8003f92 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2101      	movs	r1, #1
 8003098:	f06f 000a 	mvn.w	r0, #10
 800309c:	f000 ff79 	bl	8003f92 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2101      	movs	r1, #1
 80030a4:	f06f 0009 	mvn.w	r0, #9
 80030a8:	f000 ff73 	bl	8003f92 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2101      	movs	r1, #1
 80030b0:	f06f 0004 	mvn.w	r0, #4
 80030b4:	f000 ff6d 	bl	8003f92 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2101      	movs	r1, #1
 80030bc:	f06f 0001 	mvn.w	r0, #1
 80030c0:	f000 ff67 	bl	8003f92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	58024400 	.word	0x58024400

080030d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08e      	sub	sp, #56	@ 0x38
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a94      	ldr	r2, [pc, #592]	@ (8003340 <HAL_SPI_MspInit+0x270>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	f040 8087 	bne.w	8003202 <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f4:	4b93      	ldr	r3, [pc, #588]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 80030f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030fa:	4a92      	ldr	r2, [pc, #584]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 80030fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003100:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003104:	4b8f      	ldr	r3, [pc, #572]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800310a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b8c      	ldr	r3, [pc, #560]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003118:	4a8a      	ldr	r2, [pc, #552]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003122:	4b88      	ldr	r3, [pc, #544]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003130:	4b84      	ldr	r3, [pc, #528]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003136:	4a83      	ldr	r2, [pc, #524]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003140:	4b80      	ldr	r3, [pc, #512]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 800314e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003160:	2305      	movs	r3, #5
 8003162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003168:	4619      	mov	r1, r3
 800316a:	4877      	ldr	r0, [pc, #476]	@ (8003348 <HAL_SPI_MspInit+0x278>)
 800316c:	f003 fd8a 	bl	8006c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003170:	2380      	movs	r3, #128	@ 0x80
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317c:	2303      	movs	r3, #3
 800317e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003180:	2305      	movs	r3, #5
 8003182:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003188:	4619      	mov	r1, r3
 800318a:	4870      	ldr	r0, [pc, #448]	@ (800334c <HAL_SPI_MspInit+0x27c>)
 800318c:	f003 fd7a 	bl	8006c84 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8003190:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 8003192:	4a70      	ldr	r2, [pc, #448]	@ (8003354 <HAL_SPI_MspInit+0x284>)
 8003194:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003196:	4b6e      	ldr	r3, [pc, #440]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 8003198:	2225      	movs	r2, #37	@ 0x25
 800319a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800319c:	4b6c      	ldr	r3, [pc, #432]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031a8:	4b69      	ldr	r3, [pc, #420]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031b0:	4b67      	ldr	r3, [pc, #412]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031b8:	4b65      	ldr	r3, [pc, #404]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031be:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80031c0:	4b63      	ldr	r3, [pc, #396]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031c6:	4b62      	ldr	r3, [pc, #392]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031cc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ce:	4b60      	ldr	r3, [pc, #384]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80031d4:	485e      	ldr	r0, [pc, #376]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031d6:	f000 ff11 	bl	8003ffc <HAL_DMA_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 80031e0:	f7fe f8be 	bl	8001360 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031e8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80031ea:	4a59      	ldr	r2, [pc, #356]	@ (8003350 <HAL_SPI_MspInit+0x280>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	2101      	movs	r1, #1
 80031f4:	2023      	movs	r0, #35	@ 0x23
 80031f6:	f000 fecc 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80031fa:	2023      	movs	r0, #35	@ 0x23
 80031fc:	f000 fee3 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003200:	e09a      	b.n	8003338 <HAL_SPI_MspInit+0x268>
  else if(hspi->Instance==SPI3)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a54      	ldr	r2, [pc, #336]	@ (8003358 <HAL_SPI_MspInit+0x288>)
 8003208:	4293      	cmp	r3, r2
 800320a:	f040 8095 	bne.w	8003338 <HAL_SPI_MspInit+0x268>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800320e:	4b4d      	ldr	r3, [pc, #308]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003214:	4a4b      	ldr	r2, [pc, #300]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800321e:	4b49      	ldr	r3, [pc, #292]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322c:	4b45      	ldr	r3, [pc, #276]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 800322e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003232:	4a44      	ldr	r2, [pc, #272]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800323c:	4b41      	ldr	r3, [pc, #260]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 800323e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b3e      	ldr	r3, [pc, #248]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 800324c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003250:	4a3c      	ldr	r2, [pc, #240]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800325a:	4b3a      	ldr	r3, [pc, #232]	@ (8003344 <HAL_SPI_MspInit+0x274>)
 800325c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003268:	2310      	movs	r3, #16
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003278:	2306      	movs	r3, #6
 800327a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	4831      	ldr	r0, [pc, #196]	@ (8003348 <HAL_SPI_MspInit+0x278>)
 8003284:	f003 fcfe 	bl	8006c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003288:	2304      	movs	r3, #4
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328c:	2302      	movs	r3, #2
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003294:	2303      	movs	r3, #3
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003298:	2307      	movs	r3, #7
 800329a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a0:	4619      	mov	r1, r3
 80032a2:	482e      	ldr	r0, [pc, #184]	@ (800335c <HAL_SPI_MspInit+0x28c>)
 80032a4:	f003 fcee 	bl	8006c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032a8:	2308      	movs	r3, #8
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ac:	2302      	movs	r3, #2
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032b8:	2306      	movs	r3, #6
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c0:	4619      	mov	r1, r3
 80032c2:	4826      	ldr	r0, [pc, #152]	@ (800335c <HAL_SPI_MspInit+0x28c>)
 80032c4:	f003 fcde 	bl	8006c84 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream1;
 80032c8:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032ca:	4a26      	ldr	r2, [pc, #152]	@ (8003364 <HAL_SPI_MspInit+0x294>)
 80032cc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80032ce:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032d0:	223e      	movs	r2, #62	@ 0x3e
 80032d2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d4:	4b22      	ldr	r3, [pc, #136]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032d6:	2240      	movs	r2, #64	@ 0x40
 80032d8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032da:	4b21      	ldr	r3, [pc, #132]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032e6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032ee:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032f6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80032f8:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032fe:	4b18      	ldr	r3, [pc, #96]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 8003300:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003304:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003306:	4b16      	ldr	r3, [pc, #88]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 8003308:	2200      	movs	r2, #0
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800330c:	4814      	ldr	r0, [pc, #80]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 800330e:	f000 fe75 	bl	8003ffc <HAL_DMA_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_SPI_MspInit+0x24c>
      Error_Handler();
 8003318:	f7fe f822 	bl	8001360 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a10      	ldr	r2, [pc, #64]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 8003320:	679a      	str	r2, [r3, #120]	@ 0x78
 8003322:	4a0f      	ldr	r2, [pc, #60]	@ (8003360 <HAL_SPI_MspInit+0x290>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 1, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2101      	movs	r1, #1
 800332c:	2033      	movs	r0, #51	@ 0x33
 800332e:	f000 fe30 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003332:	2033      	movs	r0, #51	@ 0x33
 8003334:	f000 fe47 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
}
 8003338:	bf00      	nop
 800333a:	3738      	adds	r7, #56	@ 0x38
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40013000 	.word	0x40013000
 8003344:	58024400 	.word	0x58024400
 8003348:	58020000 	.word	0x58020000
 800334c:	58020c00 	.word	0x58020c00
 8003350:	2400019c 	.word	0x2400019c
 8003354:	40020010 	.word	0x40020010
 8003358:	40003c00 	.word	0x40003c00
 800335c:	58020400 	.word	0x58020400
 8003360:	24000214 	.word	0x24000214
 8003364:	40020028 	.word	0x40020028

08003368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08c      	sub	sp, #48	@ 0x30
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2f      	ldr	r2, [pc, #188]	@ (8003444 <HAL_TIM_Base_MspInit+0xdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10f      	bne.n	80033aa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 800338c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003390:	4a2d      	ldr	r2, [pc, #180]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800339a:	4b2b      	ldr	r3, [pc, #172]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 800339c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033a8:	e047      	b.n	800343a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b2:	d12e      	bne.n	8003412 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b4:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 80033b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ba:	4a23      	ldr	r2, [pc, #140]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033c4:	4b20      	ldr	r3, [pc, #128]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 80033c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 80033d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033e2:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 80033e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033f0:	2301      	movs	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003400:	2301      	movs	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	4810      	ldr	r0, [pc, #64]	@ (800344c <HAL_TIM_Base_MspInit+0xe4>)
 800340c:	f003 fc3a 	bl	8006c84 <HAL_GPIO_Init>
}
 8003410:	e013      	b.n	800343a <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a0e      	ldr	r2, [pc, #56]	@ (8003450 <HAL_TIM_Base_MspInit+0xe8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10e      	bne.n	800343a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800341c:	4b0a      	ldr	r3, [pc, #40]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 800341e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003422:	4a09      	ldr	r2, [pc, #36]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_TIM_Base_MspInit+0xe0>)
 800342e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	bf00      	nop
 800343c:	3730      	adds	r7, #48	@ 0x30
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40010000 	.word	0x40010000
 8003448:	58024400 	.word	0x58024400
 800344c:	58020000 	.word	0x58020000
 8003450:	40010400 	.word	0x40010400

08003454 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0e      	ldr	r2, [pc, #56]	@ (800349c <HAL_TIM_OC_MspInit+0x48>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d116      	bne.n	8003494 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003466:	4b0e      	ldr	r3, [pc, #56]	@ (80034a0 <HAL_TIM_OC_MspInit+0x4c>)
 8003468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800346c:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <HAL_TIM_OC_MspInit+0x4c>)
 800346e:	f043 0302 	orr.w	r3, r3, #2
 8003472:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003476:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <HAL_TIM_OC_MspInit+0x4c>)
 8003478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	2101      	movs	r1, #1
 8003488:	201d      	movs	r0, #29
 800348a:	f000 fd82 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800348e:	201d      	movs	r0, #29
 8003490:	f000 fd99 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40000400 	.word	0x40000400
 80034a0:	58024400 	.word	0x58024400

080034a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <HAL_TIM_MspPostInit+0x100>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d120      	bne.n	8003508 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034cc:	4a36      	ldr	r2, [pc, #216]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 80034ce:	f043 0310 	orr.w	r3, r3, #16
 80034d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034d6:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 80034d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f2:	2303      	movs	r3, #3
 80034f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	482a      	ldr	r0, [pc, #168]	@ (80035ac <HAL_TIM_MspPostInit+0x108>)
 8003502:	f003 fbbf 	bl	8006c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003506:	e049      	b.n	800359c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003510:	d120      	bne.n	8003554 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 8003514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003522:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 8003524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353e:	2303      	movs	r3, #3
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003542:	2301      	movs	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4619      	mov	r1, r3
 800354c:	4818      	ldr	r0, [pc, #96]	@ (80035b0 <HAL_TIM_MspPostInit+0x10c>)
 800354e:	f003 fb99 	bl	8006c84 <HAL_GPIO_Init>
}
 8003552:	e023      	b.n	800359c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a16      	ldr	r2, [pc, #88]	@ (80035b4 <HAL_TIM_MspPostInit+0x110>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d11e      	bne.n	800359c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800355e:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003564:	4a10      	ldr	r2, [pc, #64]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800356e:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <HAL_TIM_MspPostInit+0x104>)
 8003570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800357c:	2340      	movs	r3, #64	@ 0x40
 800357e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003588:	2303      	movs	r3, #3
 800358a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800358c:	2303      	movs	r3, #3
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	4619      	mov	r1, r3
 8003596:	4808      	ldr	r0, [pc, #32]	@ (80035b8 <HAL_TIM_MspPostInit+0x114>)
 8003598:	f003 fb74 	bl	8006c84 <HAL_GPIO_Init>
}
 800359c:	bf00      	nop
 800359e:	3728      	adds	r7, #40	@ 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40010000 	.word	0x40010000
 80035a8:	58024400 	.word	0x58024400
 80035ac:	58021000 	.word	0x58021000
 80035b0:	58020400 	.word	0x58020400
 80035b4:	40010400 	.word	0x40010400
 80035b8:	58020800 	.word	0x58020800

080035bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b0ba      	sub	sp, #232	@ 0xe8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d4:	f107 0318 	add.w	r3, r7, #24
 80035d8:	22b8      	movs	r2, #184	@ 0xb8
 80035da:	2100      	movs	r1, #0
 80035dc:	4618      	mov	r0, r3
 80035de:	f00b f815 	bl	800e60c <memset>
  if(huart->Instance==USART3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a55      	ldr	r2, [pc, #340]	@ (800373c <HAL_UART_MspInit+0x180>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	f040 80a2 	bne.w	8003732 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035ee:	f04f 0202 	mov.w	r2, #2
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003600:	f107 0318 	add.w	r3, r7, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fcc3 	bl	8007f90 <HAL_RCCEx_PeriphCLKConfig>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003610:	f7fd fea6 	bl	8001360 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003614:	4b4a      	ldr	r3, [pc, #296]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800361a:	4a49      	ldr	r2, [pc, #292]	@ (8003740 <HAL_UART_MspInit+0x184>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003620:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003624:	4b46      	ldr	r3, [pc, #280]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800362a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	4b43      	ldr	r3, [pc, #268]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003638:	4a41      	ldr	r2, [pc, #260]	@ (8003740 <HAL_UART_MspInit+0x184>)
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003642:	4b3f      	ldr	r3, [pc, #252]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003650:	4b3b      	ldr	r3, [pc, #236]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003656:	4a3a      	ldr	r2, [pc, #232]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003658:	f043 0304 	orr.w	r3, r3, #4
 800365c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003660:	4b37      	ldr	r3, [pc, #220]	@ (8003740 <HAL_UART_MspInit+0x184>)
 8003662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800366e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	2302      	movs	r3, #2
 8003678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003688:	2307      	movs	r3, #7
 800368a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003692:	4619      	mov	r1, r3
 8003694:	482b      	ldr	r0, [pc, #172]	@ (8003744 <HAL_UART_MspInit+0x188>)
 8003696:	f003 faf5 	bl	8006c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin;
 800369a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800369e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b4:	2307      	movs	r3, #7
 80036b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(STLK_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80036ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036be:	4619      	mov	r1, r3
 80036c0:	4821      	ldr	r0, [pc, #132]	@ (8003748 <HAL_UART_MspInit+0x18c>)
 80036c2:	f003 fadf 	bl	8006c84 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80036c6:	4b21      	ldr	r3, [pc, #132]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036c8:	4a21      	ldr	r2, [pc, #132]	@ (8003750 <HAL_UART_MspInit+0x194>)
 80036ca:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80036cc:	4b1f      	ldr	r3, [pc, #124]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036ce:	222e      	movs	r2, #46	@ 0x2e
 80036d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d2:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036d4:	2240      	movs	r2, #64	@ 0x40
 80036d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d8:	4b1c      	ldr	r3, [pc, #112]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036e6:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036ec:	4b17      	ldr	r3, [pc, #92]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80036f2:	4b16      	ldr	r3, [pc, #88]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <HAL_UART_MspInit+0x190>)
 80036fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003700:	4b12      	ldr	r3, [pc, #72]	@ (800374c <HAL_UART_MspInit+0x190>)
 8003702:	2200      	movs	r2, #0
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003706:	4811      	ldr	r0, [pc, #68]	@ (800374c <HAL_UART_MspInit+0x190>)
 8003708:	f000 fc78 	bl	8003ffc <HAL_DMA_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 8003712:	f7fd fe25 	bl	8001360 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0c      	ldr	r2, [pc, #48]	@ (800374c <HAL_UART_MspInit+0x190>)
 800371a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800371c:	4a0b      	ldr	r2, [pc, #44]	@ (800374c <HAL_UART_MspInit+0x190>)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2101      	movs	r1, #1
 8003726:	2027      	movs	r0, #39	@ 0x27
 8003728:	f000 fc33 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800372c:	2027      	movs	r0, #39	@ 0x27
 800372e:	f000 fc4a 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003732:	bf00      	nop
 8003734:	37e8      	adds	r7, #232	@ 0xe8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40004800 	.word	0x40004800
 8003740:	58024400 	.word	0x58024400
 8003744:	58020400 	.word	0x58020400
 8003748:	58020800 	.word	0x58020800
 800374c:	24000450 	.word	0x24000450
 8003750:	40020040 	.word	0x40020040

08003754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003758:	bf00      	nop
 800375a:	e7fd      	b.n	8003758 <NMI_Handler+0x4>

0800375c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <HardFault_Handler+0x4>

08003764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <MemManage_Handler+0x4>

0800376c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <BusFault_Handler+0x4>

08003774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <UsageFault_Handler+0x4>

0800377c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_counter++;
 80037ac:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <SysTick_Handler+0x20>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	1c50      	adds	r0, r2, #1
 80037b4:	f143 0100 	adc.w	r1, r3, #0
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <SysTick_Handler+0x20>)
 80037ba:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037be:	f000 fac9 	bl	8003d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	240008a8 	.word	0x240008a8

080037cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  TIM2->CR1 |= TIM_CR1_CEN;
 80037d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80037e0:	2004      	movs	r0, #4
 80037e2:	f003 fc10 	bl	8007006 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80037f0:	4802      	ldr	r0, [pc, #8]	@ (80037fc <DMA1_Stream0_IRQHandler+0x10>)
 80037f2:	f001 ff29 	bl	8005648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2400019c 	.word	0x2400019c

08003800 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003804:	4802      	ldr	r0, [pc, #8]	@ (8003810 <DMA1_Stream1_IRQHandler+0x10>)
 8003806:	f001 ff1f 	bl	8005648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	24000214 	.word	0x24000214

08003814 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003818:	4802      	ldr	r0, [pc, #8]	@ (8003824 <DMA1_Stream2_IRQHandler+0x10>)
 800381a:	f001 ff15 	bl	8005648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	24000450 	.word	0x24000450

08003828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800382c:	4802      	ldr	r0, [pc, #8]	@ (8003838 <TIM3_IRQHandler+0x10>)
 800382e:	f007 fc4a 	bl	800b0c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	24000324 	.word	0x24000324

0800383c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_rx();
#endif
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003840:	4802      	ldr	r0, [pc, #8]	@ (800384c <SPI1_IRQHandler+0x10>)
 8003842:	f006 fd15 	bl	800a270 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2400008c 	.word	0x2400008c

08003850 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003854:	4802      	ldr	r0, [pc, #8]	@ (8003860 <USART3_IRQHandler+0x10>)
 8003856:	f008 ff79 	bl	800c74c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	240003bc 	.word	0x240003bc

08003864 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_tx();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003868:	4802      	ldr	r0, [pc, #8]	@ (8003874 <SPI3_IRQHandler+0x10>)
 800386a:	f006 fd01 	bl	800a270 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	24000114 	.word	0x24000114

08003878 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 8003880:	f7fd fd86 	bl	8001390 <sample_interrupt_routine>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <_sbrk+0x5c>)
 8003896:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <_sbrk+0x60>)
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <_sbrk+0x64>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <_sbrk+0x64>)
 80038aa:	4a12      	ldr	r2, [pc, #72]	@ (80038f4 <_sbrk+0x68>)
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d207      	bcs.n	80038cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038bc:	f00a febe 	bl	800e63c <__errno>
 80038c0:	4603      	mov	r3, r0
 80038c2:	220c      	movs	r2, #12
 80038c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038ca:	e009      	b.n	80038e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038cc:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	4a05      	ldr	r2, [pc, #20]	@ (80038f0 <_sbrk+0x64>)
 80038dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	24050000 	.word	0x24050000
 80038ec:	00000400 	.word	0x00000400
 80038f0:	240008b0 	.word	0x240008b0
 80038f4:	24000a08 	.word	0x24000a08

080038f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038fc:	4b32      	ldr	r3, [pc, #200]	@ (80039c8 <SystemInit+0xd0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	4a31      	ldr	r2, [pc, #196]	@ (80039c8 <SystemInit+0xd0>)
 8003904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800390c:	4b2f      	ldr	r3, [pc, #188]	@ (80039cc <SystemInit+0xd4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	2b06      	cmp	r3, #6
 8003916:	d807      	bhi.n	8003928 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003918:	4b2c      	ldr	r3, [pc, #176]	@ (80039cc <SystemInit+0xd4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 030f 	bic.w	r3, r3, #15
 8003920:	4a2a      	ldr	r2, [pc, #168]	@ (80039cc <SystemInit+0xd4>)
 8003922:	f043 0307 	orr.w	r3, r3, #7
 8003926:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003928:	4b29      	ldr	r3, [pc, #164]	@ (80039d0 <SystemInit+0xd8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a28      	ldr	r2, [pc, #160]	@ (80039d0 <SystemInit+0xd8>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003934:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <SystemInit+0xd8>)
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800393a:	4b25      	ldr	r3, [pc, #148]	@ (80039d0 <SystemInit+0xd8>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4924      	ldr	r1, [pc, #144]	@ (80039d0 <SystemInit+0xd8>)
 8003940:	4b24      	ldr	r3, [pc, #144]	@ (80039d4 <SystemInit+0xdc>)
 8003942:	4013      	ands	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003946:	4b21      	ldr	r3, [pc, #132]	@ (80039cc <SystemInit+0xd4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <SystemInit+0xd4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 030f 	bic.w	r3, r3, #15
 800395a:	4a1c      	ldr	r2, [pc, #112]	@ (80039cc <SystemInit+0xd4>)
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003962:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <SystemInit+0xd8>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003968:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <SystemInit+0xd8>)
 800396a:	2200      	movs	r2, #0
 800396c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800396e:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <SystemInit+0xd8>)
 8003970:	2200      	movs	r2, #0
 8003972:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <SystemInit+0xd8>)
 8003976:	4a18      	ldr	r2, [pc, #96]	@ (80039d8 <SystemInit+0xe0>)
 8003978:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800397a:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <SystemInit+0xd8>)
 800397c:	4a17      	ldr	r2, [pc, #92]	@ (80039dc <SystemInit+0xe4>)
 800397e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <SystemInit+0xd8>)
 8003982:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <SystemInit+0xe8>)
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <SystemInit+0xd8>)
 8003988:	2200      	movs	r2, #0
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800398c:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <SystemInit+0xd8>)
 800398e:	4a14      	ldr	r2, [pc, #80]	@ (80039e0 <SystemInit+0xe8>)
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <SystemInit+0xd8>)
 8003994:	2200      	movs	r2, #0
 8003996:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003998:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <SystemInit+0xd8>)
 800399a:	4a11      	ldr	r2, [pc, #68]	@ (80039e0 <SystemInit+0xe8>)
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800399e:	4b0c      	ldr	r3, [pc, #48]	@ (80039d0 <SystemInit+0xd8>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <SystemInit+0xd8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a09      	ldr	r2, [pc, #36]	@ (80039d0 <SystemInit+0xd8>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039b0:	4b07      	ldr	r3, [pc, #28]	@ (80039d0 <SystemInit+0xd8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	@ (80039e4 <SystemInit+0xec>)
 80039b8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039be:	bf00      	nop
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	52002000 	.word	0x52002000
 80039d0:	58024400 	.word	0x58024400
 80039d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80039d8:	02020200 	.word	0x02020200
 80039dc:	01ff0000 	.word	0x01ff0000
 80039e0:	01010280 	.word	0x01010280
 80039e4:	52004000 	.word	0x52004000

080039e8 <loop_escape>:
static uint16_t counter = 0;

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
#else
	return 0;
 80039ec:	2300      	movs	r3, #0
#endif
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
//	uint16_t aux2_result_A, aux2_result_B;
//	extract_ddr_words(command_sequence_MISO[34], &aux0_result_A, &aux0_result_B); // Result of AUX SLOT 1 from this command sequence
//	extract_ddr_words(command_sequence_MISO[0],  &aux1_result_A, &aux1_result_B); // Result of AUX SLOT 2 from the previous command sequence
//	extract_ddr_words(command_sequence_MISO[1],  &aux2_result_A, &aux2_result_B); // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
	// Data corruption is more likely to occur with larger NUM_CHANNELS_TO_TRANSMIT, slower USART Baud rate, and faster SPI Baud rate.
//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE; i++) {
//		command_sequence_MISO[i] = i;
//	}

	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	e013      	b.n	8003a3c <transmit_data_realtime+0x34>
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3303      	adds	r3, #3
 8003a18:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <transmit_data_realtime+0x94>)
 8003a1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
				&samples[i],
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a24:	1899      	adds	r1, r3, r2
				&samples[i + NUM_SAMPLED_CHANNELS]);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a2e:	4413      	add	r3, r2
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 8003a30:	461a      	mov	r2, r3
 8003a32:	f7fd fe2e 	bl	8001692 <extract_ddr_words>
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	dde8      	ble.n	8003a14 <transmit_data_realtime+0xc>
	}

	counter++;
 8003a42:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <transmit_data_realtime+0x9c>)
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <transmit_data_realtime+0x9c>)
 8003a4c:	801a      	strh	r2, [r3, #0]

	if(counter>=4500){
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <transmit_data_realtime+0x9c>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	f241 1293 	movw	r2, #4499	@ 0x1193
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d918      	bls.n	8003a8c <transmit_data_realtime+0x84>
		samples[0] = 1000;
 8003a5a:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a60:	801a      	strh	r2, [r3, #0]
		samples[1] = 2000;
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a64:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003a68:	805a      	strh	r2, [r3, #2]
		samples[2] = 3000;
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a6c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003a70:	809a      	strh	r2, [r3, #4]
		samples[3] = 4000;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a74:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8003a78:	80da      	strh	r2, [r3, #6]

		if(counter==5000)
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <transmit_data_realtime+0x9c>)
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d102      	bne.n	8003a8c <transmit_data_realtime+0x84>
		{
			counter = 0;
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <transmit_data_realtime+0x9c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	801a      	strh	r2, [r3, #0]
		}

	}


	transmit_dma_to_usart(samples, NUM_SAMPLED_CHANNELS * 2 * sizeof(uint16_t));
 8003a8c:	2104      	movs	r1, #4
 8003a8e:	4804      	ldr	r0, [pc, #16]	@ (8003aa0 <transmit_data_realtime+0x98>)
 8003a90:	f000 f8ac 	bl	8003bec <transmit_dma_to_usart>
#endif
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	24000510 	.word	0x24000510
 8003aa0:	240008b4 	.word	0x240008b4
 8003aa4:	240008b8 	.word	0x240008b8

08003aa8 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * 2 * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8003ab2:	f7fd fe7b 	bl	80017ac <calculate_sample_rate>
 8003ab6:	eeb0 7b40 	vmov.f64	d7, d0
 8003aba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003abe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003ac2:	ee17 3a90 	vmov	r3, s15
 8003ac6:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8003ac8:	8a7b      	ldrh	r3, [r7, #18]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	ee07 3a90 	vmov	s15, r3
 8003ad4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003ad8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003adc:	ee17 3a90 	vmov	r3, s15
 8003ae0:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 8003ae2:	8a7a      	ldrh	r2, [r7, #18]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003aea:	fb01 f202 	mul.w	r2, r1, r2
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e01a      	b.n	8003b2e <transmit_data_offline+0x86>
		uart_ready = 0;
 8003af8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <transmit_data_offline+0xcc>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 8003afe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <transmit_data_offline+0xd0>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	8a7b      	ldrh	r3, [r7, #18]
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	441a      	add	r2, r3
 8003b0e:	8a7b      	ldrh	r3, [r7, #18]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 f868 	bl	8003bec <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003b1c:	bf00      	nop
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <transmit_data_offline+0xcc>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d1fa      	bne.n	8003b1e <transmit_data_offline+0x76>
	for (int i = 0; i < num_chunks; i++) {
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d8e0      	bhi.n	8003af8 <transmit_data_offline+0x50>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 8003b36:	88fb      	ldrh	r3, [r7, #6]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d017      	beq.n	8003b6c <transmit_data_offline+0xc4>
		uart_ready = 0;
 8003b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b74 <transmit_data_offline+0xcc>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <transmit_data_offline+0xd0>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	8a7b      	ldrh	r3, [r7, #18]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	441a      	add	r2, r3
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 f846 	bl	8003bec <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003b60:	bf00      	nop
 8003b62:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <transmit_data_offline+0xcc>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d1fa      	bne.n	8003b62 <transmit_data_offline+0xba>
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	24000008 	.word	0x24000008
 8003b78:	240005a0 	.word	0x240005a0

08003b7c <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fd fdab 	bl	80016e0 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003b96:	2000      	movs	r0, #0
 8003b98:	f7fd fe5e 	bl	8001858 <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence(channel_numbers);
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	2200      	movs	r2, #0
 8003bac:	490c      	ldr	r1, [pc, #48]	@ (8003be0 <configure_aux_commands+0x40>)
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fe8c 	bl	80018cc <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003bb4:	2028      	movs	r0, #40	@ 0x28
 8003bb6:	f7ff fa3e 	bl	8003036 <read_command>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2280      	movs	r2, #128	@ 0x80
 8003bbe:	4909      	ldr	r1, [pc, #36]	@ (8003be4 <configure_aux_commands+0x44>)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7fd ffe2 	bl	8001b8a <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 8003bc6:	2029      	movs	r0, #41	@ 0x29
 8003bc8:	f7ff fa35 	bl	8003036 <read_command>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2280      	movs	r2, #128	@ 0x80
 8003bd0:	4905      	ldr	r1, [pc, #20]	@ (8003be8 <configure_aux_commands+0x48>)
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd ffd9 	bl	8001b8a <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	240005a4 	.word	0x240005a4
 8003be4:	240006a4 	.word	0x240006a4
 8003be8:	240007a4 	.word	0x240007a4

08003bec <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4806      	ldr	r0, [pc, #24]	@ (8003c18 <transmit_dma_to_usart+0x2c>)
 8003c00:	f008 fd24 	bl	800c64c <HAL_UART_Transmit_DMA>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003c0a:	f7fd fba9 	bl	8001360 <Error_Handler>
	LL_DMA_EnableStream(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	240003bc 	.word	0x240003bc

08003c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c20:	f7ff fe6a 	bl	80038f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c24:	480c      	ldr	r0, [pc, #48]	@ (8003c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c26:	490d      	ldr	r1, [pc, #52]	@ (8003c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c28:	4a0d      	ldr	r2, [pc, #52]	@ (8003c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4a:	f00a fcfd 	bl	800e648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c4e:	f7fc fd27 	bl	80006a0 <main>
  bx  lr
 8003c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c54:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003c58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c5c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003c60:	08011260 	.word	0x08011260
  ldr r2, =_sbss
 8003c64:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003c68:	24000a08 	.word	0x24000a08

08003c6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC3_IRQHandler>
	...

08003c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c76:	2003      	movs	r0, #3
 8003c78:	f000 f980 	bl	8003f7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c7c:	f003 ffb2 	bl	8007be4 <HAL_RCC_GetSysClockFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_Init+0x68>)
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	4913      	ldr	r1, [pc, #76]	@ (8003cdc <HAL_Init+0x6c>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd8 <HAL_Init+0x68>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cdc <HAL_Init+0x6c>)
 8003ca4:	5cd3      	ldrb	r3, [r2, r3]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce0 <HAL_Init+0x70>)
 8003cb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce4 <HAL_Init+0x74>)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f000 f814 	bl	8003ce8 <HAL_InitTick>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e002      	b.n	8003cd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003cca:	f7ff f9cb 	bl	8003064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	0800f0c0 	.word	0x0800f0c0
 8003ce0:	24000010 	.word	0x24000010
 8003ce4:	2400000c 	.word	0x2400000c

08003ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003cf0:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <HAL_InitTick+0x60>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e021      	b.n	8003d40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003cfc:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <HAL_InitTick+0x64>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <HAL_InitTick+0x60>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f965 	bl	8003fe2 <HAL_SYSTICK_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e00e      	b.n	8003d40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d80a      	bhi.n	8003d3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d30:	f000 f92f 	bl	8003f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d34:	4a06      	ldr	r2, [pc, #24]	@ (8003d50 <HAL_InitTick+0x68>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	24000018 	.word	0x24000018
 8003d4c:	2400000c 	.word	0x2400000c
 8003d50:	24000014 	.word	0x24000014

08003d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_IncTick+0x20>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_IncTick+0x24>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <HAL_IncTick+0x24>)
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	24000018 	.word	0x24000018
 8003d78:	240008bc 	.word	0x240008bc

08003d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d80:	4b03      	ldr	r3, [pc, #12]	@ (8003d90 <HAL_GetTick+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	240008bc 	.word	0x240008bc

08003d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d9c:	f7ff ffee 	bl	8003d7c <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dac:	d005      	beq.n	8003dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_Delay+0x44>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dba:	bf00      	nop
 8003dbc:	f7ff ffde 	bl	8003d7c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d8f7      	bhi.n	8003dbc <HAL_Delay+0x28>
  {
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	24000018 	.word	0x24000018

08003ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dec:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <__NVIC_SetPriorityGrouping+0x40>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e04:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <__NVIC_SetPriorityGrouping+0x44>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e0a:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <__NVIC_SetPriorityGrouping+0x40>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60d3      	str	r3, [r2, #12]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00
 8003e20:	05fa0000 	.word	0x05fa0000

08003e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <__NVIC_GetPriorityGrouping+0x18>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 0307 	and.w	r3, r3, #7
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	db0b      	blt.n	8003e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	4907      	ldr	r1, [pc, #28]	@ (8003e78 <__NVIC_EnableIRQ+0x38>)
 8003e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2001      	movs	r0, #1
 8003e62:	fa00 f202 	lsl.w	r2, r0, r2
 8003e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e100 	.word	0xe000e100

08003e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db0a      	blt.n	8003ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	490c      	ldr	r1, [pc, #48]	@ (8003ec8 <__NVIC_SetPriority+0x4c>)
 8003e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e9a:	0112      	lsls	r2, r2, #4
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea4:	e00a      	b.n	8003ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4908      	ldr	r1, [pc, #32]	@ (8003ecc <__NVIC_SetPriority+0x50>)
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	440b      	add	r3, r1
 8003eba:	761a      	strb	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f1c3 0307 	rsb	r3, r3, #7
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	bf28      	it	cs
 8003eee:	2304      	movcs	r3, #4
 8003ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d902      	bls.n	8003f00 <NVIC_EncodePriority+0x30>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3b03      	subs	r3, #3
 8003efe:	e000      	b.n	8003f02 <NVIC_EncodePriority+0x32>
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	401a      	ands	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	43d9      	mvns	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	4313      	orrs	r3, r2
         );
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3724      	adds	r7, #36	@ 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f48:	d301      	bcc.n	8003f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e00f      	b.n	8003f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <SysTick_Config+0x40>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f56:	210f      	movs	r1, #15
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f5c:	f7ff ff8e 	bl	8003e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <SysTick_Config+0x40>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f66:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <SysTick_Config+0x40>)
 8003f68:	2207      	movs	r2, #7
 8003f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	e000e010 	.word	0xe000e010

08003f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff ff29 	bl	8003ddc <__NVIC_SetPriorityGrouping>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa0:	f7ff ff40 	bl	8003e24 <__NVIC_GetPriorityGrouping>
 8003fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f7ff ff90 	bl	8003ed0 <NVIC_EncodePriority>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff5f 	bl	8003e7c <__NVIC_SetPriority>
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff33 	bl	8003e40 <__NVIC_EnableIRQ>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffa4 	bl	8003f38 <SysTick_Config>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff feba 	bl	8003d7c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e312      	b.n	800463a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a66      	ldr	r2, [pc, #408]	@ (80041b4 <HAL_DMA_Init+0x1b8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d04a      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a65      	ldr	r2, [pc, #404]	@ (80041b8 <HAL_DMA_Init+0x1bc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d045      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a63      	ldr	r2, [pc, #396]	@ (80041bc <HAL_DMA_Init+0x1c0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d040      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a62      	ldr	r2, [pc, #392]	@ (80041c0 <HAL_DMA_Init+0x1c4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d03b      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a60      	ldr	r2, [pc, #384]	@ (80041c4 <HAL_DMA_Init+0x1c8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d036      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a5f      	ldr	r2, [pc, #380]	@ (80041c8 <HAL_DMA_Init+0x1cc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d031      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a5d      	ldr	r2, [pc, #372]	@ (80041cc <HAL_DMA_Init+0x1d0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02c      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a5c      	ldr	r2, [pc, #368]	@ (80041d0 <HAL_DMA_Init+0x1d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d027      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5a      	ldr	r2, [pc, #360]	@ (80041d4 <HAL_DMA_Init+0x1d8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a59      	ldr	r2, [pc, #356]	@ (80041d8 <HAL_DMA_Init+0x1dc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01d      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a57      	ldr	r2, [pc, #348]	@ (80041dc <HAL_DMA_Init+0x1e0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a56      	ldr	r2, [pc, #344]	@ (80041e0 <HAL_DMA_Init+0x1e4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a54      	ldr	r2, [pc, #336]	@ (80041e4 <HAL_DMA_Init+0x1e8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a53      	ldr	r2, [pc, #332]	@ (80041e8 <HAL_DMA_Init+0x1ec>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a51      	ldr	r2, [pc, #324]	@ (80041ec <HAL_DMA_Init+0x1f0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_Init+0xb8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a50      	ldr	r2, [pc, #320]	@ (80041f0 <HAL_DMA_Init+0x1f4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Init+0xbc>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_DMA_Init+0xbe>
 80040b8:	2300      	movs	r3, #0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 813c 	beq.w	8004338 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a37      	ldr	r2, [pc, #220]	@ (80041b4 <HAL_DMA_Init+0x1b8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04a      	beq.n	8004170 <HAL_DMA_Init+0x174>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a36      	ldr	r2, [pc, #216]	@ (80041b8 <HAL_DMA_Init+0x1bc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d045      	beq.n	8004170 <HAL_DMA_Init+0x174>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a34      	ldr	r2, [pc, #208]	@ (80041bc <HAL_DMA_Init+0x1c0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d040      	beq.n	8004170 <HAL_DMA_Init+0x174>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a33      	ldr	r2, [pc, #204]	@ (80041c0 <HAL_DMA_Init+0x1c4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03b      	beq.n	8004170 <HAL_DMA_Init+0x174>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a31      	ldr	r2, [pc, #196]	@ (80041c4 <HAL_DMA_Init+0x1c8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d036      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a30      	ldr	r2, [pc, #192]	@ (80041c8 <HAL_DMA_Init+0x1cc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d031      	beq.n	8004170 <HAL_DMA_Init+0x174>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2e      	ldr	r2, [pc, #184]	@ (80041cc <HAL_DMA_Init+0x1d0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02c      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2d      	ldr	r2, [pc, #180]	@ (80041d0 <HAL_DMA_Init+0x1d4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d027      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <HAL_DMA_Init+0x1d8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_DMA_Init+0x174>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <HAL_DMA_Init+0x1dc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01d      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a28      	ldr	r2, [pc, #160]	@ (80041dc <HAL_DMA_Init+0x1e0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d018      	beq.n	8004170 <HAL_DMA_Init+0x174>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <HAL_DMA_Init+0x1e4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a25      	ldr	r2, [pc, #148]	@ (80041e4 <HAL_DMA_Init+0x1e8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_DMA_Init+0x1ec>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_DMA_Init+0x174>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a22      	ldr	r2, [pc, #136]	@ (80041ec <HAL_DMA_Init+0x1f0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_DMA_Init+0x174>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a21      	ldr	r2, [pc, #132]	@ (80041f0 <HAL_DMA_Init+0x1f4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d108      	bne.n	8004182 <HAL_DMA_Init+0x186>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	e007      	b.n	8004192 <HAL_DMA_Init+0x196>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004192:	e02f      	b.n	80041f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004194:	f7ff fdf2 	bl	8003d7c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d928      	bls.n	80041f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2203      	movs	r2, #3
 80041ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e242      	b.n	800463a <HAL_DMA_Init+0x63e>
 80041b4:	40020010 	.word	0x40020010
 80041b8:	40020028 	.word	0x40020028
 80041bc:	40020040 	.word	0x40020040
 80041c0:	40020058 	.word	0x40020058
 80041c4:	40020070 	.word	0x40020070
 80041c8:	40020088 	.word	0x40020088
 80041cc:	400200a0 	.word	0x400200a0
 80041d0:	400200b8 	.word	0x400200b8
 80041d4:	40020410 	.word	0x40020410
 80041d8:	40020428 	.word	0x40020428
 80041dc:	40020440 	.word	0x40020440
 80041e0:	40020458 	.word	0x40020458
 80041e4:	40020470 	.word	0x40020470
 80041e8:	40020488 	.word	0x40020488
 80041ec:	400204a0 	.word	0x400204a0
 80041f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1c8      	bne.n	8004194 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4b83      	ldr	r3, [pc, #524]	@ (800441c <HAL_DMA_Init+0x420>)
 800420e:	4013      	ands	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800421a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004226:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004232:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	4313      	orrs	r3, r2
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b28      	cmp	r3, #40	@ 0x28
 800425e:	d903      	bls.n	8004268 <HAL_DMA_Init+0x26c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b2e      	cmp	r3, #46	@ 0x2e
 8004266:	d91f      	bls.n	80042a8 <HAL_DMA_Init+0x2ac>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b3e      	cmp	r3, #62	@ 0x3e
 800426e:	d903      	bls.n	8004278 <HAL_DMA_Init+0x27c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b42      	cmp	r3, #66	@ 0x42
 8004276:	d917      	bls.n	80042a8 <HAL_DMA_Init+0x2ac>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b46      	cmp	r3, #70	@ 0x46
 800427e:	d903      	bls.n	8004288 <HAL_DMA_Init+0x28c>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b48      	cmp	r3, #72	@ 0x48
 8004286:	d90f      	bls.n	80042a8 <HAL_DMA_Init+0x2ac>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b4e      	cmp	r3, #78	@ 0x4e
 800428e:	d903      	bls.n	8004298 <HAL_DMA_Init+0x29c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b52      	cmp	r3, #82	@ 0x52
 8004296:	d907      	bls.n	80042a8 <HAL_DMA_Init+0x2ac>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b73      	cmp	r3, #115	@ 0x73
 800429e:	d905      	bls.n	80042ac <HAL_DMA_Init+0x2b0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b77      	cmp	r3, #119	@ 0x77
 80042a6:	d801      	bhi.n	80042ac <HAL_DMA_Init+0x2b0>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_DMA_Init+0x2b2>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 0307 	bic.w	r3, r3, #7
 80042d0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d117      	bne.n	8004314 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f002 fb3a 	bl	8006970 <DMA_CheckFifoParam>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2240      	movs	r2, #64	@ 0x40
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e192      	b.n	800463a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f002 fa75 	bl	800680c <DMA_CalcBaseAndBitshift>
 8004322:	4603      	mov	r3, r0
 8004324:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	223f      	movs	r2, #63	@ 0x3f
 8004330:	409a      	lsls	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	609a      	str	r2, [r3, #8]
 8004336:	e0c8      	b.n	80044ca <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a38      	ldr	r2, [pc, #224]	@ (8004420 <HAL_DMA_Init+0x424>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a37      	ldr	r2, [pc, #220]	@ (8004424 <HAL_DMA_Init+0x428>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a35      	ldr	r2, [pc, #212]	@ (8004428 <HAL_DMA_Init+0x42c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a34      	ldr	r2, [pc, #208]	@ (800442c <HAL_DMA_Init+0x430>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a32      	ldr	r2, [pc, #200]	@ (8004430 <HAL_DMA_Init+0x434>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a31      	ldr	r2, [pc, #196]	@ (8004434 <HAL_DMA_Init+0x438>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2f      	ldr	r2, [pc, #188]	@ (8004438 <HAL_DMA_Init+0x43c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_DMA_Init+0x38c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2e      	ldr	r2, [pc, #184]	@ (800443c <HAL_DMA_Init+0x440>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <HAL_DMA_Init+0x390>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_DMA_Init+0x392>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8092 	beq.w	80044b8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <HAL_DMA_Init+0x424>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d021      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a20      	ldr	r2, [pc, #128]	@ (8004424 <HAL_DMA_Init+0x428>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01c      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <HAL_DMA_Init+0x42c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d017      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a1d      	ldr	r2, [pc, #116]	@ (800442c <HAL_DMA_Init+0x430>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d012      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004430 <HAL_DMA_Init+0x434>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004434 <HAL_DMA_Init+0x438>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d008      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <HAL_DMA_Init+0x43c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d003      	beq.n	80043e2 <HAL_DMA_Init+0x3e6>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a17      	ldr	r2, [pc, #92]	@ (800443c <HAL_DMA_Init+0x440>)
 80043e0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <HAL_DMA_Init+0x444>)
 80043fe:	4013      	ands	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b40      	cmp	r3, #64	@ 0x40
 8004408:	d01c      	beq.n	8004444 <HAL_DMA_Init+0x448>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b80      	cmp	r3, #128	@ 0x80
 8004410:	d102      	bne.n	8004418 <HAL_DMA_Init+0x41c>
 8004412:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004416:	e016      	b.n	8004446 <HAL_DMA_Init+0x44a>
 8004418:	2300      	movs	r3, #0
 800441a:	e014      	b.n	8004446 <HAL_DMA_Init+0x44a>
 800441c:	fe10803f 	.word	0xfe10803f
 8004420:	58025408 	.word	0x58025408
 8004424:	5802541c 	.word	0x5802541c
 8004428:	58025430 	.word	0x58025430
 800442c:	58025444 	.word	0x58025444
 8004430:	58025458 	.word	0x58025458
 8004434:	5802546c 	.word	0x5802546c
 8004438:	58025480 	.word	0x58025480
 800443c:	58025494 	.word	0x58025494
 8004440:	fffe000f 	.word	0xfffe000f
 8004444:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68d2      	ldr	r2, [r2, #12]
 800444a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800444c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004454:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800445c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800446c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004474:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b6e      	ldr	r3, [pc, #440]	@ (8004644 <HAL_DMA_Init+0x648>)
 800448c:	4413      	add	r3, r2
 800448e:	4a6e      	ldr	r2, [pc, #440]	@ (8004648 <HAL_DMA_Init+0x64c>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f002 f9b5 	bl	800680c <DMA_CalcBaseAndBitshift>
 80044a2:	4603      	mov	r3, r0
 80044a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2201      	movs	r2, #1
 80044b0:	409a      	lsls	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	e008      	b.n	80044ca <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2240      	movs	r2, #64	@ 0x40
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2203      	movs	r2, #3
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e0b7      	b.n	800463a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5f      	ldr	r2, [pc, #380]	@ (800464c <HAL_DMA_Init+0x650>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d072      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5d      	ldr	r2, [pc, #372]	@ (8004650 <HAL_DMA_Init+0x654>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d06d      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004654 <HAL_DMA_Init+0x658>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d068      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a5a      	ldr	r2, [pc, #360]	@ (8004658 <HAL_DMA_Init+0x65c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d063      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a59      	ldr	r2, [pc, #356]	@ (800465c <HAL_DMA_Init+0x660>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d05e      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a57      	ldr	r2, [pc, #348]	@ (8004660 <HAL_DMA_Init+0x664>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d059      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a56      	ldr	r2, [pc, #344]	@ (8004664 <HAL_DMA_Init+0x668>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d054      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a54      	ldr	r2, [pc, #336]	@ (8004668 <HAL_DMA_Init+0x66c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d04f      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a53      	ldr	r2, [pc, #332]	@ (800466c <HAL_DMA_Init+0x670>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d04a      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a51      	ldr	r2, [pc, #324]	@ (8004670 <HAL_DMA_Init+0x674>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d045      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a50      	ldr	r2, [pc, #320]	@ (8004674 <HAL_DMA_Init+0x678>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d040      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4e      	ldr	r2, [pc, #312]	@ (8004678 <HAL_DMA_Init+0x67c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d03b      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4d      	ldr	r2, [pc, #308]	@ (800467c <HAL_DMA_Init+0x680>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d036      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a4b      	ldr	r2, [pc, #300]	@ (8004680 <HAL_DMA_Init+0x684>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d031      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4a      	ldr	r2, [pc, #296]	@ (8004684 <HAL_DMA_Init+0x688>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d02c      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a48      	ldr	r2, [pc, #288]	@ (8004688 <HAL_DMA_Init+0x68c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d027      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a47      	ldr	r2, [pc, #284]	@ (800468c <HAL_DMA_Init+0x690>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d022      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a45      	ldr	r2, [pc, #276]	@ (8004690 <HAL_DMA_Init+0x694>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01d      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a44      	ldr	r2, [pc, #272]	@ (8004694 <HAL_DMA_Init+0x698>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a42      	ldr	r2, [pc, #264]	@ (8004698 <HAL_DMA_Init+0x69c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a41      	ldr	r2, [pc, #260]	@ (800469c <HAL_DMA_Init+0x6a0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3f      	ldr	r2, [pc, #252]	@ (80046a0 <HAL_DMA_Init+0x6a4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3e      	ldr	r2, [pc, #248]	@ (80046a4 <HAL_DMA_Init+0x6a8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_DMA_Init+0x5be>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3c      	ldr	r2, [pc, #240]	@ (80046a8 <HAL_DMA_Init+0x6ac>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d101      	bne.n	80045be <HAL_DMA_Init+0x5c2>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_DMA_Init+0x5c4>
 80045be:	2300      	movs	r3, #0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d032      	beq.n	800462a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f002 fa4f 	bl	8006a68 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b80      	cmp	r3, #128	@ 0x80
 80045d0:	d102      	bne.n	80045d8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80045ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_DMA_Init+0x61c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d80c      	bhi.n	8004618 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f002 facc 	bl	8006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	e008      	b.n	800462a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	a7fdabf8 	.word	0xa7fdabf8
 8004648:	cccccccd 	.word	0xcccccccd
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
 800468c:	58025408 	.word	0x58025408
 8004690:	5802541c 	.word	0x5802541c
 8004694:	58025430 	.word	0x58025430
 8004698:	58025444 	.word	0x58025444
 800469c:	58025458 	.word	0x58025458
 80046a0:	5802546c 	.word	0x5802546c
 80046a4:	58025480 	.word	0x58025480
 80046a8:	58025494 	.word	0x58025494

080046ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e226      	b.n	8004b16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_DMA_Start_IT+0x2a>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e21f      	b.n	8004b16 <HAL_DMA_Start_IT+0x46a>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	f040 820a 	bne.w	8004b00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a68      	ldr	r2, [pc, #416]	@ (80048a0 <HAL_DMA_Start_IT+0x1f4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d04a      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a66      	ldr	r2, [pc, #408]	@ (80048a4 <HAL_DMA_Start_IT+0x1f8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d045      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a65      	ldr	r2, [pc, #404]	@ (80048a8 <HAL_DMA_Start_IT+0x1fc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d040      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a63      	ldr	r2, [pc, #396]	@ (80048ac <HAL_DMA_Start_IT+0x200>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d03b      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a62      	ldr	r2, [pc, #392]	@ (80048b0 <HAL_DMA_Start_IT+0x204>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d036      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a60      	ldr	r2, [pc, #384]	@ (80048b4 <HAL_DMA_Start_IT+0x208>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a5f      	ldr	r2, [pc, #380]	@ (80048b8 <HAL_DMA_Start_IT+0x20c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d02c      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a5d      	ldr	r2, [pc, #372]	@ (80048bc <HAL_DMA_Start_IT+0x210>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d027      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5c      	ldr	r2, [pc, #368]	@ (80048c0 <HAL_DMA_Start_IT+0x214>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5a      	ldr	r2, [pc, #360]	@ (80048c4 <HAL_DMA_Start_IT+0x218>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a59      	ldr	r2, [pc, #356]	@ (80048c8 <HAL_DMA_Start_IT+0x21c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a57      	ldr	r2, [pc, #348]	@ (80048cc <HAL_DMA_Start_IT+0x220>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a56      	ldr	r2, [pc, #344]	@ (80048d0 <HAL_DMA_Start_IT+0x224>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a54      	ldr	r2, [pc, #336]	@ (80048d4 <HAL_DMA_Start_IT+0x228>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a53      	ldr	r2, [pc, #332]	@ (80048d8 <HAL_DMA_Start_IT+0x22c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_DMA_Start_IT+0xee>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a51      	ldr	r2, [pc, #324]	@ (80048dc <HAL_DMA_Start_IT+0x230>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d108      	bne.n	80047ac <HAL_DMA_Start_IT+0x100>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e007      	b.n	80047bc <HAL_DMA_Start_IT+0x110>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f001 fe76 	bl	80064b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a34      	ldr	r2, [pc, #208]	@ (80048a0 <HAL_DMA_Start_IT+0x1f4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d04a      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a33      	ldr	r2, [pc, #204]	@ (80048a4 <HAL_DMA_Start_IT+0x1f8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d045      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a31      	ldr	r2, [pc, #196]	@ (80048a8 <HAL_DMA_Start_IT+0x1fc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d040      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <HAL_DMA_Start_IT+0x200>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d03b      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2e      	ldr	r2, [pc, #184]	@ (80048b0 <HAL_DMA_Start_IT+0x204>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d036      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2d      	ldr	r2, [pc, #180]	@ (80048b4 <HAL_DMA_Start_IT+0x208>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d031      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2b      	ldr	r2, [pc, #172]	@ (80048b8 <HAL_DMA_Start_IT+0x20c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02c      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <HAL_DMA_Start_IT+0x210>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d027      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a28      	ldr	r2, [pc, #160]	@ (80048c0 <HAL_DMA_Start_IT+0x214>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a27      	ldr	r2, [pc, #156]	@ (80048c4 <HAL_DMA_Start_IT+0x218>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01d      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a25      	ldr	r2, [pc, #148]	@ (80048c8 <HAL_DMA_Start_IT+0x21c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a24      	ldr	r2, [pc, #144]	@ (80048cc <HAL_DMA_Start_IT+0x220>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a22      	ldr	r2, [pc, #136]	@ (80048d0 <HAL_DMA_Start_IT+0x224>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a21      	ldr	r2, [pc, #132]	@ (80048d4 <HAL_DMA_Start_IT+0x228>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1f      	ldr	r2, [pc, #124]	@ (80048d8 <HAL_DMA_Start_IT+0x22c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_DMA_Start_IT+0x1bc>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <HAL_DMA_Start_IT+0x230>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d101      	bne.n	800486c <HAL_DMA_Start_IT+0x1c0>
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <HAL_DMA_Start_IT+0x1c2>
 800486c:	2300      	movs	r3, #0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d036      	beq.n	80048e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 021e 	bic.w	r2, r3, #30
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0216 	orr.w	r2, r2, #22
 8004884:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03e      	beq.n	800490c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0208 	orr.w	r2, r2, #8
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e035      	b.n	800490c <HAL_DMA_Start_IT+0x260>
 80048a0:	40020010 	.word	0x40020010
 80048a4:	40020028 	.word	0x40020028
 80048a8:	40020040 	.word	0x40020040
 80048ac:	40020058 	.word	0x40020058
 80048b0:	40020070 	.word	0x40020070
 80048b4:	40020088 	.word	0x40020088
 80048b8:	400200a0 	.word	0x400200a0
 80048bc:	400200b8 	.word	0x400200b8
 80048c0:	40020410 	.word	0x40020410
 80048c4:	40020428 	.word	0x40020428
 80048c8:	40020440 	.word	0x40020440
 80048cc:	40020458 	.word	0x40020458
 80048d0:	40020470 	.word	0x40020470
 80048d4:	40020488 	.word	0x40020488
 80048d8:	400204a0 	.word	0x400204a0
 80048dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 020e 	bic.w	r2, r3, #14
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 020a 	orr.w	r2, r2, #10
 80048f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d007      	beq.n	800490c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0204 	orr.w	r2, r2, #4
 800490a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a83      	ldr	r2, [pc, #524]	@ (8004b20 <HAL_DMA_Start_IT+0x474>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d072      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a82      	ldr	r2, [pc, #520]	@ (8004b24 <HAL_DMA_Start_IT+0x478>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d06d      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a80      	ldr	r2, [pc, #512]	@ (8004b28 <HAL_DMA_Start_IT+0x47c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d068      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b2c <HAL_DMA_Start_IT+0x480>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d063      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7d      	ldr	r2, [pc, #500]	@ (8004b30 <HAL_DMA_Start_IT+0x484>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d05e      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7c      	ldr	r2, [pc, #496]	@ (8004b34 <HAL_DMA_Start_IT+0x488>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d059      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b38 <HAL_DMA_Start_IT+0x48c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d054      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a79      	ldr	r2, [pc, #484]	@ (8004b3c <HAL_DMA_Start_IT+0x490>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d04f      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a77      	ldr	r2, [pc, #476]	@ (8004b40 <HAL_DMA_Start_IT+0x494>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04a      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a76      	ldr	r2, [pc, #472]	@ (8004b44 <HAL_DMA_Start_IT+0x498>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d045      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a74      	ldr	r2, [pc, #464]	@ (8004b48 <HAL_DMA_Start_IT+0x49c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d040      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a73      	ldr	r2, [pc, #460]	@ (8004b4c <HAL_DMA_Start_IT+0x4a0>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d03b      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a71      	ldr	r2, [pc, #452]	@ (8004b50 <HAL_DMA_Start_IT+0x4a4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d036      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a70      	ldr	r2, [pc, #448]	@ (8004b54 <HAL_DMA_Start_IT+0x4a8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d031      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b58 <HAL_DMA_Start_IT+0x4ac>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02c      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6d      	ldr	r2, [pc, #436]	@ (8004b5c <HAL_DMA_Start_IT+0x4b0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d027      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004b60 <HAL_DMA_Start_IT+0x4b4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a6a      	ldr	r2, [pc, #424]	@ (8004b64 <HAL_DMA_Start_IT+0x4b8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a68      	ldr	r2, [pc, #416]	@ (8004b68 <HAL_DMA_Start_IT+0x4bc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a67      	ldr	r2, [pc, #412]	@ (8004b6c <HAL_DMA_Start_IT+0x4c0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a65      	ldr	r2, [pc, #404]	@ (8004b70 <HAL_DMA_Start_IT+0x4c4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a64      	ldr	r2, [pc, #400]	@ (8004b74 <HAL_DMA_Start_IT+0x4c8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a62      	ldr	r2, [pc, #392]	@ (8004b78 <HAL_DMA_Start_IT+0x4cc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_DMA_Start_IT+0x350>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a61      	ldr	r2, [pc, #388]	@ (8004b7c <HAL_DMA_Start_IT+0x4d0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Start_IT+0x354>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_Start_IT+0x356>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01a      	beq.n	8004a3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a37      	ldr	r2, [pc, #220]	@ (8004b20 <HAL_DMA_Start_IT+0x474>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d04a      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a36      	ldr	r2, [pc, #216]	@ (8004b24 <HAL_DMA_Start_IT+0x478>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d045      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a34      	ldr	r2, [pc, #208]	@ (8004b28 <HAL_DMA_Start_IT+0x47c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d040      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a33      	ldr	r2, [pc, #204]	@ (8004b2c <HAL_DMA_Start_IT+0x480>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d03b      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a31      	ldr	r2, [pc, #196]	@ (8004b30 <HAL_DMA_Start_IT+0x484>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d036      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a30      	ldr	r2, [pc, #192]	@ (8004b34 <HAL_DMA_Start_IT+0x488>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d031      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b38 <HAL_DMA_Start_IT+0x48c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d02c      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2d      	ldr	r2, [pc, #180]	@ (8004b3c <HAL_DMA_Start_IT+0x490>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d027      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2b      	ldr	r2, [pc, #172]	@ (8004b40 <HAL_DMA_Start_IT+0x494>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b44 <HAL_DMA_Start_IT+0x498>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d01d      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a28      	ldr	r2, [pc, #160]	@ (8004b48 <HAL_DMA_Start_IT+0x49c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d018      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a27      	ldr	r2, [pc, #156]	@ (8004b4c <HAL_DMA_Start_IT+0x4a0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	@ (8004b50 <HAL_DMA_Start_IT+0x4a4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00e      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a24      	ldr	r2, [pc, #144]	@ (8004b54 <HAL_DMA_Start_IT+0x4a8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d009      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <HAL_DMA_Start_IT+0x4ac>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <HAL_DMA_Start_IT+0x430>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a21      	ldr	r2, [pc, #132]	@ (8004b5c <HAL_DMA_Start_IT+0x4b0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <HAL_DMA_Start_IT+0x442>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e012      	b.n	8004b14 <HAL_DMA_Start_IT+0x468>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e009      	b.n	8004b14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40020010 	.word	0x40020010
 8004b24:	40020028 	.word	0x40020028
 8004b28:	40020040 	.word	0x40020040
 8004b2c:	40020058 	.word	0x40020058
 8004b30:	40020070 	.word	0x40020070
 8004b34:	40020088 	.word	0x40020088
 8004b38:	400200a0 	.word	0x400200a0
 8004b3c:	400200b8 	.word	0x400200b8
 8004b40:	40020410 	.word	0x40020410
 8004b44:	40020428 	.word	0x40020428
 8004b48:	40020440 	.word	0x40020440
 8004b4c:	40020458 	.word	0x40020458
 8004b50:	40020470 	.word	0x40020470
 8004b54:	40020488 	.word	0x40020488
 8004b58:	400204a0 	.word	0x400204a0
 8004b5c:	400204b8 	.word	0x400204b8
 8004b60:	58025408 	.word	0x58025408
 8004b64:	5802541c 	.word	0x5802541c
 8004b68:	58025430 	.word	0x58025430
 8004b6c:	58025444 	.word	0x58025444
 8004b70:	58025458 	.word	0x58025458
 8004b74:	5802546c 	.word	0x5802546c
 8004b78:	58025480 	.word	0x58025480
 8004b7c:	58025494 	.word	0x58025494

08004b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b88:	f7ff f8f8 	bl	8003d7c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e2dc      	b.n	8005152 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d008      	beq.n	8004bb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2280      	movs	r2, #128	@ 0x80
 8004ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e2cd      	b.n	8005152 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a76      	ldr	r2, [pc, #472]	@ (8004d94 <HAL_DMA_Abort+0x214>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d04a      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a74      	ldr	r2, [pc, #464]	@ (8004d98 <HAL_DMA_Abort+0x218>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d045      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a73      	ldr	r2, [pc, #460]	@ (8004d9c <HAL_DMA_Abort+0x21c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d040      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a71      	ldr	r2, [pc, #452]	@ (8004da0 <HAL_DMA_Abort+0x220>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d03b      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a70      	ldr	r2, [pc, #448]	@ (8004da4 <HAL_DMA_Abort+0x224>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d036      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a6e      	ldr	r2, [pc, #440]	@ (8004da8 <HAL_DMA_Abort+0x228>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d031      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8004dac <HAL_DMA_Abort+0x22c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d02c      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a6b      	ldr	r2, [pc, #428]	@ (8004db0 <HAL_DMA_Abort+0x230>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d027      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004db4 <HAL_DMA_Abort+0x234>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a68      	ldr	r2, [pc, #416]	@ (8004db8 <HAL_DMA_Abort+0x238>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a67      	ldr	r2, [pc, #412]	@ (8004dbc <HAL_DMA_Abort+0x23c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a65      	ldr	r2, [pc, #404]	@ (8004dc0 <HAL_DMA_Abort+0x240>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a64      	ldr	r2, [pc, #400]	@ (8004dc4 <HAL_DMA_Abort+0x244>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a62      	ldr	r2, [pc, #392]	@ (8004dc8 <HAL_DMA_Abort+0x248>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a61      	ldr	r2, [pc, #388]	@ (8004dcc <HAL_DMA_Abort+0x24c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_DMA_Abort+0xd6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd0 <HAL_DMA_Abort+0x250>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d101      	bne.n	8004c5a <HAL_DMA_Abort+0xda>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_DMA_Abort+0xdc>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 021e 	bic.w	r2, r2, #30
 8004c6e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c7e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e00a      	b.n	8004c9e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 020e 	bic.w	r2, r2, #14
 8004c96:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3c      	ldr	r2, [pc, #240]	@ (8004d94 <HAL_DMA_Abort+0x214>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d072      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3a      	ldr	r2, [pc, #232]	@ (8004d98 <HAL_DMA_Abort+0x218>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d06d      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a39      	ldr	r2, [pc, #228]	@ (8004d9c <HAL_DMA_Abort+0x21c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d068      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a37      	ldr	r2, [pc, #220]	@ (8004da0 <HAL_DMA_Abort+0x220>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d063      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a36      	ldr	r2, [pc, #216]	@ (8004da4 <HAL_DMA_Abort+0x224>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d05e      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a34      	ldr	r2, [pc, #208]	@ (8004da8 <HAL_DMA_Abort+0x228>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d059      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a33      	ldr	r2, [pc, #204]	@ (8004dac <HAL_DMA_Abort+0x22c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d054      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a31      	ldr	r2, [pc, #196]	@ (8004db0 <HAL_DMA_Abort+0x230>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d04f      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <HAL_DMA_Abort+0x234>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d04a      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8004db8 <HAL_DMA_Abort+0x238>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d045      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2d      	ldr	r2, [pc, #180]	@ (8004dbc <HAL_DMA_Abort+0x23c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d040      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <HAL_DMA_Abort+0x240>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d03b      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_DMA_Abort+0x244>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d036      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <HAL_DMA_Abort+0x248>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d031      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <HAL_DMA_Abort+0x24c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d02c      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <HAL_DMA_Abort+0x250>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d027      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <HAL_DMA_Abort+0x254>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d022      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <HAL_DMA_Abort+0x258>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01d      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a21      	ldr	r2, [pc, #132]	@ (8004ddc <HAL_DMA_Abort+0x25c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d018      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	@ (8004de0 <HAL_DMA_Abort+0x260>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8004de4 <HAL_DMA_Abort+0x264>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <HAL_DMA_Abort+0x268>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <HAL_DMA_Abort+0x26c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_DMA_Abort+0x20e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a19      	ldr	r2, [pc, #100]	@ (8004df0 <HAL_DMA_Abort+0x270>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d132      	bne.n	8004df4 <HAL_DMA_Abort+0x274>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e031      	b.n	8004df6 <HAL_DMA_Abort+0x276>
 8004d92:	bf00      	nop
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8
 8004dd4:	58025408 	.word	0x58025408
 8004dd8:	5802541c 	.word	0x5802541c
 8004ddc:	58025430 	.word	0x58025430
 8004de0:	58025444 	.word	0x58025444
 8004de4:	58025458 	.word	0x58025458
 8004de8:	5802546c 	.word	0x5802546c
 8004dec:	58025480 	.word	0x58025480
 8004df0:	58025494 	.word	0x58025494
 8004df4:	2300      	movs	r3, #0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6d      	ldr	r2, [pc, #436]	@ (8004fc4 <HAL_DMA_Abort+0x444>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d04a      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6b      	ldr	r2, [pc, #428]	@ (8004fc8 <HAL_DMA_Abort+0x448>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d045      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6a      	ldr	r2, [pc, #424]	@ (8004fcc <HAL_DMA_Abort+0x44c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d040      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a68      	ldr	r2, [pc, #416]	@ (8004fd0 <HAL_DMA_Abort+0x450>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a67      	ldr	r2, [pc, #412]	@ (8004fd4 <HAL_DMA_Abort+0x454>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d036      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a65      	ldr	r2, [pc, #404]	@ (8004fd8 <HAL_DMA_Abort+0x458>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d031      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a64      	ldr	r2, [pc, #400]	@ (8004fdc <HAL_DMA_Abort+0x45c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d02c      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a62      	ldr	r2, [pc, #392]	@ (8004fe0 <HAL_DMA_Abort+0x460>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d027      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a61      	ldr	r2, [pc, #388]	@ (8004fe4 <HAL_DMA_Abort+0x464>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a5f      	ldr	r2, [pc, #380]	@ (8004fe8 <HAL_DMA_Abort+0x468>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a5e      	ldr	r2, [pc, #376]	@ (8004fec <HAL_DMA_Abort+0x46c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a5c      	ldr	r2, [pc, #368]	@ (8004ff0 <HAL_DMA_Abort+0x470>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff4 <HAL_DMA_Abort+0x474>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a59      	ldr	r2, [pc, #356]	@ (8004ff8 <HAL_DMA_Abort+0x478>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a58      	ldr	r2, [pc, #352]	@ (8004ffc <HAL_DMA_Abort+0x47c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_DMA_Abort+0x32a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a56      	ldr	r2, [pc, #344]	@ (8005000 <HAL_DMA_Abort+0x480>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <HAL_DMA_Abort+0x33c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e007      	b.n	8004ecc <HAL_DMA_Abort+0x34c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ecc:	e013      	b.n	8004ef6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ece:	f7fe ff55 	bl	8003d7c <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b05      	cmp	r3, #5
 8004eda:	d90c      	bls.n	8004ef6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2203      	movs	r2, #3
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e12d      	b.n	8005152 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc4 <HAL_DMA_Abort+0x444>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d04a      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc8 <HAL_DMA_Abort+0x448>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d045      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fcc <HAL_DMA_Abort+0x44c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d040      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd0 <HAL_DMA_Abort+0x450>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d03b      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <HAL_DMA_Abort+0x454>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d036      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a27      	ldr	r2, [pc, #156]	@ (8004fd8 <HAL_DMA_Abort+0x458>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d031      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a26      	ldr	r2, [pc, #152]	@ (8004fdc <HAL_DMA_Abort+0x45c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d02c      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a24      	ldr	r2, [pc, #144]	@ (8004fe0 <HAL_DMA_Abort+0x460>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d027      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a23      	ldr	r2, [pc, #140]	@ (8004fe4 <HAL_DMA_Abort+0x464>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d022      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a21      	ldr	r2, [pc, #132]	@ (8004fe8 <HAL_DMA_Abort+0x468>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01d      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a20      	ldr	r2, [pc, #128]	@ (8004fec <HAL_DMA_Abort+0x46c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d018      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff0 <HAL_DMA_Abort+0x470>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_DMA_Abort+0x474>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff8 <HAL_DMA_Abort+0x478>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a1a      	ldr	r2, [pc, #104]	@ (8004ffc <HAL_DMA_Abort+0x47c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_DMA_Abort+0x422>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	@ (8005000 <HAL_DMA_Abort+0x480>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DMA_Abort+0x426>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_DMA_Abort+0x428>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02b      	beq.n	8005004 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	223f      	movs	r2, #63	@ 0x3f
 8004fbc:	409a      	lsls	r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	e02a      	b.n	800501a <HAL_DMA_Abort+0x49a>
 8004fc4:	40020010 	.word	0x40020010
 8004fc8:	40020028 	.word	0x40020028
 8004fcc:	40020040 	.word	0x40020040
 8004fd0:	40020058 	.word	0x40020058
 8004fd4:	40020070 	.word	0x40020070
 8004fd8:	40020088 	.word	0x40020088
 8004fdc:	400200a0 	.word	0x400200a0
 8004fe0:	400200b8 	.word	0x400200b8
 8004fe4:	40020410 	.word	0x40020410
 8004fe8:	40020428 	.word	0x40020428
 8004fec:	40020440 	.word	0x40020440
 8004ff0:	40020458 	.word	0x40020458
 8004ff4:	40020470 	.word	0x40020470
 8004ff8:	40020488 	.word	0x40020488
 8004ffc:	400204a0 	.word	0x400204a0
 8005000:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2201      	movs	r2, #1
 8005014:	409a      	lsls	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4f      	ldr	r2, [pc, #316]	@ (800515c <HAL_DMA_Abort+0x5dc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d072      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a4d      	ldr	r2, [pc, #308]	@ (8005160 <HAL_DMA_Abort+0x5e0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d06d      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4c      	ldr	r2, [pc, #304]	@ (8005164 <HAL_DMA_Abort+0x5e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d068      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <HAL_DMA_Abort+0x5e8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d063      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a49      	ldr	r2, [pc, #292]	@ (800516c <HAL_DMA_Abort+0x5ec>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d05e      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a47      	ldr	r2, [pc, #284]	@ (8005170 <HAL_DMA_Abort+0x5f0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d059      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a46      	ldr	r2, [pc, #280]	@ (8005174 <HAL_DMA_Abort+0x5f4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d054      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a44      	ldr	r2, [pc, #272]	@ (8005178 <HAL_DMA_Abort+0x5f8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d04f      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a43      	ldr	r2, [pc, #268]	@ (800517c <HAL_DMA_Abort+0x5fc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d04a      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a41      	ldr	r2, [pc, #260]	@ (8005180 <HAL_DMA_Abort+0x600>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d045      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a40      	ldr	r2, [pc, #256]	@ (8005184 <HAL_DMA_Abort+0x604>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d040      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a3e      	ldr	r2, [pc, #248]	@ (8005188 <HAL_DMA_Abort+0x608>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d03b      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a3d      	ldr	r2, [pc, #244]	@ (800518c <HAL_DMA_Abort+0x60c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d036      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3b      	ldr	r2, [pc, #236]	@ (8005190 <HAL_DMA_Abort+0x610>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d031      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a3a      	ldr	r2, [pc, #232]	@ (8005194 <HAL_DMA_Abort+0x614>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d02c      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a38      	ldr	r2, [pc, #224]	@ (8005198 <HAL_DMA_Abort+0x618>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d027      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a37      	ldr	r2, [pc, #220]	@ (800519c <HAL_DMA_Abort+0x61c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a35      	ldr	r2, [pc, #212]	@ (80051a0 <HAL_DMA_Abort+0x620>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01d      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a34      	ldr	r2, [pc, #208]	@ (80051a4 <HAL_DMA_Abort+0x624>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a32      	ldr	r2, [pc, #200]	@ (80051a8 <HAL_DMA_Abort+0x628>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a31      	ldr	r2, [pc, #196]	@ (80051ac <HAL_DMA_Abort+0x62c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	@ (80051b0 <HAL_DMA_Abort+0x630>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2e      	ldr	r2, [pc, #184]	@ (80051b4 <HAL_DMA_Abort+0x634>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_DMA_Abort+0x58a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2c      	ldr	r2, [pc, #176]	@ (80051b8 <HAL_DMA_Abort+0x638>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_DMA_Abort+0x58e>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_DMA_Abort+0x590>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800511c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005134:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800513e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40020010 	.word	0x40020010
 8005160:	40020028 	.word	0x40020028
 8005164:	40020040 	.word	0x40020040
 8005168:	40020058 	.word	0x40020058
 800516c:	40020070 	.word	0x40020070
 8005170:	40020088 	.word	0x40020088
 8005174:	400200a0 	.word	0x400200a0
 8005178:	400200b8 	.word	0x400200b8
 800517c:	40020410 	.word	0x40020410
 8005180:	40020428 	.word	0x40020428
 8005184:	40020440 	.word	0x40020440
 8005188:	40020458 	.word	0x40020458
 800518c:	40020470 	.word	0x40020470
 8005190:	40020488 	.word	0x40020488
 8005194:	400204a0 	.word	0x400204a0
 8005198:	400204b8 	.word	0x400204b8
 800519c:	58025408 	.word	0x58025408
 80051a0:	5802541c 	.word	0x5802541c
 80051a4:	58025430 	.word	0x58025430
 80051a8:	58025444 	.word	0x58025444
 80051ac:	58025458 	.word	0x58025458
 80051b0:	5802546c 	.word	0x5802546c
 80051b4:	58025480 	.word	0x58025480
 80051b8:	58025494 	.word	0x58025494

080051bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e237      	b.n	800563e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2280      	movs	r2, #128	@ 0x80
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e22c      	b.n	800563e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a5c      	ldr	r2, [pc, #368]	@ (800535c <HAL_DMA_Abort_IT+0x1a0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04a      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005360 <HAL_DMA_Abort_IT+0x1a4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d045      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a59      	ldr	r2, [pc, #356]	@ (8005364 <HAL_DMA_Abort_IT+0x1a8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d040      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a58      	ldr	r2, [pc, #352]	@ (8005368 <HAL_DMA_Abort_IT+0x1ac>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d03b      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a56      	ldr	r2, [pc, #344]	@ (800536c <HAL_DMA_Abort_IT+0x1b0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d036      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a55      	ldr	r2, [pc, #340]	@ (8005370 <HAL_DMA_Abort_IT+0x1b4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d031      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a53      	ldr	r2, [pc, #332]	@ (8005374 <HAL_DMA_Abort_IT+0x1b8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d02c      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a52      	ldr	r2, [pc, #328]	@ (8005378 <HAL_DMA_Abort_IT+0x1bc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d027      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a50      	ldr	r2, [pc, #320]	@ (800537c <HAL_DMA_Abort_IT+0x1c0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4f      	ldr	r2, [pc, #316]	@ (8005380 <HAL_DMA_Abort_IT+0x1c4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d01d      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a4d      	ldr	r2, [pc, #308]	@ (8005384 <HAL_DMA_Abort_IT+0x1c8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a4c      	ldr	r2, [pc, #304]	@ (8005388 <HAL_DMA_Abort_IT+0x1cc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a4a      	ldr	r2, [pc, #296]	@ (800538c <HAL_DMA_Abort_IT+0x1d0>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a49      	ldr	r2, [pc, #292]	@ (8005390 <HAL_DMA_Abort_IT+0x1d4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a47      	ldr	r2, [pc, #284]	@ (8005394 <HAL_DMA_Abort_IT+0x1d8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_DMA_Abort_IT+0xc8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a46      	ldr	r2, [pc, #280]	@ (8005398 <HAL_DMA_Abort_IT+0x1dc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d101      	bne.n	8005288 <HAL_DMA_Abort_IT+0xcc>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_DMA_Abort_IT+0xce>
 8005288:	2300      	movs	r3, #0
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8086 	beq.w	800539c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a2f      	ldr	r2, [pc, #188]	@ (800535c <HAL_DMA_Abort_IT+0x1a0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d04a      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005360 <HAL_DMA_Abort_IT+0x1a4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d045      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005364 <HAL_DMA_Abort_IT+0x1a8>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d040      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005368 <HAL_DMA_Abort_IT+0x1ac>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d03b      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a29      	ldr	r2, [pc, #164]	@ (800536c <HAL_DMA_Abort_IT+0x1b0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d036      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a28      	ldr	r2, [pc, #160]	@ (8005370 <HAL_DMA_Abort_IT+0x1b4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d031      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a26      	ldr	r2, [pc, #152]	@ (8005374 <HAL_DMA_Abort_IT+0x1b8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d02c      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a25      	ldr	r2, [pc, #148]	@ (8005378 <HAL_DMA_Abort_IT+0x1bc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d027      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a23      	ldr	r2, [pc, #140]	@ (800537c <HAL_DMA_Abort_IT+0x1c0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d022      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a22      	ldr	r2, [pc, #136]	@ (8005380 <HAL_DMA_Abort_IT+0x1c4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d01d      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <HAL_DMA_Abort_IT+0x1c8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d018      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_DMA_Abort_IT+0x1cc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d013      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <HAL_DMA_Abort_IT+0x1d0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00e      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1c      	ldr	r2, [pc, #112]	@ (8005390 <HAL_DMA_Abort_IT+0x1d4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d009      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1a      	ldr	r2, [pc, #104]	@ (8005394 <HAL_DMA_Abort_IT+0x1d8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_Abort_IT+0x17c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <HAL_DMA_Abort_IT+0x1dc>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d108      	bne.n	800534a <HAL_DMA_Abort_IT+0x18e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e178      	b.n	800563c <HAL_DMA_Abort_IT+0x480>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	e16f      	b.n	800563c <HAL_DMA_Abort_IT+0x480>
 800535c:	40020010 	.word	0x40020010
 8005360:	40020028 	.word	0x40020028
 8005364:	40020040 	.word	0x40020040
 8005368:	40020058 	.word	0x40020058
 800536c:	40020070 	.word	0x40020070
 8005370:	40020088 	.word	0x40020088
 8005374:	400200a0 	.word	0x400200a0
 8005378:	400200b8 	.word	0x400200b8
 800537c:	40020410 	.word	0x40020410
 8005380:	40020428 	.word	0x40020428
 8005384:	40020440 	.word	0x40020440
 8005388:	40020458 	.word	0x40020458
 800538c:	40020470 	.word	0x40020470
 8005390:	40020488 	.word	0x40020488
 8005394:	400204a0 	.word	0x400204a0
 8005398:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 020e 	bic.w	r2, r2, #14
 80053aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a6c      	ldr	r2, [pc, #432]	@ (8005564 <HAL_DMA_Abort_IT+0x3a8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d04a      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005568 <HAL_DMA_Abort_IT+0x3ac>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d045      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a69      	ldr	r2, [pc, #420]	@ (800556c <HAL_DMA_Abort_IT+0x3b0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d040      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a68      	ldr	r2, [pc, #416]	@ (8005570 <HAL_DMA_Abort_IT+0x3b4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d03b      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a66      	ldr	r2, [pc, #408]	@ (8005574 <HAL_DMA_Abort_IT+0x3b8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d036      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a65      	ldr	r2, [pc, #404]	@ (8005578 <HAL_DMA_Abort_IT+0x3bc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d031      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a63      	ldr	r2, [pc, #396]	@ (800557c <HAL_DMA_Abort_IT+0x3c0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d02c      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a62      	ldr	r2, [pc, #392]	@ (8005580 <HAL_DMA_Abort_IT+0x3c4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d027      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a60      	ldr	r2, [pc, #384]	@ (8005584 <HAL_DMA_Abort_IT+0x3c8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d022      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5f      	ldr	r2, [pc, #380]	@ (8005588 <HAL_DMA_Abort_IT+0x3cc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d01d      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5d      	ldr	r2, [pc, #372]	@ (800558c <HAL_DMA_Abort_IT+0x3d0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a5c      	ldr	r2, [pc, #368]	@ (8005590 <HAL_DMA_Abort_IT+0x3d4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a5a      	ldr	r2, [pc, #360]	@ (8005594 <HAL_DMA_Abort_IT+0x3d8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a59      	ldr	r2, [pc, #356]	@ (8005598 <HAL_DMA_Abort_IT+0x3dc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a57      	ldr	r2, [pc, #348]	@ (800559c <HAL_DMA_Abort_IT+0x3e0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_DMA_Abort_IT+0x290>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a56      	ldr	r2, [pc, #344]	@ (80055a0 <HAL_DMA_Abort_IT+0x3e4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d108      	bne.n	800545e <HAL_DMA_Abort_IT+0x2a2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	e007      	b.n	800546e <HAL_DMA_Abort_IT+0x2b2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a3c      	ldr	r2, [pc, #240]	@ (8005564 <HAL_DMA_Abort_IT+0x3a8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d072      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3a      	ldr	r2, [pc, #232]	@ (8005568 <HAL_DMA_Abort_IT+0x3ac>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d06d      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a39      	ldr	r2, [pc, #228]	@ (800556c <HAL_DMA_Abort_IT+0x3b0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d068      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a37      	ldr	r2, [pc, #220]	@ (8005570 <HAL_DMA_Abort_IT+0x3b4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d063      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a36      	ldr	r2, [pc, #216]	@ (8005574 <HAL_DMA_Abort_IT+0x3b8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d05e      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a34      	ldr	r2, [pc, #208]	@ (8005578 <HAL_DMA_Abort_IT+0x3bc>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d059      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a33      	ldr	r2, [pc, #204]	@ (800557c <HAL_DMA_Abort_IT+0x3c0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d054      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a31      	ldr	r2, [pc, #196]	@ (8005580 <HAL_DMA_Abort_IT+0x3c4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04f      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a30      	ldr	r2, [pc, #192]	@ (8005584 <HAL_DMA_Abort_IT+0x3c8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d04a      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005588 <HAL_DMA_Abort_IT+0x3cc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d045      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2d      	ldr	r2, [pc, #180]	@ (800558c <HAL_DMA_Abort_IT+0x3d0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d040      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005590 <HAL_DMA_Abort_IT+0x3d4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d03b      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005594 <HAL_DMA_Abort_IT+0x3d8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d036      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a28      	ldr	r2, [pc, #160]	@ (8005598 <HAL_DMA_Abort_IT+0x3dc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d031      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a27      	ldr	r2, [pc, #156]	@ (800559c <HAL_DMA_Abort_IT+0x3e0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d02c      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a25      	ldr	r2, [pc, #148]	@ (80055a0 <HAL_DMA_Abort_IT+0x3e4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d027      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a24      	ldr	r2, [pc, #144]	@ (80055a4 <HAL_DMA_Abort_IT+0x3e8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a22      	ldr	r2, [pc, #136]	@ (80055a8 <HAL_DMA_Abort_IT+0x3ec>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a21      	ldr	r2, [pc, #132]	@ (80055ac <HAL_DMA_Abort_IT+0x3f0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d018      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_DMA_Abort_IT+0x3f4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	@ (80055b4 <HAL_DMA_Abort_IT+0x3f8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_DMA_Abort_IT+0x3fc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_DMA_Abort_IT+0x400>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_DMA_Abort_IT+0x3a2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	@ (80055c0 <HAL_DMA_Abort_IT+0x404>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d132      	bne.n	80055c4 <HAL_DMA_Abort_IT+0x408>
 800555e:	2301      	movs	r3, #1
 8005560:	e031      	b.n	80055c6 <HAL_DMA_Abort_IT+0x40a>
 8005562:	bf00      	nop
 8005564:	40020010 	.word	0x40020010
 8005568:	40020028 	.word	0x40020028
 800556c:	40020040 	.word	0x40020040
 8005570:	40020058 	.word	0x40020058
 8005574:	40020070 	.word	0x40020070
 8005578:	40020088 	.word	0x40020088
 800557c:	400200a0 	.word	0x400200a0
 8005580:	400200b8 	.word	0x400200b8
 8005584:	40020410 	.word	0x40020410
 8005588:	40020428 	.word	0x40020428
 800558c:	40020440 	.word	0x40020440
 8005590:	40020458 	.word	0x40020458
 8005594:	40020470 	.word	0x40020470
 8005598:	40020488 	.word	0x40020488
 800559c:	400204a0 	.word	0x400204a0
 80055a0:	400204b8 	.word	0x400204b8
 80055a4:	58025408 	.word	0x58025408
 80055a8:	5802541c 	.word	0x5802541c
 80055ac:	58025430 	.word	0x58025430
 80055b0:	58025444 	.word	0x58025444
 80055b4:	58025458 	.word	0x58025458
 80055b8:	5802546c 	.word	0x5802546c
 80055bc:	58025480 	.word	0x58025480
 80055c0:	58025494 	.word	0x58025494
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d028      	beq.n	800561c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	2201      	movs	r2, #1
 80055ea:	409a      	lsls	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80055f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800560c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005610:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800561a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop

08005648 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	@ 0x28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005654:	4b67      	ldr	r3, [pc, #412]	@ (80057f4 <HAL_DMA_IRQHandler+0x1ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a67      	ldr	r2, [pc, #412]	@ (80057f8 <HAL_DMA_IRQHandler+0x1b0>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0a9b      	lsrs	r3, r3, #10
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005666:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a5f      	ldr	r2, [pc, #380]	@ (80057fc <HAL_DMA_IRQHandler+0x1b4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d04a      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a5d      	ldr	r2, [pc, #372]	@ (8005800 <HAL_DMA_IRQHandler+0x1b8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d045      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a5c      	ldr	r2, [pc, #368]	@ (8005804 <HAL_DMA_IRQHandler+0x1bc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d040      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5a      	ldr	r2, [pc, #360]	@ (8005808 <HAL_DMA_IRQHandler+0x1c0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d03b      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a59      	ldr	r2, [pc, #356]	@ (800580c <HAL_DMA_IRQHandler+0x1c4>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d036      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a57      	ldr	r2, [pc, #348]	@ (8005810 <HAL_DMA_IRQHandler+0x1c8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d031      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a56      	ldr	r2, [pc, #344]	@ (8005814 <HAL_DMA_IRQHandler+0x1cc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d02c      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a54      	ldr	r2, [pc, #336]	@ (8005818 <HAL_DMA_IRQHandler+0x1d0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d027      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a53      	ldr	r2, [pc, #332]	@ (800581c <HAL_DMA_IRQHandler+0x1d4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d022      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a51      	ldr	r2, [pc, #324]	@ (8005820 <HAL_DMA_IRQHandler+0x1d8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a50      	ldr	r2, [pc, #320]	@ (8005824 <HAL_DMA_IRQHandler+0x1dc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a4e      	ldr	r2, [pc, #312]	@ (8005828 <HAL_DMA_IRQHandler+0x1e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4d      	ldr	r2, [pc, #308]	@ (800582c <HAL_DMA_IRQHandler+0x1e4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a4b      	ldr	r2, [pc, #300]	@ (8005830 <HAL_DMA_IRQHandler+0x1e8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a4a      	ldr	r2, [pc, #296]	@ (8005834 <HAL_DMA_IRQHandler+0x1ec>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_DMA_IRQHandler+0xd2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a48      	ldr	r2, [pc, #288]	@ (8005838 <HAL_DMA_IRQHandler+0x1f0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <HAL_DMA_IRQHandler+0xd6>
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <HAL_DMA_IRQHandler+0xd8>
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 842b 	beq.w	8005f7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2208      	movs	r2, #8
 8005730:	409a      	lsls	r2, r3
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80a2 	beq.w	8005880 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2e      	ldr	r2, [pc, #184]	@ (80057fc <HAL_DMA_IRQHandler+0x1b4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d04a      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2d      	ldr	r2, [pc, #180]	@ (8005800 <HAL_DMA_IRQHandler+0x1b8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d045      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2b      	ldr	r2, [pc, #172]	@ (8005804 <HAL_DMA_IRQHandler+0x1bc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d040      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2a      	ldr	r2, [pc, #168]	@ (8005808 <HAL_DMA_IRQHandler+0x1c0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d03b      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a28      	ldr	r2, [pc, #160]	@ (800580c <HAL_DMA_IRQHandler+0x1c4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d036      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a27      	ldr	r2, [pc, #156]	@ (8005810 <HAL_DMA_IRQHandler+0x1c8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d031      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a25      	ldr	r2, [pc, #148]	@ (8005814 <HAL_DMA_IRQHandler+0x1cc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d02c      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a24      	ldr	r2, [pc, #144]	@ (8005818 <HAL_DMA_IRQHandler+0x1d0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d027      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a22      	ldr	r2, [pc, #136]	@ (800581c <HAL_DMA_IRQHandler+0x1d4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d022      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a21      	ldr	r2, [pc, #132]	@ (8005820 <HAL_DMA_IRQHandler+0x1d8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d01d      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005824 <HAL_DMA_IRQHandler+0x1dc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d018      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005828 <HAL_DMA_IRQHandler+0x1e0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	@ (800582c <HAL_DMA_IRQHandler+0x1e4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00e      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005830 <HAL_DMA_IRQHandler+0x1e8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d009      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <HAL_DMA_IRQHandler+0x1ec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d004      	beq.n	80057dc <HAL_DMA_IRQHandler+0x194>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <HAL_DMA_IRQHandler+0x1f0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d12f      	bne.n	800583c <HAL_DMA_IRQHandler+0x1f4>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bf14      	ite	ne
 80057ea:	2301      	movne	r3, #1
 80057ec:	2300      	moveq	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e02e      	b.n	8005850 <HAL_DMA_IRQHandler+0x208>
 80057f2:	bf00      	nop
 80057f4:	2400000c 	.word	0x2400000c
 80057f8:	1b4e81b5 	.word	0x1b4e81b5
 80057fc:	40020010 	.word	0x40020010
 8005800:	40020028 	.word	0x40020028
 8005804:	40020040 	.word	0x40020040
 8005808:	40020058 	.word	0x40020058
 800580c:	40020070 	.word	0x40020070
 8005810:	40020088 	.word	0x40020088
 8005814:	400200a0 	.word	0x400200a0
 8005818:	400200b8 	.word	0x400200b8
 800581c:	40020410 	.word	0x40020410
 8005820:	40020428 	.word	0x40020428
 8005824:	40020440 	.word	0x40020440
 8005828:	40020458 	.word	0x40020458
 800582c:	40020470 	.word	0x40020470
 8005830:	40020488 	.word	0x40020488
 8005834:	400204a0 	.word	0x400204a0
 8005838:	400204b8 	.word	0x400204b8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0204 	bic.w	r2, r2, #4
 8005862:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2208      	movs	r2, #8
 800586e:	409a      	lsls	r2, r3
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005878:	f043 0201 	orr.w	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d06e      	beq.n	8005974 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a69      	ldr	r2, [pc, #420]	@ (8005a40 <HAL_DMA_IRQHandler+0x3f8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d04a      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a67      	ldr	r2, [pc, #412]	@ (8005a44 <HAL_DMA_IRQHandler+0x3fc>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d045      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a66      	ldr	r2, [pc, #408]	@ (8005a48 <HAL_DMA_IRQHandler+0x400>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d040      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a64      	ldr	r2, [pc, #400]	@ (8005a4c <HAL_DMA_IRQHandler+0x404>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d03b      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a63      	ldr	r2, [pc, #396]	@ (8005a50 <HAL_DMA_IRQHandler+0x408>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d036      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a61      	ldr	r2, [pc, #388]	@ (8005a54 <HAL_DMA_IRQHandler+0x40c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d031      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a60      	ldr	r2, [pc, #384]	@ (8005a58 <HAL_DMA_IRQHandler+0x410>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d02c      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a5e      	ldr	r2, [pc, #376]	@ (8005a5c <HAL_DMA_IRQHandler+0x414>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d027      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005a60 <HAL_DMA_IRQHandler+0x418>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d022      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a5b      	ldr	r2, [pc, #364]	@ (8005a64 <HAL_DMA_IRQHandler+0x41c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d01d      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005a68 <HAL_DMA_IRQHandler+0x420>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a58      	ldr	r2, [pc, #352]	@ (8005a6c <HAL_DMA_IRQHandler+0x424>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a57      	ldr	r2, [pc, #348]	@ (8005a70 <HAL_DMA_IRQHandler+0x428>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a55      	ldr	r2, [pc, #340]	@ (8005a74 <HAL_DMA_IRQHandler+0x42c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a54      	ldr	r2, [pc, #336]	@ (8005a78 <HAL_DMA_IRQHandler+0x430>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_DMA_IRQHandler+0x2ee>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a52      	ldr	r2, [pc, #328]	@ (8005a7c <HAL_DMA_IRQHandler+0x434>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10a      	bne.n	800594c <HAL_DMA_IRQHandler+0x304>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e003      	b.n	8005954 <HAL_DMA_IRQHandler+0x30c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	2201      	movs	r2, #1
 8005962:	409a      	lsls	r2, r3
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596c:	f043 0202 	orr.w	r2, r3, #2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2204      	movs	r2, #4
 800597e:	409a      	lsls	r2, r3
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 808f 	beq.w	8005aa8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a40 <HAL_DMA_IRQHandler+0x3f8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d04a      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2a      	ldr	r2, [pc, #168]	@ (8005a44 <HAL_DMA_IRQHandler+0x3fc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d045      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a29      	ldr	r2, [pc, #164]	@ (8005a48 <HAL_DMA_IRQHandler+0x400>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d040      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <HAL_DMA_IRQHandler+0x404>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d03b      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a26      	ldr	r2, [pc, #152]	@ (8005a50 <HAL_DMA_IRQHandler+0x408>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d036      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a24      	ldr	r2, [pc, #144]	@ (8005a54 <HAL_DMA_IRQHandler+0x40c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d031      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a23      	ldr	r2, [pc, #140]	@ (8005a58 <HAL_DMA_IRQHandler+0x410>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d02c      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a21      	ldr	r2, [pc, #132]	@ (8005a5c <HAL_DMA_IRQHandler+0x414>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d027      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a20      	ldr	r2, [pc, #128]	@ (8005a60 <HAL_DMA_IRQHandler+0x418>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a64 <HAL_DMA_IRQHandler+0x41c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01d      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a68 <HAL_DMA_IRQHandler+0x420>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d018      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a6c <HAL_DMA_IRQHandler+0x424>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1a      	ldr	r2, [pc, #104]	@ (8005a70 <HAL_DMA_IRQHandler+0x428>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d00e      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a18      	ldr	r2, [pc, #96]	@ (8005a74 <HAL_DMA_IRQHandler+0x42c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <HAL_DMA_IRQHandler+0x430>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d004      	beq.n	8005a2a <HAL_DMA_IRQHandler+0x3e2>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <HAL_DMA_IRQHandler+0x434>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d12a      	bne.n	8005a80 <HAL_DMA_IRQHandler+0x438>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e023      	b.n	8005a88 <HAL_DMA_IRQHandler+0x440>
 8005a40:	40020010 	.word	0x40020010
 8005a44:	40020028 	.word	0x40020028
 8005a48:	40020040 	.word	0x40020040
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	40020070 	.word	0x40020070
 8005a54:	40020088 	.word	0x40020088
 8005a58:	400200a0 	.word	0x400200a0
 8005a5c:	400200b8 	.word	0x400200b8
 8005a60:	40020410 	.word	0x40020410
 8005a64:	40020428 	.word	0x40020428
 8005a68:	40020440 	.word	0x40020440
 8005a6c:	40020458 	.word	0x40020458
 8005a70:	40020470 	.word	0x40020470
 8005a74:	40020488 	.word	0x40020488
 8005a78:	400204a0 	.word	0x400204a0
 8005a7c:	400204b8 	.word	0x400204b8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00d      	beq.n	8005aa8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	2204      	movs	r2, #4
 8005a96:	409a      	lsls	r2, r3
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa0:	f043 0204 	orr.w	r2, r3, #4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80a6 	beq.w	8005c0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a85      	ldr	r2, [pc, #532]	@ (8005cd8 <HAL_DMA_IRQHandler+0x690>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d04a      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a83      	ldr	r2, [pc, #524]	@ (8005cdc <HAL_DMA_IRQHandler+0x694>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d045      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a82      	ldr	r2, [pc, #520]	@ (8005ce0 <HAL_DMA_IRQHandler+0x698>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d040      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a80      	ldr	r2, [pc, #512]	@ (8005ce4 <HAL_DMA_IRQHandler+0x69c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d03b      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7f      	ldr	r2, [pc, #508]	@ (8005ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d036      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a7d      	ldr	r2, [pc, #500]	@ (8005cec <HAL_DMA_IRQHandler+0x6a4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d031      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a7c      	ldr	r2, [pc, #496]	@ (8005cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d02c      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7a      	ldr	r2, [pc, #488]	@ (8005cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d027      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a79      	ldr	r2, [pc, #484]	@ (8005cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d022      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a77      	ldr	r2, [pc, #476]	@ (8005cfc <HAL_DMA_IRQHandler+0x6b4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01d      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a76      	ldr	r2, [pc, #472]	@ (8005d00 <HAL_DMA_IRQHandler+0x6b8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d018      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a74      	ldr	r2, [pc, #464]	@ (8005d04 <HAL_DMA_IRQHandler+0x6bc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a73      	ldr	r2, [pc, #460]	@ (8005d08 <HAL_DMA_IRQHandler+0x6c0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00e      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a71      	ldr	r2, [pc, #452]	@ (8005d0c <HAL_DMA_IRQHandler+0x6c4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d009      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a70      	ldr	r2, [pc, #448]	@ (8005d10 <HAL_DMA_IRQHandler+0x6c8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d004      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x516>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a6e      	ldr	r2, [pc, #440]	@ (8005d14 <HAL_DMA_IRQHandler+0x6cc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10a      	bne.n	8005b74 <HAL_DMA_IRQHandler+0x52c>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e009      	b.n	8005b88 <HAL_DMA_IRQHandler+0x540>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d03e      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f003 031f 	and.w	r3, r3, #31
 8005b94:	2210      	movs	r2, #16
 8005b96:	409a      	lsls	r2, r3
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d018      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d108      	bne.n	8005bca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d024      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
 8005bc8:	e01f      	b.n	8005c0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01b      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
 8005bda:	e016      	b.n	8005c0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0208 	bic.w	r2, r2, #8
 8005bf8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2220      	movs	r2, #32
 8005c14:	409a      	lsls	r2, r3
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8110 	beq.w	8005e40 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd8 <HAL_DMA_IRQHandler+0x690>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d04a      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <HAL_DMA_IRQHandler+0x694>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d045      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a29      	ldr	r2, [pc, #164]	@ (8005ce0 <HAL_DMA_IRQHandler+0x698>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d040      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a28      	ldr	r2, [pc, #160]	@ (8005ce4 <HAL_DMA_IRQHandler+0x69c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d03b      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ce8 <HAL_DMA_IRQHandler+0x6a0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d036      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a25      	ldr	r2, [pc, #148]	@ (8005cec <HAL_DMA_IRQHandler+0x6a4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d031      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a23      	ldr	r2, [pc, #140]	@ (8005cf0 <HAL_DMA_IRQHandler+0x6a8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d02c      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	@ (8005cf4 <HAL_DMA_IRQHandler+0x6ac>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d027      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <HAL_DMA_IRQHandler+0x6b0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005cfc <HAL_DMA_IRQHandler+0x6b4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d01d      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <HAL_DMA_IRQHandler+0x6b8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1c      	ldr	r2, [pc, #112]	@ (8005d04 <HAL_DMA_IRQHandler+0x6bc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_DMA_IRQHandler+0x6c0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <HAL_DMA_IRQHandler+0x6c4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <HAL_DMA_IRQHandler+0x6c8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x678>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <HAL_DMA_IRQHandler+0x6cc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d12b      	bne.n	8005d18 <HAL_DMA_IRQHandler+0x6d0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	bf14      	ite	ne
 8005cce:	2301      	movne	r3, #1
 8005cd0:	2300      	moveq	r3, #0
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	e02a      	b.n	8005d2c <HAL_DMA_IRQHandler+0x6e4>
 8005cd6:	bf00      	nop
 8005cd8:	40020010 	.word	0x40020010
 8005cdc:	40020028 	.word	0x40020028
 8005ce0:	40020040 	.word	0x40020040
 8005ce4:	40020058 	.word	0x40020058
 8005ce8:	40020070 	.word	0x40020070
 8005cec:	40020088 	.word	0x40020088
 8005cf0:	400200a0 	.word	0x400200a0
 8005cf4:	400200b8 	.word	0x400200b8
 8005cf8:	40020410 	.word	0x40020410
 8005cfc:	40020428 	.word	0x40020428
 8005d00:	40020440 	.word	0x40020440
 8005d04:	40020458 	.word	0x40020458
 8005d08:	40020470 	.word	0x40020470
 8005d0c:	40020488 	.word	0x40020488
 8005d10:	400204a0 	.word	0x400204a0
 8005d14:	400204b8 	.word	0x400204b8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	bf14      	ite	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	2300      	moveq	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8087 	beq.w	8005e40 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d139      	bne.n	8005dc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0216 	bic.w	r2, r2, #22
 8005d5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <HAL_DMA_IRQHandler+0x736>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0208 	bic.w	r2, r2, #8
 8005d8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	223f      	movs	r2, #63	@ 0x3f
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 834a 	beq.w	800644c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
          }
          return;
 8005dc0:	e344      	b.n	800644c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d018      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d108      	bne.n	8005df0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02c      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4798      	blx	r3
 8005dee:	e027      	b.n	8005e40 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d023      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
 8005e00:	e01e      	b.n	8005e40 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10f      	bne.n	8005e30 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0210 	bic.w	r2, r2, #16
 8005e1e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8306 	beq.w	8006456 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 8088 	beq.w	8005f68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7a      	ldr	r2, [pc, #488]	@ (8006050 <HAL_DMA_IRQHandler+0xa08>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d04a      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a79      	ldr	r2, [pc, #484]	@ (8006054 <HAL_DMA_IRQHandler+0xa0c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d045      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a77      	ldr	r2, [pc, #476]	@ (8006058 <HAL_DMA_IRQHandler+0xa10>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d040      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a76      	ldr	r2, [pc, #472]	@ (800605c <HAL_DMA_IRQHandler+0xa14>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d03b      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a74      	ldr	r2, [pc, #464]	@ (8006060 <HAL_DMA_IRQHandler+0xa18>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d036      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a73      	ldr	r2, [pc, #460]	@ (8006064 <HAL_DMA_IRQHandler+0xa1c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d031      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a71      	ldr	r2, [pc, #452]	@ (8006068 <HAL_DMA_IRQHandler+0xa20>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d02c      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a70      	ldr	r2, [pc, #448]	@ (800606c <HAL_DMA_IRQHandler+0xa24>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d027      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a6e      	ldr	r2, [pc, #440]	@ (8006070 <HAL_DMA_IRQHandler+0xa28>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d022      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8006074 <HAL_DMA_IRQHandler+0xa2c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d01d      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8006078 <HAL_DMA_IRQHandler+0xa30>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800607c <HAL_DMA_IRQHandler+0xa34>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a68      	ldr	r2, [pc, #416]	@ (8006080 <HAL_DMA_IRQHandler+0xa38>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a67      	ldr	r2, [pc, #412]	@ (8006084 <HAL_DMA_IRQHandler+0xa3c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a65      	ldr	r2, [pc, #404]	@ (8006088 <HAL_DMA_IRQHandler+0xa40>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_DMA_IRQHandler+0x8b8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a64      	ldr	r2, [pc, #400]	@ (800608c <HAL_DMA_IRQHandler+0xa44>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d108      	bne.n	8005f12 <HAL_DMA_IRQHandler+0x8ca>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e007      	b.n	8005f22 <HAL_DMA_IRQHandler+0x8da>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3301      	adds	r3, #1
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d307      	bcc.n	8005f3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f2      	bne.n	8005f22 <HAL_DMA_IRQHandler+0x8da>
 8005f3c:	e000      	b.n	8005f40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2203      	movs	r2, #3
 8005f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005f56:	e003      	b.n	8005f60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8272 	beq.w	8006456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
 8005f7a:	e26c      	b.n	8006456 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a43      	ldr	r2, [pc, #268]	@ (8006090 <HAL_DMA_IRQHandler+0xa48>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d022      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a42      	ldr	r2, [pc, #264]	@ (8006094 <HAL_DMA_IRQHandler+0xa4c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d01d      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a40      	ldr	r2, [pc, #256]	@ (8006098 <HAL_DMA_IRQHandler+0xa50>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a3f      	ldr	r2, [pc, #252]	@ (800609c <HAL_DMA_IRQHandler+0xa54>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d013      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a3d      	ldr	r2, [pc, #244]	@ (80060a0 <HAL_DMA_IRQHandler+0xa58>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80060a4 <HAL_DMA_IRQHandler+0xa5c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80060a8 <HAL_DMA_IRQHandler+0xa60>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_IRQHandler+0x984>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a39      	ldr	r2, [pc, #228]	@ (80060ac <HAL_DMA_IRQHandler+0xa64>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d101      	bne.n	8005fd0 <HAL_DMA_IRQHandler+0x988>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <HAL_DMA_IRQHandler+0x98a>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 823f 	beq.w	8006456 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	2204      	movs	r2, #4
 8005fea:	409a      	lsls	r2, r3
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80cd 	beq.w	8006190 <HAL_DMA_IRQHandler+0xb48>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80c7 	beq.w	8006190 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	2204      	movs	r2, #4
 800600c:	409a      	lsls	r2, r3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d049      	beq.n	80060b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8210 	beq.w	8006450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006038:	e20a      	b.n	8006450 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 8206 	beq.w	8006450 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800604c:	e200      	b.n	8006450 <HAL_DMA_IRQHandler+0xe08>
 800604e:	bf00      	nop
 8006050:	40020010 	.word	0x40020010
 8006054:	40020028 	.word	0x40020028
 8006058:	40020040 	.word	0x40020040
 800605c:	40020058 	.word	0x40020058
 8006060:	40020070 	.word	0x40020070
 8006064:	40020088 	.word	0x40020088
 8006068:	400200a0 	.word	0x400200a0
 800606c:	400200b8 	.word	0x400200b8
 8006070:	40020410 	.word	0x40020410
 8006074:	40020428 	.word	0x40020428
 8006078:	40020440 	.word	0x40020440
 800607c:	40020458 	.word	0x40020458
 8006080:	40020470 	.word	0x40020470
 8006084:	40020488 	.word	0x40020488
 8006088:	400204a0 	.word	0x400204a0
 800608c:	400204b8 	.word	0x400204b8
 8006090:	58025408 	.word	0x58025408
 8006094:	5802541c 	.word	0x5802541c
 8006098:	58025430 	.word	0x58025430
 800609c:	58025444 	.word	0x58025444
 80060a0:	58025458 	.word	0x58025458
 80060a4:	5802546c 	.word	0x5802546c
 80060a8:	58025480 	.word	0x58025480
 80060ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d160      	bne.n	800617c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a7f      	ldr	r2, [pc, #508]	@ (80062bc <HAL_DMA_IRQHandler+0xc74>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d04a      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7d      	ldr	r2, [pc, #500]	@ (80062c0 <HAL_DMA_IRQHandler+0xc78>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d045      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a7c      	ldr	r2, [pc, #496]	@ (80062c4 <HAL_DMA_IRQHandler+0xc7c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d040      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a7a      	ldr	r2, [pc, #488]	@ (80062c8 <HAL_DMA_IRQHandler+0xc80>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d03b      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a79      	ldr	r2, [pc, #484]	@ (80062cc <HAL_DMA_IRQHandler+0xc84>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d036      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a77      	ldr	r2, [pc, #476]	@ (80062d0 <HAL_DMA_IRQHandler+0xc88>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d031      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a76      	ldr	r2, [pc, #472]	@ (80062d4 <HAL_DMA_IRQHandler+0xc8c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d02c      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a74      	ldr	r2, [pc, #464]	@ (80062d8 <HAL_DMA_IRQHandler+0xc90>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d027      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a73      	ldr	r2, [pc, #460]	@ (80062dc <HAL_DMA_IRQHandler+0xc94>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d022      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a71      	ldr	r2, [pc, #452]	@ (80062e0 <HAL_DMA_IRQHandler+0xc98>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d01d      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a70      	ldr	r2, [pc, #448]	@ (80062e4 <HAL_DMA_IRQHandler+0xc9c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d018      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6e      	ldr	r2, [pc, #440]	@ (80062e8 <HAL_DMA_IRQHandler+0xca0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a6d      	ldr	r2, [pc, #436]	@ (80062ec <HAL_DMA_IRQHandler+0xca4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a6b      	ldr	r2, [pc, #428]	@ (80062f0 <HAL_DMA_IRQHandler+0xca8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a6a      	ldr	r2, [pc, #424]	@ (80062f4 <HAL_DMA_IRQHandler+0xcac>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_DMA_IRQHandler+0xb12>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a68      	ldr	r2, [pc, #416]	@ (80062f8 <HAL_DMA_IRQHandler+0xcb0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d108      	bne.n	800616c <HAL_DMA_IRQHandler+0xb24>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0208 	bic.w	r2, r2, #8
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e007      	b.n	800617c <HAL_DMA_IRQHandler+0xb34>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0204 	bic.w	r2, r2, #4
 800617a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 8165 	beq.w	8006450 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618e:	e15f      	b.n	8006450 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	2202      	movs	r2, #2
 800619a:	409a      	lsls	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80c5 	beq.w	8006330 <HAL_DMA_IRQHandler+0xce8>
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80bf 	beq.w	8006330 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	2202      	movs	r2, #2
 80061bc:	409a      	lsls	r2, r3
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d018      	beq.n	80061fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 813a 	beq.w	8006454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e8:	e134      	b.n	8006454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8130 	beq.w	8006454 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061fc:	e12a      	b.n	8006454 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 8089 	bne.w	800631c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a2b      	ldr	r2, [pc, #172]	@ (80062bc <HAL_DMA_IRQHandler+0xc74>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d04a      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a29      	ldr	r2, [pc, #164]	@ (80062c0 <HAL_DMA_IRQHandler+0xc78>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d045      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a28      	ldr	r2, [pc, #160]	@ (80062c4 <HAL_DMA_IRQHandler+0xc7c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d040      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a26      	ldr	r2, [pc, #152]	@ (80062c8 <HAL_DMA_IRQHandler+0xc80>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d03b      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a25      	ldr	r2, [pc, #148]	@ (80062cc <HAL_DMA_IRQHandler+0xc84>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d036      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a23      	ldr	r2, [pc, #140]	@ (80062d0 <HAL_DMA_IRQHandler+0xc88>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d031      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <HAL_DMA_IRQHandler+0xc8c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d02c      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a20      	ldr	r2, [pc, #128]	@ (80062d8 <HAL_DMA_IRQHandler+0xc90>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d027      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <HAL_DMA_IRQHandler+0xc94>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <HAL_DMA_IRQHandler+0xc98>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01d      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <HAL_DMA_IRQHandler+0xc9c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1a      	ldr	r2, [pc, #104]	@ (80062e8 <HAL_DMA_IRQHandler+0xca0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a19      	ldr	r2, [pc, #100]	@ (80062ec <HAL_DMA_IRQHandler+0xca4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a17      	ldr	r2, [pc, #92]	@ (80062f0 <HAL_DMA_IRQHandler+0xca8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a16      	ldr	r2, [pc, #88]	@ (80062f4 <HAL_DMA_IRQHandler+0xcac>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_DMA_IRQHandler+0xc62>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a14      	ldr	r2, [pc, #80]	@ (80062f8 <HAL_DMA_IRQHandler+0xcb0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d128      	bne.n	80062fc <HAL_DMA_IRQHandler+0xcb4>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0214 	bic.w	r2, r2, #20
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e027      	b.n	800630c <HAL_DMA_IRQHandler+0xcc4>
 80062bc:	40020010 	.word	0x40020010
 80062c0:	40020028 	.word	0x40020028
 80062c4:	40020040 	.word	0x40020040
 80062c8:	40020058 	.word	0x40020058
 80062cc:	40020070 	.word	0x40020070
 80062d0:	40020088 	.word	0x40020088
 80062d4:	400200a0 	.word	0x400200a0
 80062d8:	400200b8 	.word	0x400200b8
 80062dc:	40020410 	.word	0x40020410
 80062e0:	40020428 	.word	0x40020428
 80062e4:	40020440 	.word	0x40020440
 80062e8:	40020458 	.word	0x40020458
 80062ec:	40020470 	.word	0x40020470
 80062f0:	40020488 	.word	0x40020488
 80062f4:	400204a0 	.word	0x400204a0
 80062f8:	400204b8 	.word	0x400204b8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 020a 	bic.w	r2, r2, #10
 800630a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8097 	beq.w	8006454 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800632e:	e091      	b.n	8006454 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2208      	movs	r2, #8
 800633a:	409a      	lsls	r2, r3
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8088 	beq.w	8006456 <HAL_DMA_IRQHandler+0xe0e>
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8082 	beq.w	8006456 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a41      	ldr	r2, [pc, #260]	@ (800645c <HAL_DMA_IRQHandler+0xe14>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d04a      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a3f      	ldr	r2, [pc, #252]	@ (8006460 <HAL_DMA_IRQHandler+0xe18>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d045      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3e      	ldr	r2, [pc, #248]	@ (8006464 <HAL_DMA_IRQHandler+0xe1c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d040      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a3c      	ldr	r2, [pc, #240]	@ (8006468 <HAL_DMA_IRQHandler+0xe20>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d03b      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3b      	ldr	r2, [pc, #236]	@ (800646c <HAL_DMA_IRQHandler+0xe24>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d036      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a39      	ldr	r2, [pc, #228]	@ (8006470 <HAL_DMA_IRQHandler+0xe28>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d031      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a38      	ldr	r2, [pc, #224]	@ (8006474 <HAL_DMA_IRQHandler+0xe2c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d02c      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a36      	ldr	r2, [pc, #216]	@ (8006478 <HAL_DMA_IRQHandler+0xe30>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d027      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a35      	ldr	r2, [pc, #212]	@ (800647c <HAL_DMA_IRQHandler+0xe34>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d022      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a33      	ldr	r2, [pc, #204]	@ (8006480 <HAL_DMA_IRQHandler+0xe38>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01d      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a32      	ldr	r2, [pc, #200]	@ (8006484 <HAL_DMA_IRQHandler+0xe3c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d018      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a30      	ldr	r2, [pc, #192]	@ (8006488 <HAL_DMA_IRQHandler+0xe40>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d013      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2f      	ldr	r2, [pc, #188]	@ (800648c <HAL_DMA_IRQHandler+0xe44>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00e      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006490 <HAL_DMA_IRQHandler+0xe48>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d009      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006494 <HAL_DMA_IRQHandler+0xe4c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d004      	beq.n	80063f2 <HAL_DMA_IRQHandler+0xdaa>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006498 <HAL_DMA_IRQHandler+0xe50>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <HAL_DMA_IRQHandler+0xdbc>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 021c 	bic.w	r2, r2, #28
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e007      	b.n	8006414 <HAL_DMA_IRQHandler+0xdcc>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 020e 	bic.w	r2, r2, #14
 8006412:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2201      	movs	r2, #1
 800641e:	409a      	lsls	r2, r3
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	4798      	blx	r3
 800644a:	e004      	b.n	8006456 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800644c:	bf00      	nop
 800644e:	e002      	b.n	8006456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006450:	bf00      	nop
 8006452:	e000      	b.n	8006456 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006454:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006456:	3728      	adds	r7, #40	@ 0x28
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40020010 	.word	0x40020010
 8006460:	40020028 	.word	0x40020028
 8006464:	40020040 	.word	0x40020040
 8006468:	40020058 	.word	0x40020058
 800646c:	40020070 	.word	0x40020070
 8006470:	40020088 	.word	0x40020088
 8006474:	400200a0 	.word	0x400200a0
 8006478:	400200b8 	.word	0x400200b8
 800647c:	40020410 	.word	0x40020410
 8006480:	40020428 	.word	0x40020428
 8006484:	40020440 	.word	0x40020440
 8006488:	40020458 	.word	0x40020458
 800648c:	40020470 	.word	0x40020470
 8006490:	40020488 	.word	0x40020488
 8006494:	400204a0 	.word	0x400204a0
 8006498:	400204b8 	.word	0x400204b8

0800649c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a7f      	ldr	r2, [pc, #508]	@ (80066d0 <DMA_SetConfig+0x21c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d072      	beq.n	80065be <DMA_SetConfig+0x10a>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a7d      	ldr	r2, [pc, #500]	@ (80066d4 <DMA_SetConfig+0x220>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d06d      	beq.n	80065be <DMA_SetConfig+0x10a>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a7c      	ldr	r2, [pc, #496]	@ (80066d8 <DMA_SetConfig+0x224>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d068      	beq.n	80065be <DMA_SetConfig+0x10a>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a7a      	ldr	r2, [pc, #488]	@ (80066dc <DMA_SetConfig+0x228>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d063      	beq.n	80065be <DMA_SetConfig+0x10a>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a79      	ldr	r2, [pc, #484]	@ (80066e0 <DMA_SetConfig+0x22c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d05e      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a77      	ldr	r2, [pc, #476]	@ (80066e4 <DMA_SetConfig+0x230>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d059      	beq.n	80065be <DMA_SetConfig+0x10a>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a76      	ldr	r2, [pc, #472]	@ (80066e8 <DMA_SetConfig+0x234>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d054      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a74      	ldr	r2, [pc, #464]	@ (80066ec <DMA_SetConfig+0x238>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d04f      	beq.n	80065be <DMA_SetConfig+0x10a>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a73      	ldr	r2, [pc, #460]	@ (80066f0 <DMA_SetConfig+0x23c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a71      	ldr	r2, [pc, #452]	@ (80066f4 <DMA_SetConfig+0x240>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a70      	ldr	r2, [pc, #448]	@ (80066f8 <DMA_SetConfig+0x244>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <DMA_SetConfig+0x10a>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a6e      	ldr	r2, [pc, #440]	@ (80066fc <DMA_SetConfig+0x248>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a6d      	ldr	r2, [pc, #436]	@ (8006700 <DMA_SetConfig+0x24c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a6b      	ldr	r2, [pc, #428]	@ (8006704 <DMA_SetConfig+0x250>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <DMA_SetConfig+0x10a>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6a      	ldr	r2, [pc, #424]	@ (8006708 <DMA_SetConfig+0x254>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a68      	ldr	r2, [pc, #416]	@ (800670c <DMA_SetConfig+0x258>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <DMA_SetConfig+0x10a>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a67      	ldr	r2, [pc, #412]	@ (8006710 <DMA_SetConfig+0x25c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a65      	ldr	r2, [pc, #404]	@ (8006714 <DMA_SetConfig+0x260>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a64      	ldr	r2, [pc, #400]	@ (8006718 <DMA_SetConfig+0x264>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <DMA_SetConfig+0x10a>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a62      	ldr	r2, [pc, #392]	@ (800671c <DMA_SetConfig+0x268>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <DMA_SetConfig+0x10a>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a61      	ldr	r2, [pc, #388]	@ (8006720 <DMA_SetConfig+0x26c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <DMA_SetConfig+0x10a>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a5f      	ldr	r2, [pc, #380]	@ (8006724 <DMA_SetConfig+0x270>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <DMA_SetConfig+0x10a>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006728 <DMA_SetConfig+0x274>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <DMA_SetConfig+0x10a>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5c      	ldr	r2, [pc, #368]	@ (800672c <DMA_SetConfig+0x278>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d101      	bne.n	80065c2 <DMA_SetConfig+0x10e>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <DMA_SetConfig+0x110>
 80065c2:	2300      	movs	r3, #0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80065d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a39      	ldr	r2, [pc, #228]	@ (80066d0 <DMA_SetConfig+0x21c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d04a      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a38      	ldr	r2, [pc, #224]	@ (80066d4 <DMA_SetConfig+0x220>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d045      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a36      	ldr	r2, [pc, #216]	@ (80066d8 <DMA_SetConfig+0x224>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d040      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a35      	ldr	r2, [pc, #212]	@ (80066dc <DMA_SetConfig+0x228>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d03b      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a33      	ldr	r2, [pc, #204]	@ (80066e0 <DMA_SetConfig+0x22c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d036      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a32      	ldr	r2, [pc, #200]	@ (80066e4 <DMA_SetConfig+0x230>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d031      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a30      	ldr	r2, [pc, #192]	@ (80066e8 <DMA_SetConfig+0x234>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02c      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2f      	ldr	r2, [pc, #188]	@ (80066ec <DMA_SetConfig+0x238>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d027      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a2d      	ldr	r2, [pc, #180]	@ (80066f0 <DMA_SetConfig+0x23c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d022      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2c      	ldr	r2, [pc, #176]	@ (80066f4 <DMA_SetConfig+0x240>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d01d      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2a      	ldr	r2, [pc, #168]	@ (80066f8 <DMA_SetConfig+0x244>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d018      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a29      	ldr	r2, [pc, #164]	@ (80066fc <DMA_SetConfig+0x248>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a27      	ldr	r2, [pc, #156]	@ (8006700 <DMA_SetConfig+0x24c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a26      	ldr	r2, [pc, #152]	@ (8006704 <DMA_SetConfig+0x250>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d009      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a24      	ldr	r2, [pc, #144]	@ (8006708 <DMA_SetConfig+0x254>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <DMA_SetConfig+0x1d0>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a23      	ldr	r2, [pc, #140]	@ (800670c <DMA_SetConfig+0x258>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <DMA_SetConfig+0x1d4>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <DMA_SetConfig+0x1d6>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d059      	beq.n	8006742 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	223f      	movs	r2, #63	@ 0x3f
 8006698:	409a      	lsls	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b40      	cmp	r3, #64	@ 0x40
 80066bc:	d138      	bne.n	8006730 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066ce:	e086      	b.n	80067de <DMA_SetConfig+0x32a>
 80066d0:	40020010 	.word	0x40020010
 80066d4:	40020028 	.word	0x40020028
 80066d8:	40020040 	.word	0x40020040
 80066dc:	40020058 	.word	0x40020058
 80066e0:	40020070 	.word	0x40020070
 80066e4:	40020088 	.word	0x40020088
 80066e8:	400200a0 	.word	0x400200a0
 80066ec:	400200b8 	.word	0x400200b8
 80066f0:	40020410 	.word	0x40020410
 80066f4:	40020428 	.word	0x40020428
 80066f8:	40020440 	.word	0x40020440
 80066fc:	40020458 	.word	0x40020458
 8006700:	40020470 	.word	0x40020470
 8006704:	40020488 	.word	0x40020488
 8006708:	400204a0 	.word	0x400204a0
 800670c:	400204b8 	.word	0x400204b8
 8006710:	58025408 	.word	0x58025408
 8006714:	5802541c 	.word	0x5802541c
 8006718:	58025430 	.word	0x58025430
 800671c:	58025444 	.word	0x58025444
 8006720:	58025458 	.word	0x58025458
 8006724:	5802546c 	.word	0x5802546c
 8006728:	58025480 	.word	0x58025480
 800672c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	60da      	str	r2, [r3, #12]
}
 8006740:	e04d      	b.n	80067de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a29      	ldr	r2, [pc, #164]	@ (80067ec <DMA_SetConfig+0x338>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d022      	beq.n	8006792 <DMA_SetConfig+0x2de>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a27      	ldr	r2, [pc, #156]	@ (80067f0 <DMA_SetConfig+0x33c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01d      	beq.n	8006792 <DMA_SetConfig+0x2de>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a26      	ldr	r2, [pc, #152]	@ (80067f4 <DMA_SetConfig+0x340>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d018      	beq.n	8006792 <DMA_SetConfig+0x2de>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a24      	ldr	r2, [pc, #144]	@ (80067f8 <DMA_SetConfig+0x344>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <DMA_SetConfig+0x2de>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a23      	ldr	r2, [pc, #140]	@ (80067fc <DMA_SetConfig+0x348>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00e      	beq.n	8006792 <DMA_SetConfig+0x2de>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a21      	ldr	r2, [pc, #132]	@ (8006800 <DMA_SetConfig+0x34c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d009      	beq.n	8006792 <DMA_SetConfig+0x2de>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a20      	ldr	r2, [pc, #128]	@ (8006804 <DMA_SetConfig+0x350>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <DMA_SetConfig+0x2de>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1e      	ldr	r2, [pc, #120]	@ (8006808 <DMA_SetConfig+0x354>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <DMA_SetConfig+0x2e2>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <DMA_SetConfig+0x2e4>
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b40      	cmp	r3, #64	@ 0x40
 80067ba:	d108      	bne.n	80067ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	60da      	str	r2, [r3, #12]
}
 80067cc:	e007      	b.n	80067de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	60da      	str	r2, [r3, #12]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	58025408 	.word	0x58025408
 80067f0:	5802541c 	.word	0x5802541c
 80067f4:	58025430 	.word	0x58025430
 80067f8:	58025444 	.word	0x58025444
 80067fc:	58025458 	.word	0x58025458
 8006800:	5802546c 	.word	0x5802546c
 8006804:	58025480 	.word	0x58025480
 8006808:	58025494 	.word	0x58025494

0800680c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a42      	ldr	r2, [pc, #264]	@ (8006924 <DMA_CalcBaseAndBitshift+0x118>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d04a      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a41      	ldr	r2, [pc, #260]	@ (8006928 <DMA_CalcBaseAndBitshift+0x11c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d045      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a3f      	ldr	r2, [pc, #252]	@ (800692c <DMA_CalcBaseAndBitshift+0x120>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d040      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3e      	ldr	r2, [pc, #248]	@ (8006930 <DMA_CalcBaseAndBitshift+0x124>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d03b      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a3c      	ldr	r2, [pc, #240]	@ (8006934 <DMA_CalcBaseAndBitshift+0x128>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d036      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3b      	ldr	r2, [pc, #236]	@ (8006938 <DMA_CalcBaseAndBitshift+0x12c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d031      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a39      	ldr	r2, [pc, #228]	@ (800693c <DMA_CalcBaseAndBitshift+0x130>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d02c      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a38      	ldr	r2, [pc, #224]	@ (8006940 <DMA_CalcBaseAndBitshift+0x134>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d027      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a36      	ldr	r2, [pc, #216]	@ (8006944 <DMA_CalcBaseAndBitshift+0x138>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d022      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a35      	ldr	r2, [pc, #212]	@ (8006948 <DMA_CalcBaseAndBitshift+0x13c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01d      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a33      	ldr	r2, [pc, #204]	@ (800694c <DMA_CalcBaseAndBitshift+0x140>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d018      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a32      	ldr	r2, [pc, #200]	@ (8006950 <DMA_CalcBaseAndBitshift+0x144>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a30      	ldr	r2, [pc, #192]	@ (8006954 <DMA_CalcBaseAndBitshift+0x148>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00e      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2f      	ldr	r2, [pc, #188]	@ (8006958 <DMA_CalcBaseAndBitshift+0x14c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d009      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	@ (800695c <DMA_CalcBaseAndBitshift+0x150>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <DMA_CalcBaseAndBitshift+0xa8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006960 <DMA_CalcBaseAndBitshift+0x154>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d101      	bne.n	80068b8 <DMA_CalcBaseAndBitshift+0xac>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <DMA_CalcBaseAndBitshift+0xae>
 80068b8:	2300      	movs	r3, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d024      	beq.n	8006908 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	3b10      	subs	r3, #16
 80068c6:	4a27      	ldr	r2, [pc, #156]	@ (8006964 <DMA_CalcBaseAndBitshift+0x158>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	4a24      	ldr	r2, [pc, #144]	@ (8006968 <DMA_CalcBaseAndBitshift+0x15c>)
 80068d8:	5cd3      	ldrb	r3, [r2, r3]
 80068da:	461a      	mov	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d908      	bls.n	80068f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	4b1f      	ldr	r3, [pc, #124]	@ (800696c <DMA_CalcBaseAndBitshift+0x160>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	1d1a      	adds	r2, r3, #4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80068f6:	e00d      	b.n	8006914 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	4b1b      	ldr	r3, [pc, #108]	@ (800696c <DMA_CalcBaseAndBitshift+0x160>)
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6593      	str	r3, [r2, #88]	@ 0x58
 8006906:	e005      	b.n	8006914 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40020010 	.word	0x40020010
 8006928:	40020028 	.word	0x40020028
 800692c:	40020040 	.word	0x40020040
 8006930:	40020058 	.word	0x40020058
 8006934:	40020070 	.word	0x40020070
 8006938:	40020088 	.word	0x40020088
 800693c:	400200a0 	.word	0x400200a0
 8006940:	400200b8 	.word	0x400200b8
 8006944:	40020410 	.word	0x40020410
 8006948:	40020428 	.word	0x40020428
 800694c:	40020440 	.word	0x40020440
 8006950:	40020458 	.word	0x40020458
 8006954:	40020470 	.word	0x40020470
 8006958:	40020488 	.word	0x40020488
 800695c:	400204a0 	.word	0x400204a0
 8006960:	400204b8 	.word	0x400204b8
 8006964:	aaaaaaab 	.word	0xaaaaaaab
 8006968:	0800f0d0 	.word	0x0800f0d0
 800696c:	fffffc00 	.word	0xfffffc00

08006970 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d120      	bne.n	80069c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	2b03      	cmp	r3, #3
 800698a:	d858      	bhi.n	8006a3e <DMA_CheckFifoParam+0xce>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <DMA_CheckFifoParam+0x24>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069a5 	.word	0x080069a5
 8006998:	080069b7 	.word	0x080069b7
 800699c:	080069a5 	.word	0x080069a5
 80069a0:	08006a3f 	.word	0x08006a3f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d048      	beq.n	8006a42 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069b4:	e045      	b.n	8006a42 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069be:	d142      	bne.n	8006a46 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069c4:	e03f      	b.n	8006a46 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ce:	d123      	bne.n	8006a18 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d838      	bhi.n	8006a4a <DMA_CheckFifoParam+0xda>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <DMA_CheckFifoParam+0x70>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	080069f7 	.word	0x080069f7
 80069e8:	080069f1 	.word	0x080069f1
 80069ec:	08006a09 	.word	0x08006a09
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
        break;
 80069f4:	e030      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d025      	beq.n	8006a4e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a06:	e022      	b.n	8006a4e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a10:	d11f      	bne.n	8006a52 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a16:	e01c      	b.n	8006a52 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d902      	bls.n	8006a26 <DMA_CheckFifoParam+0xb6>
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d003      	beq.n	8006a2c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006a24:	e018      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
        break;
 8006a2a:	e015      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a3c:	e00b      	b.n	8006a56 <DMA_CheckFifoParam+0xe6>
        break;
 8006a3e:	bf00      	nop
 8006a40:	e00a      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        break;
 8006a42:	bf00      	nop
 8006a44:	e008      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        break;
 8006a46:	bf00      	nop
 8006a48:	e006      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        break;
 8006a4a:	bf00      	nop
 8006a4c:	e004      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        break;
 8006a4e:	bf00      	nop
 8006a50:	e002      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
        break;
 8006a52:	bf00      	nop
 8006a54:	e000      	b.n	8006a58 <DMA_CheckFifoParam+0xe8>
    break;
 8006a56:	bf00      	nop
    }
  }

  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop

08006a68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a38      	ldr	r2, [pc, #224]	@ (8006b5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a36      	ldr	r2, [pc, #216]	@ (8006b60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01d      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a35      	ldr	r2, [pc, #212]	@ (8006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a33      	ldr	r2, [pc, #204]	@ (8006b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a32      	ldr	r2, [pc, #200]	@ (8006b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a30      	ldr	r2, [pc, #192]	@ (8006b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8006b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d101      	bne.n	8006aca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01a      	beq.n	8006b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	3b08      	subs	r3, #8
 8006ad8:	4a28      	ldr	r2, [pc, #160]	@ (8006b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	091b      	lsrs	r3, r3, #4
 8006ae0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4b26      	ldr	r3, [pc, #152]	@ (8006b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	461a      	mov	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a24      	ldr	r2, [pc, #144]	@ (8006b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006af4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2201      	movs	r2, #1
 8006afe:	409a      	lsls	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006b04:	e024      	b.n	8006b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	3b10      	subs	r3, #16
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006b10:	fba2 2303 	umull	r2, r3, r2, r3
 8006b14:	091b      	lsrs	r3, r3, #4
 8006b16:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b8c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d806      	bhi.n	8006b2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4a1b      	ldr	r2, [pc, #108]	@ (8006b90 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d902      	bls.n	8006b2e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4b18      	ldr	r3, [pc, #96]	@ (8006b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	461a      	mov	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a16      	ldr	r2, [pc, #88]	@ (8006b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006b40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2201      	movs	r2, #1
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b50:	bf00      	nop
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	58025408 	.word	0x58025408
 8006b60:	5802541c 	.word	0x5802541c
 8006b64:	58025430 	.word	0x58025430
 8006b68:	58025444 	.word	0x58025444
 8006b6c:	58025458 	.word	0x58025458
 8006b70:	5802546c 	.word	0x5802546c
 8006b74:	58025480 	.word	0x58025480
 8006b78:	58025494 	.word	0x58025494
 8006b7c:	cccccccd 	.word	0xcccccccd
 8006b80:	16009600 	.word	0x16009600
 8006b84:	58025880 	.word	0x58025880
 8006b88:	aaaaaaab 	.word	0xaaaaaaab
 8006b8c:	400204b8 	.word	0x400204b8
 8006b90:	4002040f 	.word	0x4002040f
 8006b94:	10008200 	.word	0x10008200
 8006b98:	40020880 	.word	0x40020880

08006b9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d04a      	beq.n	8006c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d847      	bhi.n	8006c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a25      	ldr	r2, [pc, #148]	@ (8006c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d022      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a24      	ldr	r2, [pc, #144]	@ (8006c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d01d      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a22      	ldr	r2, [pc, #136]	@ (8006c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d018      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a21      	ldr	r2, [pc, #132]	@ (8006c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d013      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	@ (8006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00e      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	@ (8006c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d004      	beq.n	8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1b      	ldr	r2, [pc, #108]	@ (8006c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d101      	bne.n	8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4b17      	ldr	r3, [pc, #92]	@ (8006c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a15      	ldr	r2, [pc, #84]	@ (8006c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006c24:	671a      	str	r2, [r3, #112]	@ 0x70
 8006c26:	e009      	b.n	8006c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4b14      	ldr	r3, [pc, #80]	@ (8006c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a11      	ldr	r2, [pc, #68]	@ (8006c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006c3a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	2201      	movs	r2, #1
 8006c42:	409a      	lsls	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	58025408 	.word	0x58025408
 8006c58:	5802541c 	.word	0x5802541c
 8006c5c:	58025430 	.word	0x58025430
 8006c60:	58025444 	.word	0x58025444
 8006c64:	58025458 	.word	0x58025458
 8006c68:	5802546c 	.word	0x5802546c
 8006c6c:	58025480 	.word	0x58025480
 8006c70:	58025494 	.word	0x58025494
 8006c74:	1600963f 	.word	0x1600963f
 8006c78:	58025940 	.word	0x58025940
 8006c7c:	1000823f 	.word	0x1000823f
 8006c80:	40020940 	.word	0x40020940

08006c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b089      	sub	sp, #36	@ 0x24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c92:	4b86      	ldr	r3, [pc, #536]	@ (8006eac <HAL_GPIO_Init+0x228>)
 8006c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c96:	e18c      	b.n	8006fb2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 817e 	beq.w	8006fac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d005      	beq.n	8006cc8 <HAL_GPIO_Init+0x44>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d130      	bne.n	8006d2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cfe:	2201      	movs	r2, #1
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	43db      	mvns	r3, r3
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	091b      	lsrs	r3, r3, #4
 8006d14:	f003 0201 	and.w	r2, r3, #1
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d017      	beq.n	8006d66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2203      	movs	r2, #3
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d123      	bne.n	8006dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	08da      	lsrs	r2, r3, #3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	3208      	adds	r2, #8
 8006d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	220f      	movs	r2, #15
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4013      	ands	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	08da      	lsrs	r2, r3, #3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3208      	adds	r2, #8
 8006db4:	69b9      	ldr	r1, [r7, #24]
 8006db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	43db      	mvns	r3, r3
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f003 0203 	and.w	r2, r3, #3
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80d8 	beq.w	8006fac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8006eb0 <HAL_GPIO_Init+0x22c>)
 8006dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e02:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb0 <HAL_GPIO_Init+0x22c>)
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006e0c:	4b28      	ldr	r3, [pc, #160]	@ (8006eb0 <HAL_GPIO_Init+0x22c>)
 8006e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e1a:	4a26      	ldr	r2, [pc, #152]	@ (8006eb4 <HAL_GPIO_Init+0x230>)
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	3302      	adds	r3, #2
 8006e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	220f      	movs	r2, #15
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <HAL_GPIO_Init+0x234>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04a      	beq.n	8006edc <HAL_GPIO_Init+0x258>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a1c      	ldr	r2, [pc, #112]	@ (8006ebc <HAL_GPIO_Init+0x238>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d02b      	beq.n	8006ea6 <HAL_GPIO_Init+0x222>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec0 <HAL_GPIO_Init+0x23c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d025      	beq.n	8006ea2 <HAL_GPIO_Init+0x21e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec4 <HAL_GPIO_Init+0x240>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d01f      	beq.n	8006e9e <HAL_GPIO_Init+0x21a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a19      	ldr	r2, [pc, #100]	@ (8006ec8 <HAL_GPIO_Init+0x244>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d019      	beq.n	8006e9a <HAL_GPIO_Init+0x216>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a18      	ldr	r2, [pc, #96]	@ (8006ecc <HAL_GPIO_Init+0x248>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d013      	beq.n	8006e96 <HAL_GPIO_Init+0x212>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a17      	ldr	r2, [pc, #92]	@ (8006ed0 <HAL_GPIO_Init+0x24c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00d      	beq.n	8006e92 <HAL_GPIO_Init+0x20e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a16      	ldr	r2, [pc, #88]	@ (8006ed4 <HAL_GPIO_Init+0x250>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <HAL_GPIO_Init+0x20a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a15      	ldr	r2, [pc, #84]	@ (8006ed8 <HAL_GPIO_Init+0x254>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d101      	bne.n	8006e8a <HAL_GPIO_Init+0x206>
 8006e86:	2309      	movs	r3, #9
 8006e88:	e029      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006e8a:	230a      	movs	r3, #10
 8006e8c:	e027      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006e8e:	2307      	movs	r3, #7
 8006e90:	e025      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006e92:	2306      	movs	r3, #6
 8006e94:	e023      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006e96:	2305      	movs	r3, #5
 8006e98:	e021      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006e9a:	2304      	movs	r3, #4
 8006e9c:	e01f      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e01d      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	e01b      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e019      	b.n	8006ede <HAL_GPIO_Init+0x25a>
 8006eaa:	bf00      	nop
 8006eac:	58000080 	.word	0x58000080
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	58000400 	.word	0x58000400
 8006eb8:	58020000 	.word	0x58020000
 8006ebc:	58020400 	.word	0x58020400
 8006ec0:	58020800 	.word	0x58020800
 8006ec4:	58020c00 	.word	0x58020c00
 8006ec8:	58021000 	.word	0x58021000
 8006ecc:	58021400 	.word	0x58021400
 8006ed0:	58021800 	.word	0x58021800
 8006ed4:	58021c00 	.word	0x58021c00
 8006ed8:	58022400 	.word	0x58022400
 8006edc:	2300      	movs	r3, #0
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	f002 0203 	and.w	r2, r2, #3
 8006ee4:	0092      	lsls	r2, r2, #2
 8006ee6:	4093      	lsls	r3, r2
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eee:	4938      	ldr	r1, [pc, #224]	@ (8006fd0 <HAL_GPIO_Init+0x34c>)
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	089b      	lsrs	r3, r3, #2
 8006ef4:	3302      	adds	r3, #2
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	43db      	mvns	r3, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	43db      	mvns	r3, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	4013      	ands	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f47f ae6b 	bne.w	8006c98 <HAL_GPIO_Init+0x14>
  }
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	3724      	adds	r7, #36	@ 0x24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	58000400 	.word	0x58000400

08006fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fe4:	787b      	ldrb	r3, [r7, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fea:	887a      	ldrh	r2, [r7, #2]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ff0:	e003      	b.n	8006ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ff2:	887b      	ldrh	r3, [r7, #2]
 8006ff4:	041a      	lsls	r2, r3, #16
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	619a      	str	r2, [r3, #24]
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b082      	sub	sp, #8
 800700a:	af00      	add	r7, sp, #0
 800700c:	4603      	mov	r3, r0
 800700e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007014:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007020:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f804 	bl	800703a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	4603      	mov	r3, r0
 8007042:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007058:	4b19      	ldr	r3, [pc, #100]	@ (80070c0 <HAL_PWREx_ConfigSupply+0x70>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b04      	cmp	r3, #4
 8007062:	d00a      	beq.n	800707a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007064:	4b16      	ldr	r3, [pc, #88]	@ (80070c0 <HAL_PWREx_ConfigSupply+0x70>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d001      	beq.n	8007076 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e01f      	b.n	80070b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	e01d      	b.n	80070b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800707a:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <HAL_PWREx_ConfigSupply+0x70>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f023 0207 	bic.w	r2, r3, #7
 8007082:	490f      	ldr	r1, [pc, #60]	@ (80070c0 <HAL_PWREx_ConfigSupply+0x70>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4313      	orrs	r3, r2
 8007088:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800708a:	f7fc fe77 	bl	8003d7c <HAL_GetTick>
 800708e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007090:	e009      	b.n	80070a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007092:	f7fc fe73 	bl	8003d7c <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070a0:	d901      	bls.n	80070a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e007      	b.n	80070b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070a6:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <HAL_PWREx_ConfigSupply+0x70>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b2:	d1ee      	bne.n	8007092 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	58024800 	.word	0x58024800

080070c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08c      	sub	sp, #48	@ 0x30
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e3c8      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8087 	beq.w	80071f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e4:	4b88      	ldr	r3, [pc, #544]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070ee:	4b86      	ldr	r3, [pc, #536]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80070f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d007      	beq.n	800710a <HAL_RCC_OscConfig+0x46>
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	2b18      	cmp	r3, #24
 80070fe:	d110      	bne.n	8007122 <HAL_RCC_OscConfig+0x5e>
 8007100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d10b      	bne.n	8007122 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800710a:	4b7f      	ldr	r3, [pc, #508]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d06c      	beq.n	80071f0 <HAL_RCC_OscConfig+0x12c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d168      	bne.n	80071f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e3a2      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712a:	d106      	bne.n	800713a <HAL_RCC_OscConfig+0x76>
 800712c:	4b76      	ldr	r3, [pc, #472]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a75      	ldr	r2, [pc, #468]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	e02e      	b.n	8007198 <HAL_RCC_OscConfig+0xd4>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10c      	bne.n	800715c <HAL_RCC_OscConfig+0x98>
 8007142:	4b71      	ldr	r3, [pc, #452]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a70      	ldr	r2, [pc, #448]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	4b6e      	ldr	r3, [pc, #440]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a6d      	ldr	r2, [pc, #436]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e01d      	b.n	8007198 <HAL_RCC_OscConfig+0xd4>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0xbc>
 8007166:	4b68      	ldr	r3, [pc, #416]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a67      	ldr	r2, [pc, #412]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800716c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4b65      	ldr	r3, [pc, #404]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a64      	ldr	r2, [pc, #400]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e00b      	b.n	8007198 <HAL_RCC_OscConfig+0xd4>
 8007180:	4b61      	ldr	r3, [pc, #388]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a60      	ldr	r2, [pc, #384]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	4b5e      	ldr	r3, [pc, #376]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5d      	ldr	r2, [pc, #372]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d013      	beq.n	80071c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7fc fdec 	bl	8003d7c <HAL_GetTick>
 80071a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a8:	f7fc fde8 	bl	8003d7c <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b64      	cmp	r3, #100	@ 0x64
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e356      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071ba:	4b53      	ldr	r3, [pc, #332]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCC_OscConfig+0xe4>
 80071c6:	e014      	b.n	80071f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c8:	f7fc fdd8 	bl	8003d7c <HAL_GetTick>
 80071cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071d0:	f7fc fdd4 	bl	8003d7c <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b64      	cmp	r3, #100	@ 0x64
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e342      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071e2:	4b49      	ldr	r3, [pc, #292]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x10c>
 80071ee:	e000      	b.n	80071f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 808c 	beq.w	8007318 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007200:	4b41      	ldr	r3, [pc, #260]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007208:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800720a:	4b3f      	ldr	r3, [pc, #252]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800720c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_RCC_OscConfig+0x162>
 8007216:	6a3b      	ldr	r3, [r7, #32]
 8007218:	2b18      	cmp	r3, #24
 800721a:	d137      	bne.n	800728c <HAL_RCC_OscConfig+0x1c8>
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d132      	bne.n	800728c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007226:	4b38      	ldr	r3, [pc, #224]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_RCC_OscConfig+0x17a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e314      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800723e:	4b32      	ldr	r3, [pc, #200]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f023 0219 	bic.w	r2, r3, #25
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	492f      	ldr	r1, [pc, #188]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800724c:	4313      	orrs	r3, r2
 800724e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7fc fd94 	bl	8003d7c <HAL_GetTick>
 8007254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007258:	f7fc fd90 	bl	8003d7c <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e2fe      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800726a:	4b27      	ldr	r3, [pc, #156]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f0      	beq.n	8007258 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007276:	4b24      	ldr	r3, [pc, #144]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	061b      	lsls	r3, r3, #24
 8007284:	4920      	ldr	r1, [pc, #128]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007286:	4313      	orrs	r3, r2
 8007288:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800728a:	e045      	b.n	8007318 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d026      	beq.n	80072e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007294:	4b1c      	ldr	r3, [pc, #112]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f023 0219 	bic.w	r2, r3, #25
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	4919      	ldr	r1, [pc, #100]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a6:	f7fc fd69 	bl	8003d7c <HAL_GetTick>
 80072aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ae:	f7fc fd65 	bl	8003d7c <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e2d3      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072c0:	4b11      	ldr	r3, [pc, #68]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	061b      	lsls	r3, r3, #24
 80072da:	490b      	ldr	r1, [pc, #44]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	604b      	str	r3, [r1, #4]
 80072e0:	e01a      	b.n	8007318 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e2:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a08      	ldr	r2, [pc, #32]	@ (8007308 <HAL_RCC_OscConfig+0x244>)
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ee:	f7fc fd45 	bl	8003d7c <HAL_GetTick>
 80072f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072f4:	e00a      	b.n	800730c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072f6:	f7fc fd41 	bl	8003d7c <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d903      	bls.n	800730c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e2af      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
 8007308:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800730c:	4b96      	ldr	r3, [pc, #600]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1ee      	bne.n	80072f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b00      	cmp	r3, #0
 8007322:	d06a      	beq.n	80073fa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007324:	4b90      	ldr	r3, [pc, #576]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800732c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800732e:	4b8e      	ldr	r3, [pc, #568]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b08      	cmp	r3, #8
 8007338:	d007      	beq.n	800734a <HAL_RCC_OscConfig+0x286>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b18      	cmp	r3, #24
 800733e:	d11b      	bne.n	8007378 <HAL_RCC_OscConfig+0x2b4>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b01      	cmp	r3, #1
 8007348:	d116      	bne.n	8007378 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800734a:	4b87      	ldr	r3, [pc, #540]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_RCC_OscConfig+0x29e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	2b80      	cmp	r3, #128	@ 0x80
 800735c:	d001      	beq.n	8007362 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e282      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007362:	4b81      	ldr	r3, [pc, #516]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	061b      	lsls	r3, r3, #24
 8007370:	497d      	ldr	r1, [pc, #500]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007376:	e040      	b.n	80073fa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d023      	beq.n	80073c8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007380:	4b79      	ldr	r3, [pc, #484]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a78      	ldr	r2, [pc, #480]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fc fcf6 	bl	8003d7c <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007394:	f7fc fcf2 	bl	8003d7c <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e260      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073a6:	4b70      	ldr	r3, [pc, #448]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	061b      	lsls	r3, r3, #24
 80073c0:	4969      	ldr	r1, [pc, #420]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60cb      	str	r3, [r1, #12]
 80073c6:	e018      	b.n	80073fa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073c8:	4b67      	ldr	r3, [pc, #412]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a66      	ldr	r2, [pc, #408]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80073ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d4:	f7fc fcd2 	bl	8003d7c <HAL_GetTick>
 80073d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073da:	e008      	b.n	80073ee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073dc:	f7fc fcce 	bl	8003d7c <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e23c      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073ee:	4b5e      	ldr	r3, [pc, #376]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1f0      	bne.n	80073dc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d036      	beq.n	8007474 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d019      	beq.n	8007442 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800740e:	4b56      	ldr	r3, [pc, #344]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007412:	4a55      	ldr	r2, [pc, #340]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741a:	f7fc fcaf 	bl	8003d7c <HAL_GetTick>
 800741e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007422:	f7fc fcab 	bl	8003d7c <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e219      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007434:	4b4c      	ldr	r3, [pc, #304]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0f0      	beq.n	8007422 <HAL_RCC_OscConfig+0x35e>
 8007440:	e018      	b.n	8007474 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007442:	4b49      	ldr	r3, [pc, #292]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007446:	4a48      	ldr	r2, [pc, #288]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007448:	f023 0301 	bic.w	r3, r3, #1
 800744c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800744e:	f7fc fc95 	bl	8003d7c <HAL_GetTick>
 8007452:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007456:	f7fc fc91 	bl	8003d7c <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e1ff      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007468:	4b3f      	ldr	r3, [pc, #252]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800746a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f0      	bne.n	8007456 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d036      	beq.n	80074ee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d019      	beq.n	80074bc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007488:	4b37      	ldr	r3, [pc, #220]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a36      	ldr	r2, [pc, #216]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800748e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007492:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007494:	f7fc fc72 	bl	8003d7c <HAL_GetTick>
 8007498:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800749c:	f7fc fc6e 	bl	8003d7c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e1dc      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCC_OscConfig+0x3d8>
 80074ba:	e018      	b.n	80074ee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074bc:	4b2a      	ldr	r3, [pc, #168]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a29      	ldr	r2, [pc, #164]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80074c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074c8:	f7fc fc58 	bl	8003d7c <HAL_GetTick>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074d0:	f7fc fc54 	bl	8003d7c <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e1c2      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074e2:	4b21      	ldr	r3, [pc, #132]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f0      	bne.n	80074d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 8086 	beq.w	8007608 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074fc:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <HAL_RCC_OscConfig+0x4a8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1a      	ldr	r2, [pc, #104]	@ (800756c <HAL_RCC_OscConfig+0x4a8>)
 8007502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007506:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007508:	f7fc fc38 	bl	8003d7c <HAL_GetTick>
 800750c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007510:	f7fc fc34 	bl	8003d7c <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b64      	cmp	r3, #100	@ 0x64
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e1a2      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007522:	4b12      	ldr	r3, [pc, #72]	@ (800756c <HAL_RCC_OscConfig+0x4a8>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d106      	bne.n	8007544 <HAL_RCC_OscConfig+0x480>
 8007536:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753a:	4a0b      	ldr	r2, [pc, #44]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	6713      	str	r3, [r2, #112]	@ 0x70
 8007542:	e032      	b.n	80075aa <HAL_RCC_OscConfig+0x4e6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d111      	bne.n	8007570 <HAL_RCC_OscConfig+0x4ac>
 800754c:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	4a05      	ldr	r2, [pc, #20]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 8007552:	f023 0301 	bic.w	r3, r3, #1
 8007556:	6713      	str	r3, [r2, #112]	@ 0x70
 8007558:	4b03      	ldr	r3, [pc, #12]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800755a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755c:	4a02      	ldr	r2, [pc, #8]	@ (8007568 <HAL_RCC_OscConfig+0x4a4>)
 800755e:	f023 0304 	bic.w	r3, r3, #4
 8007562:	6713      	str	r3, [r2, #112]	@ 0x70
 8007564:	e021      	b.n	80075aa <HAL_RCC_OscConfig+0x4e6>
 8007566:	bf00      	nop
 8007568:	58024400 	.word	0x58024400
 800756c:	58024800 	.word	0x58024800
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b05      	cmp	r3, #5
 8007576:	d10c      	bne.n	8007592 <HAL_RCC_OscConfig+0x4ce>
 8007578:	4b83      	ldr	r3, [pc, #524]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800757a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757c:	4a82      	ldr	r2, [pc, #520]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800757e:	f043 0304 	orr.w	r3, r3, #4
 8007582:	6713      	str	r3, [r2, #112]	@ 0x70
 8007584:	4b80      	ldr	r3, [pc, #512]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007588:	4a7f      	ldr	r2, [pc, #508]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007590:	e00b      	b.n	80075aa <HAL_RCC_OscConfig+0x4e6>
 8007592:	4b7d      	ldr	r3, [pc, #500]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a7c      	ldr	r2, [pc, #496]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007598:	f023 0301 	bic.w	r3, r3, #1
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	4b7a      	ldr	r3, [pc, #488]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	4a79      	ldr	r2, [pc, #484]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80075a4:	f023 0304 	bic.w	r3, r3, #4
 80075a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d015      	beq.n	80075de <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b2:	f7fc fbe3 	bl	8003d7c <HAL_GetTick>
 80075b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075b8:	e00a      	b.n	80075d0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ba:	f7fc fbdf 	bl	8003d7c <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e14b      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075d0:	4b6d      	ldr	r3, [pc, #436]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80075d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0ee      	beq.n	80075ba <HAL_RCC_OscConfig+0x4f6>
 80075dc:	e014      	b.n	8007608 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075de:	f7fc fbcd 	bl	8003d7c <HAL_GetTick>
 80075e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075e4:	e00a      	b.n	80075fc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e6:	f7fc fbc9 	bl	8003d7c <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e135      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075fc:	4b62      	ldr	r3, [pc, #392]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80075fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1ee      	bne.n	80075e6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 812a 	beq.w	8007866 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007612:	4b5d      	ldr	r3, [pc, #372]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800761a:	2b18      	cmp	r3, #24
 800761c:	f000 80ba 	beq.w	8007794 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	2b02      	cmp	r3, #2
 8007626:	f040 8095 	bne.w	8007754 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762a:	4b57      	ldr	r3, [pc, #348]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a56      	ldr	r2, [pc, #344]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007636:	f7fc fba1 	bl	8003d7c <HAL_GetTick>
 800763a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800763e:	f7fc fb9d 	bl	8003d7c <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e10b      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007650:	4b4d      	ldr	r3, [pc, #308]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f0      	bne.n	800763e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800765c:	4b4a      	ldr	r3, [pc, #296]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800765e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007660:	4b4a      	ldr	r3, [pc, #296]	@ (800778c <HAL_RCC_OscConfig+0x6c8>)
 8007662:	4013      	ands	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800766c:	0112      	lsls	r2, r2, #4
 800766e:	430a      	orrs	r2, r1
 8007670:	4945      	ldr	r1, [pc, #276]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007672:	4313      	orrs	r3, r2
 8007674:	628b      	str	r3, [r1, #40]	@ 0x28
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	3b01      	subs	r3, #1
 800767c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007684:	3b01      	subs	r3, #1
 8007686:	025b      	lsls	r3, r3, #9
 8007688:	b29b      	uxth	r3, r3
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	3b01      	subs	r3, #1
 8007692:	041b      	lsls	r3, r3, #16
 8007694:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	3b01      	subs	r3, #1
 80076a0:	061b      	lsls	r3, r3, #24
 80076a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80076a6:	4938      	ldr	r1, [pc, #224]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80076ac:	4b36      	ldr	r3, [pc, #216]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	4a35      	ldr	r2, [pc, #212]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076b2:	f023 0301 	bic.w	r3, r3, #1
 80076b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076b8:	4b33      	ldr	r3, [pc, #204]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076bc:	4b34      	ldr	r3, [pc, #208]	@ (8007790 <HAL_RCC_OscConfig+0x6cc>)
 80076be:	4013      	ands	r3, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076c4:	00d2      	lsls	r2, r2, #3
 80076c6:	4930      	ldr	r1, [pc, #192]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076cc:	4b2e      	ldr	r3, [pc, #184]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	f023 020c 	bic.w	r2, r3, #12
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	492b      	ldr	r1, [pc, #172]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076de:	4b2a      	ldr	r3, [pc, #168]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	f023 0202 	bic.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ea:	4927      	ldr	r1, [pc, #156]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076f0:	4b25      	ldr	r3, [pc, #148]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	4a24      	ldr	r2, [pc, #144]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fc:	4b22      	ldr	r3, [pc, #136]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	4a21      	ldr	r2, [pc, #132]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007708:	4b1f      	ldr	r3, [pc, #124]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a1e      	ldr	r2, [pc, #120]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800770e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007714:	4b1c      	ldr	r3, [pc, #112]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	4a1b      	ldr	r2, [pc, #108]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007720:	4b19      	ldr	r3, [pc, #100]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a18      	ldr	r2, [pc, #96]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800772a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772c:	f7fc fb26 	bl	8003d7c <HAL_GetTick>
 8007730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007734:	f7fc fb22 	bl	8003d7c <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e090      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007746:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCC_OscConfig+0x670>
 8007752:	e088      	b.n	8007866 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007754:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a0b      	ldr	r2, [pc, #44]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800775a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800775e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007760:	f7fc fb0c 	bl	8003d7c <HAL_GetTick>
 8007764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007768:	f7fc fb08 	bl	8003d7c <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e076      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800777a:	4b03      	ldr	r3, [pc, #12]	@ (8007788 <HAL_RCC_OscConfig+0x6c4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f0      	bne.n	8007768 <HAL_RCC_OscConfig+0x6a4>
 8007786:	e06e      	b.n	8007866 <HAL_RCC_OscConfig+0x7a2>
 8007788:	58024400 	.word	0x58024400
 800778c:	fffffc0c 	.word	0xfffffc0c
 8007790:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007794:	4b36      	ldr	r3, [pc, #216]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800779a:	4b35      	ldr	r3, [pc, #212]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d031      	beq.n	800780c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	f003 0203 	and.w	r2, r3, #3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d12a      	bne.n	800780c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	091b      	lsrs	r3, r3, #4
 80077ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d122      	bne.n	800780c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d11a      	bne.n	800780c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	0a5b      	lsrs	r3, r3, #9
 80077da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d111      	bne.n	800780c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	0c1b      	lsrs	r3, r3, #16
 80077ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d108      	bne.n	800780c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	0e1b      	lsrs	r3, r3, #24
 80077fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007806:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007808:	429a      	cmp	r2, r3
 800780a:	d001      	beq.n	8007810 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e02b      	b.n	8007868 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007810:	4b17      	ldr	r3, [pc, #92]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 8007812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007814:	08db      	lsrs	r3, r3, #3
 8007816:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800781a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d01f      	beq.n	8007866 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007826:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a11      	ldr	r2, [pc, #68]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007832:	f7fc faa3 	bl	8003d7c <HAL_GetTick>
 8007836:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007838:	bf00      	nop
 800783a:	f7fc fa9f 	bl	8003d7c <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	4293      	cmp	r3, r2
 8007844:	d0f9      	beq.n	800783a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007846:	4b0a      	ldr	r3, [pc, #40]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 8007848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800784a:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <HAL_RCC_OscConfig+0x7b0>)
 800784c:	4013      	ands	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007852:	00d2      	lsls	r2, r2, #3
 8007854:	4906      	ldr	r1, [pc, #24]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 8007856:	4313      	orrs	r3, r2
 8007858:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800785a:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4a04      	ldr	r2, [pc, #16]	@ (8007870 <HAL_RCC_OscConfig+0x7ac>)
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3730      	adds	r7, #48	@ 0x30
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	58024400 	.word	0x58024400
 8007874:	ffff0007 	.word	0xffff0007

08007878 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e19c      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800788c:	4b8a      	ldr	r3, [pc, #552]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d910      	bls.n	80078bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789a:	4b87      	ldr	r3, [pc, #540]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 020f 	bic.w	r2, r3, #15
 80078a2:	4985      	ldr	r1, [pc, #532]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078aa:	4b83      	ldr	r3, [pc, #524]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e184      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d010      	beq.n	80078ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	4b7b      	ldr	r3, [pc, #492]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d908      	bls.n	80078ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078d8:	4b78      	ldr	r3, [pc, #480]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	4975      	ldr	r1, [pc, #468]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d010      	beq.n	8007918 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695a      	ldr	r2, [r3, #20]
 80078fa:	4b70      	ldr	r3, [pc, #448]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007902:	429a      	cmp	r2, r3
 8007904:	d908      	bls.n	8007918 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007906:	4b6d      	ldr	r3, [pc, #436]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	496a      	ldr	r1, [pc, #424]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007914:	4313      	orrs	r3, r2
 8007916:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	4b64      	ldr	r3, [pc, #400]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007930:	429a      	cmp	r2, r3
 8007932:	d908      	bls.n	8007946 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007934:	4b61      	ldr	r3, [pc, #388]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007936:	69db      	ldr	r3, [r3, #28]
 8007938:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	495e      	ldr	r1, [pc, #376]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007942:	4313      	orrs	r3, r2
 8007944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	4b59      	ldr	r3, [pc, #356]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800795e:	429a      	cmp	r2, r3
 8007960:	d908      	bls.n	8007974 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007962:	4b56      	ldr	r3, [pc, #344]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	4953      	ldr	r1, [pc, #332]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007970:	4313      	orrs	r3, r2
 8007972:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	4b4d      	ldr	r3, [pc, #308]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	429a      	cmp	r2, r3
 800798e:	d908      	bls.n	80079a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007990:	4b4a      	ldr	r3, [pc, #296]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f023 020f 	bic.w	r2, r3, #15
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	4947      	ldr	r1, [pc, #284]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d055      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80079ae:	4b43      	ldr	r3, [pc, #268]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4940      	ldr	r1, [pc, #256]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d107      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079c8:	4b3c      	ldr	r3, [pc, #240]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d121      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0f6      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079e0:	4b36      	ldr	r3, [pc, #216]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d115      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0ea      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d107      	bne.n	8007a08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079f8:	4b30      	ldr	r3, [pc, #192]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0de      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a08:	4b2c      	ldr	r3, [pc, #176]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e0d6      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a18:	4b28      	ldr	r3, [pc, #160]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f023 0207 	bic.w	r2, r3, #7
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4925      	ldr	r1, [pc, #148]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2a:	f7fc f9a7 	bl	8003d7c <HAL_GetTick>
 8007a2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a30:	e00a      	b.n	8007a48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a32:	f7fc f9a3 	bl	8003d7c <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e0be      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a48:	4b1c      	ldr	r3, [pc, #112]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d1eb      	bne.n	8007a32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d010      	beq.n	8007a88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	4b14      	ldr	r3, [pc, #80]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d208      	bcs.n	8007a88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a76:	4b11      	ldr	r3, [pc, #68]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f023 020f 	bic.w	r2, r3, #15
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	490e      	ldr	r1, [pc, #56]	@ (8007abc <HAL_RCC_ClockConfig+0x244>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a88:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d214      	bcs.n	8007ac0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a96:	4b08      	ldr	r3, [pc, #32]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 020f 	bic.w	r2, r3, #15
 8007a9e:	4906      	ldr	r1, [pc, #24]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aa6:	4b04      	ldr	r3, [pc, #16]	@ (8007ab8 <HAL_RCC_ClockConfig+0x240>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e086      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x34e>
 8007ab8:	52002000 	.word	0x52002000
 8007abc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691a      	ldr	r2, [r3, #16]
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d208      	bcs.n	8007aee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007adc:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4939      	ldr	r1, [pc, #228]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695a      	ldr	r2, [r3, #20]
 8007afe:	4b34      	ldr	r3, [pc, #208]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d208      	bcs.n	8007b1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b0a:	4b31      	ldr	r3, [pc, #196]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	492e      	ldr	r1, [pc, #184]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d010      	beq.n	8007b4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	4b28      	ldr	r3, [pc, #160]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d208      	bcs.n	8007b4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b38:	4b25      	ldr	r3, [pc, #148]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	4922      	ldr	r1, [pc, #136]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d010      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69da      	ldr	r2, [r3, #28]
 8007b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d208      	bcs.n	8007b78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b66:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	4917      	ldr	r1, [pc, #92]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b78:	f000 f834 	bl	8007be4 <HAL_RCC_GetSysClockFreq>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	4b14      	ldr	r3, [pc, #80]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	4912      	ldr	r1, [pc, #72]	@ (8007bd4 <HAL_RCC_ClockConfig+0x35c>)
 8007b8a:	5ccb      	ldrb	r3, [r1, r3]
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b96:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd0 <HAL_RCC_ClockConfig+0x358>)
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd4 <HAL_RCC_ClockConfig+0x35c>)
 8007ba0:	5cd3      	ldrb	r3, [r2, r3]
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd8 <HAL_RCC_ClockConfig+0x360>)
 8007bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bdc <HAL_RCC_ClockConfig+0x364>)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007be0 <HAL_RCC_ClockConfig+0x368>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fc f894 	bl	8003ce8 <HAL_InitTick>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	0800f0c0 	.word	0x0800f0c0
 8007bd8:	24000010 	.word	0x24000010
 8007bdc:	2400000c 	.word	0x2400000c
 8007be0:	24000014 	.word	0x24000014

08007be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b089      	sub	sp, #36	@ 0x24
 8007be8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bea:	4bb3      	ldr	r3, [pc, #716]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bf2:	2b18      	cmp	r3, #24
 8007bf4:	f200 8155 	bhi.w	8007ea2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c65 	.word	0x08007c65
 8007c04:	08007ea3 	.word	0x08007ea3
 8007c08:	08007ea3 	.word	0x08007ea3
 8007c0c:	08007ea3 	.word	0x08007ea3
 8007c10:	08007ea3 	.word	0x08007ea3
 8007c14:	08007ea3 	.word	0x08007ea3
 8007c18:	08007ea3 	.word	0x08007ea3
 8007c1c:	08007ea3 	.word	0x08007ea3
 8007c20:	08007c8b 	.word	0x08007c8b
 8007c24:	08007ea3 	.word	0x08007ea3
 8007c28:	08007ea3 	.word	0x08007ea3
 8007c2c:	08007ea3 	.word	0x08007ea3
 8007c30:	08007ea3 	.word	0x08007ea3
 8007c34:	08007ea3 	.word	0x08007ea3
 8007c38:	08007ea3 	.word	0x08007ea3
 8007c3c:	08007ea3 	.word	0x08007ea3
 8007c40:	08007c91 	.word	0x08007c91
 8007c44:	08007ea3 	.word	0x08007ea3
 8007c48:	08007ea3 	.word	0x08007ea3
 8007c4c:	08007ea3 	.word	0x08007ea3
 8007c50:	08007ea3 	.word	0x08007ea3
 8007c54:	08007ea3 	.word	0x08007ea3
 8007c58:	08007ea3 	.word	0x08007ea3
 8007c5c:	08007ea3 	.word	0x08007ea3
 8007c60:	08007c97 	.word	0x08007c97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c64:	4b94      	ldr	r3, [pc, #592]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c70:	4b91      	ldr	r3, [pc, #580]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	08db      	lsrs	r3, r3, #3
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	4a90      	ldr	r2, [pc, #576]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c82:	e111      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c84:	4b8d      	ldr	r3, [pc, #564]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c86:	61bb      	str	r3, [r7, #24]
      break;
 8007c88:	e10e      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c8c:	61bb      	str	r3, [r7, #24]
      break;
 8007c8e:	e10b      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c90:	4b8c      	ldr	r3, [pc, #560]	@ (8007ec4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c92:	61bb      	str	r3, [r7, #24]
      break;
 8007c94:	e108      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c96:	4b88      	ldr	r3, [pc, #544]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007ca0:	4b85      	ldr	r3, [pc, #532]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca4:	091b      	lsrs	r3, r3, #4
 8007ca6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007caa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007cac:	4b82      	ldr	r3, [pc, #520]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007cb6:	4b80      	ldr	r3, [pc, #512]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cba:	08db      	lsrs	r3, r3, #3
 8007cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	fb02 f303 	mul.w	r3, r2, r3
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80e1 	beq.w	8007e9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	f000 8083 	beq.w	8007de8 <HAL_RCC_GetSysClockFreq+0x204>
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f200 80a1 	bhi.w	8007e2c <HAL_RCC_GetSysClockFreq+0x248>
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x114>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d056      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cf6:	e099      	b.n	8007e2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d02d      	beq.n	8007d60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d04:	4b6c      	ldr	r3, [pc, #432]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	08db      	lsrs	r3, r3, #3
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	4a6b      	ldr	r2, [pc, #428]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d10:	fa22 f303 	lsr.w	r3, r2, r3
 8007d14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2e:	4b62      	ldr	r3, [pc, #392]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d5e:	e087      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007ecc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d72:	4b51      	ldr	r3, [pc, #324]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007da2:	e065      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db6:	4b40      	ldr	r3, [pc, #256]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007de6:	e043      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007ed4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e2a:	e021      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	ee07 3a90 	vmov	s15, r3
 8007e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ed0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007ec8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e70:	4b11      	ldr	r3, [pc, #68]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e74:	0a5b      	lsrs	r3, r3, #9
 8007e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	ee07 3a90 	vmov	s15, r3
 8007e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e94:	ee17 3a90 	vmov	r3, s15
 8007e98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e9a:	e005      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
      break;
 8007ea0:	e002      	b.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007ea2:	4b07      	ldr	r3, [pc, #28]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ea4:	61bb      	str	r3, [r7, #24]
      break;
 8007ea6:	bf00      	nop
  }

  return sysclockfreq;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3724      	adds	r7, #36	@ 0x24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	03d09000 	.word	0x03d09000
 8007ec0:	003d0900 	.word	0x003d0900
 8007ec4:	007f2815 	.word	0x007f2815
 8007ec8:	46000000 	.word	0x46000000
 8007ecc:	4c742400 	.word	0x4c742400
 8007ed0:	4a742400 	.word	0x4a742400
 8007ed4:	4afe502a 	.word	0x4afe502a

08007ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ede:	f7ff fe81 	bl	8007be4 <HAL_RCC_GetSysClockFreq>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4b10      	ldr	r3, [pc, #64]	@ (8007f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	490f      	ldr	r1, [pc, #60]	@ (8007f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007ef0:	5ccb      	ldrb	r3, [r1, r3]
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8007efa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007efc:	4b0a      	ldr	r3, [pc, #40]	@ (8007f28 <HAL_RCC_GetHCLKFreq+0x50>)
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	4a09      	ldr	r2, [pc, #36]	@ (8007f2c <HAL_RCC_GetHCLKFreq+0x54>)
 8007f06:	5cd3      	ldrb	r3, [r2, r3]
 8007f08:	f003 031f 	and.w	r3, r3, #31
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f12:	4a07      	ldr	r2, [pc, #28]	@ (8007f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f16:	4a07      	ldr	r2, [pc, #28]	@ (8007f34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007f1c:	4b04      	ldr	r3, [pc, #16]	@ (8007f30 <HAL_RCC_GetHCLKFreq+0x58>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	0800f0c0 	.word	0x0800f0c0
 8007f30:	24000010 	.word	0x24000010
 8007f34:	2400000c 	.word	0x2400000c

08007f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f3c:	f7ff ffcc 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b06      	ldr	r3, [pc, #24]	@ (8007f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	091b      	lsrs	r3, r3, #4
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	4904      	ldr	r1, [pc, #16]	@ (8007f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f4e:	5ccb      	ldrb	r3, [r1, r3]
 8007f50:	f003 031f 	and.w	r3, r3, #31
 8007f54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	0800f0c0 	.word	0x0800f0c0

08007f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f68:	f7ff ffb6 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	4904      	ldr	r1, [pc, #16]	@ (8007f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f7a:	5ccb      	ldrb	r3, [r1, r3]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	58024400 	.word	0x58024400
 8007f8c:	0800f0c0 	.word	0x0800f0c0

08007f90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f94:	b0c6      	sub	sp, #280	@ 0x118
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007fb4:	2500      	movs	r5, #0
 8007fb6:	ea54 0305 	orrs.w	r3, r4, r5
 8007fba:	d049      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fc2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fc6:	d02f      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007fc8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007fcc:	d828      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007fce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fd2:	d01a      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fd8:	d822      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fe2:	d007      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007fe4:	e01c      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe6:	4bab      	ldr	r3, [pc, #684]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	4aaa      	ldr	r2, [pc, #680]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ff2:	e01a      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fc25 	bl	800984c <RCCEx_PLL2_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008008:	e00f      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	3328      	adds	r3, #40	@ 0x28
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fccc 	bl	80099b0 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800801e:	e004      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008026:	e000      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10a      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008032:	4b98      	ldr	r3, [pc, #608]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008036:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008040:	4a94      	ldr	r2, [pc, #592]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008042:	430b      	orrs	r3, r1
 8008044:	6513      	str	r3, [r2, #80]	@ 0x50
 8008046:	e003      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800804c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	ea58 0309 	orrs.w	r3, r8, r9
 8008064:	d047      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806c:	2b04      	cmp	r3, #4
 800806e:	d82a      	bhi.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008070:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	0800808d 	.word	0x0800808d
 800807c:	0800809b 	.word	0x0800809b
 8008080:	080080b1 	.word	0x080080b1
 8008084:	080080cf 	.word	0x080080cf
 8008088:	080080cf 	.word	0x080080cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808c:	4b81      	ldr	r3, [pc, #516]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008090:	4a80      	ldr	r2, [pc, #512]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008098:	e01a      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809e:	3308      	adds	r3, #8
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 fbd2 	bl	800984c <RCCEx_PLL2_Config>
 80080a8:	4603      	mov	r3, r0
 80080aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080ae:	e00f      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b4:	3328      	adds	r3, #40	@ 0x28
 80080b6:	2100      	movs	r1, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 fc79 	bl	80099b0 <RCCEx_PLL3_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080c4:	e004      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80080cc:	e000      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80080ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080d8:	4b6e      	ldr	r3, [pc, #440]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	f023 0107 	bic.w	r1, r3, #7
 80080e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e6:	4a6b      	ldr	r2, [pc, #428]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80080ec:	e003      	b.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80080f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008102:	f04f 0b00 	mov.w	fp, #0
 8008106:	ea5a 030b 	orrs.w	r3, sl, fp
 800810a:	d05b      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008110:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008114:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008118:	d03b      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800811a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800811e:	d834      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008120:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008124:	d037      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008126:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800812a:	d82e      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800812c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008130:	d033      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008132:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008136:	d828      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800813c:	d01a      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800813e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008142:	d822      	bhi.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008148:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800814c:	d007      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800814e:	e01c      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008150:	4b50      	ldr	r3, [pc, #320]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4a4f      	ldr	r2, [pc, #316]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800815c:	e01e      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	3308      	adds	r3, #8
 8008164:	2100      	movs	r1, #0
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fb70 	bl	800984c <RCCEx_PLL2_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008172:	e013      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008178:	3328      	adds	r3, #40	@ 0x28
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f001 fc17 	bl	80099b0 <RCCEx_PLL3_Config>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008188:	e008      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008190:	e004      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008192:	bf00      	nop
 8008194:	e002      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800819a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800819c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10b      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081a8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80081ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081b4:	4a37      	ldr	r2, [pc, #220]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081b6:	430b      	orrs	r3, r1
 80081b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ba:	e003      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80081c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081cc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80081d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081d4:	2300      	movs	r3, #0
 80081d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80081da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80081de:	460b      	mov	r3, r1
 80081e0:	4313      	orrs	r3, r2
 80081e2:	d05d      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80081e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80081ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081f0:	d03b      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80081f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80081f6:	d834      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081fc:	d037      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80081fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008202:	d82e      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008204:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008208:	d033      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800820a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800820e:	d828      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008210:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008214:	d01a      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008216:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800821a:	d822      	bhi.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008224:	d007      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008226:	e01c      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008228:	4b1a      	ldr	r3, [pc, #104]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	4a19      	ldr	r2, [pc, #100]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008234:	e01e      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823a:	3308      	adds	r3, #8
 800823c:	2100      	movs	r1, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f001 fb04 	bl	800984c <RCCEx_PLL2_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800824a:	e013      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800824c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008250:	3328      	adds	r3, #40	@ 0x28
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f001 fbab 	bl	80099b0 <RCCEx_PLL3_Config>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008260:	e008      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008268:	e004      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800826a:	bf00      	nop
 800826c:	e002      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800826e:	bf00      	nop
 8008270:	e000      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10d      	bne.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800827e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008280:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008288:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800828c:	4a01      	ldr	r2, [pc, #4]	@ (8008294 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800828e:	430b      	orrs	r3, r1
 8008290:	6593      	str	r3, [r2, #88]	@ 0x58
 8008292:	e005      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800829c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80082ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082b0:	2300      	movs	r3, #0
 80082b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4313      	orrs	r3, r2
 80082be:	d03a      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c6:	2b30      	cmp	r3, #48	@ 0x30
 80082c8:	d01f      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80082ca:	2b30      	cmp	r3, #48	@ 0x30
 80082cc:	d819      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d00c      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d815      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d019      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80082da:	2b10      	cmp	r3, #16
 80082dc:	d111      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082de:	4baa      	ldr	r3, [pc, #680]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e2:	4aa9      	ldr	r2, [pc, #676]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80082ea:	e011      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f0:	3308      	adds	r3, #8
 80082f2:	2102      	movs	r1, #2
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 faa9 	bl	800984c <RCCEx_PLL2_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008300:	e006      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008308:	e002      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800830e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008318:	4b9b      	ldr	r3, [pc, #620]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800831a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800831c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008326:	4a98      	ldr	r2, [pc, #608]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008328:	430b      	orrs	r3, r1
 800832a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800832c:	e003      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008342:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008346:	2300      	movs	r3, #0
 8008348:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800834c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008350:	460b      	mov	r3, r1
 8008352:	4313      	orrs	r3, r2
 8008354:	d051      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800835a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800835c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008360:	d035      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008366:	d82e      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008368:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800836c:	d031      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800836e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008372:	d828      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008378:	d01a      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800837a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800837e:	d822      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008388:	d007      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800838a:	e01c      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4b7e      	ldr	r3, [pc, #504]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	4a7d      	ldr	r2, [pc, #500]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008398:	e01c      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800839a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839e:	3308      	adds	r3, #8
 80083a0:	2100      	movs	r1, #0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fa52 	bl	800984c <RCCEx_PLL2_Config>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083ae:	e011      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083b4:	3328      	adds	r3, #40	@ 0x28
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 faf9 	bl	80099b0 <RCCEx_PLL3_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083c4:	e006      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80083cc:	e002      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80083ce:	bf00      	nop
 80083d0:	e000      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80083d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083dc:	4b6a      	ldr	r3, [pc, #424]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ea:	4a67      	ldr	r2, [pc, #412]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80083f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008406:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800840a:	2300      	movs	r3, #0
 800840c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008410:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008414:	460b      	mov	r3, r1
 8008416:	4313      	orrs	r3, r2
 8008418:	d053      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800841e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008424:	d033      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800842a:	d82c      	bhi.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800842c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008430:	d02f      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008432:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008436:	d826      	bhi.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008438:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800843c:	d02b      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800843e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008442:	d820      	bhi.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008448:	d012      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800844a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800844e:	d81a      	bhi.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d022      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008458:	d115      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800845e:	3308      	adds	r3, #8
 8008460:	2101      	movs	r1, #1
 8008462:	4618      	mov	r0, r3
 8008464:	f001 f9f2 	bl	800984c <RCCEx_PLL2_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800846e:	e015      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008474:	3328      	adds	r3, #40	@ 0x28
 8008476:	2101      	movs	r1, #1
 8008478:	4618      	mov	r0, r3
 800847a:	f001 fa99 	bl	80099b0 <RCCEx_PLL3_Config>
 800847e:	4603      	mov	r3, r0
 8008480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008484:	e00a      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800848c:	e006      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800848e:	bf00      	nop
 8008490:	e004      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008492:	bf00      	nop
 8008494:	e002      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008496:	bf00      	nop
 8008498:	e000      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800849a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800849c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80084a4:	4b38      	ldr	r3, [pc, #224]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80084ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b2:	4a35      	ldr	r2, [pc, #212]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084b4:	430b      	orrs	r3, r1
 80084b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80084b8:	e003      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80084be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80084ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084d2:	2300      	movs	r3, #0
 80084d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084d8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084dc:	460b      	mov	r3, r1
 80084de:	4313      	orrs	r3, r2
 80084e0:	d058      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80084e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084ee:	d033      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80084f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084f4:	d82c      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084fa:	d02f      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80084fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008500:	d826      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008502:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008506:	d02b      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008508:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800850c:	d820      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800850e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008512:	d012      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008518:	d81a      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d022      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800851e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008522:	d115      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008528:	3308      	adds	r3, #8
 800852a:	2101      	movs	r1, #1
 800852c:	4618      	mov	r0, r3
 800852e:	f001 f98d 	bl	800984c <RCCEx_PLL2_Config>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008538:	e015      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800853a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853e:	3328      	adds	r3, #40	@ 0x28
 8008540:	2101      	movs	r1, #1
 8008542:	4618      	mov	r0, r3
 8008544:	f001 fa34 	bl	80099b0 <RCCEx_PLL3_Config>
 8008548:	4603      	mov	r3, r0
 800854a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800854e:	e00a      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008556:	e006      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008558:	bf00      	nop
 800855a:	e004      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800855c:	bf00      	nop
 800855e:	e002      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008560:	bf00      	nop
 8008562:	e000      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008566:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10e      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800856e:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008572:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800857a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800857e:	4a02      	ldr	r2, [pc, #8]	@ (8008588 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008580:	430b      	orrs	r3, r1
 8008582:	6593      	str	r3, [r2, #88]	@ 0x58
 8008584:	e006      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800858c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80085a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085a4:	2300      	movs	r3, #0
 80085a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4313      	orrs	r3, r2
 80085b2:	d037      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80085b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085be:	d00e      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80085c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c4:	d816      	bhi.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d018      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80085ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ce:	d111      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085d0:	4bc4      	ldr	r3, [pc, #784]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	4ac3      	ldr	r2, [pc, #780]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085dc:	e00f      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085e2:	3308      	adds	r3, #8
 80085e4:	2101      	movs	r1, #1
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 f930 	bl	800984c <RCCEx_PLL2_Config>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085f2:	e004      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80085fa:	e000      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008606:	4bb7      	ldr	r3, [pc, #732]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800860a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800860e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008614:	4ab3      	ldr	r2, [pc, #716]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008616:	430b      	orrs	r3, r1
 8008618:	6513      	str	r3, [r2, #80]	@ 0x50
 800861a:	e003      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008630:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008634:	2300      	movs	r3, #0
 8008636:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800863a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800863e:	460b      	mov	r3, r1
 8008640:	4313      	orrs	r3, r2
 8008642:	d039      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864a:	2b03      	cmp	r3, #3
 800864c:	d81c      	bhi.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	08008691 	.word	0x08008691
 8008658:	08008665 	.word	0x08008665
 800865c:	08008673 	.word	0x08008673
 8008660:	08008691 	.word	0x08008691
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008664:	4b9f      	ldr	r3, [pc, #636]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008668:	4a9e      	ldr	r2, [pc, #632]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800866a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800866e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008670:	e00f      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008676:	3308      	adds	r3, #8
 8008678:	2102      	movs	r1, #2
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f8e6 	bl	800984c <RCCEx_PLL2_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008686:	e004      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800868e:	e000      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800869a:	4b92      	ldr	r3, [pc, #584]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800869c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869e:	f023 0103 	bic.w	r1, r3, #3
 80086a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086a8:	4a8e      	ldr	r2, [pc, #568]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086aa:	430b      	orrs	r3, r1
 80086ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086ae:	e003      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80086c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086c8:	2300      	movs	r3, #0
 80086ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f000 8099 	beq.w	800880c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086da:	4b83      	ldr	r3, [pc, #524]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a82      	ldr	r2, [pc, #520]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086e6:	f7fb fb49 	bl	8003d7c <HAL_GetTick>
 80086ea:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ee:	e00b      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086f0:	f7fb fb44 	bl	8003d7c <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	2b64      	cmp	r3, #100	@ 0x64
 80086fe:	d903      	bls.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008706:	e005      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008708:	4b77      	ldr	r3, [pc, #476]	@ (80088e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0ed      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008718:	2b00      	cmp	r3, #0
 800871a:	d173      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800871c:	4b71      	ldr	r3, [pc, #452]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800871e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008728:	4053      	eors	r3, r2
 800872a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800872e:	2b00      	cmp	r3, #0
 8008730:	d015      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008732:	4b6c      	ldr	r3, [pc, #432]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800873a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800873e:	4b69      	ldr	r3, [pc, #420]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	4a68      	ldr	r2, [pc, #416]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008748:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800874a:	4b66      	ldr	r3, [pc, #408]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800874c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874e:	4a65      	ldr	r2, [pc, #404]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008750:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008754:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008756:	4a63      	ldr	r2, [pc, #396]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008758:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800875e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800876a:	d118      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fb fb06 	bl	8003d7c <HAL_GetTick>
 8008770:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008774:	e00d      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008776:	f7fb fb01 	bl	8003d7c <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008780:	1ad2      	subs	r2, r2, r3
 8008782:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008786:	429a      	cmp	r2, r3
 8008788:	d903      	bls.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008790:	e005      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008792:	4b54      	ldr	r3, [pc, #336]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0eb      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800879e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d129      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087b6:	d10e      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80087b8:	4b4a      	ldr	r3, [pc, #296]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80087c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087c8:	091a      	lsrs	r2, r3, #4
 80087ca:	4b48      	ldr	r3, [pc, #288]	@ (80088ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	4a45      	ldr	r2, [pc, #276]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087d0:	430b      	orrs	r3, r1
 80087d2:	6113      	str	r3, [r2, #16]
 80087d4:	e005      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80087d6:	4b43      	ldr	r3, [pc, #268]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	4a42      	ldr	r2, [pc, #264]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80087e0:	6113      	str	r3, [r2, #16]
 80087e2:	4b40      	ldr	r3, [pc, #256]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087f2:	4a3c      	ldr	r2, [pc, #240]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087f4:	430b      	orrs	r3, r1
 80087f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80087f8:	e008      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8008802:	e003      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008808:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f002 0301 	and.w	r3, r2, #1
 8008818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800881c:	2300      	movs	r3, #0
 800881e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008822:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008826:	460b      	mov	r3, r1
 8008828:	4313      	orrs	r3, r2
 800882a:	f000 808f 	beq.w	800894c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800882e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008834:	2b28      	cmp	r3, #40	@ 0x28
 8008836:	d871      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008838:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	08008925 	.word	0x08008925
 8008844:	0800891d 	.word	0x0800891d
 8008848:	0800891d 	.word	0x0800891d
 800884c:	0800891d 	.word	0x0800891d
 8008850:	0800891d 	.word	0x0800891d
 8008854:	0800891d 	.word	0x0800891d
 8008858:	0800891d 	.word	0x0800891d
 800885c:	0800891d 	.word	0x0800891d
 8008860:	080088f1 	.word	0x080088f1
 8008864:	0800891d 	.word	0x0800891d
 8008868:	0800891d 	.word	0x0800891d
 800886c:	0800891d 	.word	0x0800891d
 8008870:	0800891d 	.word	0x0800891d
 8008874:	0800891d 	.word	0x0800891d
 8008878:	0800891d 	.word	0x0800891d
 800887c:	0800891d 	.word	0x0800891d
 8008880:	08008907 	.word	0x08008907
 8008884:	0800891d 	.word	0x0800891d
 8008888:	0800891d 	.word	0x0800891d
 800888c:	0800891d 	.word	0x0800891d
 8008890:	0800891d 	.word	0x0800891d
 8008894:	0800891d 	.word	0x0800891d
 8008898:	0800891d 	.word	0x0800891d
 800889c:	0800891d 	.word	0x0800891d
 80088a0:	08008925 	.word	0x08008925
 80088a4:	0800891d 	.word	0x0800891d
 80088a8:	0800891d 	.word	0x0800891d
 80088ac:	0800891d 	.word	0x0800891d
 80088b0:	0800891d 	.word	0x0800891d
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	0800891d 	.word	0x0800891d
 80088bc:	0800891d 	.word	0x0800891d
 80088c0:	08008925 	.word	0x08008925
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	0800891d 	.word	0x0800891d
 80088cc:	0800891d 	.word	0x0800891d
 80088d0:	0800891d 	.word	0x0800891d
 80088d4:	0800891d 	.word	0x0800891d
 80088d8:	0800891d 	.word	0x0800891d
 80088dc:	0800891d 	.word	0x0800891d
 80088e0:	08008925 	.word	0x08008925
 80088e4:	58024400 	.word	0x58024400
 80088e8:	58024800 	.word	0x58024800
 80088ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f4:	3308      	adds	r3, #8
 80088f6:	2101      	movs	r1, #1
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 ffa7 	bl	800984c <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008904:	e00f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800890a:	3328      	adds	r3, #40	@ 0x28
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f001 f84e 	bl	80099b0 <RCCEx_PLL3_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008922:	e000      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800892e:	4bbf      	ldr	r3, [pc, #764]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008932:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800893c:	4abb      	ldr	r2, [pc, #748]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800893e:	430b      	orrs	r3, r1
 8008940:	6553      	str	r3, [r2, #84]	@ 0x54
 8008942:	e003      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800894c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f002 0302 	and.w	r3, r2, #2
 8008958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800895c:	2300      	movs	r3, #0
 800895e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008966:	460b      	mov	r3, r1
 8008968:	4313      	orrs	r3, r2
 800896a:	d041      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800896c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008972:	2b05      	cmp	r3, #5
 8008974:	d824      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008976:	a201      	add	r2, pc, #4	@ (adr r2, 800897c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089c9 	.word	0x080089c9
 8008980:	08008995 	.word	0x08008995
 8008984:	080089ab 	.word	0x080089ab
 8008988:	080089c9 	.word	0x080089c9
 800898c:	080089c9 	.word	0x080089c9
 8008990:	080089c9 	.word	0x080089c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	3308      	adds	r3, #8
 800899a:	2101      	movs	r1, #1
 800899c:	4618      	mov	r0, r3
 800899e:	f000 ff55 	bl	800984c <RCCEx_PLL2_Config>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089a8:	e00f      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	3328      	adds	r3, #40	@ 0x28
 80089b0:	2101      	movs	r1, #1
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fffc 	bl	80099b0 <RCCEx_PLL3_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089d2:	4b96      	ldr	r3, [pc, #600]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	f023 0107 	bic.w	r1, r3, #7
 80089da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e0:	4a92      	ldr	r2, [pc, #584]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089e2:	430b      	orrs	r3, r1
 80089e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80089e6:	e003      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f002 0304 	and.w	r3, r2, #4
 80089fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a00:	2300      	movs	r3, #0
 8008a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a06:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	d044      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a18:	2b05      	cmp	r3, #5
 8008a1a:	d825      	bhi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a24 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a22:	bf00      	nop
 8008a24:	08008a71 	.word	0x08008a71
 8008a28:	08008a3d 	.word	0x08008a3d
 8008a2c:	08008a53 	.word	0x08008a53
 8008a30:	08008a71 	.word	0x08008a71
 8008a34:	08008a71 	.word	0x08008a71
 8008a38:	08008a71 	.word	0x08008a71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a40:	3308      	adds	r3, #8
 8008a42:	2101      	movs	r1, #1
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 ff01 	bl	800984c <RCCEx_PLL2_Config>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a50:	e00f      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a56:	3328      	adds	r3, #40	@ 0x28
 8008a58:	2101      	movs	r1, #1
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 ffa8 	bl	80099b0 <RCCEx_PLL3_Config>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a66:	e004      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a6e:	e000      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10b      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7e:	f023 0107 	bic.w	r1, r3, #7
 8008a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a8a:	4a68      	ldr	r2, [pc, #416]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a90:	e003      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f002 0320 	and.w	r3, r2, #32
 8008aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008ab0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	d055      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ac6:	d033      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008acc:	d82c      	bhi.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad2:	d02f      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad8:	d826      	bhi.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ada:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ade:	d02b      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008ae0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ae4:	d820      	bhi.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aea:	d012      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008af0:	d81a      	bhi.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d022      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008afa:	d115      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b00:	3308      	adds	r3, #8
 8008b02:	2100      	movs	r1, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 fea1 	bl	800984c <RCCEx_PLL2_Config>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b10:	e015      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b16:	3328      	adds	r3, #40	@ 0x28
 8008b18:	2102      	movs	r1, #2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 ff48 	bl	80099b0 <RCCEx_PLL3_Config>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b26:	e00a      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b2e:	e006      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b30:	bf00      	nop
 8008b32:	e004      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b34:	bf00      	nop
 8008b36:	e002      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b38:	bf00      	nop
 8008b3a:	e000      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b46:	4b39      	ldr	r3, [pc, #228]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b56:	4a35      	ldr	r2, [pc, #212]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b5c:	e003      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b76:	2300      	movs	r3, #0
 8008b78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b7c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b80:	460b      	mov	r3, r1
 8008b82:	4313      	orrs	r3, r2
 8008b84:	d058      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b8e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b92:	d033      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008b94:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b98:	d82c      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b9e:	d02f      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ba4:	d826      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008baa:	d02b      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008bac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bb0:	d820      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bb6:	d012      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bbc:	d81a      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d022      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bc6:	d115      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bcc:	3308      	adds	r3, #8
 8008bce:	2100      	movs	r1, #0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 fe3b 	bl	800984c <RCCEx_PLL2_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bdc:	e015      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be2:	3328      	adds	r3, #40	@ 0x28
 8008be4:	2102      	movs	r1, #2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fee2 	bl	80099b0 <RCCEx_PLL3_Config>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bf2:	e00a      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008bfa:	e006      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bfc:	bf00      	nop
 8008bfe:	e004      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c00:	bf00      	nop
 8008c02:	e002      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c04:	bf00      	nop
 8008c06:	e000      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10e      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c12:	4b06      	ldr	r3, [pc, #24]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c22:	4a02      	ldr	r2, [pc, #8]	@ (8008c2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c28:	e006      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008c2a:	bf00      	nop
 8008c2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c52:	460b      	mov	r3, r1
 8008c54:	4313      	orrs	r3, r2
 8008c56:	d055      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c64:	d033      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008c66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c6a:	d82c      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c70:	d02f      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c76:	d826      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c7c:	d02b      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c82:	d820      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c88:	d012      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c8e:	d81a      	bhi.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d022      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c98:	d115      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fdd2 	bl	800984c <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cae:	e015      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb4:	3328      	adds	r3, #40	@ 0x28
 8008cb6:	2102      	movs	r1, #2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fe79 	bl	80099b0 <RCCEx_PLL3_Config>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cc4:	e00a      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ccc:	e006      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e004      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cd2:	bf00      	nop
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ce8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008cf4:	4a9c      	ldr	r2, [pc, #624]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cfa:	e003      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f002 0308 	and.w	r3, r2, #8
 8008d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d01e      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d36:	3328      	adds	r3, #40	@ 0x28
 8008d38:	2102      	movs	r1, #2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 fe38 	bl	80099b0 <RCCEx_PLL3_Config>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008d4c:	4b86      	ldr	r3, [pc, #536]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d5c:	4a82      	ldr	r2, [pc, #520]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f002 0310 	and.w	r3, r2, #16
 8008d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d72:	2300      	movs	r3, #0
 8008d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d78:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	d01e      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d8e:	d10c      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d94:	3328      	adds	r3, #40	@ 0x28
 8008d96:	2102      	movs	r1, #2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fe09 	bl	80099b0 <RCCEx_PLL3_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008daa:	4b6f      	ldr	r3, [pc, #444]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dba:	4a6b      	ldr	r2, [pc, #428]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dce:	2300      	movs	r3, #0
 8008dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008dd2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	d03e      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de8:	d022      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dee:	d81b      	bhi.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008df8:	d00b      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008dfa:	e015      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e00:	3308      	adds	r3, #8
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 fd21 	bl	800984c <RCCEx_PLL2_Config>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e10:	e00f      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e16:	3328      	adds	r3, #40	@ 0x28
 8008e18:	2102      	movs	r1, #2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fdc8 	bl	80099b0 <RCCEx_PLL3_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e26:	e004      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e2e:	e000      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10b      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008e4a:	4a47      	ldr	r2, [pc, #284]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e50:	e003      	b.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e66:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e68:	2300      	movs	r3, #0
 8008e6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e70:	460b      	mov	r3, r1
 8008e72:	4313      	orrs	r3, r2
 8008e74:	d03b      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e82:	d01f      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e88:	d818      	bhi.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008e8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e8e:	d003      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e94:	d007      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008e96:	e011      	b.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e98:	4b33      	ldr	r3, [pc, #204]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9c:	4a32      	ldr	r2, [pc, #200]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ea4:	e00f      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eaa:	3328      	adds	r3, #40	@ 0x28
 8008eac:	2101      	movs	r1, #1
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fd7e 	bl	80099b0 <RCCEx_PLL3_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008eba:	e004      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10b      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ece:	4b26      	ldr	r3, [pc, #152]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ede:	4a22      	ldr	r2, [pc, #136]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ee4:	e003      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008eea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008efc:	2300      	movs	r3, #0
 8008efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f00:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f04:	460b      	mov	r3, r1
 8008f06:	4313      	orrs	r3, r2
 8008f08:	d034      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f18:	d007      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008f1a:	e011      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f1c:	4b12      	ldr	r3, [pc, #72]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f20:	4a11      	ldr	r2, [pc, #68]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f28:	e00e      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2e:	3308      	adds	r3, #8
 8008f30:	2102      	movs	r1, #2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fc8a 	bl	800984c <RCCEx_PLL2_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f3e:	e003      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10d      	bne.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f50:	4b05      	ldr	r3, [pc, #20]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f5e:	4a02      	ldr	r2, [pc, #8]	@ (8008f68 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f60:	430b      	orrs	r3, r1
 8008f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f64:	e006      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008f66:	bf00      	nop
 8008f68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f82:	2300      	movs	r3, #0
 8008f84:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f86:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	d00c      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f94:	3328      	adds	r3, #40	@ 0x28
 8008f96:	2102      	movs	r1, #2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 fd09 	bl	80099b0 <RCCEx_PLL3_Config>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fb8:	2300      	movs	r3, #0
 8008fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fbc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	d036      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fd0:	d018      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fd6:	d811      	bhi.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fdc:	d014      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fe2:	d80b      	bhi.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d011      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fec:	d106      	bne.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fee:	4bb7      	ldr	r3, [pc, #732]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff2:	4ab6      	ldr	r2, [pc, #728]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ffa:	e008      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009002:	e004      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009004:	bf00      	nop
 8009006:	e002      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009008:	bf00      	nop
 800900a:	e000      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800900c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800900e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10a      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009016:	4bad      	ldr	r3, [pc, #692]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800901a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800901e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009024:	4aa9      	ldr	r2, [pc, #676]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009026:	430b      	orrs	r3, r1
 8009028:	6553      	str	r3, [r2, #84]	@ 0x54
 800902a:	e003      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009030:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009040:	653b      	str	r3, [r7, #80]	@ 0x50
 8009042:	2300      	movs	r3, #0
 8009044:	657b      	str	r3, [r7, #84]	@ 0x54
 8009046:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800904a:	460b      	mov	r3, r1
 800904c:	4313      	orrs	r3, r2
 800904e:	d009      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009050:	4b9e      	ldr	r3, [pc, #632]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009054:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905e:	4a9b      	ldr	r2, [pc, #620]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009060:	430b      	orrs	r3, r1
 8009062:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009072:	2300      	movs	r3, #0
 8009074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009076:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800907a:	460b      	mov	r3, r1
 800907c:	4313      	orrs	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009080:	4b92      	ldr	r3, [pc, #584]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009084:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800908e:	4a8f      	ldr	r2, [pc, #572]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009090:	430b      	orrs	r3, r1
 8009092:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80090a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80090a2:	2300      	movs	r3, #0
 80090a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	d00e      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090b0:	4b86      	ldr	r3, [pc, #536]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	4a85      	ldr	r2, [pc, #532]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090ba:	6113      	str	r3, [r2, #16]
 80090bc:	4b83      	ldr	r3, [pc, #524]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090be:	6919      	ldr	r1, [r3, #16]
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090c8:	4a80      	ldr	r2, [pc, #512]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090ca:	430b      	orrs	r3, r1
 80090cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090dc:	2300      	movs	r3, #0
 80090de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090e4:	460b      	mov	r3, r1
 80090e6:	4313      	orrs	r3, r2
 80090e8:	d009      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090ea:	4b78      	ldr	r3, [pc, #480]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80090f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f8:	4a74      	ldr	r2, [pc, #464]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090fa:	430b      	orrs	r3, r1
 80090fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800910a:	633b      	str	r3, [r7, #48]	@ 0x30
 800910c:	2300      	movs	r3, #0
 800910e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009110:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009114:	460b      	mov	r3, r1
 8009116:	4313      	orrs	r3, r2
 8009118:	d00a      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800911a:	4b6c      	ldr	r3, [pc, #432]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800912a:	4a68      	ldr	r2, [pc, #416]	@ (80092cc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800912c:	430b      	orrs	r3, r1
 800912e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	2100      	movs	r1, #0
 800913a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009142:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009146:	460b      	mov	r3, r1
 8009148:	4313      	orrs	r3, r2
 800914a:	d011      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800914c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009150:	3308      	adds	r3, #8
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fb79 	bl	800984c <RCCEx_PLL2_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009164:	2b00      	cmp	r3, #0
 8009166:	d003      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800916c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	2100      	movs	r1, #0
 800917a:	6239      	str	r1, [r7, #32]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	627b      	str	r3, [r7, #36]	@ 0x24
 8009182:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	d011      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800918c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009190:	3308      	adds	r3, #8
 8009192:	2101      	movs	r1, #1
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fb59 	bl	800984c <RCCEx_PLL2_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80091a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80091b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	2100      	movs	r1, #0
 80091ba:	61b9      	str	r1, [r7, #24]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091c6:	460b      	mov	r3, r1
 80091c8:	4313      	orrs	r3, r2
 80091ca:	d011      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d0:	3308      	adds	r3, #8
 80091d2:	2102      	movs	r1, #2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fb39 	bl	800984c <RCCEx_PLL2_Config>
 80091da:	4603      	mov	r3, r0
 80091dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80091e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	2100      	movs	r1, #0
 80091fa:	6139      	str	r1, [r7, #16]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009206:	460b      	mov	r3, r1
 8009208:	4313      	orrs	r3, r2
 800920a:	d011      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009210:	3328      	adds	r3, #40	@ 0x28
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fbcb 	bl	80099b0 <RCCEx_PLL3_Config>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009220:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800922c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	2100      	movs	r1, #0
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	f003 0310 	and.w	r3, r3, #16
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009246:	460b      	mov	r3, r1
 8009248:	4313      	orrs	r3, r2
 800924a:	d011      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009250:	3328      	adds	r3, #40	@ 0x28
 8009252:	2101      	movs	r1, #1
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fbab 	bl	80099b0 <RCCEx_PLL3_Config>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009260:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800926c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	2100      	movs	r1, #0
 800927a:	6039      	str	r1, [r7, #0]
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	607b      	str	r3, [r7, #4]
 8009282:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009286:	460b      	mov	r3, r1
 8009288:	4313      	orrs	r3, r2
 800928a:	d011      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009290:	3328      	adds	r3, #40	@ 0x28
 8009292:	2102      	movs	r1, #2
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fb8b 	bl	80099b0 <RCCEx_PLL3_Config>
 800929a:	4603      	mov	r3, r0
 800929c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80092a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80092b0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	e000      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
}
 80092be:	4618      	mov	r0, r3
 80092c0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80092c4:	46bd      	mov	sp, r7
 80092c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400

080092d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092d4:	f7fe fe00 	bl	8007ed8 <HAL_RCC_GetHCLKFreq>
 80092d8:	4602      	mov	r2, r0
 80092da:	4b06      	ldr	r3, [pc, #24]	@ (80092f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	091b      	lsrs	r3, r3, #4
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	4904      	ldr	r1, [pc, #16]	@ (80092f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092e6:	5ccb      	ldrb	r3, [r1, r3]
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	58024400 	.word	0x58024400
 80092f8:	0800f0c0 	.word	0x0800f0c0

080092fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b089      	sub	sp, #36	@ 0x24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009304:	4ba1      	ldr	r3, [pc, #644]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800930e:	4b9f      	ldr	r3, [pc, #636]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	0b1b      	lsrs	r3, r3, #12
 8009314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009318:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800931a:	4b9c      	ldr	r3, [pc, #624]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	091b      	lsrs	r3, r3, #4
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009326:	4b99      	ldr	r3, [pc, #612]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932a:	08db      	lsrs	r3, r3, #3
 800932c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	fb02 f303 	mul.w	r3, r2, r3
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 8111 	beq.w	800956c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	2b02      	cmp	r3, #2
 800934e:	f000 8083 	beq.w	8009458 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	2b02      	cmp	r3, #2
 8009356:	f200 80a1 	bhi.w	800949c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d056      	beq.n	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009366:	e099      	b.n	800949c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009368:	4b88      	ldr	r3, [pc, #544]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0320 	and.w	r3, r3, #32
 8009370:	2b00      	cmp	r3, #0
 8009372:	d02d      	beq.n	80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009374:	4b85      	ldr	r3, [pc, #532]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	08db      	lsrs	r3, r3, #3
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	4a84      	ldr	r2, [pc, #528]	@ (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
 8009384:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	ee07 3a90 	vmov	s15, r3
 800938c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939e:	4b7b      	ldr	r3, [pc, #492]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093ce:	e087      	b.n	80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80093de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e2:	4b6a      	ldr	r3, [pc, #424]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009412:	e065      	b.n	80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800959c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009426:	4b59      	ldr	r3, [pc, #356]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009436:	ed97 6a03 	vldr	s12, [r7, #12]
 800943a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800943e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800944a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009456:	e043      	b.n	80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80095a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946a:	4b48      	ldr	r3, [pc, #288]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947a:	ed97 6a03 	vldr	s12, [r7, #12]
 800947e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800948e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800949a:	e021      	b.n	80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800959c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ae:	4b37      	ldr	r3, [pc, #220]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094be:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80094e0:	4b2a      	ldr	r3, [pc, #168]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	0a5b      	lsrs	r3, r3, #9
 80094e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ea:	ee07 3a90 	vmov	s15, r3
 80094ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80094fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009506:	ee17 2a90 	vmov	r2, s15
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800950e:	4b1f      	ldr	r3, [pc, #124]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009512:	0c1b      	lsrs	r3, r3, #16
 8009514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009518:	ee07 3a90 	vmov	s15, r3
 800951c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009528:	edd7 6a07 	vldr	s13, [r7, #28]
 800952c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009534:	ee17 2a90 	vmov	r2, s15
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800953c:	4b13      	ldr	r3, [pc, #76]	@ (800958c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800953e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009540:	0e1b      	lsrs	r3, r3, #24
 8009542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009556:	edd7 6a07 	vldr	s13, [r7, #28]
 800955a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009562:	ee17 2a90 	vmov	r2, s15
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800956a:	e008      	b.n	800957e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	609a      	str	r2, [r3, #8]
}
 800957e:	bf00      	nop
 8009580:	3724      	adds	r7, #36	@ 0x24
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	58024400 	.word	0x58024400
 8009590:	03d09000 	.word	0x03d09000
 8009594:	46000000 	.word	0x46000000
 8009598:	4c742400 	.word	0x4c742400
 800959c:	4a742400 	.word	0x4a742400
 80095a0:	4afe502a 	.word	0x4afe502a

080095a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b089      	sub	sp, #36	@ 0x24
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095ac:	4ba1      	ldr	r3, [pc, #644]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80095b6:	4b9f      	ldr	r3, [pc, #636]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ba:	0d1b      	lsrs	r3, r3, #20
 80095bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095c2:	4b9c      	ldr	r3, [pc, #624]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	0a1b      	lsrs	r3, r3, #8
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80095ce:	4b99      	ldr	r3, [pc, #612]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d2:	08db      	lsrs	r3, r3, #3
 80095d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	fb02 f303 	mul.w	r3, r2, r3
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8111 	beq.w	8009814 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	f000 8083 	beq.w	8009700 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	f200 80a1 	bhi.w	8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d056      	beq.n	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800960e:	e099      	b.n	8009744 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009610:	4b88      	ldr	r3, [pc, #544]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d02d      	beq.n	8009678 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800961c:	4b85      	ldr	r3, [pc, #532]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	08db      	lsrs	r3, r3, #3
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	4a84      	ldr	r2, [pc, #528]	@ (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009628:	fa22 f303 	lsr.w	r3, r2, r3
 800962c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	ee07 3a90 	vmov	s15, r3
 8009634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009646:	4b7b      	ldr	r3, [pc, #492]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009656:	ed97 6a03 	vldr	s12, [r7, #12]
 800965a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800983c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800965e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800966a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009676:	e087      	b.n	8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009682:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968a:	4b6a      	ldr	r3, [pc, #424]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800968c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969a:	ed97 6a03 	vldr	s12, [r7, #12]
 800969e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800983c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ba:	e065      	b.n	8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ce:	4b59      	ldr	r3, [pc, #356]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096de:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800983c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096fe:	e043      	b.n	8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009848 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800970e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009712:	4b48      	ldr	r3, [pc, #288]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009722:	ed97 6a03 	vldr	s12, [r7, #12]
 8009726:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800983c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800972a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800972e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800973e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009742:	e021      	b.n	8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009756:	4b37      	ldr	r3, [pc, #220]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009766:	ed97 6a03 	vldr	s12, [r7, #12]
 800976a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800983c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800976e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800977a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009786:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009788:	4b2a      	ldr	r3, [pc, #168]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800978a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978c:	0a5b      	lsrs	r3, r3, #9
 800978e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800979e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ae:	ee17 2a90 	vmov	r2, s15
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80097b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097c0:	ee07 3a90 	vmov	s15, r3
 80097c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097dc:	ee17 2a90 	vmov	r2, s15
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80097e4:	4b13      	ldr	r3, [pc, #76]	@ (8009834 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e8:	0e1b      	lsrs	r3, r3, #24
 80097ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80097fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980a:	ee17 2a90 	vmov	r2, s15
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009812:	e008      	b.n	8009826 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	609a      	str	r2, [r3, #8]
}
 8009826:	bf00      	nop
 8009828:	3724      	adds	r7, #36	@ 0x24
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
 800983c:	46000000 	.word	0x46000000
 8009840:	4c742400 	.word	0x4c742400
 8009844:	4a742400 	.word	0x4a742400
 8009848:	4afe502a 	.word	0x4afe502a

0800984c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800985a:	4b53      	ldr	r3, [pc, #332]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	f003 0303 	and.w	r3, r3, #3
 8009862:	2b03      	cmp	r3, #3
 8009864:	d101      	bne.n	800986a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e099      	b.n	800999e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800986a:	4b4f      	ldr	r3, [pc, #316]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a4e      	ldr	r2, [pc, #312]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009870:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009876:	f7fa fa81 	bl	8003d7c <HAL_GetTick>
 800987a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800987c:	e008      	b.n	8009890 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800987e:	f7fa fa7d 	bl	8003d7c <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e086      	b.n	800999e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009890:	4b45      	ldr	r3, [pc, #276]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1f0      	bne.n	800987e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800989c:	4b42      	ldr	r3, [pc, #264]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800989e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	031b      	lsls	r3, r3, #12
 80098aa:	493f      	ldr	r1, [pc, #252]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	3b01      	subs	r3, #1
 80098c0:	025b      	lsls	r3, r3, #9
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	431a      	orrs	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	041b      	lsls	r3, r3, #16
 80098ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098d2:	431a      	orrs	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	3b01      	subs	r3, #1
 80098da:	061b      	lsls	r3, r3, #24
 80098dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098e0:	4931      	ldr	r1, [pc, #196]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098e6:	4b30      	ldr	r3, [pc, #192]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	492d      	ldr	r1, [pc, #180]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098f8:	4b2b      	ldr	r3, [pc, #172]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 80098fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fc:	f023 0220 	bic.w	r2, r3, #32
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	4928      	ldr	r1, [pc, #160]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800990a:	4b27      	ldr	r3, [pc, #156]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a26      	ldr	r2, [pc, #152]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009910:	f023 0310 	bic.w	r3, r3, #16
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009916:	4b24      	ldr	r3, [pc, #144]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009918:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800991a:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <RCCEx_PLL2_Config+0x160>)
 800991c:	4013      	ands	r3, r2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	69d2      	ldr	r2, [r2, #28]
 8009922:	00d2      	lsls	r2, r2, #3
 8009924:	4920      	ldr	r1, [pc, #128]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009926:	4313      	orrs	r3, r2
 8009928:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800992a:	4b1f      	ldr	r3, [pc, #124]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800992c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992e:	4a1e      	ldr	r2, [pc, #120]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009930:	f043 0310 	orr.w	r3, r3, #16
 8009934:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800993c:	4b1a      	ldr	r3, [pc, #104]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800993e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009940:	4a19      	ldr	r2, [pc, #100]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009942:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009946:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009948:	e00f      	b.n	800996a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d106      	bne.n	800995e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009950:	4b15      	ldr	r3, [pc, #84]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	4a14      	ldr	r2, [pc, #80]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800995a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800995c:	e005      	b.n	800996a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800995e:	4b12      	ldr	r3, [pc, #72]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009962:	4a11      	ldr	r2, [pc, #68]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009964:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009968:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800996a:	4b0f      	ldr	r3, [pc, #60]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a0e      	ldr	r2, [pc, #56]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009970:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009976:	f7fa fa01 	bl	8003d7c <HAL_GetTick>
 800997a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800997c:	e008      	b.n	8009990 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800997e:	f7fa f9fd 	bl	8003d7c <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d901      	bls.n	8009990 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e006      	b.n	800999e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009990:	4b05      	ldr	r3, [pc, #20]	@ (80099a8 <RCCEx_PLL2_Config+0x15c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0f0      	beq.n	800997e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	58024400 	.word	0x58024400
 80099ac:	ffff0007 	.word	0xffff0007

080099b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099be:	4b53      	ldr	r3, [pc, #332]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 80099c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c2:	f003 0303 	and.w	r3, r3, #3
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d101      	bne.n	80099ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e099      	b.n	8009b02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099ce:	4b4f      	ldr	r3, [pc, #316]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a4e      	ldr	r2, [pc, #312]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 80099d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099da:	f7fa f9cf 	bl	8003d7c <HAL_GetTick>
 80099de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099e0:	e008      	b.n	80099f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099e2:	f7fa f9cb 	bl	8003d7c <HAL_GetTick>
 80099e6:	4602      	mov	r2, r0
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d901      	bls.n	80099f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e086      	b.n	8009b02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099f4:	4b45      	ldr	r3, [pc, #276]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1f0      	bne.n	80099e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a00:	4b42      	ldr	r3, [pc, #264]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a04:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	051b      	lsls	r3, r3, #20
 8009a0e:	493f      	ldr	r1, [pc, #252]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	025b      	lsls	r3, r3, #9
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	061b      	lsls	r3, r3, #24
 8009a40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009a44:	4931      	ldr	r1, [pc, #196]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a4a:	4b30      	ldr	r3, [pc, #192]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	492d      	ldr	r1, [pc, #180]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	4928      	ldr	r1, [pc, #160]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a6e:	4b27      	ldr	r3, [pc, #156]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a72:	4a26      	ldr	r2, [pc, #152]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a7a:	4b24      	ldr	r3, [pc, #144]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a7e:	4b24      	ldr	r3, [pc, #144]	@ (8009b10 <RCCEx_PLL3_Config+0x160>)
 8009a80:	4013      	ands	r3, r2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	69d2      	ldr	r2, [r2, #28]
 8009a86:	00d2      	lsls	r2, r2, #3
 8009a88:	4920      	ldr	r1, [pc, #128]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a92:	4a1e      	ldr	r2, [pc, #120]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d106      	bne.n	8009aae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa4:	4a19      	ldr	r2, [pc, #100]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009aa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009aac:	e00f      	b.n	8009ace <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d106      	bne.n	8009ac2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ab4:	4b15      	ldr	r3, [pc, #84]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	4a14      	ldr	r2, [pc, #80]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009aba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009abe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ac0:	e005      	b.n	8009ace <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ac2:	4b12      	ldr	r3, [pc, #72]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	4a11      	ldr	r2, [pc, #68]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009ac8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ace:	4b0f      	ldr	r3, [pc, #60]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ada:	f7fa f94f 	bl	8003d7c <HAL_GetTick>
 8009ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ae0:	e008      	b.n	8009af4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ae2:	f7fa f94b 	bl	8003d7c <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d901      	bls.n	8009af4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e006      	b.n	8009b02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009af4:	4b05      	ldr	r3, [pc, #20]	@ (8009b0c <RCCEx_PLL3_Config+0x15c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d0f0      	beq.n	8009ae2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	ffff0007 	.word	0xffff0007

08009b14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e10f      	b.n	8009d46 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a87      	ldr	r2, [pc, #540]	@ (8009d50 <HAL_SPI_Init+0x23c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d00f      	beq.n	8009b56 <HAL_SPI_Init+0x42>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a86      	ldr	r2, [pc, #536]	@ (8009d54 <HAL_SPI_Init+0x240>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00a      	beq.n	8009b56 <HAL_SPI_Init+0x42>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a84      	ldr	r2, [pc, #528]	@ (8009d58 <HAL_SPI_Init+0x244>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d005      	beq.n	8009b56 <HAL_SPI_Init+0x42>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	2b0f      	cmp	r3, #15
 8009b50:	d901      	bls.n	8009b56 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e0f7      	b.n	8009d46 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 feca 	bl	800a8f0 <SPI_GetPacketSize>
 8009b5c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a7b      	ldr	r2, [pc, #492]	@ (8009d50 <HAL_SPI_Init+0x23c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00c      	beq.n	8009b82 <HAL_SPI_Init+0x6e>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a79      	ldr	r2, [pc, #484]	@ (8009d54 <HAL_SPI_Init+0x240>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d007      	beq.n	8009b82 <HAL_SPI_Init+0x6e>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a78      	ldr	r2, [pc, #480]	@ (8009d58 <HAL_SPI_Init+0x244>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d002      	beq.n	8009b82 <HAL_SPI_Init+0x6e>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d811      	bhi.n	8009ba6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b86:	4a72      	ldr	r2, [pc, #456]	@ (8009d50 <HAL_SPI_Init+0x23c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d009      	beq.n	8009ba0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a70      	ldr	r2, [pc, #448]	@ (8009d54 <HAL_SPI_Init+0x240>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d004      	beq.n	8009ba0 <HAL_SPI_Init+0x8c>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8009d58 <HAL_SPI_Init+0x244>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d104      	bne.n	8009baa <HAL_SPI_Init+0x96>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b10      	cmp	r3, #16
 8009ba4:	d901      	bls.n	8009baa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e0cd      	b.n	8009d46 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7f9 fa86 	bl	80030d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0201 	bic.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009be6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bf0:	d119      	bne.n	8009c26 <HAL_SPI_Init+0x112>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bfa:	d103      	bne.n	8009c04 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d008      	beq.n	8009c16 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10c      	bne.n	8009c26 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c14:	d107      	bne.n	8009c26 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00f      	beq.n	8009c52 <HAL_SPI_Init+0x13e>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	2b06      	cmp	r3, #6
 8009c38:	d90b      	bls.n	8009c52 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	e007      	b.n	8009c62 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69da      	ldr	r2, [r3, #28]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c6a:	431a      	orrs	r2, r3
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c74:	ea42 0103 	orr.w	r1, r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c92:	431a      	orrs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cc2:	ea42 0103 	orr.w	r1, r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d113      	bne.n	8009d02 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009cec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d00:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f022 0201 	bic.w	r2, r2, #1
 8009d10:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40013000 	.word	0x40013000
 8009d54:	40003800 	.word	0x40003800
 8009d58:	40003c00 	.word	0x40003c00

08009d5c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d001      	beq.n	8009d7a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009d76:	2302      	movs	r3, #2
 8009d78:	e126      	b.n	8009fc8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <HAL_SPI_Transmit_DMA+0x2a>
 8009d80:	88fb      	ldrh	r3, [r7, #6]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e11e      	b.n	8009fc8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_SPI_Transmit_DMA+0x3c>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e117      	b.n	8009fc8 <HAL_SPI_Transmit_DMA+0x26c>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2203      	movs	r2, #3
 8009da4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	88fa      	ldrh	r2, [r7, #6]
 8009dba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	88fa      	ldrh	r2, [r7, #6]
 8009dc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009df0:	d108      	bne.n	8009e04 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	e009      	b.n	8009e18 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009e16:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	2b0f      	cmp	r3, #15
 8009e1e:	d905      	bls.n	8009e2c <HAL_SPI_Transmit_DMA+0xd0>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e2a:	d10f      	bne.n	8009e4c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009e30:	2b07      	cmp	r3, #7
 8009e32:	d911      	bls.n	8009e58 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e3e:	d00b      	beq.n	8009e58 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e44:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e4a:	d005      	beq.n	8009e58 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e0b7      	b.n	8009fc8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	2b07      	cmp	r3, #7
 8009e5e:	d820      	bhi.n	8009ea2 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e6a:	d109      	bne.n	8009e80 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3301      	adds	r3, #1
 8009e76:	105b      	asrs	r3, r3, #1
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e8a:	d11e      	bne.n	8009eca <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3303      	adds	r3, #3
 8009e96:	109b      	asrs	r3, r3, #2
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ea0:	e013      	b.n	8009eca <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	2b0f      	cmp	r3, #15
 8009ea8:	d80f      	bhi.n	8009eca <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009eb4:	d109      	bne.n	8009eca <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	105b      	asrs	r3, r3, #1
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ece:	4a40      	ldr	r2, [pc, #256]	@ (8009fd0 <HAL_SPI_Transmit_DMA+0x274>)
 8009ed0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8009fd4 <HAL_SPI_Transmit_DMA+0x278>)
 8009ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ede:	4a3e      	ldr	r2, [pc, #248]	@ (8009fd8 <HAL_SPI_Transmit_DMA+0x27c>)
 8009ee0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009ef8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f02:	4619      	mov	r1, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3320      	adds	r3, #32
 8009f0a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009f14:	f7fa fbca 	bl	80046ac <HAL_DMA_Start_IT>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d011      	beq.n	8009f42 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f24:	f043 0210 	orr.w	r2, r3, #16
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e042      	b.n	8009fc8 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4c:	d108      	bne.n	8009f60 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6859      	ldr	r1, [r3, #4]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	4b20      	ldr	r3, [pc, #128]	@ (8009fdc <HAL_SPI_Transmit_DMA+0x280>)
 8009f5a:	400b      	ands	r3, r1
 8009f5c:	6053      	str	r3, [r2, #4]
 8009f5e:	e009      	b.n	8009f74 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4b1d      	ldr	r3, [pc, #116]	@ (8009fdc <HAL_SPI_Transmit_DMA+0x280>)
 8009f68:	4013      	ands	r3, r2
 8009f6a:	88f9      	ldrh	r1, [r7, #6]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	6812      	ldr	r2, [r2, #0]
 8009f70:	430b      	orrs	r3, r1
 8009f72:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f82:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009f92:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fac:	d107      	bne.n	8009fbe <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fbc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	0800a6fd 	.word	0x0800a6fd
 8009fd4:	0800a671 	.word	0x0800a671
 8009fd8:	0800a735 	.word	0x0800a735
 8009fdc:	ffff0000 	.word	0xffff0000

08009fe0 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	4613      	mov	r3, r2
 8009fec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d005      	beq.n	800a006 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 800a002:	2302      	movs	r3, #2
 800a004:	e127      	b.n	800a256 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <HAL_SPI_Receive_DMA+0x32>
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d105      	bne.n	800a01e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e11b      	b.n	800a256 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a024:	2b01      	cmp	r3, #1
 800a026:	d101      	bne.n	800a02c <HAL_SPI_Receive_DMA+0x4c>
 800a028:	2302      	movs	r3, #2
 800a02a:	e114      	b.n	800a256 <HAL_SPI_Receive_DMA+0x276>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2204      	movs	r2, #4
 800a038:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	88fa      	ldrh	r2, [r7, #6]
 800a04e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	88fa      	ldrh	r2, [r7, #6]
 800a056:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a07e:	d108      	bne.n	800a092 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	e009      	b.n	800a0a6 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a0a4:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b0f      	cmp	r3, #15
 800a0ac:	d905      	bls.n	800a0ba <HAL_SPI_Receive_DMA+0xda>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0b8:	d10f      	bne.n	800a0da <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a0be:	2b07      	cmp	r3, #7
 800a0c0:	d911      	bls.n	800a0e6 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0cc:	d00b      	beq.n	800a0e6 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0d2:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a0d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0d8:	d005      	beq.n	800a0e6 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e0b7      	b.n	800a256 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689a      	ldr	r2, [r3, #8]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0f4:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	2b07      	cmp	r3, #7
 800a0fc:	d820      	bhi.n	800a140 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a108:	d109      	bne.n	800a11e <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a110:	b29b      	uxth	r3, r3
 800a112:	3301      	adds	r3, #1
 800a114:	105b      	asrs	r3, r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a128:	d11e      	bne.n	800a168 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a130:	b29b      	uxth	r3, r3
 800a132:	3303      	adds	r3, #3
 800a134:	109b      	asrs	r3, r3, #2
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a13e:	e013      	b.n	800a168 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	2b0f      	cmp	r3, #15
 800a146:	d80f      	bhi.n	800a168 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a152:	d109      	bne.n	800a168 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3301      	adds	r3, #1
 800a15e:	105b      	asrs	r3, r3, #1
 800a160:	b29a      	uxth	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a16c:	4a3c      	ldr	r2, [pc, #240]	@ (800a260 <HAL_SPI_Receive_DMA+0x280>)
 800a16e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a174:	4a3b      	ldr	r2, [pc, #236]	@ (800a264 <HAL_SPI_Receive_DMA+0x284>)
 800a176:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a17c:	4a3a      	ldr	r2, [pc, #232]	@ (800a268 <HAL_SPI_Receive_DMA+0x288>)
 800a17e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a184:	2200      	movs	r2, #0
 800a186:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3330      	adds	r3, #48	@ 0x30
 800a192:	4619      	mov	r1, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a198:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a1a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a1a2:	f7fa fa83 	bl	80046ac <HAL_DMA_Start_IT>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d011      	beq.n	800a1d0 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1b2:	f043 0210 	orr.w	r2, r3, #16
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e042      	b.n	800a256 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1da:	d108      	bne.n	800a1ee <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6859      	ldr	r1, [r3, #4]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	4b21      	ldr	r3, [pc, #132]	@ (800a26c <HAL_SPI_Receive_DMA+0x28c>)
 800a1e8:	400b      	ands	r3, r1
 800a1ea:	6053      	str	r3, [r2, #4]
 800a1ec:	e009      	b.n	800a202 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	4b1d      	ldr	r3, [pc, #116]	@ (800a26c <HAL_SPI_Receive_DMA+0x28c>)
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	88f9      	ldrh	r1, [r7, #6]
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	430b      	orrs	r3, r1
 800a200:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a210:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800a220:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0201 	orr.w	r2, r2, #1
 800a230:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a23a:	d107      	bne.n	800a24c <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a24a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	0800a719 	.word	0x0800a719
 800a264:	0800a6b7 	.word	0x0800a6b7
 800a268:	0800a735 	.word	0x0800a735
 800a26c:	ffff0000 	.word	0xffff0000

0800a270 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b08a      	sub	sp, #40	@ 0x28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a288:	6a3a      	ldr	r2, [r7, #32]
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	4013      	ands	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a298:	2300      	movs	r3, #0
 800a29a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2a2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3330      	adds	r3, #48	@ 0x30
 800a2aa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d010      	beq.n	800a2d8 <HAL_SPI_IRQHandler+0x68>
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	f003 0308 	and.w	r3, r3, #8
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2ce:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f9c3 	bl	800a65c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a2d6:	e192      	b.n	800a5fe <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d113      	bne.n	800a30a <HAL_SPI_IRQHandler+0x9a>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	f003 0320 	and.w	r3, r3, #32
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d10e      	bne.n	800a30a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	4798      	blx	r3
    handled = 1UL;
 800a306:	2301      	movs	r3, #1
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10f      	bne.n	800a334 <HAL_SPI_IRQHandler+0xc4>
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a324:	2b00      	cmp	r3, #0
 800a326:	d105      	bne.n	800a334 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	4798      	blx	r3
    handled = 1UL;
 800a330:	2301      	movs	r3, #1
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10f      	bne.n	800a35e <HAL_SPI_IRQHandler+0xee>
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00a      	beq.n	800a35e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	4798      	blx	r3
    handled = 1UL;
 800a35a:	2301      	movs	r3, #1
 800a35c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	2b00      	cmp	r3, #0
 800a362:	f040 8147 	bne.w	800a5f4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	f003 0308 	and.w	r3, r3, #8
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 808b 	beq.w	800a488 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699a      	ldr	r2, [r3, #24]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f042 0208 	orr.w	r2, r2, #8
 800a380:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f042 0210 	orr.w	r2, r2, #16
 800a390:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3a0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	691a      	ldr	r2, [r3, #16]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0208 	bic.w	r2, r2, #8
 800a3b0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d13d      	bne.n	800a43c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a3c0:	e036      	b.n	800a430 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	2b0f      	cmp	r3, #15
 800a3c8:	d90b      	bls.n	800a3e2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a3d4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3da:	1d1a      	adds	r2, r3, #4
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	665a      	str	r2, [r3, #100]	@ 0x64
 800a3e0:	e01d      	b.n	800a41e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	2b07      	cmp	r3, #7
 800a3e8:	d90b      	bls.n	800a402 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	8812      	ldrh	r2, [r2, #0]
 800a3f2:	b292      	uxth	r2, r2
 800a3f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3fa:	1c9a      	adds	r2, r3, #2
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	665a      	str	r2, [r3, #100]	@ 0x64
 800a400:	e00d      	b.n	800a41e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a40e:	7812      	ldrb	r2, [r2, #0]
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a424:	b29b      	uxth	r3, r3
 800a426:	3b01      	subs	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1c2      	bne.n	800a3c2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f9b7 	bl	800a7b0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7f7 fc1b 	bl	8001c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a45a:	e0d0      	b.n	800a5fe <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a45c:	7cfb      	ldrb	r3, [r7, #19]
 800a45e:	2b05      	cmp	r3, #5
 800a460:	d103      	bne.n	800a46a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f8dc 	bl	800a620 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a468:	e0c6      	b.n	800a5f8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a46a:	7cfb      	ldrb	r3, [r7, #19]
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d103      	bne.n	800a478 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7f7 fbfd 	bl	8001c70 <HAL_SPI_RxCpltCallback>
    return;
 800a476:	e0bf      	b.n	800a5f8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a478:	7cfb      	ldrb	r3, [r7, #19]
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	f040 80bc 	bne.w	800a5f8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f8c3 	bl	800a60c <HAL_SPI_TxCpltCallback>
    return;
 800a486:	e0b7      	b.n	800a5f8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80b5 	beq.w	800a5fe <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00f      	beq.n	800a4be <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4a4:	f043 0204 	orr.w	r2, r3, #4
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	699a      	ldr	r2, [r3, #24]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a4bc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00f      	beq.n	800a4e8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ce:	f043 0201 	orr.w	r2, r3, #1
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	699a      	ldr	r2, [r3, #24]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4e6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00f      	beq.n	800a512 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4f8:	f043 0208 	orr.w	r2, r3, #8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	699a      	ldr	r2, [r3, #24]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a510:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00f      	beq.n	800a53c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a522:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0220 	orr.w	r2, r2, #32
 800a53a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a542:	2b00      	cmp	r3, #0
 800a544:	d05a      	beq.n	800a5fc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6919      	ldr	r1, [r3, #16]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	4b28      	ldr	r3, [pc, #160]	@ (800a604 <HAL_SPI_IRQHandler+0x394>)
 800a562:	400b      	ands	r3, r1
 800a564:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a56c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a570:	d138      	bne.n	800a5e4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a580:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d013      	beq.n	800a5b2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a58e:	4a1e      	ldr	r2, [pc, #120]	@ (800a608 <HAL_SPI_IRQHandler+0x398>)
 800a590:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a596:	4618      	mov	r0, r3
 800a598:	f7fa fe10 	bl	80051bc <HAL_DMA_Abort_IT>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d007      	beq.n	800a5b2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d020      	beq.n	800a5fc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5be:	4a12      	ldr	r2, [pc, #72]	@ (800a608 <HAL_SPI_IRQHandler+0x398>)
 800a5c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fa fdf8 	bl	80051bc <HAL_DMA_Abort_IT>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d014      	beq.n	800a5fc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a5e2:	e00b      	b.n	800a5fc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7f7 fb4f 	bl	8001c90 <HAL_SPI_ErrorCallback>
    return;
 800a5f2:	e003      	b.n	800a5fc <HAL_SPI_IRQHandler+0x38c>
    return;
 800a5f4:	bf00      	nop
 800a5f6:	e002      	b.n	800a5fe <HAL_SPI_IRQHandler+0x38e>
    return;
 800a5f8:	bf00      	nop
 800a5fa:	e000      	b.n	800a5fe <HAL_SPI_IRQHandler+0x38e>
    return;
 800a5fc:	bf00      	nop
  }
}
 800a5fe:	3728      	adds	r7, #40	@ 0x28
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	fffffc94 	.word	0xfffffc94
 800a608:	0800a77b 	.word	0x0800a77b

0800a60c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a63c:	bf00      	nop
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b07      	cmp	r3, #7
 800a688:	d011      	beq.n	800a6ae <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a68e:	69db      	ldr	r3, [r3, #28]
 800a690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a694:	d103      	bne.n	800a69e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7ff ffb8 	bl	800a60c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a69c:	e007      	b.n	800a6ae <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	691a      	ldr	r2, [r3, #16]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0208 	orr.w	r2, r2, #8
 800a6ac:	611a      	str	r2, [r3, #16]
}
 800a6ae:	bf00      	nop
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c2:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b07      	cmp	r3, #7
 800a6ce:	d011      	beq.n	800a6f4 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6da:	d103      	bne.n	800a6e4 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f7f7 fac7 	bl	8001c70 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a6e2:	e007      	b.n	800a6f4 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	691a      	ldr	r2, [r3, #16]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f042 0208 	orr.w	r2, r2, #8
 800a6f2:	611a      	str	r2, [r3, #16]
}
 800a6f4:	bf00      	nop
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a708:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff ff92 	bl	800a634 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a710:	bf00      	nop
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a724:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff ff8e 	bl	800a648 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a740:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7fb feaa 	bl	800649c <HAL_DMA_GetError>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d011      	beq.n	800a772 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f000 f82e 	bl	800a7b0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a75a:	f043 0210 	orr.w	r2, r3, #16
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7f7 fa8f 	bl	8001c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a786:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7f7 fa75 	bl	8001c90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f042 0208 	orr.w	r2, r2, #8
 800a7ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0210 	orr.w	r2, r2, #16
 800a7de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0201 	bic.w	r2, r2, #1
 800a7ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6919      	ldr	r1, [r3, #16]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4b3c      	ldr	r3, [pc, #240]	@ (800a8ec <SPI_CloseTransfer+0x13c>)
 800a7fc:	400b      	ands	r3, r1
 800a7fe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a80e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b04      	cmp	r3, #4
 800a81a:	d014      	beq.n	800a846 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f003 0320 	and.w	r3, r3, #32
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00f      	beq.n	800a846 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a82c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	699a      	ldr	r2, [r3, #24]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f042 0220 	orr.w	r2, r2, #32
 800a844:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d014      	beq.n	800a87c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00f      	beq.n	800a87c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a862:	f043 0204 	orr.w	r2, r3, #4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	699a      	ldr	r2, [r3, #24]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a87a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00f      	beq.n	800a8a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a88c:	f043 0201 	orr.w	r2, r3, #1
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	699a      	ldr	r2, [r3, #24]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00f      	beq.n	800a8d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8b6:	f043 0208 	orr.w	r2, r3, #8
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a8e0:	bf00      	nop
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	fffffc90 	.word	0xfffffc90

0800a8f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8fc:	095b      	lsrs	r3, r3, #5
 800a8fe:	3301      	adds	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	3301      	adds	r3, #1
 800a908:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	3307      	adds	r3, #7
 800a90e:	08db      	lsrs	r3, r3, #3
 800a910:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	fb02 f303 	mul.w	r3, r2, r3
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e049      	b.n	800a9cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d106      	bne.n	800a952 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7f8 fd0b 	bl	8003368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2202      	movs	r2, #2
 800a956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	3304      	adds	r3, #4
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f000 ffa5 	bl	800b8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d001      	beq.n	800a9ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e05e      	b.n	800aaaa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68da      	ldr	r2, [r3, #12]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f042 0201 	orr.w	r2, r2, #1
 800aa02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a2b      	ldr	r2, [pc, #172]	@ (800aab8 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d02c      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa16:	d027      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a27      	ldr	r2, [pc, #156]	@ (800aabc <HAL_TIM_Base_Start_IT+0xe8>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d022      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a26      	ldr	r2, [pc, #152]	@ (800aac0 <HAL_TIM_Base_Start_IT+0xec>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d01d      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a24      	ldr	r2, [pc, #144]	@ (800aac4 <HAL_TIM_Base_Start_IT+0xf0>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d018      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a23      	ldr	r2, [pc, #140]	@ (800aac8 <HAL_TIM_Base_Start_IT+0xf4>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d013      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a21      	ldr	r2, [pc, #132]	@ (800aacc <HAL_TIM_Base_Start_IT+0xf8>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d00e      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a20      	ldr	r2, [pc, #128]	@ (800aad0 <HAL_TIM_Base_Start_IT+0xfc>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d009      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a1e      	ldr	r2, [pc, #120]	@ (800aad4 <HAL_TIM_Base_Start_IT+0x100>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d004      	beq.n	800aa68 <HAL_TIM_Base_Start_IT+0x94>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a1d      	ldr	r2, [pc, #116]	@ (800aad8 <HAL_TIM_Base_Start_IT+0x104>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d115      	bne.n	800aa94 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	689a      	ldr	r2, [r3, #8]
 800aa6e:	4b1b      	ldr	r3, [pc, #108]	@ (800aadc <HAL_TIM_Base_Start_IT+0x108>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b06      	cmp	r3, #6
 800aa78:	d015      	beq.n	800aaa6 <HAL_TIM_Base_Start_IT+0xd2>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa80:	d011      	beq.n	800aaa6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f042 0201 	orr.w	r2, r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa92:	e008      	b.n	800aaa6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f042 0201 	orr.w	r2, r2, #1
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	e000      	b.n	800aaa8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40000400 	.word	0x40000400
 800aac0:	40000800 	.word	0x40000800
 800aac4:	40000c00 	.word	0x40000c00
 800aac8:	40010400 	.word	0x40010400
 800aacc:	40001800 	.word	0x40001800
 800aad0:	40014000 	.word	0x40014000
 800aad4:	4000e000 	.word	0x4000e000
 800aad8:	4000e400 	.word	0x4000e400
 800aadc:	00010007 	.word	0x00010007

0800aae0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f022 0201 	bic.w	r2, r2, #1
 800aaf6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6a1a      	ldr	r2, [r3, #32]
 800aafe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10f      	bne.n	800ab28 <HAL_TIM_Base_Stop_IT+0x48>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6a1a      	ldr	r2, [r3, #32]
 800ab0e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d107      	bne.n	800ab28 <HAL_TIM_Base_Stop_IT+0x48>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0201 	bic.w	r2, r2, #1
 800ab26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e049      	b.n	800abe4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d106      	bne.n	800ab6a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7f8 fc75 	bl	8003454 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f000 fe99 	bl	800b8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d109      	bne.n	800ac10 <HAL_TIM_OC_Start+0x24>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	bf14      	ite	ne
 800ac08:	2301      	movne	r3, #1
 800ac0a:	2300      	moveq	r3, #0
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	e03c      	b.n	800ac8a <HAL_TIM_OC_Start+0x9e>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d109      	bne.n	800ac2a <HAL_TIM_OC_Start+0x3e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	bf14      	ite	ne
 800ac22:	2301      	movne	r3, #1
 800ac24:	2300      	moveq	r3, #0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	e02f      	b.n	800ac8a <HAL_TIM_OC_Start+0x9e>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d109      	bne.n	800ac44 <HAL_TIM_OC_Start+0x58>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	bf14      	ite	ne
 800ac3c:	2301      	movne	r3, #1
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	e022      	b.n	800ac8a <HAL_TIM_OC_Start+0x9e>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b0c      	cmp	r3, #12
 800ac48:	d109      	bne.n	800ac5e <HAL_TIM_OC_Start+0x72>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	bf14      	ite	ne
 800ac56:	2301      	movne	r3, #1
 800ac58:	2300      	moveq	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	e015      	b.n	800ac8a <HAL_TIM_OC_Start+0x9e>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b10      	cmp	r3, #16
 800ac62:	d109      	bne.n	800ac78 <HAL_TIM_OC_Start+0x8c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	bf14      	ite	ne
 800ac70:	2301      	movne	r3, #1
 800ac72:	2300      	moveq	r3, #0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	e008      	b.n	800ac8a <HAL_TIM_OC_Start+0x9e>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	bf14      	ite	ne
 800ac84:	2301      	movne	r3, #1
 800ac86:	2300      	moveq	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e0ab      	b.n	800adea <HAL_TIM_OC_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <HAL_TIM_OC_Start+0xb6>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aca0:	e023      	b.n	800acea <HAL_TIM_OC_Start+0xfe>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d104      	bne.n	800acb2 <HAL_TIM_OC_Start+0xc6>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800acb0:	e01b      	b.n	800acea <HAL_TIM_OC_Start+0xfe>
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d104      	bne.n	800acc2 <HAL_TIM_OC_Start+0xd6>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acc0:	e013      	b.n	800acea <HAL_TIM_OC_Start+0xfe>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	2b0c      	cmp	r3, #12
 800acc6:	d104      	bne.n	800acd2 <HAL_TIM_OC_Start+0xe6>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2202      	movs	r2, #2
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800acd0:	e00b      	b.n	800acea <HAL_TIM_OC_Start+0xfe>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d104      	bne.n	800ace2 <HAL_TIM_OC_Start+0xf6>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2202      	movs	r2, #2
 800acdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ace0:	e003      	b.n	800acea <HAL_TIM_OC_Start+0xfe>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2202      	movs	r2, #2
 800ace6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2201      	movs	r2, #1
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f001 faee 	bl	800c2d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a3d      	ldr	r2, [pc, #244]	@ (800adf4 <HAL_TIM_OC_Start+0x208>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d013      	beq.n	800ad2a <HAL_TIM_OC_Start+0x13e>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a3c      	ldr	r2, [pc, #240]	@ (800adf8 <HAL_TIM_OC_Start+0x20c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00e      	beq.n	800ad2a <HAL_TIM_OC_Start+0x13e>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a3a      	ldr	r2, [pc, #232]	@ (800adfc <HAL_TIM_OC_Start+0x210>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_TIM_OC_Start+0x13e>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a39      	ldr	r2, [pc, #228]	@ (800ae00 <HAL_TIM_OC_Start+0x214>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_TIM_OC_Start+0x13e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a37      	ldr	r2, [pc, #220]	@ (800ae04 <HAL_TIM_OC_Start+0x218>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d101      	bne.n	800ad2e <HAL_TIM_OC_Start+0x142>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <HAL_TIM_OC_Start+0x144>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d007      	beq.n	800ad44 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad42:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a2a      	ldr	r2, [pc, #168]	@ (800adf4 <HAL_TIM_OC_Start+0x208>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d02c      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad56:	d027      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a2a      	ldr	r2, [pc, #168]	@ (800ae08 <HAL_TIM_OC_Start+0x21c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d022      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a29      	ldr	r2, [pc, #164]	@ (800ae0c <HAL_TIM_OC_Start+0x220>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d01d      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a27      	ldr	r2, [pc, #156]	@ (800ae10 <HAL_TIM_OC_Start+0x224>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d018      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a1f      	ldr	r2, [pc, #124]	@ (800adf8 <HAL_TIM_OC_Start+0x20c>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d013      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a23      	ldr	r2, [pc, #140]	@ (800ae14 <HAL_TIM_OC_Start+0x228>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d00e      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a1b      	ldr	r2, [pc, #108]	@ (800adfc <HAL_TIM_OC_Start+0x210>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d009      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a1f      	ldr	r2, [pc, #124]	@ (800ae18 <HAL_TIM_OC_Start+0x22c>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d004      	beq.n	800ada8 <HAL_TIM_OC_Start+0x1bc>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a1e      	ldr	r2, [pc, #120]	@ (800ae1c <HAL_TIM_OC_Start+0x230>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d115      	bne.n	800add4 <HAL_TIM_OC_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	4b1c      	ldr	r3, [pc, #112]	@ (800ae20 <HAL_TIM_OC_Start+0x234>)
 800adb0:	4013      	ands	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b06      	cmp	r3, #6
 800adb8:	d015      	beq.n	800ade6 <HAL_TIM_OC_Start+0x1fa>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc0:	d011      	beq.n	800ade6 <HAL_TIM_OC_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f042 0201 	orr.w	r2, r2, #1
 800add0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800add2:	e008      	b.n	800ade6 <HAL_TIM_OC_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0201 	orr.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	e000      	b.n	800ade8 <HAL_TIM_OC_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ade6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	40010000 	.word	0x40010000
 800adf8:	40010400 	.word	0x40010400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40014400 	.word	0x40014400
 800ae04:	40014800 	.word	0x40014800
 800ae08:	40000400 	.word	0x40000400
 800ae0c:	40000800 	.word	0x40000800
 800ae10:	40000c00 	.word	0x40000c00
 800ae14:	40001800 	.word	0x40001800
 800ae18:	4000e000 	.word	0x4000e000
 800ae1c:	4000e400 	.word	0x4000e400
 800ae20:	00010007 	.word	0x00010007

0800ae24 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2200      	movs	r2, #0
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 fa4c 	bl	800c2d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a3e      	ldr	r2, [pc, #248]	@ (800af3c <HAL_TIM_OC_Stop+0x118>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d013      	beq.n	800ae6e <HAL_TIM_OC_Stop+0x4a>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a3d      	ldr	r2, [pc, #244]	@ (800af40 <HAL_TIM_OC_Stop+0x11c>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d00e      	beq.n	800ae6e <HAL_TIM_OC_Stop+0x4a>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a3b      	ldr	r2, [pc, #236]	@ (800af44 <HAL_TIM_OC_Stop+0x120>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d009      	beq.n	800ae6e <HAL_TIM_OC_Stop+0x4a>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a3a      	ldr	r2, [pc, #232]	@ (800af48 <HAL_TIM_OC_Stop+0x124>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d004      	beq.n	800ae6e <HAL_TIM_OC_Stop+0x4a>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a38      	ldr	r2, [pc, #224]	@ (800af4c <HAL_TIM_OC_Stop+0x128>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d101      	bne.n	800ae72 <HAL_TIM_OC_Stop+0x4e>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e000      	b.n	800ae74 <HAL_TIM_OC_Stop+0x50>
 800ae72:	2300      	movs	r3, #0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d017      	beq.n	800aea8 <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6a1a      	ldr	r2, [r3, #32]
 800ae7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae82:	4013      	ands	r3, r2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10f      	bne.n	800aea8 <HAL_TIM_OC_Stop+0x84>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6a1a      	ldr	r2, [r3, #32]
 800ae8e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae92:	4013      	ands	r3, r2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d107      	bne.n	800aea8 <HAL_TIM_OC_Stop+0x84>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aea6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6a1a      	ldr	r2, [r3, #32]
 800aeae:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10f      	bne.n	800aed8 <HAL_TIM_OC_Stop+0xb4>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6a1a      	ldr	r2, [r3, #32]
 800aebe:	f240 4344 	movw	r3, #1092	@ 0x444
 800aec2:	4013      	ands	r3, r2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d107      	bne.n	800aed8 <HAL_TIM_OC_Stop+0xb4>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f022 0201 	bic.w	r2, r2, #1
 800aed6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d104      	bne.n	800aee8 <HAL_TIM_OC_Stop+0xc4>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aee6:	e023      	b.n	800af30 <HAL_TIM_OC_Stop+0x10c>
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b04      	cmp	r3, #4
 800aeec:	d104      	bne.n	800aef8 <HAL_TIM_OC_Stop+0xd4>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aef6:	e01b      	b.n	800af30 <HAL_TIM_OC_Stop+0x10c>
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b08      	cmp	r3, #8
 800aefc:	d104      	bne.n	800af08 <HAL_TIM_OC_Stop+0xe4>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af06:	e013      	b.n	800af30 <HAL_TIM_OC_Stop+0x10c>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b0c      	cmp	r3, #12
 800af0c:	d104      	bne.n	800af18 <HAL_TIM_OC_Stop+0xf4>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af16:	e00b      	b.n	800af30 <HAL_TIM_OC_Stop+0x10c>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b10      	cmp	r3, #16
 800af1c:	d104      	bne.n	800af28 <HAL_TIM_OC_Stop+0x104>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af26:	e003      	b.n	800af30 <HAL_TIM_OC_Stop+0x10c>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	40010000 	.word	0x40010000
 800af40:	40010400 	.word	0x40010400
 800af44:	40014000 	.word	0x40014000
 800af48:	40014400 	.word	0x40014400
 800af4c:	40014800 	.word	0x40014800

0800af50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e049      	b.n	800aff6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f841 	bl	800affe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2202      	movs	r2, #2
 800af80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4619      	mov	r1, r3
 800af8e:	4610      	mov	r0, r2
 800af90:	f000 fc90 	bl	800b8b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2201      	movs	r2, #1
 800afe0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b082      	sub	sp, #8
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e041      	b.n	800b0aa <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f839 	bl	800b0b2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2202      	movs	r2, #2
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3304      	adds	r3, #4
 800b050:	4619      	mov	r1, r3
 800b052:	4610      	mov	r0, r2
 800b054:	f000 fc2e 	bl	800b8b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 0208 	bic.w	r2, r2, #8
 800b066:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6819      	ldr	r1, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b083      	sub	sp, #12
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f003 0302 	and.w	r3, r3, #2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d020      	beq.n	800b12a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d01b      	beq.n	800b12a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f06f 0202 	mvn.w	r2, #2
 800b0fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	f003 0303 	and.w	r3, r3, #3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d003      	beq.n	800b118 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 fbb1 	bl	800b878 <HAL_TIM_IC_CaptureCallback>
 800b116:	e005      	b.n	800b124 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fba3 	bl	800b864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fbb4 	bl	800b88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d020      	beq.n	800b176 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d01b      	beq.n	800b176 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f06f 0204 	mvn.w	r2, #4
 800b146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fb8b 	bl	800b878 <HAL_TIM_IC_CaptureCallback>
 800b162:	e005      	b.n	800b170 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fb7d 	bl	800b864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fb8e 	bl	800b88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f003 0308 	and.w	r3, r3, #8
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d020      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f003 0308 	and.w	r3, r3, #8
 800b186:	2b00      	cmp	r3, #0
 800b188:	d01b      	beq.n	800b1c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f06f 0208 	mvn.w	r2, #8
 800b192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2204      	movs	r2, #4
 800b198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69db      	ldr	r3, [r3, #28]
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fb65 	bl	800b878 <HAL_TIM_IC_CaptureCallback>
 800b1ae:	e005      	b.n	800b1bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fb57 	bl	800b864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fb68 	bl	800b88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d020      	beq.n	800b20e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f003 0310 	and.w	r3, r3, #16
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01b      	beq.n	800b20e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f06f 0210 	mvn.w	r2, #16
 800b1de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2208      	movs	r2, #8
 800b1e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	69db      	ldr	r3, [r3, #28]
 800b1ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d003      	beq.n	800b1fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fb3f 	bl	800b878 <HAL_TIM_IC_CaptureCallback>
 800b1fa:	e005      	b.n	800b208 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fb31 	bl	800b864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fb42 	bl	800b88c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f003 0301 	and.w	r3, r3, #1
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00c      	beq.n	800b232 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d007      	beq.n	800b232 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f06f 0201 	mvn.w	r2, #1
 800b22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f8 fb23 	bl	8003878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d104      	bne.n	800b246 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00c      	beq.n	800b260 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d007      	beq.n	800b260 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f001 f992 	bl	800c584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00c      	beq.n	800b284 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 f98a 	bl	800c598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00c      	beq.n	800b2a8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b294:	2b00      	cmp	r3, #0
 800b296:	d007      	beq.n	800b2a8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b2a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fafc 	bl	800b8a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00c      	beq.n	800b2cc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d007      	beq.n	800b2cc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f06f 0220 	mvn.w	r2, #32
 800b2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 f952 	bl	800c570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2cc:	bf00      	nop
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d101      	bne.n	800b2f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e066      	b.n	800b3c0 <HAL_TIM_OC_ConfigChannel+0xec>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b14      	cmp	r3, #20
 800b2fe:	d857      	bhi.n	800b3b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b300:	a201      	add	r2, pc, #4	@ (adr r2, 800b308 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b306:	bf00      	nop
 800b308:	0800b35d 	.word	0x0800b35d
 800b30c:	0800b3b1 	.word	0x0800b3b1
 800b310:	0800b3b1 	.word	0x0800b3b1
 800b314:	0800b3b1 	.word	0x0800b3b1
 800b318:	0800b36b 	.word	0x0800b36b
 800b31c:	0800b3b1 	.word	0x0800b3b1
 800b320:	0800b3b1 	.word	0x0800b3b1
 800b324:	0800b3b1 	.word	0x0800b3b1
 800b328:	0800b379 	.word	0x0800b379
 800b32c:	0800b3b1 	.word	0x0800b3b1
 800b330:	0800b3b1 	.word	0x0800b3b1
 800b334:	0800b3b1 	.word	0x0800b3b1
 800b338:	0800b387 	.word	0x0800b387
 800b33c:	0800b3b1 	.word	0x0800b3b1
 800b340:	0800b3b1 	.word	0x0800b3b1
 800b344:	0800b3b1 	.word	0x0800b3b1
 800b348:	0800b395 	.word	0x0800b395
 800b34c:	0800b3b1 	.word	0x0800b3b1
 800b350:	0800b3b1 	.word	0x0800b3b1
 800b354:	0800b3b1 	.word	0x0800b3b1
 800b358:	0800b3a3 	.word	0x0800b3a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68b9      	ldr	r1, [r7, #8]
 800b362:	4618      	mov	r0, r3
 800b364:	f000 fb58 	bl	800ba18 <TIM_OC1_SetConfig>
      break;
 800b368:	e025      	b.n	800b3b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	4618      	mov	r0, r3
 800b372:	f000 fbe1 	bl	800bb38 <TIM_OC2_SetConfig>
      break;
 800b376:	e01e      	b.n	800b3b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68b9      	ldr	r1, [r7, #8]
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fc64 	bl	800bc4c <TIM_OC3_SetConfig>
      break;
 800b384:	e017      	b.n	800b3b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	68b9      	ldr	r1, [r7, #8]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fce5 	bl	800bd5c <TIM_OC4_SetConfig>
      break;
 800b392:	e010      	b.n	800b3b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68b9      	ldr	r1, [r7, #8]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 fd48 	bl	800be30 <TIM_OC5_SetConfig>
      break;
 800b3a0:	e009      	b.n	800b3b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68b9      	ldr	r1, [r7, #8]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fda5 	bl	800bef8 <TIM_OC6_SetConfig>
      break;
 800b3ae:	e002      	b.n	800b3b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3718      	adds	r7, #24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d101      	bne.n	800b3e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	e0ff      	b.n	800b5e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b14      	cmp	r3, #20
 800b3f2:	f200 80f0 	bhi.w	800b5d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b451 	.word	0x0800b451
 800b400:	0800b5d7 	.word	0x0800b5d7
 800b404:	0800b5d7 	.word	0x0800b5d7
 800b408:	0800b5d7 	.word	0x0800b5d7
 800b40c:	0800b491 	.word	0x0800b491
 800b410:	0800b5d7 	.word	0x0800b5d7
 800b414:	0800b5d7 	.word	0x0800b5d7
 800b418:	0800b5d7 	.word	0x0800b5d7
 800b41c:	0800b4d3 	.word	0x0800b4d3
 800b420:	0800b5d7 	.word	0x0800b5d7
 800b424:	0800b5d7 	.word	0x0800b5d7
 800b428:	0800b5d7 	.word	0x0800b5d7
 800b42c:	0800b513 	.word	0x0800b513
 800b430:	0800b5d7 	.word	0x0800b5d7
 800b434:	0800b5d7 	.word	0x0800b5d7
 800b438:	0800b5d7 	.word	0x0800b5d7
 800b43c:	0800b555 	.word	0x0800b555
 800b440:	0800b5d7 	.word	0x0800b5d7
 800b444:	0800b5d7 	.word	0x0800b5d7
 800b448:	0800b5d7 	.word	0x0800b5d7
 800b44c:	0800b595 	.word	0x0800b595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 fade 	bl	800ba18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0208 	orr.w	r2, r2, #8
 800b46a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f022 0204 	bic.w	r2, r2, #4
 800b47a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6999      	ldr	r1, [r3, #24]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	619a      	str	r2, [r3, #24]
      break;
 800b48e:	e0a5      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fb4e 	bl	800bb38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699a      	ldr	r2, [r3, #24]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6999      	ldr	r1, [r3, #24]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	021a      	lsls	r2, r3, #8
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	430a      	orrs	r2, r1
 800b4ce:	619a      	str	r2, [r3, #24]
      break;
 800b4d0:	e084      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	68b9      	ldr	r1, [r7, #8]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 fbb7 	bl	800bc4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0208 	orr.w	r2, r2, #8
 800b4ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69da      	ldr	r2, [r3, #28]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f022 0204 	bic.w	r2, r2, #4
 800b4fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	69d9      	ldr	r1, [r3, #28]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	691a      	ldr	r2, [r3, #16]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	430a      	orrs	r2, r1
 800b50e:	61da      	str	r2, [r3, #28]
      break;
 800b510:	e064      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68b9      	ldr	r1, [r7, #8]
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fc1f 	bl	800bd5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69da      	ldr	r2, [r3, #28]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69da      	ldr	r2, [r3, #28]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	69d9      	ldr	r1, [r3, #28]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	021a      	lsls	r2, r3, #8
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	61da      	str	r2, [r3, #28]
      break;
 800b552:	e043      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 fc68 	bl	800be30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0208 	orr.w	r2, r2, #8
 800b56e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 0204 	bic.w	r2, r2, #4
 800b57e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	691a      	ldr	r2, [r3, #16]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	430a      	orrs	r2, r1
 800b590:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b592:	e023      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68b9      	ldr	r1, [r7, #8]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 fcac 	bl	800bef8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	021a      	lsls	r2, r3, #8
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b5d4:	e002      	b.n	800b5dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	75fb      	strb	r3, [r7, #23]
      break;
 800b5da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b5e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3718      	adds	r7, #24
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop

0800b5f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b604:	2b01      	cmp	r3, #1
 800b606:	d101      	bne.n	800b60c <HAL_TIM_ConfigClockSource+0x1c>
 800b608:	2302      	movs	r3, #2
 800b60a:	e0dc      	b.n	800b7c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	4b6a      	ldr	r3, [pc, #424]	@ (800b7d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b628:	4013      	ands	r3, r2
 800b62a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a64      	ldr	r2, [pc, #400]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b642:	4293      	cmp	r3, r2
 800b644:	f000 80a9 	beq.w	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b648:	4a62      	ldr	r2, [pc, #392]	@ (800b7d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	f200 80ae 	bhi.w	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b650:	4a61      	ldr	r2, [pc, #388]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b652:	4293      	cmp	r3, r2
 800b654:	f000 80a1 	beq.w	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b658:	4a5f      	ldr	r2, [pc, #380]	@ (800b7d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	f200 80a6 	bhi.w	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b660:	4a5e      	ldr	r2, [pc, #376]	@ (800b7dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b662:	4293      	cmp	r3, r2
 800b664:	f000 8099 	beq.w	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b668:	4a5c      	ldr	r2, [pc, #368]	@ (800b7dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	f200 809e 	bhi.w	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b670:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b674:	f000 8091 	beq.w	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b678:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b67c:	f200 8096 	bhi.w	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b684:	f000 8089 	beq.w	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b68c:	f200 808e 	bhi.w	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b694:	d03e      	beq.n	800b714 <HAL_TIM_ConfigClockSource+0x124>
 800b696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b69a:	f200 8087 	bhi.w	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b69e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6a2:	f000 8086 	beq.w	800b7b2 <HAL_TIM_ConfigClockSource+0x1c2>
 800b6a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6aa:	d87f      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6ac:	2b70      	cmp	r3, #112	@ 0x70
 800b6ae:	d01a      	beq.n	800b6e6 <HAL_TIM_ConfigClockSource+0xf6>
 800b6b0:	2b70      	cmp	r3, #112	@ 0x70
 800b6b2:	d87b      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6b4:	2b60      	cmp	r3, #96	@ 0x60
 800b6b6:	d050      	beq.n	800b75a <HAL_TIM_ConfigClockSource+0x16a>
 800b6b8:	2b60      	cmp	r3, #96	@ 0x60
 800b6ba:	d877      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6bc:	2b50      	cmp	r3, #80	@ 0x50
 800b6be:	d03c      	beq.n	800b73a <HAL_TIM_ConfigClockSource+0x14a>
 800b6c0:	2b50      	cmp	r3, #80	@ 0x50
 800b6c2:	d873      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6c4:	2b40      	cmp	r3, #64	@ 0x40
 800b6c6:	d058      	beq.n	800b77a <HAL_TIM_ConfigClockSource+0x18a>
 800b6c8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ca:	d86f      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6cc:	2b30      	cmp	r3, #48	@ 0x30
 800b6ce:	d064      	beq.n	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b6d0:	2b30      	cmp	r3, #48	@ 0x30
 800b6d2:	d86b      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d060      	beq.n	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b6d8:	2b20      	cmp	r3, #32
 800b6da:	d867      	bhi.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d05c      	beq.n	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b6e0:	2b10      	cmp	r3, #16
 800b6e2:	d05a      	beq.n	800b79a <HAL_TIM_ConfigClockSource+0x1aa>
 800b6e4:	e062      	b.n	800b7ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b6f6:	f000 fdcd 	bl	800c294 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	609a      	str	r2, [r3, #8]
      break;
 800b712:	e04f      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b724:	f000 fdb6 	bl	800c294 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b736:	609a      	str	r2, [r3, #8]
      break;
 800b738:	e03c      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b746:	461a      	mov	r2, r3
 800b748:	f000 fd26 	bl	800c198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2150      	movs	r1, #80	@ 0x50
 800b752:	4618      	mov	r0, r3
 800b754:	f000 fd80 	bl	800c258 <TIM_ITRx_SetConfig>
      break;
 800b758:	e02c      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b766:	461a      	mov	r2, r3
 800b768:	f000 fd45 	bl	800c1f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2160      	movs	r1, #96	@ 0x60
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fd70 	bl	800c258 <TIM_ITRx_SetConfig>
      break;
 800b778:	e01c      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b786:	461a      	mov	r2, r3
 800b788:	f000 fd06 	bl	800c198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2140      	movs	r1, #64	@ 0x40
 800b792:	4618      	mov	r0, r3
 800b794:	f000 fd60 	bl	800c258 <TIM_ITRx_SetConfig>
      break;
 800b798:	e00c      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	f000 fd57 	bl	800c258 <TIM_ITRx_SetConfig>
      break;
 800b7aa:	e003      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b0:	e000      	b.n	800b7b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b7b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	ffceff88 	.word	0xffceff88
 800b7d4:	00100040 	.word	0x00100040
 800b7d8:	00100030 	.word	0x00100030
 800b7dc:	00100020 	.word	0x00100020

0800b7e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e031      	b.n	800b85c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fbda 	bl	800bfc4 <TIM_SlaveTimer_SetConfig>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2201      	movs	r2, #1
 800b81a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e018      	b.n	800b85c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b838:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68da      	ldr	r2, [r3, #12]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b848:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a4a      	ldr	r2, [pc, #296]	@ (800b9f0 <TIM_Base_SetConfig+0x13c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d013      	beq.n	800b8f4 <TIM_Base_SetConfig+0x40>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8d2:	d00f      	beq.n	800b8f4 <TIM_Base_SetConfig+0x40>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a47      	ldr	r2, [pc, #284]	@ (800b9f4 <TIM_Base_SetConfig+0x140>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00b      	beq.n	800b8f4 <TIM_Base_SetConfig+0x40>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a46      	ldr	r2, [pc, #280]	@ (800b9f8 <TIM_Base_SetConfig+0x144>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d007      	beq.n	800b8f4 <TIM_Base_SetConfig+0x40>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a45      	ldr	r2, [pc, #276]	@ (800b9fc <TIM_Base_SetConfig+0x148>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d003      	beq.n	800b8f4 <TIM_Base_SetConfig+0x40>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a44      	ldr	r2, [pc, #272]	@ (800ba00 <TIM_Base_SetConfig+0x14c>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d108      	bne.n	800b906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	4313      	orrs	r3, r2
 800b904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a39      	ldr	r2, [pc, #228]	@ (800b9f0 <TIM_Base_SetConfig+0x13c>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d027      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b914:	d023      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a36      	ldr	r2, [pc, #216]	@ (800b9f4 <TIM_Base_SetConfig+0x140>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d01f      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a35      	ldr	r2, [pc, #212]	@ (800b9f8 <TIM_Base_SetConfig+0x144>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d01b      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a34      	ldr	r2, [pc, #208]	@ (800b9fc <TIM_Base_SetConfig+0x148>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d017      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	4a33      	ldr	r2, [pc, #204]	@ (800ba00 <TIM_Base_SetConfig+0x14c>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d013      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4a32      	ldr	r2, [pc, #200]	@ (800ba04 <TIM_Base_SetConfig+0x150>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d00f      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	4a31      	ldr	r2, [pc, #196]	@ (800ba08 <TIM_Base_SetConfig+0x154>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d00b      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	4a30      	ldr	r2, [pc, #192]	@ (800ba0c <TIM_Base_SetConfig+0x158>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d007      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a2f      	ldr	r2, [pc, #188]	@ (800ba10 <TIM_Base_SetConfig+0x15c>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d003      	beq.n	800b95e <TIM_Base_SetConfig+0xaa>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a2e      	ldr	r2, [pc, #184]	@ (800ba14 <TIM_Base_SetConfig+0x160>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d108      	bne.n	800b970 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a16      	ldr	r2, [pc, #88]	@ (800b9f0 <TIM_Base_SetConfig+0x13c>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d00f      	beq.n	800b9bc <TIM_Base_SetConfig+0x108>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a18      	ldr	r2, [pc, #96]	@ (800ba00 <TIM_Base_SetConfig+0x14c>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d00b      	beq.n	800b9bc <TIM_Base_SetConfig+0x108>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a17      	ldr	r2, [pc, #92]	@ (800ba04 <TIM_Base_SetConfig+0x150>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d007      	beq.n	800b9bc <TIM_Base_SetConfig+0x108>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a16      	ldr	r2, [pc, #88]	@ (800ba08 <TIM_Base_SetConfig+0x154>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d003      	beq.n	800b9bc <TIM_Base_SetConfig+0x108>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a15      	ldr	r2, [pc, #84]	@ (800ba0c <TIM_Base_SetConfig+0x158>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d103      	bne.n	800b9c4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d105      	bne.n	800b9e2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	f023 0201 	bic.w	r2, r3, #1
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	611a      	str	r2, [r3, #16]
  }
}
 800b9e2:	bf00      	nop
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	40010000 	.word	0x40010000
 800b9f4:	40000400 	.word	0x40000400
 800b9f8:	40000800 	.word	0x40000800
 800b9fc:	40000c00 	.word	0x40000c00
 800ba00:	40010400 	.word	0x40010400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40014400 	.word	0x40014400
 800ba0c:	40014800 	.word	0x40014800
 800ba10:	4000e000 	.word	0x4000e000
 800ba14:	4000e400 	.word	0x4000e400

0800ba18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	f023 0201 	bic.w	r2, r3, #1
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	4b37      	ldr	r3, [pc, #220]	@ (800bb20 <TIM_OC1_SetConfig+0x108>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f023 0302 	bic.w	r3, r3, #2
 800ba60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a2d      	ldr	r2, [pc, #180]	@ (800bb24 <TIM_OC1_SetConfig+0x10c>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d00f      	beq.n	800ba94 <TIM_OC1_SetConfig+0x7c>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a2c      	ldr	r2, [pc, #176]	@ (800bb28 <TIM_OC1_SetConfig+0x110>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d00b      	beq.n	800ba94 <TIM_OC1_SetConfig+0x7c>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a2b      	ldr	r2, [pc, #172]	@ (800bb2c <TIM_OC1_SetConfig+0x114>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d007      	beq.n	800ba94 <TIM_OC1_SetConfig+0x7c>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a2a      	ldr	r2, [pc, #168]	@ (800bb30 <TIM_OC1_SetConfig+0x118>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d003      	beq.n	800ba94 <TIM_OC1_SetConfig+0x7c>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a29      	ldr	r2, [pc, #164]	@ (800bb34 <TIM_OC1_SetConfig+0x11c>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d10c      	bne.n	800baae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	f023 0308 	bic.w	r3, r3, #8
 800ba9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f023 0304 	bic.w	r3, r3, #4
 800baac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb24 <TIM_OC1_SetConfig+0x10c>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d00f      	beq.n	800bad6 <TIM_OC1_SetConfig+0xbe>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a1b      	ldr	r2, [pc, #108]	@ (800bb28 <TIM_OC1_SetConfig+0x110>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d00b      	beq.n	800bad6 <TIM_OC1_SetConfig+0xbe>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a1a      	ldr	r2, [pc, #104]	@ (800bb2c <TIM_OC1_SetConfig+0x114>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d007      	beq.n	800bad6 <TIM_OC1_SetConfig+0xbe>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a19      	ldr	r2, [pc, #100]	@ (800bb30 <TIM_OC1_SetConfig+0x118>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d003      	beq.n	800bad6 <TIM_OC1_SetConfig+0xbe>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a18      	ldr	r2, [pc, #96]	@ (800bb34 <TIM_OC1_SetConfig+0x11c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d111      	bne.n	800bafa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800badc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	693a      	ldr	r2, [r7, #16]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	621a      	str	r2, [r3, #32]
}
 800bb14:	bf00      	nop
 800bb16:	371c      	adds	r7, #28
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	fffeff8f 	.word	0xfffeff8f
 800bb24:	40010000 	.word	0x40010000
 800bb28:	40010400 	.word	0x40010400
 800bb2c:	40014000 	.word	0x40014000
 800bb30:	40014400 	.word	0x40014400
 800bb34:	40014800 	.word	0x40014800

0800bb38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a1b      	ldr	r3, [r3, #32]
 800bb4c:	f023 0210 	bic.w	r2, r3, #16
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	699b      	ldr	r3, [r3, #24]
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4b34      	ldr	r3, [pc, #208]	@ (800bc34 <TIM_OC2_SetConfig+0xfc>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f023 0320 	bic.w	r3, r3, #32
 800bb82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a29      	ldr	r2, [pc, #164]	@ (800bc38 <TIM_OC2_SetConfig+0x100>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d003      	beq.n	800bba0 <TIM_OC2_SetConfig+0x68>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	4a28      	ldr	r2, [pc, #160]	@ (800bc3c <TIM_OC2_SetConfig+0x104>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d10d      	bne.n	800bbbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	011b      	lsls	r3, r3, #4
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a1e      	ldr	r2, [pc, #120]	@ (800bc38 <TIM_OC2_SetConfig+0x100>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d00f      	beq.n	800bbe4 <TIM_OC2_SetConfig+0xac>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a1d      	ldr	r2, [pc, #116]	@ (800bc3c <TIM_OC2_SetConfig+0x104>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00b      	beq.n	800bbe4 <TIM_OC2_SetConfig+0xac>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a1c      	ldr	r2, [pc, #112]	@ (800bc40 <TIM_OC2_SetConfig+0x108>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d007      	beq.n	800bbe4 <TIM_OC2_SetConfig+0xac>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a1b      	ldr	r2, [pc, #108]	@ (800bc44 <TIM_OC2_SetConfig+0x10c>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d003      	beq.n	800bbe4 <TIM_OC2_SetConfig+0xac>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1a      	ldr	r2, [pc, #104]	@ (800bc48 <TIM_OC2_SetConfig+0x110>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d113      	bne.n	800bc0c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bbea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bbf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	621a      	str	r2, [r3, #32]
}
 800bc26:	bf00      	nop
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	feff8fff 	.word	0xfeff8fff
 800bc38:	40010000 	.word	0x40010000
 800bc3c:	40010400 	.word	0x40010400
 800bc40:	40014000 	.word	0x40014000
 800bc44:	40014400 	.word	0x40014400
 800bc48:	40014800 	.word	0x40014800

0800bc4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b087      	sub	sp, #28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a1b      	ldr	r3, [r3, #32]
 800bc5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	4b33      	ldr	r3, [pc, #204]	@ (800bd44 <TIM_OC3_SetConfig+0xf8>)
 800bc78:	4013      	ands	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	021b      	lsls	r3, r3, #8
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a28      	ldr	r2, [pc, #160]	@ (800bd48 <TIM_OC3_SetConfig+0xfc>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d003      	beq.n	800bcb2 <TIM_OC3_SetConfig+0x66>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a27      	ldr	r2, [pc, #156]	@ (800bd4c <TIM_OC3_SetConfig+0x100>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d10d      	bne.n	800bcce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	021b      	lsls	r3, r3, #8
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd48 <TIM_OC3_SetConfig+0xfc>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d00f      	beq.n	800bcf6 <TIM_OC3_SetConfig+0xaa>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a1c      	ldr	r2, [pc, #112]	@ (800bd4c <TIM_OC3_SetConfig+0x100>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00b      	beq.n	800bcf6 <TIM_OC3_SetConfig+0xaa>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a1b      	ldr	r2, [pc, #108]	@ (800bd50 <TIM_OC3_SetConfig+0x104>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d007      	beq.n	800bcf6 <TIM_OC3_SetConfig+0xaa>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a1a      	ldr	r2, [pc, #104]	@ (800bd54 <TIM_OC3_SetConfig+0x108>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d003      	beq.n	800bcf6 <TIM_OC3_SetConfig+0xaa>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a19      	ldr	r2, [pc, #100]	@ (800bd58 <TIM_OC3_SetConfig+0x10c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d113      	bne.n	800bd1e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	011b      	lsls	r3, r3, #4
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	011b      	lsls	r3, r3, #4
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	621a      	str	r2, [r3, #32]
}
 800bd38:	bf00      	nop
 800bd3a:	371c      	adds	r7, #28
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	fffeff8f 	.word	0xfffeff8f
 800bd48:	40010000 	.word	0x40010000
 800bd4c:	40010400 	.word	0x40010400
 800bd50:	40014000 	.word	0x40014000
 800bd54:	40014400 	.word	0x40014400
 800bd58:	40014800 	.word	0x40014800

0800bd5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	69db      	ldr	r3, [r3, #28]
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	4b24      	ldr	r3, [pc, #144]	@ (800be18 <TIM_OC4_SetConfig+0xbc>)
 800bd88:	4013      	ands	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	021b      	lsls	r3, r3, #8
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bda6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	031b      	lsls	r3, r3, #12
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a19      	ldr	r2, [pc, #100]	@ (800be1c <TIM_OC4_SetConfig+0xc0>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d00f      	beq.n	800bddc <TIM_OC4_SetConfig+0x80>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a18      	ldr	r2, [pc, #96]	@ (800be20 <TIM_OC4_SetConfig+0xc4>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d00b      	beq.n	800bddc <TIM_OC4_SetConfig+0x80>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a17      	ldr	r2, [pc, #92]	@ (800be24 <TIM_OC4_SetConfig+0xc8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d007      	beq.n	800bddc <TIM_OC4_SetConfig+0x80>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a16      	ldr	r2, [pc, #88]	@ (800be28 <TIM_OC4_SetConfig+0xcc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d003      	beq.n	800bddc <TIM_OC4_SetConfig+0x80>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a15      	ldr	r2, [pc, #84]	@ (800be2c <TIM_OC4_SetConfig+0xd0>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d109      	bne.n	800bdf0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bde2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	695b      	ldr	r3, [r3, #20]
 800bde8:	019b      	lsls	r3, r3, #6
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	621a      	str	r2, [r3, #32]
}
 800be0a:	bf00      	nop
 800be0c:	371c      	adds	r7, #28
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	feff8fff 	.word	0xfeff8fff
 800be1c:	40010000 	.word	0x40010000
 800be20:	40010400 	.word	0x40010400
 800be24:	40014000 	.word	0x40014000
 800be28:	40014400 	.word	0x40014400
 800be2c:	40014800 	.word	0x40014800

0800be30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	4b21      	ldr	r3, [pc, #132]	@ (800bee0 <TIM_OC5_SetConfig+0xb0>)
 800be5c:	4013      	ands	r3, r2
 800be5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	4313      	orrs	r3, r2
 800be68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800be70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	041b      	lsls	r3, r3, #16
 800be78:	693a      	ldr	r2, [r7, #16]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a18      	ldr	r2, [pc, #96]	@ (800bee4 <TIM_OC5_SetConfig+0xb4>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d00f      	beq.n	800bea6 <TIM_OC5_SetConfig+0x76>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a17      	ldr	r2, [pc, #92]	@ (800bee8 <TIM_OC5_SetConfig+0xb8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d00b      	beq.n	800bea6 <TIM_OC5_SetConfig+0x76>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a16      	ldr	r2, [pc, #88]	@ (800beec <TIM_OC5_SetConfig+0xbc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d007      	beq.n	800bea6 <TIM_OC5_SetConfig+0x76>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a15      	ldr	r2, [pc, #84]	@ (800bef0 <TIM_OC5_SetConfig+0xc0>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d003      	beq.n	800bea6 <TIM_OC5_SetConfig+0x76>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a14      	ldr	r2, [pc, #80]	@ (800bef4 <TIM_OC5_SetConfig+0xc4>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d109      	bne.n	800beba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800beac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	021b      	lsls	r3, r3, #8
 800beb4:	697a      	ldr	r2, [r7, #20]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	621a      	str	r2, [r3, #32]
}
 800bed4:	bf00      	nop
 800bed6:	371c      	adds	r7, #28
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	fffeff8f 	.word	0xfffeff8f
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40010400 	.word	0x40010400
 800beec:	40014000 	.word	0x40014000
 800bef0:	40014400 	.word	0x40014400
 800bef4:	40014800 	.word	0x40014800

0800bef8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bef8:	b480      	push	{r7}
 800befa:	b087      	sub	sp, #28
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a1b      	ldr	r3, [r3, #32]
 800bf06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	4b22      	ldr	r3, [pc, #136]	@ (800bfac <TIM_OC6_SetConfig+0xb4>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	021b      	lsls	r3, r3, #8
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	051b      	lsls	r3, r3, #20
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a19      	ldr	r2, [pc, #100]	@ (800bfb0 <TIM_OC6_SetConfig+0xb8>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00f      	beq.n	800bf70 <TIM_OC6_SetConfig+0x78>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a18      	ldr	r2, [pc, #96]	@ (800bfb4 <TIM_OC6_SetConfig+0xbc>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00b      	beq.n	800bf70 <TIM_OC6_SetConfig+0x78>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a17      	ldr	r2, [pc, #92]	@ (800bfb8 <TIM_OC6_SetConfig+0xc0>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d007      	beq.n	800bf70 <TIM_OC6_SetConfig+0x78>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a16      	ldr	r2, [pc, #88]	@ (800bfbc <TIM_OC6_SetConfig+0xc4>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d003      	beq.n	800bf70 <TIM_OC6_SetConfig+0x78>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a15      	ldr	r2, [pc, #84]	@ (800bfc0 <TIM_OC6_SetConfig+0xc8>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d109      	bne.n	800bf84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bf76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	695b      	ldr	r3, [r3, #20]
 800bf7c:	029b      	lsls	r3, r3, #10
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	621a      	str	r2, [r3, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	371c      	adds	r7, #28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	feff8fff 	.word	0xfeff8fff
 800bfb0:	40010000 	.word	0x40010000
 800bfb4:	40010400 	.word	0x40010400
 800bfb8:	40014000 	.word	0x40014000
 800bfbc:	40014400 	.word	0x40014400
 800bfc0:	40014800 	.word	0x40014800

0800bfc4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	4b65      	ldr	r3, [pc, #404]	@ (800c174 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	693a      	ldr	r2, [r7, #16]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	4b62      	ldr	r3, [pc, #392]	@ (800c178 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	4a5c      	ldr	r2, [pc, #368]	@ (800c17c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	f000 80ab 	beq.w	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c012:	4a5a      	ldr	r2, [pc, #360]	@ (800c17c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800c014:	4293      	cmp	r3, r2
 800c016:	f200 80a4 	bhi.w	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c01a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c01e:	f000 80a3 	beq.w	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c026:	f200 809c 	bhi.w	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c02a:	4a55      	ldr	r2, [pc, #340]	@ (800c180 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	f000 809b 	beq.w	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c032:	4a53      	ldr	r2, [pc, #332]	@ (800c180 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800c034:	4293      	cmp	r3, r2
 800c036:	f200 8094 	bhi.w	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c03a:	4a52      	ldr	r2, [pc, #328]	@ (800c184 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	f000 8093 	beq.w	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c042:	4a50      	ldr	r2, [pc, #320]	@ (800c184 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800c044:	4293      	cmp	r3, r2
 800c046:	f200 808c 	bhi.w	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c04a:	4a4f      	ldr	r2, [pc, #316]	@ (800c188 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	f000 808b 	beq.w	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c052:	4a4d      	ldr	r2, [pc, #308]	@ (800c188 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800c054:	4293      	cmp	r3, r2
 800c056:	f200 8084 	bhi.w	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c05a:	4a4c      	ldr	r2, [pc, #304]	@ (800c18c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	f000 8083 	beq.w	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c062:	4a4a      	ldr	r2, [pc, #296]	@ (800c18c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d87c      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c068:	4a49      	ldr	r2, [pc, #292]	@ (800c190 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d07c      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c06e:	4a48      	ldr	r2, [pc, #288]	@ (800c190 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d876      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c074:	4a47      	ldr	r2, [pc, #284]	@ (800c194 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d076      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c07a:	4a46      	ldr	r2, [pc, #280]	@ (800c194 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d870      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c080:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c084:	d070      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c086:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c08a:	d86a      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c08c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c090:	d06a      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c096:	d864      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c098:	2b70      	cmp	r3, #112	@ 0x70
 800c09a:	d01a      	beq.n	800c0d2 <TIM_SlaveTimer_SetConfig+0x10e>
 800c09c:	2b70      	cmp	r3, #112	@ 0x70
 800c09e:	d860      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c0a0:	2b60      	cmp	r3, #96	@ 0x60
 800c0a2:	d054      	beq.n	800c14e <TIM_SlaveTimer_SetConfig+0x18a>
 800c0a4:	2b60      	cmp	r3, #96	@ 0x60
 800c0a6:	d85c      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c0a8:	2b50      	cmp	r3, #80	@ 0x50
 800c0aa:	d046      	beq.n	800c13a <TIM_SlaveTimer_SetConfig+0x176>
 800c0ac:	2b50      	cmp	r3, #80	@ 0x50
 800c0ae:	d858      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c0b0:	2b40      	cmp	r3, #64	@ 0x40
 800c0b2:	d019      	beq.n	800c0e8 <TIM_SlaveTimer_SetConfig+0x124>
 800c0b4:	2b40      	cmp	r3, #64	@ 0x40
 800c0b6:	d854      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c0b8:	2b30      	cmp	r3, #48	@ 0x30
 800c0ba:	d055      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c0bc:	2b30      	cmp	r3, #48	@ 0x30
 800c0be:	d850      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c0c0:	2b20      	cmp	r3, #32
 800c0c2:	d051      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c0c4:	2b20      	cmp	r3, #32
 800c0c6:	d84c      	bhi.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d04d      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c0cc:	2b10      	cmp	r3, #16
 800c0ce:	d04b      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0x1a4>
 800c0d0:	e047      	b.n	800c162 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800c0e2:	f000 f8d7 	bl	800c294 <TIM_ETR_SetConfig>
      break;
 800c0e6:	e040      	b.n	800c16a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b05      	cmp	r3, #5
 800c0ee:	d101      	bne.n	800c0f4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e03b      	b.n	800c16c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6a1a      	ldr	r2, [r3, #32]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f022 0201 	bic.w	r2, r2, #1
 800c10a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c11a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	011b      	lsls	r3, r3, #4
 800c122:	68ba      	ldr	r2, [r7, #8]
 800c124:	4313      	orrs	r3, r2
 800c126:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	621a      	str	r2, [r3, #32]
      break;
 800c138:	e017      	b.n	800c16a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c146:	461a      	mov	r2, r3
 800c148:	f000 f826 	bl	800c198 <TIM_TI1_ConfigInputStage>
      break;
 800c14c:	e00d      	b.n	800c16a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c15a:	461a      	mov	r2, r3
 800c15c:	f000 f84b 	bl	800c1f6 <TIM_TI2_ConfigInputStage>
      break;
 800c160:	e003      	b.n	800c16a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	75fb      	strb	r3, [r7, #23]
      break;
 800c166:	e000      	b.n	800c16a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800c168:	bf00      	nop
  }

  return status;
 800c16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	ffcfff8f 	.word	0xffcfff8f
 800c178:	fffefff8 	.word	0xfffefff8
 800c17c:	00200010 	.word	0x00200010
 800c180:	00100070 	.word	0x00100070
 800c184:	00100060 	.word	0x00100060
 800c188:	00100050 	.word	0x00100050
 800c18c:	00100040 	.word	0x00100040
 800c190:	00100030 	.word	0x00100030
 800c194:	00100020 	.word	0x00100020

0800c198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c198:	b480      	push	{r7}
 800c19a:	b087      	sub	sp, #28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	f023 0201 	bic.w	r2, r3, #1
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c1c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f023 030a 	bic.w	r3, r3, #10
 800c1d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	621a      	str	r2, [r3, #32]
}
 800c1ea:	bf00      	nop
 800c1ec:	371c      	adds	r7, #28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b087      	sub	sp, #28
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	f023 0210 	bic.w	r2, r3, #16
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	031b      	lsls	r3, r3, #12
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	4313      	orrs	r3, r2
 800c22a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c232:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	693a      	ldr	r2, [r7, #16]
 800c242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	621a      	str	r2, [r3, #32]
}
 800c24a:	bf00      	nop
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
	...

0800c258 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4b09      	ldr	r3, [pc, #36]	@ (800c290 <TIM_ITRx_SetConfig+0x38>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	4313      	orrs	r3, r2
 800c276:	f043 0307 	orr.w	r3, r3, #7
 800c27a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	609a      	str	r2, [r3, #8]
}
 800c282:	bf00      	nop
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	ffcfff8f 	.word	0xffcfff8f

0800c294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c294:	b480      	push	{r7}
 800c296:	b087      	sub	sp, #28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	021a      	lsls	r2, r3, #8
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	697a      	ldr	r2, [r7, #20]
 800c2c6:	609a      	str	r2, [r3, #8]
}
 800c2c8:	bf00      	nop
 800c2ca:	371c      	adds	r7, #28
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b087      	sub	sp, #28
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f003 031f 	and.w	r3, r3, #31
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6a1a      	ldr	r2, [r3, #32]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	43db      	mvns	r3, r3
 800c2f6:	401a      	ands	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6a1a      	ldr	r2, [r3, #32]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	f003 031f 	and.w	r3, r3, #31
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	fa01 f303 	lsl.w	r3, r1, r3
 800c30c:	431a      	orrs	r2, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	621a      	str	r2, [r3, #32]
}
 800c312:	bf00      	nop
 800c314:	371c      	adds	r7, #28
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
	...

0800c320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c330:	2b01      	cmp	r3, #1
 800c332:	d101      	bne.n	800c338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c334:	2302      	movs	r3, #2
 800c336:	e077      	b.n	800c428 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2202      	movs	r2, #2
 800c344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a35      	ldr	r2, [pc, #212]	@ (800c434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d004      	beq.n	800c36c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a34      	ldr	r2, [pc, #208]	@ (800c438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d108      	bne.n	800c37e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c372:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c384:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a25      	ldr	r2, [pc, #148]	@ (800c434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d02c      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3aa:	d027      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a22      	ldr	r2, [pc, #136]	@ (800c43c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d022      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a21      	ldr	r2, [pc, #132]	@ (800c440 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d01d      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a1f      	ldr	r2, [pc, #124]	@ (800c444 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d018      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a1a      	ldr	r2, [pc, #104]	@ (800c438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d013      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a1b      	ldr	r2, [pc, #108]	@ (800c448 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d00e      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a1a      	ldr	r2, [pc, #104]	@ (800c44c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d009      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a18      	ldr	r2, [pc, #96]	@ (800c450 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d004      	beq.n	800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a17      	ldr	r2, [pc, #92]	@ (800c454 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d10c      	bne.n	800c416 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c402:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	40010000 	.word	0x40010000
 800c438:	40010400 	.word	0x40010400
 800c43c:	40000400 	.word	0x40000400
 800c440:	40000800 	.word	0x40000800
 800c444:	40000c00 	.word	0x40000c00
 800c448:	40001800 	.word	0x40001800
 800c44c:	40014000 	.word	0x40014000
 800c450:	4000e000 	.word	0x4000e000
 800c454:	4000e400 	.word	0x4000e400

0800c458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d101      	bne.n	800c474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c470:	2302      	movs	r3, #2
 800c472:	e073      	b.n	800c55c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	691b      	ldr	r3, [r3, #16]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	041b      	lsls	r3, r3, #16
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	69db      	ldr	r3, [r3, #28]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a19      	ldr	r2, [pc, #100]	@ (800c568 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d004      	beq.n	800c510 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a18      	ldr	r2, [pc, #96]	@ (800c56c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d11c      	bne.n	800c54a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51a:	051b      	lsls	r3, r3, #20
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	6a1b      	ldr	r3, [r3, #32]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c546:	4313      	orrs	r3, r2
 800c548:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	40010000 	.word	0x40010000
 800c56c:	40010400 	.word	0x40010400

0800c570 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c58c:	bf00      	nop
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c5a0:	bf00      	nop
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d101      	bne.n	800c5be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e042      	b.n	800c644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d106      	bne.n	800c5d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7f6 fff3 	bl	80035bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2224      	movs	r2, #36	@ 0x24
 800c5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0201 	bic.w	r2, r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f001 faee 	bl	800dbd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fc7f 	bl	800cf00 <UART_SetConfig>
 800c602:	4603      	mov	r3, r0
 800c604:	2b01      	cmp	r3, #1
 800c606:	d101      	bne.n	800c60c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	e01b      	b.n	800c644 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c61a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c62a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f042 0201 	orr.w	r2, r2, #1
 800c63a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f001 fb6d 	bl	800dd1c <UART_CheckIdleState>
 800c642:	4603      	mov	r3, r0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08a      	sub	sp, #40	@ 0x28
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	4613      	mov	r3, r2
 800c658:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c660:	2b20      	cmp	r3, #32
 800c662:	d167      	bne.n	800c734 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <HAL_UART_Transmit_DMA+0x24>
 800c66a:	88fb      	ldrh	r3, [r7, #6]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e060      	b.n	800c736 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	88fa      	ldrh	r2, [r7, #6]
 800c67e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	88fa      	ldrh	r2, [r7, #6]
 800c686:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2200      	movs	r2, #0
 800c68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2221      	movs	r2, #33	@ 0x21
 800c696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d028      	beq.n	800c6f4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6a6:	4a26      	ldr	r2, [pc, #152]	@ (800c740 <HAL_UART_Transmit_DMA+0xf4>)
 800c6a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6ae:	4a25      	ldr	r2, [pc, #148]	@ (800c744 <HAL_UART_Transmit_DMA+0xf8>)
 800c6b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6b6:	4a24      	ldr	r2, [pc, #144]	@ (800c748 <HAL_UART_Transmit_DMA+0xfc>)
 800c6b8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6be:	2200      	movs	r2, #0
 800c6c0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3328      	adds	r3, #40	@ 0x28
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	88fb      	ldrh	r3, [r7, #6]
 800c6d6:	f7f7 ffe9 	bl	80046ac <HAL_DMA_Start_IT>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2210      	movs	r2, #16
 800c6e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e020      	b.n	800c736 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2240      	movs	r2, #64	@ 0x40
 800c6fa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3308      	adds	r3, #8
 800c702:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	e853 3f00 	ldrex	r3, [r3]
 800c70a:	613b      	str	r3, [r7, #16]
   return(result);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c712:	627b      	str	r3, [r7, #36]	@ 0x24
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	3308      	adds	r3, #8
 800c71a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c71c:	623a      	str	r2, [r7, #32]
 800c71e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c720:	69f9      	ldr	r1, [r7, #28]
 800c722:	6a3a      	ldr	r2, [r7, #32]
 800c724:	e841 2300 	strex	r3, r2, [r1]
 800c728:	61bb      	str	r3, [r7, #24]
   return(result);
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e5      	bne.n	800c6fc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	e000      	b.n	800c736 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c734:	2302      	movs	r3, #2
  }
}
 800c736:	4618      	mov	r0, r3
 800c738:	3728      	adds	r7, #40	@ 0x28
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	0800e099 	.word	0x0800e099
 800c744:	0800e12f 	.word	0x0800e12f
 800c748:	0800e14b 	.word	0x0800e14b

0800c74c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b0ba      	sub	sp, #232	@ 0xe8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c772:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c776:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c77a:	4013      	ands	r3, r2
 800c77c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c784:	2b00      	cmp	r3, #0
 800c786:	d11b      	bne.n	800c7c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	2b00      	cmp	r3, #0
 800c792:	d015      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c798:	f003 0320 	and.w	r3, r3, #32
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d105      	bne.n	800c7ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d009      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 8377 	beq.w	800cea4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	4798      	blx	r3
      }
      return;
 800c7be:	e371      	b.n	800cea4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c7c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 8123 	beq.w	800ca10 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c7ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c7ce:	4b8d      	ldr	r3, [pc, #564]	@ (800ca04 <HAL_UART_IRQHandler+0x2b8>)
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c7d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c7da:	4b8b      	ldr	r3, [pc, #556]	@ (800ca08 <HAL_UART_IRQHandler+0x2bc>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 8116 	beq.w	800ca10 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d011      	beq.n	800c814 <HAL_UART_IRQHandler+0xc8>
 800c7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00b      	beq.n	800c814 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2201      	movs	r2, #1
 800c802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c80a:	f043 0201 	orr.w	r2, r3, #1
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c818:	f003 0302 	and.w	r3, r3, #2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d011      	beq.n	800c844 <HAL_UART_IRQHandler+0xf8>
 800c820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2202      	movs	r2, #2
 800c832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c83a:	f043 0204 	orr.w	r2, r3, #4
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c848:	f003 0304 	and.w	r3, r3, #4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d011      	beq.n	800c874 <HAL_UART_IRQHandler+0x128>
 800c850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2204      	movs	r2, #4
 800c862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c86a:	f043 0202 	orr.w	r2, r3, #2
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c878:	f003 0308 	and.w	r3, r3, #8
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d017      	beq.n	800c8b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c884:	f003 0320 	and.w	r3, r3, #32
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d105      	bne.n	800c898 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c88c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c890:	4b5c      	ldr	r3, [pc, #368]	@ (800ca04 <HAL_UART_IRQHandler+0x2b8>)
 800c892:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00b      	beq.n	800c8b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2208      	movs	r2, #8
 800c89e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8a6:	f043 0208 	orr.w	r2, r3, #8
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d012      	beq.n	800c8e2 <HAL_UART_IRQHandler+0x196>
 800c8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00c      	beq.n	800c8e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8d8:	f043 0220 	orr.w	r2, r3, #32
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 82dd 	beq.w	800cea8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8f2:	f003 0320 	and.w	r3, r3, #32
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d013      	beq.n	800c922 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c8fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8fe:	f003 0320 	and.w	r3, r3, #32
 800c902:	2b00      	cmp	r3, #0
 800c904:	d105      	bne.n	800c912 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c90a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c928:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c936:	2b40      	cmp	r3, #64	@ 0x40
 800c938:	d005      	beq.n	800c946 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c93a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c93e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c942:	2b00      	cmp	r3, #0
 800c944:	d054      	beq.n	800c9f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f001 fb40 	bl	800dfcc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c956:	2b40      	cmp	r3, #64	@ 0x40
 800c958:	d146      	bne.n	800c9e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3308      	adds	r3, #8
 800c960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	3308      	adds	r3, #8
 800c982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c98a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c99e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1d9      	bne.n	800c95a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d017      	beq.n	800c9e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9b6:	4a15      	ldr	r2, [pc, #84]	@ (800ca0c <HAL_UART_IRQHandler+0x2c0>)
 800c9b8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7f8 fbfb 	bl	80051bc <HAL_DMA_Abort_IT>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d019      	beq.n	800ca00 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c9da:	4610      	mov	r0, r2
 800c9dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9de:	e00f      	b.n	800ca00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fa77 	bl	800ced4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9e6:	e00b      	b.n	800ca00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fa73 	bl	800ced4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ee:	e007      	b.n	800ca00 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fa6f 	bl	800ced4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c9fe:	e253      	b.n	800cea8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca00:	bf00      	nop
    return;
 800ca02:	e251      	b.n	800cea8 <HAL_UART_IRQHandler+0x75c>
 800ca04:	10000001 	.word	0x10000001
 800ca08:	04000120 	.word	0x04000120
 800ca0c:	0800e1cb 	.word	0x0800e1cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	f040 81e7 	bne.w	800cde8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca1e:	f003 0310 	and.w	r3, r3, #16
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 81e0 	beq.w	800cde8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca2c:	f003 0310 	and.w	r3, r3, #16
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f000 81d9 	beq.w	800cde8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2210      	movs	r2, #16
 800ca3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca48:	2b40      	cmp	r3, #64	@ 0x40
 800ca4a:	f040 8151 	bne.w	800ccf0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a96      	ldr	r2, [pc, #600]	@ (800ccb0 <HAL_UART_IRQHandler+0x564>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d068      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a93      	ldr	r2, [pc, #588]	@ (800ccb4 <HAL_UART_IRQHandler+0x568>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d061      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a91      	ldr	r2, [pc, #580]	@ (800ccb8 <HAL_UART_IRQHandler+0x56c>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d05a      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a8e      	ldr	r2, [pc, #568]	@ (800ccbc <HAL_UART_IRQHandler+0x570>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d053      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a8c      	ldr	r2, [pc, #560]	@ (800ccc0 <HAL_UART_IRQHandler+0x574>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d04c      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a89      	ldr	r2, [pc, #548]	@ (800ccc4 <HAL_UART_IRQHandler+0x578>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d045      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a87      	ldr	r2, [pc, #540]	@ (800ccc8 <HAL_UART_IRQHandler+0x57c>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d03e      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a84      	ldr	r2, [pc, #528]	@ (800cccc <HAL_UART_IRQHandler+0x580>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d037      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a82      	ldr	r2, [pc, #520]	@ (800ccd0 <HAL_UART_IRQHandler+0x584>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d030      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a7f      	ldr	r2, [pc, #508]	@ (800ccd4 <HAL_UART_IRQHandler+0x588>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d029      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4a7d      	ldr	r2, [pc, #500]	@ (800ccd8 <HAL_UART_IRQHandler+0x58c>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d022      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a7a      	ldr	r2, [pc, #488]	@ (800ccdc <HAL_UART_IRQHandler+0x590>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d01b      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a78      	ldr	r2, [pc, #480]	@ (800cce0 <HAL_UART_IRQHandler+0x594>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d014      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a75      	ldr	r2, [pc, #468]	@ (800cce4 <HAL_UART_IRQHandler+0x598>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00d      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a73      	ldr	r2, [pc, #460]	@ (800cce8 <HAL_UART_IRQHandler+0x59c>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d006      	beq.n	800cb2e <HAL_UART_IRQHandler+0x3e2>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a70      	ldr	r2, [pc, #448]	@ (800ccec <HAL_UART_IRQHandler+0x5a0>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d106      	bne.n	800cb3c <HAL_UART_IRQHandler+0x3f0>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	e005      	b.n	800cb48 <HAL_UART_IRQHandler+0x3fc>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 81ab 	beq.w	800ceac <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb60:	429a      	cmp	r2, r3
 800cb62:	f080 81a3 	bcs.w	800ceac <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb76:	69db      	ldr	r3, [r3, #28]
 800cb78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb7c:	f000 8087 	beq.w	800cc8e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb8c:	e853 3f00 	ldrex	r3, [r3]
 800cb90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cb94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cbaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cbb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cbc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1da      	bne.n	800cb80 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	3308      	adds	r3, #8
 800cbd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbd4:	e853 3f00 	ldrex	r3, [r3]
 800cbd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cbda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbdc:	f023 0301 	bic.w	r3, r3, #1
 800cbe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3308      	adds	r3, #8
 800cbea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cbee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cbf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cbf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cbfa:	e841 2300 	strex	r3, r2, [r1]
 800cbfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1e1      	bne.n	800cbca <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc10:	e853 3f00 	ldrex	r3, [r3]
 800cc14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cc16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	3308      	adds	r3, #8
 800cc26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cc2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cc2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cc30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc32:	e841 2300 	strex	r3, r2, [r1]
 800cc36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cc38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1e3      	bne.n	800cc06 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2220      	movs	r2, #32
 800cc42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc54:	e853 3f00 	ldrex	r3, [r3]
 800cc58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc5c:	f023 0310 	bic.w	r3, r3, #16
 800cc60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc76:	e841 2300 	strex	r3, r2, [r1]
 800cc7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1e4      	bne.n	800cc4c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f7 ff79 	bl	8004b80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2202      	movs	r2, #2
 800cc92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f91d 	bl	800cee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ccae:	e0fd      	b.n	800ceac <HAL_UART_IRQHandler+0x760>
 800ccb0:	40020010 	.word	0x40020010
 800ccb4:	40020028 	.word	0x40020028
 800ccb8:	40020040 	.word	0x40020040
 800ccbc:	40020058 	.word	0x40020058
 800ccc0:	40020070 	.word	0x40020070
 800ccc4:	40020088 	.word	0x40020088
 800ccc8:	400200a0 	.word	0x400200a0
 800cccc:	400200b8 	.word	0x400200b8
 800ccd0:	40020410 	.word	0x40020410
 800ccd4:	40020428 	.word	0x40020428
 800ccd8:	40020440 	.word	0x40020440
 800ccdc:	40020458 	.word	0x40020458
 800cce0:	40020470 	.word	0x40020470
 800cce4:	40020488 	.word	0x40020488
 800cce8:	400204a0 	.word	0x400204a0
 800ccec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f000 80cf 	beq.w	800ceb0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800cd12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80ca 	beq.w	800ceb0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd24:	e853 3f00 	ldrex	r3, [r3]
 800cd28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cd2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cd3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd40:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd46:	e841 2300 	strex	r3, r2, [r1]
 800cd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1e4      	bne.n	800cd1c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	3308      	adds	r3, #8
 800cd58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5c:	e853 3f00 	ldrex	r3, [r3]
 800cd60:	623b      	str	r3, [r7, #32]
   return(result);
 800cd62:	6a3a      	ldr	r2, [r7, #32]
 800cd64:	4b55      	ldr	r3, [pc, #340]	@ (800cebc <HAL_UART_IRQHandler+0x770>)
 800cd66:	4013      	ands	r3, r2
 800cd68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	3308      	adds	r3, #8
 800cd72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cd76:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e3      	bne.n	800cd52 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	e853 3f00 	ldrex	r3, [r3]
 800cdaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f023 0310 	bic.w	r3, r3, #16
 800cdb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cdc0:	61fb      	str	r3, [r7, #28]
 800cdc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc4:	69b9      	ldr	r1, [r7, #24]
 800cdc6:	69fa      	ldr	r2, [r7, #28]
 800cdc8:	e841 2300 	strex	r3, r2, [r1]
 800cdcc:	617b      	str	r3, [r7, #20]
   return(result);
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1e4      	bne.n	800cd9e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cdda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 f881 	bl	800cee8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cde6:	e063      	b.n	800ceb0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00e      	beq.n	800ce12 <HAL_UART_IRQHandler+0x6c6>
 800cdf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d008      	beq.n	800ce12 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ce08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f001 fa1e 	bl	800e24c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce10:	e051      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d014      	beq.n	800ce48 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d105      	bne.n	800ce36 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d008      	beq.n	800ce48 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d03a      	beq.n	800ceb4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
    }
    return;
 800ce46:	e035      	b.n	800ceb4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d009      	beq.n	800ce68 <HAL_UART_IRQHandler+0x71c>
 800ce54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 f9c8 	bl	800e1f6 <UART_EndTransmit_IT>
    return;
 800ce66:	e026      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d009      	beq.n	800ce88 <HAL_UART_IRQHandler+0x73c>
 800ce74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d003      	beq.n	800ce88 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f001 f9f7 	bl	800e274 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce86:	e016      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d010      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
 800ce94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	da0c      	bge.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f001 f9df 	bl	800e260 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cea2:	e008      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
      return;
 800cea4:	bf00      	nop
 800cea6:	e006      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
    return;
 800cea8:	bf00      	nop
 800ceaa:	e004      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
      return;
 800ceac:	bf00      	nop
 800ceae:	e002      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
      return;
 800ceb0:	bf00      	nop
 800ceb2:	e000      	b.n	800ceb6 <HAL_UART_IRQHandler+0x76a>
    return;
 800ceb4:	bf00      	nop
  }
}
 800ceb6:	37e8      	adds	r7, #232	@ 0xe8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	effffffe 	.word	0xeffffffe

0800cec0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf04:	b092      	sub	sp, #72	@ 0x48
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	689a      	ldr	r2, [r3, #8]
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	431a      	orrs	r2, r3
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	431a      	orrs	r2, r3
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	69db      	ldr	r3, [r3, #28]
 800cf24:	4313      	orrs	r3, r2
 800cf26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4bbe      	ldr	r3, [pc, #760]	@ (800d228 <UART_SetConfig+0x328>)
 800cf30:	4013      	ands	r3, r2
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	6812      	ldr	r2, [r2, #0]
 800cf36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf38:	430b      	orrs	r3, r1
 800cf3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	68da      	ldr	r2, [r3, #12]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	430a      	orrs	r2, r1
 800cf50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	699b      	ldr	r3, [r3, #24]
 800cf56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4ab3      	ldr	r2, [pc, #716]	@ (800d22c <UART_SetConfig+0x32c>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d004      	beq.n	800cf6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	6a1b      	ldr	r3, [r3, #32]
 800cf66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689a      	ldr	r2, [r3, #8]
 800cf72:	4baf      	ldr	r3, [pc, #700]	@ (800d230 <UART_SetConfig+0x330>)
 800cf74:	4013      	ands	r3, r2
 800cf76:	697a      	ldr	r2, [r7, #20]
 800cf78:	6812      	ldr	r2, [r2, #0]
 800cf7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf7c:	430b      	orrs	r3, r1
 800cf7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf86:	f023 010f 	bic.w	r1, r3, #15
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	430a      	orrs	r2, r1
 800cf94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4aa6      	ldr	r2, [pc, #664]	@ (800d234 <UART_SetConfig+0x334>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d177      	bne.n	800d090 <UART_SetConfig+0x190>
 800cfa0:	4ba5      	ldr	r3, [pc, #660]	@ (800d238 <UART_SetConfig+0x338>)
 800cfa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cfa8:	2b28      	cmp	r3, #40	@ 0x28
 800cfaa:	d86d      	bhi.n	800d088 <UART_SetConfig+0x188>
 800cfac:	a201      	add	r2, pc, #4	@ (adr r2, 800cfb4 <UART_SetConfig+0xb4>)
 800cfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb2:	bf00      	nop
 800cfb4:	0800d059 	.word	0x0800d059
 800cfb8:	0800d089 	.word	0x0800d089
 800cfbc:	0800d089 	.word	0x0800d089
 800cfc0:	0800d089 	.word	0x0800d089
 800cfc4:	0800d089 	.word	0x0800d089
 800cfc8:	0800d089 	.word	0x0800d089
 800cfcc:	0800d089 	.word	0x0800d089
 800cfd0:	0800d089 	.word	0x0800d089
 800cfd4:	0800d061 	.word	0x0800d061
 800cfd8:	0800d089 	.word	0x0800d089
 800cfdc:	0800d089 	.word	0x0800d089
 800cfe0:	0800d089 	.word	0x0800d089
 800cfe4:	0800d089 	.word	0x0800d089
 800cfe8:	0800d089 	.word	0x0800d089
 800cfec:	0800d089 	.word	0x0800d089
 800cff0:	0800d089 	.word	0x0800d089
 800cff4:	0800d069 	.word	0x0800d069
 800cff8:	0800d089 	.word	0x0800d089
 800cffc:	0800d089 	.word	0x0800d089
 800d000:	0800d089 	.word	0x0800d089
 800d004:	0800d089 	.word	0x0800d089
 800d008:	0800d089 	.word	0x0800d089
 800d00c:	0800d089 	.word	0x0800d089
 800d010:	0800d089 	.word	0x0800d089
 800d014:	0800d071 	.word	0x0800d071
 800d018:	0800d089 	.word	0x0800d089
 800d01c:	0800d089 	.word	0x0800d089
 800d020:	0800d089 	.word	0x0800d089
 800d024:	0800d089 	.word	0x0800d089
 800d028:	0800d089 	.word	0x0800d089
 800d02c:	0800d089 	.word	0x0800d089
 800d030:	0800d089 	.word	0x0800d089
 800d034:	0800d079 	.word	0x0800d079
 800d038:	0800d089 	.word	0x0800d089
 800d03c:	0800d089 	.word	0x0800d089
 800d040:	0800d089 	.word	0x0800d089
 800d044:	0800d089 	.word	0x0800d089
 800d048:	0800d089 	.word	0x0800d089
 800d04c:	0800d089 	.word	0x0800d089
 800d050:	0800d089 	.word	0x0800d089
 800d054:	0800d081 	.word	0x0800d081
 800d058:	2301      	movs	r3, #1
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05e:	e326      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d060:	2304      	movs	r3, #4
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e322      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d068:	2308      	movs	r3, #8
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e31e      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d070:	2310      	movs	r3, #16
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e31a      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d078:	2320      	movs	r3, #32
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e316      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d080:	2340      	movs	r3, #64	@ 0x40
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e312      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d088:	2380      	movs	r3, #128	@ 0x80
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e30e      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a69      	ldr	r2, [pc, #420]	@ (800d23c <UART_SetConfig+0x33c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d130      	bne.n	800d0fc <UART_SetConfig+0x1fc>
 800d09a:	4b67      	ldr	r3, [pc, #412]	@ (800d238 <UART_SetConfig+0x338>)
 800d09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d09e:	f003 0307 	and.w	r3, r3, #7
 800d0a2:	2b05      	cmp	r3, #5
 800d0a4:	d826      	bhi.n	800d0f4 <UART_SetConfig+0x1f4>
 800d0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <UART_SetConfig+0x1ac>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d0c5 	.word	0x0800d0c5
 800d0b0:	0800d0cd 	.word	0x0800d0cd
 800d0b4:	0800d0d5 	.word	0x0800d0d5
 800d0b8:	0800d0dd 	.word	0x0800d0dd
 800d0bc:	0800d0e5 	.word	0x0800d0e5
 800d0c0:	0800d0ed 	.word	0x0800d0ed
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e2f0      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0cc:	2304      	movs	r3, #4
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e2ec      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e2e8      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0dc:	2310      	movs	r3, #16
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e2e4      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0e4:	2320      	movs	r3, #32
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e2e0      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0ec:	2340      	movs	r3, #64	@ 0x40
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e2dc      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0f4:	2380      	movs	r3, #128	@ 0x80
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e2d8      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a4f      	ldr	r2, [pc, #316]	@ (800d240 <UART_SetConfig+0x340>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d130      	bne.n	800d168 <UART_SetConfig+0x268>
 800d106:	4b4c      	ldr	r3, [pc, #304]	@ (800d238 <UART_SetConfig+0x338>)
 800d108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d10a:	f003 0307 	and.w	r3, r3, #7
 800d10e:	2b05      	cmp	r3, #5
 800d110:	d826      	bhi.n	800d160 <UART_SetConfig+0x260>
 800d112:	a201      	add	r2, pc, #4	@ (adr r2, 800d118 <UART_SetConfig+0x218>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d131 	.word	0x0800d131
 800d11c:	0800d139 	.word	0x0800d139
 800d120:	0800d141 	.word	0x0800d141
 800d124:	0800d149 	.word	0x0800d149
 800d128:	0800d151 	.word	0x0800d151
 800d12c:	0800d159 	.word	0x0800d159
 800d130:	2300      	movs	r3, #0
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d136:	e2ba      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d138:	2304      	movs	r3, #4
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13e:	e2b6      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d140:	2308      	movs	r3, #8
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d146:	e2b2      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d148:	2310      	movs	r3, #16
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14e:	e2ae      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d150:	2320      	movs	r3, #32
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d156:	e2aa      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d158:	2340      	movs	r3, #64	@ 0x40
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15e:	e2a6      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d160:	2380      	movs	r3, #128	@ 0x80
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d166:	e2a2      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a35      	ldr	r2, [pc, #212]	@ (800d244 <UART_SetConfig+0x344>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d130      	bne.n	800d1d4 <UART_SetConfig+0x2d4>
 800d172:	4b31      	ldr	r3, [pc, #196]	@ (800d238 <UART_SetConfig+0x338>)
 800d174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d176:	f003 0307 	and.w	r3, r3, #7
 800d17a:	2b05      	cmp	r3, #5
 800d17c:	d826      	bhi.n	800d1cc <UART_SetConfig+0x2cc>
 800d17e:	a201      	add	r2, pc, #4	@ (adr r2, 800d184 <UART_SetConfig+0x284>)
 800d180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d184:	0800d19d 	.word	0x0800d19d
 800d188:	0800d1a5 	.word	0x0800d1a5
 800d18c:	0800d1ad 	.word	0x0800d1ad
 800d190:	0800d1b5 	.word	0x0800d1b5
 800d194:	0800d1bd 	.word	0x0800d1bd
 800d198:	0800d1c5 	.word	0x0800d1c5
 800d19c:	2300      	movs	r3, #0
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a2:	e284      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1a4:	2304      	movs	r3, #4
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1aa:	e280      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b2:	e27c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	e278      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1bc:	2320      	movs	r3, #32
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c2:	e274      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1c4:	2340      	movs	r3, #64	@ 0x40
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ca:	e270      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1cc:	2380      	movs	r3, #128	@ 0x80
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d2:	e26c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a1b      	ldr	r2, [pc, #108]	@ (800d248 <UART_SetConfig+0x348>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d142      	bne.n	800d264 <UART_SetConfig+0x364>
 800d1de:	4b16      	ldr	r3, [pc, #88]	@ (800d238 <UART_SetConfig+0x338>)
 800d1e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1e2:	f003 0307 	and.w	r3, r3, #7
 800d1e6:	2b05      	cmp	r3, #5
 800d1e8:	d838      	bhi.n	800d25c <UART_SetConfig+0x35c>
 800d1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f0 <UART_SetConfig+0x2f0>)
 800d1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f0:	0800d209 	.word	0x0800d209
 800d1f4:	0800d211 	.word	0x0800d211
 800d1f8:	0800d219 	.word	0x0800d219
 800d1fc:	0800d221 	.word	0x0800d221
 800d200:	0800d24d 	.word	0x0800d24d
 800d204:	0800d255 	.word	0x0800d255
 800d208:	2300      	movs	r3, #0
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20e:	e24e      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d210:	2304      	movs	r3, #4
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d216:	e24a      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d218:	2308      	movs	r3, #8
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e246      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d220:	2310      	movs	r3, #16
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e242      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d228:	cfff69f3 	.word	0xcfff69f3
 800d22c:	58000c00 	.word	0x58000c00
 800d230:	11fff4ff 	.word	0x11fff4ff
 800d234:	40011000 	.word	0x40011000
 800d238:	58024400 	.word	0x58024400
 800d23c:	40004400 	.word	0x40004400
 800d240:	40004800 	.word	0x40004800
 800d244:	40004c00 	.word	0x40004c00
 800d248:	40005000 	.word	0x40005000
 800d24c:	2320      	movs	r3, #32
 800d24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d252:	e22c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d254:	2340      	movs	r3, #64	@ 0x40
 800d256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25a:	e228      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d25c:	2380      	movs	r3, #128	@ 0x80
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e224      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4ab1      	ldr	r2, [pc, #708]	@ (800d530 <UART_SetConfig+0x630>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d176      	bne.n	800d35c <UART_SetConfig+0x45c>
 800d26e:	4bb1      	ldr	r3, [pc, #708]	@ (800d534 <UART_SetConfig+0x634>)
 800d270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d272:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d276:	2b28      	cmp	r3, #40	@ 0x28
 800d278:	d86c      	bhi.n	800d354 <UART_SetConfig+0x454>
 800d27a:	a201      	add	r2, pc, #4	@ (adr r2, 800d280 <UART_SetConfig+0x380>)
 800d27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d280:	0800d325 	.word	0x0800d325
 800d284:	0800d355 	.word	0x0800d355
 800d288:	0800d355 	.word	0x0800d355
 800d28c:	0800d355 	.word	0x0800d355
 800d290:	0800d355 	.word	0x0800d355
 800d294:	0800d355 	.word	0x0800d355
 800d298:	0800d355 	.word	0x0800d355
 800d29c:	0800d355 	.word	0x0800d355
 800d2a0:	0800d32d 	.word	0x0800d32d
 800d2a4:	0800d355 	.word	0x0800d355
 800d2a8:	0800d355 	.word	0x0800d355
 800d2ac:	0800d355 	.word	0x0800d355
 800d2b0:	0800d355 	.word	0x0800d355
 800d2b4:	0800d355 	.word	0x0800d355
 800d2b8:	0800d355 	.word	0x0800d355
 800d2bc:	0800d355 	.word	0x0800d355
 800d2c0:	0800d335 	.word	0x0800d335
 800d2c4:	0800d355 	.word	0x0800d355
 800d2c8:	0800d355 	.word	0x0800d355
 800d2cc:	0800d355 	.word	0x0800d355
 800d2d0:	0800d355 	.word	0x0800d355
 800d2d4:	0800d355 	.word	0x0800d355
 800d2d8:	0800d355 	.word	0x0800d355
 800d2dc:	0800d355 	.word	0x0800d355
 800d2e0:	0800d33d 	.word	0x0800d33d
 800d2e4:	0800d355 	.word	0x0800d355
 800d2e8:	0800d355 	.word	0x0800d355
 800d2ec:	0800d355 	.word	0x0800d355
 800d2f0:	0800d355 	.word	0x0800d355
 800d2f4:	0800d355 	.word	0x0800d355
 800d2f8:	0800d355 	.word	0x0800d355
 800d2fc:	0800d355 	.word	0x0800d355
 800d300:	0800d345 	.word	0x0800d345
 800d304:	0800d355 	.word	0x0800d355
 800d308:	0800d355 	.word	0x0800d355
 800d30c:	0800d355 	.word	0x0800d355
 800d310:	0800d355 	.word	0x0800d355
 800d314:	0800d355 	.word	0x0800d355
 800d318:	0800d355 	.word	0x0800d355
 800d31c:	0800d355 	.word	0x0800d355
 800d320:	0800d34d 	.word	0x0800d34d
 800d324:	2301      	movs	r3, #1
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32a:	e1c0      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d32c:	2304      	movs	r3, #4
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d332:	e1bc      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d334:	2308      	movs	r3, #8
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e1b8      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d33c:	2310      	movs	r3, #16
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e1b4      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d344:	2320      	movs	r3, #32
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e1b0      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d34c:	2340      	movs	r3, #64	@ 0x40
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e1ac      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d354:	2380      	movs	r3, #128	@ 0x80
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e1a8      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a75      	ldr	r2, [pc, #468]	@ (800d538 <UART_SetConfig+0x638>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d130      	bne.n	800d3c8 <UART_SetConfig+0x4c8>
 800d366:	4b73      	ldr	r3, [pc, #460]	@ (800d534 <UART_SetConfig+0x634>)
 800d368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d36a:	f003 0307 	and.w	r3, r3, #7
 800d36e:	2b05      	cmp	r3, #5
 800d370:	d826      	bhi.n	800d3c0 <UART_SetConfig+0x4c0>
 800d372:	a201      	add	r2, pc, #4	@ (adr r2, 800d378 <UART_SetConfig+0x478>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d391 	.word	0x0800d391
 800d37c:	0800d399 	.word	0x0800d399
 800d380:	0800d3a1 	.word	0x0800d3a1
 800d384:	0800d3a9 	.word	0x0800d3a9
 800d388:	0800d3b1 	.word	0x0800d3b1
 800d38c:	0800d3b9 	.word	0x0800d3b9
 800d390:	2300      	movs	r3, #0
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d396:	e18a      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d398:	2304      	movs	r3, #4
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39e:	e186      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d3a0:	2308      	movs	r3, #8
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e182      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d3a8:	2310      	movs	r3, #16
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e17e      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d3b0:	2320      	movs	r3, #32
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e17a      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d3b8:	2340      	movs	r3, #64	@ 0x40
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e176      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d3c0:	2380      	movs	r3, #128	@ 0x80
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e172      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a5b      	ldr	r2, [pc, #364]	@ (800d53c <UART_SetConfig+0x63c>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d130      	bne.n	800d434 <UART_SetConfig+0x534>
 800d3d2:	4b58      	ldr	r3, [pc, #352]	@ (800d534 <UART_SetConfig+0x634>)
 800d3d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d6:	f003 0307 	and.w	r3, r3, #7
 800d3da:	2b05      	cmp	r3, #5
 800d3dc:	d826      	bhi.n	800d42c <UART_SetConfig+0x52c>
 800d3de:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e4 <UART_SetConfig+0x4e4>)
 800d3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e4:	0800d3fd 	.word	0x0800d3fd
 800d3e8:	0800d405 	.word	0x0800d405
 800d3ec:	0800d40d 	.word	0x0800d40d
 800d3f0:	0800d415 	.word	0x0800d415
 800d3f4:	0800d41d 	.word	0x0800d41d
 800d3f8:	0800d425 	.word	0x0800d425
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d402:	e154      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d404:	2304      	movs	r3, #4
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40a:	e150      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d40c:	2308      	movs	r3, #8
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d412:	e14c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d414:	2310      	movs	r3, #16
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41a:	e148      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d41c:	2320      	movs	r3, #32
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d422:	e144      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d424:	2340      	movs	r3, #64	@ 0x40
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42a:	e140      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d42c:	2380      	movs	r3, #128	@ 0x80
 800d42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d432:	e13c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a41      	ldr	r2, [pc, #260]	@ (800d540 <UART_SetConfig+0x640>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	f040 8082 	bne.w	800d544 <UART_SetConfig+0x644>
 800d440:	4b3c      	ldr	r3, [pc, #240]	@ (800d534 <UART_SetConfig+0x634>)
 800d442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d444:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d448:	2b28      	cmp	r3, #40	@ 0x28
 800d44a:	d86d      	bhi.n	800d528 <UART_SetConfig+0x628>
 800d44c:	a201      	add	r2, pc, #4	@ (adr r2, 800d454 <UART_SetConfig+0x554>)
 800d44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d452:	bf00      	nop
 800d454:	0800d4f9 	.word	0x0800d4f9
 800d458:	0800d529 	.word	0x0800d529
 800d45c:	0800d529 	.word	0x0800d529
 800d460:	0800d529 	.word	0x0800d529
 800d464:	0800d529 	.word	0x0800d529
 800d468:	0800d529 	.word	0x0800d529
 800d46c:	0800d529 	.word	0x0800d529
 800d470:	0800d529 	.word	0x0800d529
 800d474:	0800d501 	.word	0x0800d501
 800d478:	0800d529 	.word	0x0800d529
 800d47c:	0800d529 	.word	0x0800d529
 800d480:	0800d529 	.word	0x0800d529
 800d484:	0800d529 	.word	0x0800d529
 800d488:	0800d529 	.word	0x0800d529
 800d48c:	0800d529 	.word	0x0800d529
 800d490:	0800d529 	.word	0x0800d529
 800d494:	0800d509 	.word	0x0800d509
 800d498:	0800d529 	.word	0x0800d529
 800d49c:	0800d529 	.word	0x0800d529
 800d4a0:	0800d529 	.word	0x0800d529
 800d4a4:	0800d529 	.word	0x0800d529
 800d4a8:	0800d529 	.word	0x0800d529
 800d4ac:	0800d529 	.word	0x0800d529
 800d4b0:	0800d529 	.word	0x0800d529
 800d4b4:	0800d511 	.word	0x0800d511
 800d4b8:	0800d529 	.word	0x0800d529
 800d4bc:	0800d529 	.word	0x0800d529
 800d4c0:	0800d529 	.word	0x0800d529
 800d4c4:	0800d529 	.word	0x0800d529
 800d4c8:	0800d529 	.word	0x0800d529
 800d4cc:	0800d529 	.word	0x0800d529
 800d4d0:	0800d529 	.word	0x0800d529
 800d4d4:	0800d519 	.word	0x0800d519
 800d4d8:	0800d529 	.word	0x0800d529
 800d4dc:	0800d529 	.word	0x0800d529
 800d4e0:	0800d529 	.word	0x0800d529
 800d4e4:	0800d529 	.word	0x0800d529
 800d4e8:	0800d529 	.word	0x0800d529
 800d4ec:	0800d529 	.word	0x0800d529
 800d4f0:	0800d529 	.word	0x0800d529
 800d4f4:	0800d521 	.word	0x0800d521
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4fe:	e0d6      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d500:	2304      	movs	r3, #4
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d506:	e0d2      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d508:	2308      	movs	r3, #8
 800d50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d50e:	e0ce      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d510:	2310      	movs	r3, #16
 800d512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d516:	e0ca      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d518:	2320      	movs	r3, #32
 800d51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d51e:	e0c6      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d520:	2340      	movs	r3, #64	@ 0x40
 800d522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d526:	e0c2      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d528:	2380      	movs	r3, #128	@ 0x80
 800d52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d52e:	e0be      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d530:	40011400 	.word	0x40011400
 800d534:	58024400 	.word	0x58024400
 800d538:	40007800 	.word	0x40007800
 800d53c:	40007c00 	.word	0x40007c00
 800d540:	40011800 	.word	0x40011800
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4aad      	ldr	r2, [pc, #692]	@ (800d800 <UART_SetConfig+0x900>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d176      	bne.n	800d63c <UART_SetConfig+0x73c>
 800d54e:	4bad      	ldr	r3, [pc, #692]	@ (800d804 <UART_SetConfig+0x904>)
 800d550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d552:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d556:	2b28      	cmp	r3, #40	@ 0x28
 800d558:	d86c      	bhi.n	800d634 <UART_SetConfig+0x734>
 800d55a:	a201      	add	r2, pc, #4	@ (adr r2, 800d560 <UART_SetConfig+0x660>)
 800d55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d560:	0800d605 	.word	0x0800d605
 800d564:	0800d635 	.word	0x0800d635
 800d568:	0800d635 	.word	0x0800d635
 800d56c:	0800d635 	.word	0x0800d635
 800d570:	0800d635 	.word	0x0800d635
 800d574:	0800d635 	.word	0x0800d635
 800d578:	0800d635 	.word	0x0800d635
 800d57c:	0800d635 	.word	0x0800d635
 800d580:	0800d60d 	.word	0x0800d60d
 800d584:	0800d635 	.word	0x0800d635
 800d588:	0800d635 	.word	0x0800d635
 800d58c:	0800d635 	.word	0x0800d635
 800d590:	0800d635 	.word	0x0800d635
 800d594:	0800d635 	.word	0x0800d635
 800d598:	0800d635 	.word	0x0800d635
 800d59c:	0800d635 	.word	0x0800d635
 800d5a0:	0800d615 	.word	0x0800d615
 800d5a4:	0800d635 	.word	0x0800d635
 800d5a8:	0800d635 	.word	0x0800d635
 800d5ac:	0800d635 	.word	0x0800d635
 800d5b0:	0800d635 	.word	0x0800d635
 800d5b4:	0800d635 	.word	0x0800d635
 800d5b8:	0800d635 	.word	0x0800d635
 800d5bc:	0800d635 	.word	0x0800d635
 800d5c0:	0800d61d 	.word	0x0800d61d
 800d5c4:	0800d635 	.word	0x0800d635
 800d5c8:	0800d635 	.word	0x0800d635
 800d5cc:	0800d635 	.word	0x0800d635
 800d5d0:	0800d635 	.word	0x0800d635
 800d5d4:	0800d635 	.word	0x0800d635
 800d5d8:	0800d635 	.word	0x0800d635
 800d5dc:	0800d635 	.word	0x0800d635
 800d5e0:	0800d625 	.word	0x0800d625
 800d5e4:	0800d635 	.word	0x0800d635
 800d5e8:	0800d635 	.word	0x0800d635
 800d5ec:	0800d635 	.word	0x0800d635
 800d5f0:	0800d635 	.word	0x0800d635
 800d5f4:	0800d635 	.word	0x0800d635
 800d5f8:	0800d635 	.word	0x0800d635
 800d5fc:	0800d635 	.word	0x0800d635
 800d600:	0800d62d 	.word	0x0800d62d
 800d604:	2301      	movs	r3, #1
 800d606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60a:	e050      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d60c:	2304      	movs	r3, #4
 800d60e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d612:	e04c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d614:	2308      	movs	r3, #8
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e048      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d61c:	2310      	movs	r3, #16
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e044      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d624:	2320      	movs	r3, #32
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e040      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d62c:	2340      	movs	r3, #64	@ 0x40
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e03c      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d634:	2380      	movs	r3, #128	@ 0x80
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e038      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a71      	ldr	r2, [pc, #452]	@ (800d808 <UART_SetConfig+0x908>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d130      	bne.n	800d6a8 <UART_SetConfig+0x7a8>
 800d646:	4b6f      	ldr	r3, [pc, #444]	@ (800d804 <UART_SetConfig+0x904>)
 800d648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	2b05      	cmp	r3, #5
 800d650:	d826      	bhi.n	800d6a0 <UART_SetConfig+0x7a0>
 800d652:	a201      	add	r2, pc, #4	@ (adr r2, 800d658 <UART_SetConfig+0x758>)
 800d654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d658:	0800d671 	.word	0x0800d671
 800d65c:	0800d679 	.word	0x0800d679
 800d660:	0800d681 	.word	0x0800d681
 800d664:	0800d689 	.word	0x0800d689
 800d668:	0800d691 	.word	0x0800d691
 800d66c:	0800d699 	.word	0x0800d699
 800d670:	2302      	movs	r3, #2
 800d672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d676:	e01a      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d678:	2304      	movs	r3, #4
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67e:	e016      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d680:	2308      	movs	r3, #8
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d686:	e012      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d688:	2310      	movs	r3, #16
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e00e      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d690:	2320      	movs	r3, #32
 800d692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d696:	e00a      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d698:	2340      	movs	r3, #64	@ 0x40
 800d69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69e:	e006      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d6a0:	2380      	movs	r3, #128	@ 0x80
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6a6:	e002      	b.n	800d6ae <UART_SetConfig+0x7ae>
 800d6a8:	2380      	movs	r3, #128	@ 0x80
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a55      	ldr	r2, [pc, #340]	@ (800d808 <UART_SetConfig+0x908>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	f040 80f8 	bne.w	800d8aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d6ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6be:	2b20      	cmp	r3, #32
 800d6c0:	dc46      	bgt.n	800d750 <UART_SetConfig+0x850>
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	db75      	blt.n	800d7b2 <UART_SetConfig+0x8b2>
 800d6c6:	3b02      	subs	r3, #2
 800d6c8:	2b1e      	cmp	r3, #30
 800d6ca:	d872      	bhi.n	800d7b2 <UART_SetConfig+0x8b2>
 800d6cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d6d4 <UART_SetConfig+0x7d4>)
 800d6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d2:	bf00      	nop
 800d6d4:	0800d757 	.word	0x0800d757
 800d6d8:	0800d7b3 	.word	0x0800d7b3
 800d6dc:	0800d75f 	.word	0x0800d75f
 800d6e0:	0800d7b3 	.word	0x0800d7b3
 800d6e4:	0800d7b3 	.word	0x0800d7b3
 800d6e8:	0800d7b3 	.word	0x0800d7b3
 800d6ec:	0800d76f 	.word	0x0800d76f
 800d6f0:	0800d7b3 	.word	0x0800d7b3
 800d6f4:	0800d7b3 	.word	0x0800d7b3
 800d6f8:	0800d7b3 	.word	0x0800d7b3
 800d6fc:	0800d7b3 	.word	0x0800d7b3
 800d700:	0800d7b3 	.word	0x0800d7b3
 800d704:	0800d7b3 	.word	0x0800d7b3
 800d708:	0800d7b3 	.word	0x0800d7b3
 800d70c:	0800d77f 	.word	0x0800d77f
 800d710:	0800d7b3 	.word	0x0800d7b3
 800d714:	0800d7b3 	.word	0x0800d7b3
 800d718:	0800d7b3 	.word	0x0800d7b3
 800d71c:	0800d7b3 	.word	0x0800d7b3
 800d720:	0800d7b3 	.word	0x0800d7b3
 800d724:	0800d7b3 	.word	0x0800d7b3
 800d728:	0800d7b3 	.word	0x0800d7b3
 800d72c:	0800d7b3 	.word	0x0800d7b3
 800d730:	0800d7b3 	.word	0x0800d7b3
 800d734:	0800d7b3 	.word	0x0800d7b3
 800d738:	0800d7b3 	.word	0x0800d7b3
 800d73c:	0800d7b3 	.word	0x0800d7b3
 800d740:	0800d7b3 	.word	0x0800d7b3
 800d744:	0800d7b3 	.word	0x0800d7b3
 800d748:	0800d7b3 	.word	0x0800d7b3
 800d74c:	0800d7a5 	.word	0x0800d7a5
 800d750:	2b40      	cmp	r3, #64	@ 0x40
 800d752:	d02a      	beq.n	800d7aa <UART_SetConfig+0x8aa>
 800d754:	e02d      	b.n	800d7b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d756:	f7fb fdbb 	bl	80092d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d75a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d75c:	e02f      	b.n	800d7be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d75e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d762:	4618      	mov	r0, r3
 800d764:	f7fb fdca 	bl	80092fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d76c:	e027      	b.n	800d7be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d76e:	f107 0318 	add.w	r3, r7, #24
 800d772:	4618      	mov	r0, r3
 800d774:	f7fb ff16 	bl	80095a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d77c:	e01f      	b.n	800d7be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d77e:	4b21      	ldr	r3, [pc, #132]	@ (800d804 <UART_SetConfig+0x904>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 0320 	and.w	r3, r3, #32
 800d786:	2b00      	cmp	r3, #0
 800d788:	d009      	beq.n	800d79e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d78a:	4b1e      	ldr	r3, [pc, #120]	@ (800d804 <UART_SetConfig+0x904>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	08db      	lsrs	r3, r3, #3
 800d790:	f003 0303 	and.w	r3, r3, #3
 800d794:	4a1d      	ldr	r2, [pc, #116]	@ (800d80c <UART_SetConfig+0x90c>)
 800d796:	fa22 f303 	lsr.w	r3, r2, r3
 800d79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d79c:	e00f      	b.n	800d7be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d79e:	4b1b      	ldr	r3, [pc, #108]	@ (800d80c <UART_SetConfig+0x90c>)
 800d7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7a2:	e00c      	b.n	800d7be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d810 <UART_SetConfig+0x910>)
 800d7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7a8:	e009      	b.n	800d7be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7b0:	e005      	b.n	800d7be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 81ee 	beq.w	800dba2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ca:	4a12      	ldr	r2, [pc, #72]	@ (800d814 <UART_SetConfig+0x914>)
 800d7cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	4613      	mov	r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	4413      	add	r3, r2
 800d7e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d305      	bcc.n	800d7f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d7f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d910      	bls.n	800d818 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d7fc:	e1d1      	b.n	800dba2 <UART_SetConfig+0xca2>
 800d7fe:	bf00      	nop
 800d800:	40011c00 	.word	0x40011c00
 800d804:	58024400 	.word	0x58024400
 800d808:	58000c00 	.word	0x58000c00
 800d80c:	03d09000 	.word	0x03d09000
 800d810:	003d0900 	.word	0x003d0900
 800d814:	0800f0d8 	.word	0x0800f0d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d81a:	2200      	movs	r2, #0
 800d81c:	60bb      	str	r3, [r7, #8]
 800d81e:	60fa      	str	r2, [r7, #12]
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d824:	4ac0      	ldr	r2, [pc, #768]	@ (800db28 <UART_SetConfig+0xc28>)
 800d826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	2200      	movs	r2, #0
 800d82e:	603b      	str	r3, [r7, #0]
 800d830:	607a      	str	r2, [r7, #4]
 800d832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d836:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d83a:	f7f2 fd69 	bl	8000310 <__aeabi_uldivmod>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	4610      	mov	r0, r2
 800d844:	4619      	mov	r1, r3
 800d846:	f04f 0200 	mov.w	r2, #0
 800d84a:	f04f 0300 	mov.w	r3, #0
 800d84e:	020b      	lsls	r3, r1, #8
 800d850:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d854:	0202      	lsls	r2, r0, #8
 800d856:	6979      	ldr	r1, [r7, #20]
 800d858:	6849      	ldr	r1, [r1, #4]
 800d85a:	0849      	lsrs	r1, r1, #1
 800d85c:	2000      	movs	r0, #0
 800d85e:	460c      	mov	r4, r1
 800d860:	4605      	mov	r5, r0
 800d862:	eb12 0804 	adds.w	r8, r2, r4
 800d866:	eb43 0905 	adc.w	r9, r3, r5
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	469a      	mov	sl, r3
 800d872:	4693      	mov	fp, r2
 800d874:	4652      	mov	r2, sl
 800d876:	465b      	mov	r3, fp
 800d878:	4640      	mov	r0, r8
 800d87a:	4649      	mov	r1, r9
 800d87c:	f7f2 fd48 	bl	8000310 <__aeabi_uldivmod>
 800d880:	4602      	mov	r2, r0
 800d882:	460b      	mov	r3, r1
 800d884:	4613      	mov	r3, r2
 800d886:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d88a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d88e:	d308      	bcc.n	800d8a2 <UART_SetConfig+0x9a2>
 800d890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d896:	d204      	bcs.n	800d8a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d89e:	60da      	str	r2, [r3, #12]
 800d8a0:	e17f      	b.n	800dba2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d8a8:	e17b      	b.n	800dba2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d8b2:	f040 80bd 	bne.w	800da30 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d8b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d8ba:	2b20      	cmp	r3, #32
 800d8bc:	dc48      	bgt.n	800d950 <UART_SetConfig+0xa50>
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	db7b      	blt.n	800d9ba <UART_SetConfig+0xaba>
 800d8c2:	2b20      	cmp	r3, #32
 800d8c4:	d879      	bhi.n	800d9ba <UART_SetConfig+0xaba>
 800d8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d8cc <UART_SetConfig+0x9cc>)
 800d8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8cc:	0800d957 	.word	0x0800d957
 800d8d0:	0800d95f 	.word	0x0800d95f
 800d8d4:	0800d9bb 	.word	0x0800d9bb
 800d8d8:	0800d9bb 	.word	0x0800d9bb
 800d8dc:	0800d967 	.word	0x0800d967
 800d8e0:	0800d9bb 	.word	0x0800d9bb
 800d8e4:	0800d9bb 	.word	0x0800d9bb
 800d8e8:	0800d9bb 	.word	0x0800d9bb
 800d8ec:	0800d977 	.word	0x0800d977
 800d8f0:	0800d9bb 	.word	0x0800d9bb
 800d8f4:	0800d9bb 	.word	0x0800d9bb
 800d8f8:	0800d9bb 	.word	0x0800d9bb
 800d8fc:	0800d9bb 	.word	0x0800d9bb
 800d900:	0800d9bb 	.word	0x0800d9bb
 800d904:	0800d9bb 	.word	0x0800d9bb
 800d908:	0800d9bb 	.word	0x0800d9bb
 800d90c:	0800d987 	.word	0x0800d987
 800d910:	0800d9bb 	.word	0x0800d9bb
 800d914:	0800d9bb 	.word	0x0800d9bb
 800d918:	0800d9bb 	.word	0x0800d9bb
 800d91c:	0800d9bb 	.word	0x0800d9bb
 800d920:	0800d9bb 	.word	0x0800d9bb
 800d924:	0800d9bb 	.word	0x0800d9bb
 800d928:	0800d9bb 	.word	0x0800d9bb
 800d92c:	0800d9bb 	.word	0x0800d9bb
 800d930:	0800d9bb 	.word	0x0800d9bb
 800d934:	0800d9bb 	.word	0x0800d9bb
 800d938:	0800d9bb 	.word	0x0800d9bb
 800d93c:	0800d9bb 	.word	0x0800d9bb
 800d940:	0800d9bb 	.word	0x0800d9bb
 800d944:	0800d9bb 	.word	0x0800d9bb
 800d948:	0800d9bb 	.word	0x0800d9bb
 800d94c:	0800d9ad 	.word	0x0800d9ad
 800d950:	2b40      	cmp	r3, #64	@ 0x40
 800d952:	d02e      	beq.n	800d9b2 <UART_SetConfig+0xab2>
 800d954:	e031      	b.n	800d9ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d956:	f7fa faef 	bl	8007f38 <HAL_RCC_GetPCLK1Freq>
 800d95a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d95c:	e033      	b.n	800d9c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d95e:	f7fa fb01 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 800d962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d964:	e02f      	b.n	800d9c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fb fcc6 	bl	80092fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d974:	e027      	b.n	800d9c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d976:	f107 0318 	add.w	r3, r7, #24
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fb fe12 	bl	80095a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d984:	e01f      	b.n	800d9c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d986:	4b69      	ldr	r3, [pc, #420]	@ (800db2c <UART_SetConfig+0xc2c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0320 	and.w	r3, r3, #32
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d009      	beq.n	800d9a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d992:	4b66      	ldr	r3, [pc, #408]	@ (800db2c <UART_SetConfig+0xc2c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	08db      	lsrs	r3, r3, #3
 800d998:	f003 0303 	and.w	r3, r3, #3
 800d99c:	4a64      	ldr	r2, [pc, #400]	@ (800db30 <UART_SetConfig+0xc30>)
 800d99e:	fa22 f303 	lsr.w	r3, r2, r3
 800d9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9a4:	e00f      	b.n	800d9c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d9a6:	4b62      	ldr	r3, [pc, #392]	@ (800db30 <UART_SetConfig+0xc30>)
 800d9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9aa:	e00c      	b.n	800d9c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9ac:	4b61      	ldr	r3, [pc, #388]	@ (800db34 <UART_SetConfig+0xc34>)
 800d9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9b0:	e009      	b.n	800d9c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9b8:	e005      	b.n	800d9c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d9c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	f000 80ea 	beq.w	800dba2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d2:	4a55      	ldr	r2, [pc, #340]	@ (800db28 <UART_SetConfig+0xc28>)
 800d9d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9d8:	461a      	mov	r2, r3
 800d9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9e0:	005a      	lsls	r2, r3, #1
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	085b      	lsrs	r3, r3, #1
 800d9e8:	441a      	add	r2, r3
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f6:	2b0f      	cmp	r3, #15
 800d9f8:	d916      	bls.n	800da28 <UART_SetConfig+0xb28>
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da00:	d212      	bcs.n	800da28 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da04:	b29b      	uxth	r3, r3
 800da06:	f023 030f 	bic.w	r3, r3, #15
 800da0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0e:	085b      	lsrs	r3, r3, #1
 800da10:	b29b      	uxth	r3, r3
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	b29a      	uxth	r2, r3
 800da18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da1a:	4313      	orrs	r3, r2
 800da1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800da24:	60da      	str	r2, [r3, #12]
 800da26:	e0bc      	b.n	800dba2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800da2e:	e0b8      	b.n	800dba2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da34:	2b20      	cmp	r3, #32
 800da36:	dc4b      	bgt.n	800dad0 <UART_SetConfig+0xbd0>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f2c0 8087 	blt.w	800db4c <UART_SetConfig+0xc4c>
 800da3e:	2b20      	cmp	r3, #32
 800da40:	f200 8084 	bhi.w	800db4c <UART_SetConfig+0xc4c>
 800da44:	a201      	add	r2, pc, #4	@ (adr r2, 800da4c <UART_SetConfig+0xb4c>)
 800da46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4a:	bf00      	nop
 800da4c:	0800dad7 	.word	0x0800dad7
 800da50:	0800dadf 	.word	0x0800dadf
 800da54:	0800db4d 	.word	0x0800db4d
 800da58:	0800db4d 	.word	0x0800db4d
 800da5c:	0800dae7 	.word	0x0800dae7
 800da60:	0800db4d 	.word	0x0800db4d
 800da64:	0800db4d 	.word	0x0800db4d
 800da68:	0800db4d 	.word	0x0800db4d
 800da6c:	0800daf7 	.word	0x0800daf7
 800da70:	0800db4d 	.word	0x0800db4d
 800da74:	0800db4d 	.word	0x0800db4d
 800da78:	0800db4d 	.word	0x0800db4d
 800da7c:	0800db4d 	.word	0x0800db4d
 800da80:	0800db4d 	.word	0x0800db4d
 800da84:	0800db4d 	.word	0x0800db4d
 800da88:	0800db4d 	.word	0x0800db4d
 800da8c:	0800db07 	.word	0x0800db07
 800da90:	0800db4d 	.word	0x0800db4d
 800da94:	0800db4d 	.word	0x0800db4d
 800da98:	0800db4d 	.word	0x0800db4d
 800da9c:	0800db4d 	.word	0x0800db4d
 800daa0:	0800db4d 	.word	0x0800db4d
 800daa4:	0800db4d 	.word	0x0800db4d
 800daa8:	0800db4d 	.word	0x0800db4d
 800daac:	0800db4d 	.word	0x0800db4d
 800dab0:	0800db4d 	.word	0x0800db4d
 800dab4:	0800db4d 	.word	0x0800db4d
 800dab8:	0800db4d 	.word	0x0800db4d
 800dabc:	0800db4d 	.word	0x0800db4d
 800dac0:	0800db4d 	.word	0x0800db4d
 800dac4:	0800db4d 	.word	0x0800db4d
 800dac8:	0800db4d 	.word	0x0800db4d
 800dacc:	0800db3f 	.word	0x0800db3f
 800dad0:	2b40      	cmp	r3, #64	@ 0x40
 800dad2:	d037      	beq.n	800db44 <UART_SetConfig+0xc44>
 800dad4:	e03a      	b.n	800db4c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dad6:	f7fa fa2f 	bl	8007f38 <HAL_RCC_GetPCLK1Freq>
 800dada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dadc:	e03c      	b.n	800db58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dade:	f7fa fa41 	bl	8007f64 <HAL_RCC_GetPCLK2Freq>
 800dae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dae4:	e038      	b.n	800db58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800daea:	4618      	mov	r0, r3
 800daec:	f7fb fc06 	bl	80092fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800daf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daf4:	e030      	b.n	800db58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daf6:	f107 0318 	add.w	r3, r7, #24
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fb fd52 	bl	80095a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db00:	69fb      	ldr	r3, [r7, #28]
 800db02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db04:	e028      	b.n	800db58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db06:	4b09      	ldr	r3, [pc, #36]	@ (800db2c <UART_SetConfig+0xc2c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f003 0320 	and.w	r3, r3, #32
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d012      	beq.n	800db38 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db12:	4b06      	ldr	r3, [pc, #24]	@ (800db2c <UART_SetConfig+0xc2c>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	08db      	lsrs	r3, r3, #3
 800db18:	f003 0303 	and.w	r3, r3, #3
 800db1c:	4a04      	ldr	r2, [pc, #16]	@ (800db30 <UART_SetConfig+0xc30>)
 800db1e:	fa22 f303 	lsr.w	r3, r2, r3
 800db22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db24:	e018      	b.n	800db58 <UART_SetConfig+0xc58>
 800db26:	bf00      	nop
 800db28:	0800f0d8 	.word	0x0800f0d8
 800db2c:	58024400 	.word	0x58024400
 800db30:	03d09000 	.word	0x03d09000
 800db34:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800db38:	4b24      	ldr	r3, [pc, #144]	@ (800dbcc <UART_SetConfig+0xccc>)
 800db3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db3c:	e00c      	b.n	800db58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db3e:	4b24      	ldr	r3, [pc, #144]	@ (800dbd0 <UART_SetConfig+0xcd0>)
 800db40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db42:	e009      	b.n	800db58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db4a:	e005      	b.n	800db58 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800db4c:	2300      	movs	r3, #0
 800db4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800db56:	bf00      	nop
    }

    if (pclk != 0U)
 800db58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d021      	beq.n	800dba2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db62:	4a1c      	ldr	r2, [pc, #112]	@ (800dbd4 <UART_SetConfig+0xcd4>)
 800db64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db68:	461a      	mov	r2, r3
 800db6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db6c:	fbb3 f2f2 	udiv	r2, r3, r2
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	085b      	lsrs	r3, r3, #1
 800db76:	441a      	add	r2, r3
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db80:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db84:	2b0f      	cmp	r3, #15
 800db86:	d909      	bls.n	800db9c <UART_SetConfig+0xc9c>
 800db88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db8e:	d205      	bcs.n	800db9c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db92:	b29a      	uxth	r2, r3
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	60da      	str	r2, [r3, #12]
 800db9a:	e002      	b.n	800dba2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dbbe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3748      	adds	r7, #72	@ 0x48
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbcc:	03d09000 	.word	0x03d09000
 800dbd0:	003d0900 	.word	0x003d0900
 800dbd4:	0800f0d8 	.word	0x0800f0d8

0800dbd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe4:	f003 0308 	and.w	r3, r3, #8
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00a      	beq.n	800dc02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	430a      	orrs	r2, r1
 800dc00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00a      	beq.n	800dc24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	430a      	orrs	r2, r1
 800dc22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc28:	f003 0302 	and.w	r3, r3, #2
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00a      	beq.n	800dc46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	430a      	orrs	r2, r1
 800dc44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00a      	beq.n	800dc68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	430a      	orrs	r2, r1
 800dc66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00a      	beq.n	800dc8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	430a      	orrs	r2, r1
 800dc88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc8e:	f003 0320 	and.w	r3, r3, #32
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00a      	beq.n	800dcac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	430a      	orrs	r2, r1
 800dcaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d01a      	beq.n	800dcee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcd6:	d10a      	bne.n	800dcee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	430a      	orrs	r2, r1
 800dcec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	430a      	orrs	r2, r1
 800dd0e:	605a      	str	r2, [r3, #4]
  }
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b098      	sub	sp, #96	@ 0x60
 800dd20:	af02      	add	r7, sp, #8
 800dd22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd2c:	f7f6 f826 	bl	8003d7c <HAL_GetTick>
 800dd30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 0308 	and.w	r3, r3, #8
 800dd3c:	2b08      	cmp	r3, #8
 800dd3e:	d12f      	bne.n	800dda0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f88e 	bl	800de70 <UART_WaitOnFlagUntilTimeout>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d022      	beq.n	800dda0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd62:	e853 3f00 	ldrex	r3, [r3]
 800dd66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd6e:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	461a      	mov	r2, r3
 800dd76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd78:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd80:	e841 2300 	strex	r3, r2, [r1]
 800dd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1e6      	bne.n	800dd5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e063      	b.n	800de68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f003 0304 	and.w	r3, r3, #4
 800ddaa:	2b04      	cmp	r3, #4
 800ddac:	d149      	bne.n	800de42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f857 	bl	800de70 <UART_WaitOnFlagUntilTimeout>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d03c      	beq.n	800de42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd0:	e853 3f00 	ldrex	r3, [r3]
 800ddd4:	623b      	str	r3, [r7, #32]
   return(result);
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dde6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dde8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddee:	e841 2300 	strex	r3, r2, [r1]
 800ddf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ddf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1e6      	bne.n	800ddc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	e853 3f00 	ldrex	r3, [r3]
 800de08:	60fb      	str	r3, [r7, #12]
   return(result);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f023 0301 	bic.w	r3, r3, #1
 800de10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3308      	adds	r3, #8
 800de18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de1a:	61fa      	str	r2, [r7, #28]
 800de1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1e:	69b9      	ldr	r1, [r7, #24]
 800de20:	69fa      	ldr	r2, [r7, #28]
 800de22:	e841 2300 	strex	r3, r2, [r1]
 800de26:	617b      	str	r3, [r7, #20]
   return(result);
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1e5      	bne.n	800ddfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2220      	movs	r2, #32
 800de32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de3e:	2303      	movs	r3, #3
 800de40:	e012      	b.n	800de68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2220      	movs	r2, #32
 800de46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2220      	movs	r2, #32
 800de4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2200      	movs	r2, #0
 800de5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de66:	2300      	movs	r3, #0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3758      	adds	r7, #88	@ 0x58
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	603b      	str	r3, [r7, #0]
 800de7c:	4613      	mov	r3, r2
 800de7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de80:	e04f      	b.n	800df22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de88:	d04b      	beq.n	800df22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de8a:	f7f5 ff77 	bl	8003d7c <HAL_GetTick>
 800de8e:	4602      	mov	r2, r0
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	69ba      	ldr	r2, [r7, #24]
 800de96:	429a      	cmp	r2, r3
 800de98:	d302      	bcc.n	800dea0 <UART_WaitOnFlagUntilTimeout+0x30>
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e04e      	b.n	800df42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f003 0304 	and.w	r3, r3, #4
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d037      	beq.n	800df22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b80      	cmp	r3, #128	@ 0x80
 800deb6:	d034      	beq.n	800df22 <UART_WaitOnFlagUntilTimeout+0xb2>
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	2b40      	cmp	r3, #64	@ 0x40
 800debc:	d031      	beq.n	800df22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	69db      	ldr	r3, [r3, #28]
 800dec4:	f003 0308 	and.w	r3, r3, #8
 800dec8:	2b08      	cmp	r3, #8
 800deca:	d110      	bne.n	800deee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2208      	movs	r2, #8
 800ded2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 f879 	bl	800dfcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2208      	movs	r2, #8
 800dede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e029      	b.n	800df42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800def8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800defc:	d111      	bne.n	800df22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f000 f85f 	bl	800dfcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2220      	movs	r2, #32
 800df12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2200      	movs	r2, #0
 800df1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800df1e:	2303      	movs	r3, #3
 800df20:	e00f      	b.n	800df42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	69da      	ldr	r2, [r3, #28]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	4013      	ands	r3, r2
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	429a      	cmp	r2, r3
 800df30:	bf0c      	ite	eq
 800df32:	2301      	moveq	r3, #1
 800df34:	2300      	movne	r3, #0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	461a      	mov	r2, r3
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d0a0      	beq.n	800de82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800df4a:	b480      	push	{r7}
 800df4c:	b08f      	sub	sp, #60	@ 0x3c
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	6a3b      	ldr	r3, [r7, #32]
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800df66:	637b      	str	r3, [r7, #52]	@ 0x34
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df72:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df78:	e841 2300 	strex	r3, r2, [r1]
 800df7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1e6      	bne.n	800df52 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3308      	adds	r3, #8
 800df8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	e853 3f00 	ldrex	r3, [r3]
 800df92:	60bb      	str	r3, [r7, #8]
   return(result);
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800df9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3308      	adds	r3, #8
 800dfa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfa4:	61ba      	str	r2, [r7, #24]
 800dfa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa8:	6979      	ldr	r1, [r7, #20]
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	e841 2300 	strex	r3, r2, [r1]
 800dfb0:	613b      	str	r3, [r7, #16]
   return(result);
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e5      	bne.n	800df84 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2220      	movs	r2, #32
 800dfbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dfc0:	bf00      	nop
 800dfc2:	373c      	adds	r7, #60	@ 0x3c
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b095      	sub	sp, #84	@ 0x54
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfdc:	e853 3f00 	ldrex	r3, [r3]
 800dfe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dfe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dff2:	643b      	str	r3, [r7, #64]	@ 0x40
 800dff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dffa:	e841 2300 	strex	r3, r2, [r1]
 800dffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1e6      	bne.n	800dfd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3308      	adds	r3, #8
 800e00c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	e853 3f00 	ldrex	r3, [r3]
 800e014:	61fb      	str	r3, [r7, #28]
   return(result);
 800e016:	69fa      	ldr	r2, [r7, #28]
 800e018:	4b1e      	ldr	r3, [pc, #120]	@ (800e094 <UART_EndRxTransfer+0xc8>)
 800e01a:	4013      	ands	r3, r2
 800e01c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3308      	adds	r3, #8
 800e024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e028:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e02c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e02e:	e841 2300 	strex	r3, r2, [r1]
 800e032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e5      	bne.n	800e006 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d118      	bne.n	800e074 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	e853 3f00 	ldrex	r3, [r3]
 800e04e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	f023 0310 	bic.w	r3, r3, #16
 800e056:	647b      	str	r3, [r7, #68]	@ 0x44
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e060:	61bb      	str	r3, [r7, #24]
 800e062:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e064:	6979      	ldr	r1, [r7, #20]
 800e066:	69ba      	ldr	r2, [r7, #24]
 800e068:	e841 2300 	strex	r3, r2, [r1]
 800e06c:	613b      	str	r3, [r7, #16]
   return(result);
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1e6      	bne.n	800e042 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2220      	movs	r2, #32
 800e078:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e088:	bf00      	nop
 800e08a:	3754      	adds	r7, #84	@ 0x54
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr
 800e094:	effffffe 	.word	0xeffffffe

0800e098 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b090      	sub	sp, #64	@ 0x40
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	69db      	ldr	r3, [r3, #28]
 800e0aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0ae:	d037      	beq.n	800e120 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	3308      	adds	r3, #8
 800e0be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c2:	e853 3f00 	ldrex	r3, [r3]
 800e0c6:	623b      	str	r3, [r7, #32]
   return(result);
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e0ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e0d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3308      	adds	r3, #8
 800e0d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800e0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0e0:	e841 2300 	strex	r3, r2, [r1]
 800e0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1e5      	bne.n	800e0b8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	e853 3f00 	ldrex	r3, [r3]
 800e0f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e100:	637b      	str	r3, [r7, #52]	@ 0x34
 800e102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	461a      	mov	r2, r3
 800e108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e10a:	61fb      	str	r3, [r7, #28]
 800e10c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e10e:	69b9      	ldr	r1, [r7, #24]
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	e841 2300 	strex	r3, r2, [r1]
 800e116:	617b      	str	r3, [r7, #20]
   return(result);
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1e6      	bne.n	800e0ec <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e11e:	e002      	b.n	800e126 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e120:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e122:	f7f3 fdbf 	bl	8001ca4 <HAL_UART_TxCpltCallback>
}
 800e126:	bf00      	nop
 800e128:	3740      	adds	r7, #64	@ 0x40
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e13a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f7fe febf 	bl	800cec0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e142:	bf00      	nop
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b086      	sub	sp, #24
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e156:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e15e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e166:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e172:	2b80      	cmp	r3, #128	@ 0x80
 800e174:	d109      	bne.n	800e18a <UART_DMAError+0x40>
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2b21      	cmp	r3, #33	@ 0x21
 800e17a:	d106      	bne.n	800e18a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e184:	6978      	ldr	r0, [r7, #20]
 800e186:	f7ff fee0 	bl	800df4a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e194:	2b40      	cmp	r3, #64	@ 0x40
 800e196:	d109      	bne.n	800e1ac <UART_DMAError+0x62>
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2b22      	cmp	r3, #34	@ 0x22
 800e19c:	d106      	bne.n	800e1ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e1a6:	6978      	ldr	r0, [r7, #20]
 800e1a8:	f7ff ff10 	bl	800dfcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1b2:	f043 0210 	orr.w	r2, r3, #16
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1bc:	6978      	ldr	r0, [r7, #20]
 800e1be:	f7fe fe89 	bl	800ced4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1c2:	bf00      	nop
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1e8:	68f8      	ldr	r0, [r7, #12]
 800e1ea:	f7fe fe73 	bl	800ced4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1ee:	bf00      	nop
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b088      	sub	sp, #32
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	e853 3f00 	ldrex	r3, [r3]
 800e20a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e212:	61fb      	str	r3, [r7, #28]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	61bb      	str	r3, [r7, #24]
 800e21e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e220:	6979      	ldr	r1, [r7, #20]
 800e222:	69ba      	ldr	r2, [r7, #24]
 800e224:	e841 2300 	strex	r3, r2, [r1]
 800e228:	613b      	str	r3, [r7, #16]
   return(result);
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e6      	bne.n	800e1fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2220      	movs	r2, #32
 800e234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7f3 fd30 	bl	8001ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e244:	bf00      	nop
 800e246:	3720      	adds	r7, #32
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e254:	bf00      	nop
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e268:	bf00      	nop
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr

0800e274 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e296:	2b01      	cmp	r3, #1
 800e298:	d101      	bne.n	800e29e <HAL_UARTEx_DisableFifoMode+0x16>
 800e29a:	2302      	movs	r3, #2
 800e29c:	e027      	b.n	800e2ee <HAL_UARTEx_DisableFifoMode+0x66>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2224      	movs	r2, #36	@ 0x24
 800e2aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f022 0201 	bic.w	r2, r2, #1
 800e2c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e2cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3714      	adds	r7, #20
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
 800e302:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d101      	bne.n	800e312 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e30e:	2302      	movs	r3, #2
 800e310:	e02d      	b.n	800e36e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2224      	movs	r2, #36	@ 0x24
 800e31e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f022 0201 	bic.w	r2, r2, #1
 800e338:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	683a      	ldr	r2, [r7, #0]
 800e34a:	430a      	orrs	r2, r1
 800e34c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f850 	bl	800e3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2220      	movs	r2, #32
 800e360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b084      	sub	sp, #16
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
 800e37e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e386:	2b01      	cmp	r3, #1
 800e388:	d101      	bne.n	800e38e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e38a:	2302      	movs	r3, #2
 800e38c:	e02d      	b.n	800e3ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2224      	movs	r2, #36	@ 0x24
 800e39a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f022 0201 	bic.w	r2, r2, #1
 800e3b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	683a      	ldr	r2, [r7, #0]
 800e3c6:	430a      	orrs	r2, r1
 800e3c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f812 	bl	800e3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2220      	movs	r2, #32
 800e3dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3710      	adds	r7, #16
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e400:	2b00      	cmp	r3, #0
 800e402:	d108      	bne.n	800e416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2201      	movs	r2, #1
 800e408:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e414:	e031      	b.n	800e47a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e416:	2310      	movs	r3, #16
 800e418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e41a:	2310      	movs	r3, #16
 800e41c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	0e5b      	lsrs	r3, r3, #25
 800e426:	b2db      	uxtb	r3, r3
 800e428:	f003 0307 	and.w	r3, r3, #7
 800e42c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	0f5b      	lsrs	r3, r3, #29
 800e436:	b2db      	uxtb	r3, r3
 800e438:	f003 0307 	and.w	r3, r3, #7
 800e43c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e43e:	7bbb      	ldrb	r3, [r7, #14]
 800e440:	7b3a      	ldrb	r2, [r7, #12]
 800e442:	4911      	ldr	r1, [pc, #68]	@ (800e488 <UARTEx_SetNbDataToProcess+0x94>)
 800e444:	5c8a      	ldrb	r2, [r1, r2]
 800e446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e44a:	7b3a      	ldrb	r2, [r7, #12]
 800e44c:	490f      	ldr	r1, [pc, #60]	@ (800e48c <UARTEx_SetNbDataToProcess+0x98>)
 800e44e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e450:	fb93 f3f2 	sdiv	r3, r3, r2
 800e454:	b29a      	uxth	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	7b7a      	ldrb	r2, [r7, #13]
 800e460:	4909      	ldr	r1, [pc, #36]	@ (800e488 <UARTEx_SetNbDataToProcess+0x94>)
 800e462:	5c8a      	ldrb	r2, [r1, r2]
 800e464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e468:	7b7a      	ldrb	r2, [r7, #13]
 800e46a:	4908      	ldr	r1, [pc, #32]	@ (800e48c <UARTEx_SetNbDataToProcess+0x98>)
 800e46c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e46e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e472:	b29a      	uxth	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e47a:	bf00      	nop
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	0800f0f0 	.word	0x0800f0f0
 800e48c:	0800f0f8 	.word	0x0800f0f8

0800e490 <malloc>:
 800e490:	4b02      	ldr	r3, [pc, #8]	@ (800e49c <malloc+0xc>)
 800e492:	4601      	mov	r1, r0
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	f000 b82d 	b.w	800e4f4 <_malloc_r>
 800e49a:	bf00      	nop
 800e49c:	2400001c 	.word	0x2400001c

0800e4a0 <free>:
 800e4a0:	4b02      	ldr	r3, [pc, #8]	@ (800e4ac <free+0xc>)
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	f000 b8f5 	b.w	800e694 <_free_r>
 800e4aa:	bf00      	nop
 800e4ac:	2400001c 	.word	0x2400001c

0800e4b0 <sbrk_aligned>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	4e0f      	ldr	r6, [pc, #60]	@ (800e4f0 <sbrk_aligned+0x40>)
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	6831      	ldr	r1, [r6, #0]
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	b911      	cbnz	r1, 800e4c2 <sbrk_aligned+0x12>
 800e4bc:	f000 f8ae 	bl	800e61c <_sbrk_r>
 800e4c0:	6030      	str	r0, [r6, #0]
 800e4c2:	4621      	mov	r1, r4
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f000 f8a9 	bl	800e61c <_sbrk_r>
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	d103      	bne.n	800e4d6 <sbrk_aligned+0x26>
 800e4ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}
 800e4d6:	1cc4      	adds	r4, r0, #3
 800e4d8:	f024 0403 	bic.w	r4, r4, #3
 800e4dc:	42a0      	cmp	r0, r4
 800e4de:	d0f8      	beq.n	800e4d2 <sbrk_aligned+0x22>
 800e4e0:	1a21      	subs	r1, r4, r0
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f000 f89a 	bl	800e61c <_sbrk_r>
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d1f2      	bne.n	800e4d2 <sbrk_aligned+0x22>
 800e4ec:	e7ef      	b.n	800e4ce <sbrk_aligned+0x1e>
 800e4ee:	bf00      	nop
 800e4f0:	240008c0 	.word	0x240008c0

0800e4f4 <_malloc_r>:
 800e4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4f8:	1ccd      	adds	r5, r1, #3
 800e4fa:	f025 0503 	bic.w	r5, r5, #3
 800e4fe:	3508      	adds	r5, #8
 800e500:	2d0c      	cmp	r5, #12
 800e502:	bf38      	it	cc
 800e504:	250c      	movcc	r5, #12
 800e506:	2d00      	cmp	r5, #0
 800e508:	4606      	mov	r6, r0
 800e50a:	db01      	blt.n	800e510 <_malloc_r+0x1c>
 800e50c:	42a9      	cmp	r1, r5
 800e50e:	d904      	bls.n	800e51a <_malloc_r+0x26>
 800e510:	230c      	movs	r3, #12
 800e512:	6033      	str	r3, [r6, #0]
 800e514:	2000      	movs	r0, #0
 800e516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e51a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e5f0 <_malloc_r+0xfc>
 800e51e:	f000 f869 	bl	800e5f4 <__malloc_lock>
 800e522:	f8d8 3000 	ldr.w	r3, [r8]
 800e526:	461c      	mov	r4, r3
 800e528:	bb44      	cbnz	r4, 800e57c <_malloc_r+0x88>
 800e52a:	4629      	mov	r1, r5
 800e52c:	4630      	mov	r0, r6
 800e52e:	f7ff ffbf 	bl	800e4b0 <sbrk_aligned>
 800e532:	1c43      	adds	r3, r0, #1
 800e534:	4604      	mov	r4, r0
 800e536:	d158      	bne.n	800e5ea <_malloc_r+0xf6>
 800e538:	f8d8 4000 	ldr.w	r4, [r8]
 800e53c:	4627      	mov	r7, r4
 800e53e:	2f00      	cmp	r7, #0
 800e540:	d143      	bne.n	800e5ca <_malloc_r+0xd6>
 800e542:	2c00      	cmp	r4, #0
 800e544:	d04b      	beq.n	800e5de <_malloc_r+0xea>
 800e546:	6823      	ldr	r3, [r4, #0]
 800e548:	4639      	mov	r1, r7
 800e54a:	4630      	mov	r0, r6
 800e54c:	eb04 0903 	add.w	r9, r4, r3
 800e550:	f000 f864 	bl	800e61c <_sbrk_r>
 800e554:	4581      	cmp	r9, r0
 800e556:	d142      	bne.n	800e5de <_malloc_r+0xea>
 800e558:	6821      	ldr	r1, [r4, #0]
 800e55a:	1a6d      	subs	r5, r5, r1
 800e55c:	4629      	mov	r1, r5
 800e55e:	4630      	mov	r0, r6
 800e560:	f7ff ffa6 	bl	800e4b0 <sbrk_aligned>
 800e564:	3001      	adds	r0, #1
 800e566:	d03a      	beq.n	800e5de <_malloc_r+0xea>
 800e568:	6823      	ldr	r3, [r4, #0]
 800e56a:	442b      	add	r3, r5
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	f8d8 3000 	ldr.w	r3, [r8]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	bb62      	cbnz	r2, 800e5d0 <_malloc_r+0xdc>
 800e576:	f8c8 7000 	str.w	r7, [r8]
 800e57a:	e00f      	b.n	800e59c <_malloc_r+0xa8>
 800e57c:	6822      	ldr	r2, [r4, #0]
 800e57e:	1b52      	subs	r2, r2, r5
 800e580:	d420      	bmi.n	800e5c4 <_malloc_r+0xd0>
 800e582:	2a0b      	cmp	r2, #11
 800e584:	d917      	bls.n	800e5b6 <_malloc_r+0xc2>
 800e586:	1961      	adds	r1, r4, r5
 800e588:	42a3      	cmp	r3, r4
 800e58a:	6025      	str	r5, [r4, #0]
 800e58c:	bf18      	it	ne
 800e58e:	6059      	strne	r1, [r3, #4]
 800e590:	6863      	ldr	r3, [r4, #4]
 800e592:	bf08      	it	eq
 800e594:	f8c8 1000 	streq.w	r1, [r8]
 800e598:	5162      	str	r2, [r4, r5]
 800e59a:	604b      	str	r3, [r1, #4]
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 f82f 	bl	800e600 <__malloc_unlock>
 800e5a2:	f104 000b 	add.w	r0, r4, #11
 800e5a6:	1d23      	adds	r3, r4, #4
 800e5a8:	f020 0007 	bic.w	r0, r0, #7
 800e5ac:	1ac2      	subs	r2, r0, r3
 800e5ae:	bf1c      	itt	ne
 800e5b0:	1a1b      	subne	r3, r3, r0
 800e5b2:	50a3      	strne	r3, [r4, r2]
 800e5b4:	e7af      	b.n	800e516 <_malloc_r+0x22>
 800e5b6:	6862      	ldr	r2, [r4, #4]
 800e5b8:	42a3      	cmp	r3, r4
 800e5ba:	bf0c      	ite	eq
 800e5bc:	f8c8 2000 	streq.w	r2, [r8]
 800e5c0:	605a      	strne	r2, [r3, #4]
 800e5c2:	e7eb      	b.n	800e59c <_malloc_r+0xa8>
 800e5c4:	4623      	mov	r3, r4
 800e5c6:	6864      	ldr	r4, [r4, #4]
 800e5c8:	e7ae      	b.n	800e528 <_malloc_r+0x34>
 800e5ca:	463c      	mov	r4, r7
 800e5cc:	687f      	ldr	r7, [r7, #4]
 800e5ce:	e7b6      	b.n	800e53e <_malloc_r+0x4a>
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	d1fb      	bne.n	800e5d0 <_malloc_r+0xdc>
 800e5d8:	2300      	movs	r3, #0
 800e5da:	6053      	str	r3, [r2, #4]
 800e5dc:	e7de      	b.n	800e59c <_malloc_r+0xa8>
 800e5de:	230c      	movs	r3, #12
 800e5e0:	6033      	str	r3, [r6, #0]
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f000 f80c 	bl	800e600 <__malloc_unlock>
 800e5e8:	e794      	b.n	800e514 <_malloc_r+0x20>
 800e5ea:	6005      	str	r5, [r0, #0]
 800e5ec:	e7d6      	b.n	800e59c <_malloc_r+0xa8>
 800e5ee:	bf00      	nop
 800e5f0:	240008c4 	.word	0x240008c4

0800e5f4 <__malloc_lock>:
 800e5f4:	4801      	ldr	r0, [pc, #4]	@ (800e5fc <__malloc_lock+0x8>)
 800e5f6:	f000 b84b 	b.w	800e690 <__retarget_lock_acquire_recursive>
 800e5fa:	bf00      	nop
 800e5fc:	24000a00 	.word	0x24000a00

0800e600 <__malloc_unlock>:
 800e600:	4801      	ldr	r0, [pc, #4]	@ (800e608 <__malloc_unlock+0x8>)
 800e602:	f000 b846 	b.w	800e692 <__retarget_lock_release_recursive>
 800e606:	bf00      	nop
 800e608:	24000a00 	.word	0x24000a00

0800e60c <memset>:
 800e60c:	4402      	add	r2, r0
 800e60e:	4603      	mov	r3, r0
 800e610:	4293      	cmp	r3, r2
 800e612:	d100      	bne.n	800e616 <memset+0xa>
 800e614:	4770      	bx	lr
 800e616:	f803 1b01 	strb.w	r1, [r3], #1
 800e61a:	e7f9      	b.n	800e610 <memset+0x4>

0800e61c <_sbrk_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4d06      	ldr	r5, [pc, #24]	@ (800e638 <_sbrk_r+0x1c>)
 800e620:	2300      	movs	r3, #0
 800e622:	4604      	mov	r4, r0
 800e624:	4608      	mov	r0, r1
 800e626:	602b      	str	r3, [r5, #0]
 800e628:	f7f5 f930 	bl	800388c <_sbrk>
 800e62c:	1c43      	adds	r3, r0, #1
 800e62e:	d102      	bne.n	800e636 <_sbrk_r+0x1a>
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	b103      	cbz	r3, 800e636 <_sbrk_r+0x1a>
 800e634:	6023      	str	r3, [r4, #0]
 800e636:	bd38      	pop	{r3, r4, r5, pc}
 800e638:	24000a04 	.word	0x24000a04

0800e63c <__errno>:
 800e63c:	4b01      	ldr	r3, [pc, #4]	@ (800e644 <__errno+0x8>)
 800e63e:	6818      	ldr	r0, [r3, #0]
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	2400001c 	.word	0x2400001c

0800e648 <__libc_init_array>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	4d0d      	ldr	r5, [pc, #52]	@ (800e680 <__libc_init_array+0x38>)
 800e64c:	4c0d      	ldr	r4, [pc, #52]	@ (800e684 <__libc_init_array+0x3c>)
 800e64e:	1b64      	subs	r4, r4, r5
 800e650:	10a4      	asrs	r4, r4, #2
 800e652:	2600      	movs	r6, #0
 800e654:	42a6      	cmp	r6, r4
 800e656:	d109      	bne.n	800e66c <__libc_init_array+0x24>
 800e658:	4d0b      	ldr	r5, [pc, #44]	@ (800e688 <__libc_init_array+0x40>)
 800e65a:	4c0c      	ldr	r4, [pc, #48]	@ (800e68c <__libc_init_array+0x44>)
 800e65c:	f000 fd24 	bl	800f0a8 <_init>
 800e660:	1b64      	subs	r4, r4, r5
 800e662:	10a4      	asrs	r4, r4, #2
 800e664:	2600      	movs	r6, #0
 800e666:	42a6      	cmp	r6, r4
 800e668:	d105      	bne.n	800e676 <__libc_init_array+0x2e>
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e670:	4798      	blx	r3
 800e672:	3601      	adds	r6, #1
 800e674:	e7ee      	b.n	800e654 <__libc_init_array+0xc>
 800e676:	f855 3b04 	ldr.w	r3, [r5], #4
 800e67a:	4798      	blx	r3
 800e67c:	3601      	adds	r6, #1
 800e67e:	e7f2      	b.n	800e666 <__libc_init_array+0x1e>
 800e680:	08011258 	.word	0x08011258
 800e684:	08011258 	.word	0x08011258
 800e688:	08011258 	.word	0x08011258
 800e68c:	0801125c 	.word	0x0801125c

0800e690 <__retarget_lock_acquire_recursive>:
 800e690:	4770      	bx	lr

0800e692 <__retarget_lock_release_recursive>:
 800e692:	4770      	bx	lr

0800e694 <_free_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4605      	mov	r5, r0
 800e698:	2900      	cmp	r1, #0
 800e69a:	d041      	beq.n	800e720 <_free_r+0x8c>
 800e69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a0:	1f0c      	subs	r4, r1, #4
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	bfb8      	it	lt
 800e6a6:	18e4      	addlt	r4, r4, r3
 800e6a8:	f7ff ffa4 	bl	800e5f4 <__malloc_lock>
 800e6ac:	4a1d      	ldr	r2, [pc, #116]	@ (800e724 <_free_r+0x90>)
 800e6ae:	6813      	ldr	r3, [r2, #0]
 800e6b0:	b933      	cbnz	r3, 800e6c0 <_free_r+0x2c>
 800e6b2:	6063      	str	r3, [r4, #4]
 800e6b4:	6014      	str	r4, [r2, #0]
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6bc:	f7ff bfa0 	b.w	800e600 <__malloc_unlock>
 800e6c0:	42a3      	cmp	r3, r4
 800e6c2:	d908      	bls.n	800e6d6 <_free_r+0x42>
 800e6c4:	6820      	ldr	r0, [r4, #0]
 800e6c6:	1821      	adds	r1, r4, r0
 800e6c8:	428b      	cmp	r3, r1
 800e6ca:	bf01      	itttt	eq
 800e6cc:	6819      	ldreq	r1, [r3, #0]
 800e6ce:	685b      	ldreq	r3, [r3, #4]
 800e6d0:	1809      	addeq	r1, r1, r0
 800e6d2:	6021      	streq	r1, [r4, #0]
 800e6d4:	e7ed      	b.n	800e6b2 <_free_r+0x1e>
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	b10b      	cbz	r3, 800e6e0 <_free_r+0x4c>
 800e6dc:	42a3      	cmp	r3, r4
 800e6de:	d9fa      	bls.n	800e6d6 <_free_r+0x42>
 800e6e0:	6811      	ldr	r1, [r2, #0]
 800e6e2:	1850      	adds	r0, r2, r1
 800e6e4:	42a0      	cmp	r0, r4
 800e6e6:	d10b      	bne.n	800e700 <_free_r+0x6c>
 800e6e8:	6820      	ldr	r0, [r4, #0]
 800e6ea:	4401      	add	r1, r0
 800e6ec:	1850      	adds	r0, r2, r1
 800e6ee:	4283      	cmp	r3, r0
 800e6f0:	6011      	str	r1, [r2, #0]
 800e6f2:	d1e0      	bne.n	800e6b6 <_free_r+0x22>
 800e6f4:	6818      	ldr	r0, [r3, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	6053      	str	r3, [r2, #4]
 800e6fa:	4408      	add	r0, r1
 800e6fc:	6010      	str	r0, [r2, #0]
 800e6fe:	e7da      	b.n	800e6b6 <_free_r+0x22>
 800e700:	d902      	bls.n	800e708 <_free_r+0x74>
 800e702:	230c      	movs	r3, #12
 800e704:	602b      	str	r3, [r5, #0]
 800e706:	e7d6      	b.n	800e6b6 <_free_r+0x22>
 800e708:	6820      	ldr	r0, [r4, #0]
 800e70a:	1821      	adds	r1, r4, r0
 800e70c:	428b      	cmp	r3, r1
 800e70e:	bf04      	itt	eq
 800e710:	6819      	ldreq	r1, [r3, #0]
 800e712:	685b      	ldreq	r3, [r3, #4]
 800e714:	6063      	str	r3, [r4, #4]
 800e716:	bf04      	itt	eq
 800e718:	1809      	addeq	r1, r1, r0
 800e71a:	6021      	streq	r1, [r4, #0]
 800e71c:	6054      	str	r4, [r2, #4]
 800e71e:	e7ca      	b.n	800e6b6 <_free_r+0x22>
 800e720:	bd38      	pop	{r3, r4, r5, pc}
 800e722:	bf00      	nop
 800e724:	240008c4 	.word	0x240008c4

0800e728 <log>:
 800e728:	b4f0      	push	{r4, r5, r6, r7}
 800e72a:	ee10 0a90 	vmov	r0, s1
 800e72e:	ee10 3a10 	vmov	r3, s0
 800e732:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e736:	429c      	cmp	r4, r3
 800e738:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 800e73c:	4c72      	ldr	r4, [pc, #456]	@ (800e908 <log+0x1e0>)
 800e73e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800e742:	418c      	sbcs	r4, r1
 800e744:	ed2d 8b02 	vpush	{d8}
 800e748:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e74c:	d35a      	bcc.n	800e804 <log+0xdc>
 800e74e:	4a6f      	ldr	r2, [pc, #444]	@ (800e90c <log+0x1e4>)
 800e750:	4290      	cmp	r0, r2
 800e752:	bf08      	it	eq
 800e754:	2b00      	cmpeq	r3, #0
 800e756:	f000 80c7 	beq.w	800e8e8 <log+0x1c0>
 800e75a:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e75e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e762:	4b6b      	ldr	r3, [pc, #428]	@ (800e910 <log+0x1e8>)
 800e764:	ee20 2b00 	vmul.f64	d2, d0, d0
 800e768:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800e76c:	ee20 4b02 	vmul.f64	d4, d0, d2
 800e770:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800e774:	eea6 7b00 	vfma.f64	d7, d6, d0
 800e778:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800e77c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800e780:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e784:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800e788:	eea5 6b00 	vfma.f64	d6, d5, d0
 800e78c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 800e790:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800e794:	eea5 6b02 	vfma.f64	d6, d5, d2
 800e798:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800e79c:	eea3 5b00 	vfma.f64	d5, d3, d0
 800e7a0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800e7a4:	eea3 5b02 	vfma.f64	d5, d3, d2
 800e7a8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 800e7ac:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e7b0:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e7b4:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800e7b8:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e7bc:	eeb0 2b47 	vmov.f64	d2, d7
 800e7c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 800e8f0 <log+0x1c8>
 800e7c4:	eeb0 6b40 	vmov.f64	d6, d0
 800e7c8:	eeb0 3b40 	vmov.f64	d3, d0
 800e7cc:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e7d0:	eea0 6b47 	vfms.f64	d6, d0, d7
 800e7d4:	ee30 8b46 	vsub.f64	d8, d0, d6
 800e7d8:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e7dc:	eea1 3b05 	vfma.f64	d3, d1, d5
 800e7e0:	ee30 7b43 	vsub.f64	d7, d0, d3
 800e7e4:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e7e8:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e7ec:	ee25 5b08 	vmul.f64	d5, d5, d8
 800e7f0:	eea5 7b00 	vfma.f64	d7, d5, d0
 800e7f4:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e7f8:	ee33 0b07 	vadd.f64	d0, d3, d7
 800e7fc:	ecbd 8b02 	vpop	{d8}
 800e800:	bcf0      	pop	{r4, r5, r6, r7}
 800e802:	4770      	bx	lr
 800e804:	f1a2 0410 	sub.w	r4, r2, #16
 800e808:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 800e80c:	428c      	cmp	r4, r1
 800e80e:	d923      	bls.n	800e858 <log+0x130>
 800e810:	18d9      	adds	r1, r3, r3
 800e812:	eb40 0400 	adc.w	r4, r0, r0
 800e816:	4321      	orrs	r1, r4
 800e818:	d105      	bne.n	800e826 <log+0xfe>
 800e81a:	ecbd 8b02 	vpop	{d8}
 800e81e:	2001      	movs	r0, #1
 800e820:	bcf0      	pop	{r4, r5, r6, r7}
 800e822:	f000 bbfd 	b.w	800f020 <__math_divzero>
 800e826:	493b      	ldr	r1, [pc, #236]	@ (800e914 <log+0x1ec>)
 800e828:	4288      	cmp	r0, r1
 800e82a:	bf08      	it	eq
 800e82c:	2b00      	cmpeq	r3, #0
 800e82e:	d0e5      	beq.n	800e7fc <log+0xd4>
 800e830:	0413      	lsls	r3, r2, #16
 800e832:	d403      	bmi.n	800e83c <log+0x114>
 800e834:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800e838:	4393      	bics	r3, r2
 800e83a:	d104      	bne.n	800e846 <log+0x11e>
 800e83c:	ecbd 8b02 	vpop	{d8}
 800e840:	bcf0      	pop	{r4, r5, r6, r7}
 800e842:	f000 bc05 	b.w	800f050 <__math_invalid>
 800e846:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e8f8 <log+0x1d0>
 800e84a:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e84e:	ec53 2b17 	vmov	r2, r3, d7
 800e852:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800e856:	4613      	mov	r3, r2
 800e858:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 800e85c:	492c      	ldr	r1, [pc, #176]	@ (800e910 <log+0x1e8>)
 800e85e:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800e862:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800e866:	f3c2 3446 	ubfx	r4, r2, #13, #7
 800e86a:	ea4f 5c12 	mov.w	ip, r2, lsr #20
 800e86e:	eb01 1504 	add.w	r5, r1, r4, lsl #4
 800e872:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
 800e876:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
 800e87a:	1e1e      	subs	r6, r3, #0
 800e87c:	eba0 070c 	sub.w	r7, r0, ip
 800e880:	ec47 6b16 	vmov	d6, r6, r7
 800e884:	1512      	asrs	r2, r2, #20
 800e886:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e88a:	ee07 2a90 	vmov	s15, r2
 800e88e:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e892:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e896:	ed91 4b00 	vldr	d4, [r1]
 800e89a:	ee25 1b02 	vmul.f64	d1, d5, d2
 800e89e:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
 800e8a2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e8a6:	ee35 4b07 	vadd.f64	d4, d5, d7
 800e8aa:	ee37 0b44 	vsub.f64	d0, d7, d4
 800e8ae:	ed91 7b02 	vldr	d7, [r1, #8]
 800e8b2:	ee30 0b05 	vadd.f64	d0, d0, d5
 800e8b6:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e8ba:	ed91 7b04 	vldr	d7, [r1, #16]
 800e8be:	ed91 6b08 	vldr	d6, [r1, #32]
 800e8c2:	eea7 0b02 	vfma.f64	d0, d7, d2
 800e8c6:	ed91 7b06 	vldr	d7, [r1, #24]
 800e8ca:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 800e8ce:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e8d2:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 800e8d6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e8da:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e8de:	eea1 0b07 	vfma.f64	d0, d1, d7
 800e8e2:	ee30 0b04 	vadd.f64	d0, d0, d4
 800e8e6:	e789      	b.n	800e7fc <log+0xd4>
 800e8e8:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800e900 <log+0x1d8>
 800e8ec:	e786      	b.n	800e7fc <log+0xd4>
 800e8ee:	bf00      	nop
 800e8f0:	00000000 	.word	0x00000000
 800e8f4:	41a00000 	.word	0x41a00000
 800e8f8:	00000000 	.word	0x00000000
 800e8fc:	43300000 	.word	0x43300000
	...
 800e908:	000308ff 	.word	0x000308ff
 800e90c:	3ff00000 	.word	0x3ff00000
 800e910:	0800f100 	.word	0x0800f100
 800e914:	7ff00000 	.word	0x7ff00000

0800e918 <log10>:
 800e918:	b508      	push	{r3, lr}
 800e91a:	ed2d 8b02 	vpush	{d8}
 800e91e:	eeb0 8b40 	vmov.f64	d8, d0
 800e922:	f000 fadd 	bl	800eee0 <__ieee754_log10>
 800e926:	eeb4 8b48 	vcmp.f64	d8, d8
 800e92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92e:	d60f      	bvs.n	800e950 <log10+0x38>
 800e930:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e938:	d80a      	bhi.n	800e950 <log10+0x38>
 800e93a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e942:	d108      	bne.n	800e956 <log10+0x3e>
 800e944:	f7ff fe7a 	bl	800e63c <__errno>
 800e948:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800e970 <log10+0x58>
 800e94c:	2322      	movs	r3, #34	@ 0x22
 800e94e:	6003      	str	r3, [r0, #0]
 800e950:	ecbd 8b02 	vpop	{d8}
 800e954:	bd08      	pop	{r3, pc}
 800e956:	f7ff fe71 	bl	800e63c <__errno>
 800e95a:	ecbd 8b02 	vpop	{d8}
 800e95e:	2321      	movs	r3, #33	@ 0x21
 800e960:	6003      	str	r3, [r0, #0]
 800e962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e966:	4804      	ldr	r0, [pc, #16]	@ (800e978 <log10+0x60>)
 800e968:	f000 bab2 	b.w	800eed0 <nan>
 800e96c:	f3af 8000 	nop.w
 800e970:	00000000 	.word	0x00000000
 800e974:	fff00000 	.word	0xfff00000
 800e978:	0800f990 	.word	0x0800f990

0800e97c <checkint>:
 800e97c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e980:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800e984:	429a      	cmp	r2, r3
 800e986:	b570      	push	{r4, r5, r6, lr}
 800e988:	dd2a      	ble.n	800e9e0 <checkint+0x64>
 800e98a:	f240 4333 	movw	r3, #1075	@ 0x433
 800e98e:	429a      	cmp	r2, r3
 800e990:	dc24      	bgt.n	800e9dc <checkint+0x60>
 800e992:	1a9b      	subs	r3, r3, r2
 800e994:	f1a3 0620 	sub.w	r6, r3, #32
 800e998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e99c:	fa02 f403 	lsl.w	r4, r2, r3
 800e9a0:	fa02 f606 	lsl.w	r6, r2, r6
 800e9a4:	f1c3 0520 	rsb	r5, r3, #32
 800e9a8:	fa22 f505 	lsr.w	r5, r2, r5
 800e9ac:	4334      	orrs	r4, r6
 800e9ae:	432c      	orrs	r4, r5
 800e9b0:	409a      	lsls	r2, r3
 800e9b2:	ea20 0202 	bic.w	r2, r0, r2
 800e9b6:	ea21 0404 	bic.w	r4, r1, r4
 800e9ba:	4322      	orrs	r2, r4
 800e9bc:	f1a3 0420 	sub.w	r4, r3, #32
 800e9c0:	f1c3 0220 	rsb	r2, r3, #32
 800e9c4:	d10c      	bne.n	800e9e0 <checkint+0x64>
 800e9c6:	40d8      	lsrs	r0, r3
 800e9c8:	fa01 f302 	lsl.w	r3, r1, r2
 800e9cc:	4318      	orrs	r0, r3
 800e9ce:	40e1      	lsrs	r1, r4
 800e9d0:	4308      	orrs	r0, r1
 800e9d2:	f000 0001 	and.w	r0, r0, #1
 800e9d6:	f1d0 0002 	rsbs	r0, r0, #2
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	2002      	movs	r0, #2
 800e9de:	e7fc      	b.n	800e9da <checkint+0x5e>
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	e7fa      	b.n	800e9da <checkint+0x5e>
 800e9e4:	0000      	movs	r0, r0
	...

0800e9e8 <pow>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	ee10 4a90 	vmov	r4, s1
 800e9f0:	ed2d 8b0a 	vpush	{d8-d12}
 800e9f4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800e9f8:	ee11 aa90 	vmov	sl, s3
 800e9fc:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800ea00:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800ea04:	429a      	cmp	r2, r3
 800ea06:	ee10 5a10 	vmov	r5, s0
 800ea0a:	ee11 0a10 	vmov	r0, s2
 800ea0e:	b087      	sub	sp, #28
 800ea10:	46c4      	mov	ip, r8
 800ea12:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800ea16:	d806      	bhi.n	800ea26 <pow+0x3e>
 800ea18:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800ea1c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800ea20:	2b7f      	cmp	r3, #127	@ 0x7f
 800ea22:	f240 8157 	bls.w	800ecd4 <pow+0x2ec>
 800ea26:	1802      	adds	r2, r0, r0
 800ea28:	eb4a 010a 	adc.w	r1, sl, sl
 800ea2c:	f06f 0b01 	mvn.w	fp, #1
 800ea30:	1e57      	subs	r7, r2, #1
 800ea32:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800ea36:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800ea3a:	45bb      	cmp	fp, r7
 800ea3c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800ea40:	d242      	bcs.n	800eac8 <pow+0xe0>
 800ea42:	ea52 0301 	orrs.w	r3, r2, r1
 800ea46:	f04f 0300 	mov.w	r3, #0
 800ea4a:	d10c      	bne.n	800ea66 <pow+0x7e>
 800ea4c:	196d      	adds	r5, r5, r5
 800ea4e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800ea52:	4164      	adcs	r4, r4
 800ea54:	42ab      	cmp	r3, r5
 800ea56:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ea5a:	41a3      	sbcs	r3, r4
 800ea5c:	f0c0 808f 	bcc.w	800eb7e <pow+0x196>
 800ea60:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ea64:	e02b      	b.n	800eabe <pow+0xd6>
 800ea66:	4ed4      	ldr	r6, [pc, #848]	@ (800edb8 <pow+0x3d0>)
 800ea68:	42b4      	cmp	r4, r6
 800ea6a:	bf08      	it	eq
 800ea6c:	429d      	cmpeq	r5, r3
 800ea6e:	d109      	bne.n	800ea84 <pow+0x9c>
 800ea70:	1800      	adds	r0, r0, r0
 800ea72:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800ea76:	eb4a 0a0a 	adc.w	sl, sl, sl
 800ea7a:	4283      	cmp	r3, r0
 800ea7c:	4bcf      	ldr	r3, [pc, #828]	@ (800edbc <pow+0x3d4>)
 800ea7e:	eb73 030a 	sbcs.w	r3, r3, sl
 800ea82:	e7eb      	b.n	800ea5c <pow+0x74>
 800ea84:	196d      	adds	r5, r5, r5
 800ea86:	48ce      	ldr	r0, [pc, #824]	@ (800edc0 <pow+0x3d8>)
 800ea88:	4164      	adcs	r4, r4
 800ea8a:	42ab      	cmp	r3, r5
 800ea8c:	eb70 0604 	sbcs.w	r6, r0, r4
 800ea90:	d375      	bcc.n	800eb7e <pow+0x196>
 800ea92:	4281      	cmp	r1, r0
 800ea94:	bf08      	it	eq
 800ea96:	429a      	cmpeq	r2, r3
 800ea98:	d171      	bne.n	800eb7e <pow+0x196>
 800ea9a:	4aca      	ldr	r2, [pc, #808]	@ (800edc4 <pow+0x3dc>)
 800ea9c:	4294      	cmp	r4, r2
 800ea9e:	bf08      	it	eq
 800eaa0:	429d      	cmpeq	r5, r3
 800eaa2:	d0dd      	beq.n	800ea60 <pow+0x78>
 800eaa4:	4294      	cmp	r4, r2
 800eaa6:	ea6f 0a0a 	mvn.w	sl, sl
 800eaaa:	bf34      	ite	cc
 800eaac:	2400      	movcc	r4, #0
 800eaae:	2401      	movcs	r4, #1
 800eab0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800eab4:	4554      	cmp	r4, sl
 800eab6:	f040 81dc 	bne.w	800ee72 <pow+0x48a>
 800eaba:	ee21 0b01 	vmul.f64	d0, d1, d1
 800eabe:	b007      	add	sp, #28
 800eac0:	ecbd 8b0a 	vpop	{d8-d12}
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac8:	196f      	adds	r7, r5, r5
 800eaca:	eb44 0904 	adc.w	r9, r4, r4
 800eace:	1e7a      	subs	r2, r7, #1
 800ead0:	f169 0300 	sbc.w	r3, r9, #0
 800ead4:	4593      	cmp	fp, r2
 800ead6:	eb7e 0303 	sbcs.w	r3, lr, r3
 800eada:	d225      	bcs.n	800eb28 <pow+0x140>
 800eadc:	ee20 0b00 	vmul.f64	d0, d0, d0
 800eae0:	2c00      	cmp	r4, #0
 800eae2:	da13      	bge.n	800eb0c <pow+0x124>
 800eae4:	4651      	mov	r1, sl
 800eae6:	f7ff ff49 	bl	800e97c <checkint>
 800eaea:	2801      	cmp	r0, #1
 800eaec:	d10e      	bne.n	800eb0c <pow+0x124>
 800eaee:	eeb1 0b40 	vneg.f64	d0, d0
 800eaf2:	ea57 0909 	orrs.w	r9, r7, r9
 800eaf6:	d10b      	bne.n	800eb10 <pow+0x128>
 800eaf8:	f1ba 0f00 	cmp.w	sl, #0
 800eafc:	dadf      	bge.n	800eabe <pow+0xd6>
 800eafe:	b007      	add	sp, #28
 800eb00:	ecbd 8b0a 	vpop	{d8-d12}
 800eb04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb08:	f000 ba8a 	b.w	800f020 <__math_divzero>
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e7f0      	b.n	800eaf2 <pow+0x10a>
 800eb10:	f1ba 0f00 	cmp.w	sl, #0
 800eb14:	dad3      	bge.n	800eabe <pow+0xd6>
 800eb16:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800eb1a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800eb1e:	ed8d 7b00 	vstr	d7, [sp]
 800eb22:	ed9d 0b00 	vldr	d0, [sp]
 800eb26:	e7ca      	b.n	800eabe <pow+0xd6>
 800eb28:	2c00      	cmp	r4, #0
 800eb2a:	da2b      	bge.n	800eb84 <pow+0x19c>
 800eb2c:	4651      	mov	r1, sl
 800eb2e:	f7ff ff25 	bl	800e97c <checkint>
 800eb32:	b930      	cbnz	r0, 800eb42 <pow+0x15a>
 800eb34:	b007      	add	sp, #28
 800eb36:	ecbd 8b0a 	vpop	{d8-d12}
 800eb3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3e:	f000 ba87 	b.w	800f050 <__math_invalid>
 800eb42:	1e41      	subs	r1, r0, #1
 800eb44:	4248      	negs	r0, r1
 800eb46:	4148      	adcs	r0, r1
 800eb48:	0480      	lsls	r0, r0, #18
 800eb4a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800eb4e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800eb52:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800eb56:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800eb5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb5c:	d92d      	bls.n	800ebba <pow+0x1d2>
 800eb5e:	4b96      	ldr	r3, [pc, #600]	@ (800edb8 <pow+0x3d0>)
 800eb60:	2000      	movs	r0, #0
 800eb62:	429c      	cmp	r4, r3
 800eb64:	bf08      	it	eq
 800eb66:	4285      	cmpeq	r5, r0
 800eb68:	f43f af7a 	beq.w	800ea60 <pow+0x78>
 800eb6c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800eb70:	428a      	cmp	r2, r1
 800eb72:	d80c      	bhi.n	800eb8e <pow+0x1a6>
 800eb74:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800eb78:	42a8      	cmp	r0, r5
 800eb7a:	41a3      	sbcs	r3, r4
 800eb7c:	d204      	bcs.n	800eb88 <pow+0x1a0>
 800eb7e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800eb82:	e79c      	b.n	800eabe <pow+0xd6>
 800eb84:	2000      	movs	r0, #0
 800eb86:	e7e4      	b.n	800eb52 <pow+0x16a>
 800eb88:	ee30 0b41 	vsub.f64	d0, d0, d1
 800eb8c:	e797      	b.n	800eabe <pow+0xd6>
 800eb8e:	2d01      	cmp	r5, #1
 800eb90:	eb74 0303 	sbcs.w	r3, r4, r3
 800eb94:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800eb98:	bf34      	ite	cc
 800eb9a:	2301      	movcc	r3, #1
 800eb9c:	2300      	movcs	r3, #0
 800eb9e:	4296      	cmp	r6, r2
 800eba0:	bf8c      	ite	hi
 800eba2:	2600      	movhi	r6, #0
 800eba4:	2601      	movls	r6, #1
 800eba6:	42b3      	cmp	r3, r6
 800eba8:	f000 809c 	beq.w	800ece4 <pow+0x2fc>
 800ebac:	b007      	add	sp, #28
 800ebae:	ecbd 8b0a 	vpop	{d8-d12}
 800ebb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb6:	f000 ba2b 	b.w	800f010 <__math_oflow>
 800ebba:	f1bc 0f00 	cmp.w	ip, #0
 800ebbe:	d10a      	bne.n	800ebd6 <pow+0x1ee>
 800ebc0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800eda8 <pow+0x3c0>
 800ebc4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ebc8:	ec53 2b17 	vmov	r2, r3, d7
 800ebcc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ebd0:	4615      	mov	r5, r2
 800ebd2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800ebd6:	4a7c      	ldr	r2, [pc, #496]	@ (800edc8 <pow+0x3e0>)
 800ebd8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800ebdc:	4422      	add	r2, r4
 800ebde:	1513      	asrs	r3, r2, #20
 800ebe0:	ee03 3a10 	vmov	s6, r3
 800ebe4:	4b79      	ldr	r3, [pc, #484]	@ (800edcc <pow+0x3e4>)
 800ebe6:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800ebea:	f36f 0213 	bfc	r2, #0, #20
 800ebee:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800ebf2:	1aa7      	subs	r7, r4, r2
 800ebf4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800ebf8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800ebfc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800ec00:	1e2e      	subs	r6, r5, #0
 800ec02:	ec47 6b14 	vmov	d4, r6, r7
 800ec06:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800ec0a:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ec0e:	ed93 5b00 	vldr	d5, [r3]
 800ec12:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ec16:	eea3 2b05 	vfma.f64	d2, d3, d5
 800ec1a:	ed93 5b02 	vldr	d5, [r3, #8]
 800ec1e:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ec22:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ec26:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ec2a:	ed93 5b04 	vldr	d5, [r3, #16]
 800ec2e:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ec32:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ec36:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ec3a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ec3e:	ee34 8b00 	vadd.f64	d8, d4, d0
 800ec42:	eeb0 9b40 	vmov.f64	d9, d0
 800ec46:	ee34 4b48 	vsub.f64	d4, d4, d8
 800ec4a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800ec4e:	ee34 ab00 	vadd.f64	d10, d4, d0
 800ec52:	ed93 5b06 	vldr	d5, [r3, #24]
 800ec56:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ec5a:	ee37 7b09 	vadd.f64	d7, d7, d9
 800ec5e:	ed93 4b08 	vldr	d4, [r3, #32]
 800ec62:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800ec66:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800ec6a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ec6e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800ec72:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800ec76:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ec7a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800ec7e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800ec82:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ec86:	eea0 5b04 	vfma.f64	d5, d0, d4
 800ec8a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800ec8e:	ee38 4b07 	vadd.f64	d4, d8, d7
 800ec92:	ee21 6b04 	vmul.f64	d6, d1, d4
 800ec96:	ee16 3a90 	vmov	r3, s13
 800ec9a:	eeb0 5b46 	vmov.f64	d5, d6
 800ec9e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800eca2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800eca6:	18b2      	adds	r2, r6, r2
 800eca8:	2a3e      	cmp	r2, #62	@ 0x3e
 800ecaa:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800ecae:	ee38 8b44 	vsub.f64	d8, d8, d4
 800ecb2:	ee38 8b07 	vadd.f64	d8, d8, d7
 800ecb6:	eea1 5b08 	vfma.f64	d5, d1, d8
 800ecba:	d91b      	bls.n	800ecf4 <pow+0x30c>
 800ecbc:	2a00      	cmp	r2, #0
 800ecbe:	da0b      	bge.n	800ecd8 <pow+0x2f0>
 800ecc0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ecc4:	ee36 0b00 	vadd.f64	d0, d6, d0
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	f43f aef8 	beq.w	800eabe <pow+0xd6>
 800ecce:	eeb1 0b40 	vneg.f64	d0, d0
 800ecd2:	e6f4      	b.n	800eabe <pow+0xd6>
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	e77e      	b.n	800ebd6 <pow+0x1ee>
 800ecd8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800ecdc:	d909      	bls.n	800ecf2 <pow+0x30a>
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	f6bf af64 	bge.w	800ebac <pow+0x1c4>
 800ece4:	b007      	add	sp, #28
 800ece6:	ecbd 8b0a 	vpop	{d8-d12}
 800ecea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecee:	f000 b987 	b.w	800f000 <__math_uflow>
 800ecf2:	2600      	movs	r6, #0
 800ecf4:	4936      	ldr	r1, [pc, #216]	@ (800edd0 <pow+0x3e8>)
 800ecf6:	ed91 4b02 	vldr	d4, [r1, #8]
 800ecfa:	ed91 3b00 	vldr	d3, [r1]
 800ecfe:	eeb0 7b44 	vmov.f64	d7, d4
 800ed02:	eea6 7b03 	vfma.f64	d7, d6, d3
 800ed06:	ee17 5a10 	vmov	r5, s14
 800ed0a:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ed0e:	ed91 4b04 	vldr	d4, [r1, #16]
 800ed12:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800ed16:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ed1a:	ed91 4b06 	vldr	d4, [r1, #24]
 800ed1e:	18dc      	adds	r4, r3, r3
 800ed20:	f104 030f 	add.w	r3, r4, #15
 800ed24:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ed28:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ed2c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800ed30:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ed34:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ed38:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800ed3c:	ed91 4b08 	vldr	d4, [r1, #32]
 800ed40:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ed44:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ed48:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ed4c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800ed50:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ed54:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ed58:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800ed5c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ed60:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ed64:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ed68:	1940      	adds	r0, r0, r5
 800ed6a:	2700      	movs	r7, #0
 800ed6c:	eb17 020c 	adds.w	r2, r7, ip
 800ed70:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ed74:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ed78:	2e00      	cmp	r6, #0
 800ed7a:	d175      	bne.n	800ee68 <pow+0x480>
 800ed7c:	42bd      	cmp	r5, r7
 800ed7e:	db29      	blt.n	800edd4 <pow+0x3ec>
 800ed80:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800ed84:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800ed88:	4610      	mov	r0, r2
 800ed8a:	ec41 0b10 	vmov	d0, r0, r1
 800ed8e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ed92:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800edb0 <pow+0x3c8>
 800ed96:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed9a:	b007      	add	sp, #28
 800ed9c:	ecbd 8b0a 	vpop	{d8-d12}
 800eda0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda4:	f000 b96c 	b.w	800f080 <__math_check_oflow>
 800eda8:	00000000 	.word	0x00000000
 800edac:	43300000 	.word	0x43300000
 800edb0:	00000000 	.word	0x00000000
 800edb4:	7f000000 	.word	0x7f000000
 800edb8:	3ff00000 	.word	0x3ff00000
 800edbc:	fff00000 	.word	0xfff00000
 800edc0:	ffe00000 	.word	0xffe00000
 800edc4:	7fe00000 	.word	0x7fe00000
 800edc8:	c0196aab 	.word	0xc0196aab
 800edcc:	0800f998 	.word	0x0800f998
 800edd0:	080109e0 	.word	0x080109e0
 800edd4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800edd8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800eddc:	4610      	mov	r0, r2
 800edde:	ec41 0b15 	vmov	d5, r0, r1
 800ede2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800ede6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800edea:	ee35 7b06 	vadd.f64	d7, d5, d6
 800edee:	eeb0 4bc7 	vabs.f64	d4, d7
 800edf2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800edf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfa:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800ee78 <pow+0x490>
 800edfe:	d52a      	bpl.n	800ee56 <pow+0x46e>
 800ee00:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ee04:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ee08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0c:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ee10:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800ee14:	bf58      	it	pl
 800ee16:	eeb0 4b43 	vmovpl.f64	d4, d3
 800ee1a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800ee1e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800ee22:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee26:	ee36 6b05 	vadd.f64	d6, d6, d5
 800ee2a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800ee2e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800ee32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3a:	d104      	bne.n	800ee46 <pow+0x45e>
 800ee3c:	4632      	mov	r2, r6
 800ee3e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ee42:	ec43 2b17 	vmov	d7, r2, r3
 800ee46:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ee4a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ee4e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800ee52:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ee56:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ee5a:	b007      	add	sp, #28
 800ee5c:	ecbd 8b0a 	vpop	{d8-d12}
 800ee60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee64:	f000 b903 	b.w	800f06e <__math_check_uflow>
 800ee68:	ec43 2b10 	vmov	d0, r2, r3
 800ee6c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ee70:	e625      	b.n	800eabe <pow+0xd6>
 800ee72:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800ee80 <pow+0x498>
 800ee76:	e622      	b.n	800eabe <pow+0xd6>
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	00100000 	.word	0x00100000
	...

0800ee88 <sqrt>:
 800ee88:	b508      	push	{r3, lr}
 800ee8a:	ed2d 8b04 	vpush	{d8-d9}
 800ee8e:	eeb0 8b40 	vmov.f64	d8, d0
 800ee92:	f000 f819 	bl	800eec8 <__ieee754_sqrt>
 800ee96:	eeb4 8b48 	vcmp.f64	d8, d8
 800ee9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9e:	d60c      	bvs.n	800eeba <sqrt+0x32>
 800eea0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800eec0 <sqrt+0x38>
 800eea4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800eea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeac:	d505      	bpl.n	800eeba <sqrt+0x32>
 800eeae:	f7ff fbc5 	bl	800e63c <__errno>
 800eeb2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800eeb6:	2321      	movs	r3, #33	@ 0x21
 800eeb8:	6003      	str	r3, [r0, #0]
 800eeba:	ecbd 8b04 	vpop	{d8-d9}
 800eebe:	bd08      	pop	{r3, pc}
	...

0800eec8 <__ieee754_sqrt>:
 800eec8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800eecc:	4770      	bx	lr
	...

0800eed0 <nan>:
 800eed0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eed8 <nan+0x8>
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	00000000 	.word	0x00000000
 800eedc:	7ff80000 	.word	0x7ff80000

0800eee0 <__ieee754_log10>:
 800eee0:	b510      	push	{r4, lr}
 800eee2:	ee10 3a90 	vmov	r3, s1
 800eee6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eeea:	ed2d 8b02 	vpush	{d8}
 800eeee:	da21      	bge.n	800ef34 <__ieee754_log10+0x54>
 800eef0:	ee10 1a10 	vmov	r1, s0
 800eef4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800eef8:	430a      	orrs	r2, r1
 800eefa:	d108      	bne.n	800ef0e <__ieee754_log10+0x2e>
 800eefc:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800ef88 <__ieee754_log10+0xa8>
 800ef00:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 800ef90 <__ieee754_log10+0xb0>
 800ef04:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800ef08:	ecbd 8b02 	vpop	{d8}
 800ef0c:	bd10      	pop	{r4, pc}
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	da02      	bge.n	800ef18 <__ieee754_log10+0x38>
 800ef12:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ef16:	e7f3      	b.n	800ef00 <__ieee754_log10+0x20>
 800ef18:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800ef98 <__ieee754_log10+0xb8>
 800ef1c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef20:	ee10 3a90 	vmov	r3, s1
 800ef24:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800ef28:	4923      	ldr	r1, [pc, #140]	@ (800efb8 <__ieee754_log10+0xd8>)
 800ef2a:	428b      	cmp	r3, r1
 800ef2c:	dd04      	ble.n	800ef38 <__ieee754_log10+0x58>
 800ef2e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ef32:	e7e9      	b.n	800ef08 <__ieee754_log10+0x28>
 800ef34:	2200      	movs	r2, #0
 800ef36:	e7f7      	b.n	800ef28 <__ieee754_log10+0x48>
 800ef38:	1518      	asrs	r0, r3, #20
 800ef3a:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800ef3e:	4410      	add	r0, r2
 800ef40:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ef44:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 800ef48:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800ef4c:	ee08 3a10 	vmov	s16, r3
 800ef50:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 800ef54:	ec53 2b10 	vmov	r2, r3, d0
 800ef58:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ef5c:	ec43 2b10 	vmov	d0, r2, r3
 800ef60:	f7ff fbe2 	bl	800e728 <log>
 800ef64:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800efa0 <__ieee754_log10+0xc0>
 800ef68:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef6c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800efa8 <__ieee754_log10+0xc8>
 800ef70:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 800ef74:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ef78:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800efb0 <__ieee754_log10+0xd0>
 800ef7c:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ef80:	e7c2      	b.n	800ef08 <__ieee754_log10+0x28>
 800ef82:	bf00      	nop
 800ef84:	f3af 8000 	nop.w
 800ef88:	00000000 	.word	0x00000000
 800ef8c:	c3500000 	.word	0xc3500000
	...
 800ef9c:	43500000 	.word	0x43500000
 800efa0:	1526e50e 	.word	0x1526e50e
 800efa4:	3fdbcb7b 	.word	0x3fdbcb7b
 800efa8:	11f12b36 	.word	0x11f12b36
 800efac:	3d59fef3 	.word	0x3d59fef3
 800efb0:	509f6000 	.word	0x509f6000
 800efb4:	3fd34413 	.word	0x3fd34413
 800efb8:	7fefffff 	.word	0x7fefffff

0800efbc <with_errno>:
 800efbc:	b510      	push	{r4, lr}
 800efbe:	ed2d 8b02 	vpush	{d8}
 800efc2:	eeb0 8b40 	vmov.f64	d8, d0
 800efc6:	4604      	mov	r4, r0
 800efc8:	f7ff fb38 	bl	800e63c <__errno>
 800efcc:	eeb0 0b48 	vmov.f64	d0, d8
 800efd0:	ecbd 8b02 	vpop	{d8}
 800efd4:	6004      	str	r4, [r0, #0]
 800efd6:	bd10      	pop	{r4, pc}

0800efd8 <xflow>:
 800efd8:	b082      	sub	sp, #8
 800efda:	b158      	cbz	r0, 800eff4 <xflow+0x1c>
 800efdc:	eeb1 7b40 	vneg.f64	d7, d0
 800efe0:	ed8d 7b00 	vstr	d7, [sp]
 800efe4:	ed9d 7b00 	vldr	d7, [sp]
 800efe8:	2022      	movs	r0, #34	@ 0x22
 800efea:	ee20 0b07 	vmul.f64	d0, d0, d7
 800efee:	b002      	add	sp, #8
 800eff0:	f7ff bfe4 	b.w	800efbc <with_errno>
 800eff4:	eeb0 7b40 	vmov.f64	d7, d0
 800eff8:	e7f2      	b.n	800efe0 <xflow+0x8>
 800effa:	0000      	movs	r0, r0
 800effc:	0000      	movs	r0, r0
	...

0800f000 <__math_uflow>:
 800f000:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f008 <__math_uflow+0x8>
 800f004:	f7ff bfe8 	b.w	800efd8 <xflow>
 800f008:	00000000 	.word	0x00000000
 800f00c:	10000000 	.word	0x10000000

0800f010 <__math_oflow>:
 800f010:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f018 <__math_oflow+0x8>
 800f014:	f7ff bfe0 	b.w	800efd8 <xflow>
 800f018:	00000000 	.word	0x00000000
 800f01c:	70000000 	.word	0x70000000

0800f020 <__math_divzero>:
 800f020:	b082      	sub	sp, #8
 800f022:	2800      	cmp	r0, #0
 800f024:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800f028:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800f02c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800f030:	ed8d 7b00 	vstr	d7, [sp]
 800f034:	ed9d 0b00 	vldr	d0, [sp]
 800f038:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800f048 <__math_divzero+0x28>
 800f03c:	2022      	movs	r0, #34	@ 0x22
 800f03e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800f042:	b002      	add	sp, #8
 800f044:	f7ff bfba 	b.w	800efbc <with_errno>
	...

0800f050 <__math_invalid>:
 800f050:	eeb0 7b40 	vmov.f64	d7, d0
 800f054:	eeb4 7b47 	vcmp.f64	d7, d7
 800f058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f060:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f064:	d602      	bvs.n	800f06c <__math_invalid+0x1c>
 800f066:	2021      	movs	r0, #33	@ 0x21
 800f068:	f7ff bfa8 	b.w	800efbc <with_errno>
 800f06c:	4770      	bx	lr

0800f06e <__math_check_uflow>:
 800f06e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f076:	d102      	bne.n	800f07e <__math_check_uflow+0x10>
 800f078:	2022      	movs	r0, #34	@ 0x22
 800f07a:	f7ff bf9f 	b.w	800efbc <with_errno>
 800f07e:	4770      	bx	lr

0800f080 <__math_check_oflow>:
 800f080:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800f0a0 <__math_check_oflow+0x20>
 800f084:	eeb0 7bc0 	vabs.f64	d7, d0
 800f088:	eeb4 7b46 	vcmp.f64	d7, d6
 800f08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f090:	dd02      	ble.n	800f098 <__math_check_oflow+0x18>
 800f092:	2022      	movs	r0, #34	@ 0x22
 800f094:	f7ff bf92 	b.w	800efbc <with_errno>
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	f3af 8000 	nop.w
 800f0a0:	ffffffff 	.word	0xffffffff
 800f0a4:	7fefffff 	.word	0x7fefffff

0800f0a8 <_init>:
 800f0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0aa:	bf00      	nop
 800f0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ae:	bc08      	pop	{r3}
 800f0b0:	469e      	mov	lr, r3
 800f0b2:	4770      	bx	lr

0800f0b4 <_fini>:
 800f0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b6:	bf00      	nop
 800f0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ba:	bc08      	pop	{r3}
 800f0bc:	469e      	mov	lr, r3
 800f0be:	4770      	bx	lr
