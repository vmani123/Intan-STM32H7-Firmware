
rhd2164_acquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed90  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002190  0800f060  0800f060  00010060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080111f0  080111f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080111f8  080111f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080111fc  080111fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08011200  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000990  24000070  0801126c  00013070  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000a00  0801126c  00013a00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bd15  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003314  00000000  00000000  0002edaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001528  00000000  00000000  000320c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001089  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f22  00000000  00000000  00034679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c3bd  00000000  00000000  0006859b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015147a  00000000  00000000  00084958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d5dd2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006194  00000000  00000000  001d5e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001dbfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f048 	.word	0x0800f048

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800f048 	.word	0x0800f048

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <write_pin>:
void uart_interrupt_routine();
#endif

// Write specified pin on specified port either high (1) or low (0).
static inline void write_pin(GPIO_TypeDef * gpio_port, uint32_t gpio_pin, int level)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
#ifdef USE_HAL
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	b29b      	uxth	r3, r3
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	4619      	mov	r1, r3
 8000616:	68f8      	ldr	r0, [r7, #12]
 8000618:	f006 fcae 	bl	8006f78 <HAL_GPIO_WritePin>
#else
	level ? LL_GPIO_SetOutputPin(gpio_port, gpio_pin) : LL_GPIO_ResetOutputPin(gpio_port, gpio_pin);
#endif
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <wait_ms>:
 * helpful for repeated function calls within interrupt routine.
 */

// Wait for 'duration' ms. Recommended to never call from within an interrupt function.
static inline void wait_ms(int duration)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	HAL_Delay(duration);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fb82 	bl	8003d38 <HAL_Delay>
#else
	SysTick_Config(SystemCoreClock/1000); // Set up SysTick so that getSysTick() returns ms since program started.
	while (get_SysTick() < duration) {}
#endif
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <enable_interrupt_timer>:

// Enable/disable timer interrupts.
static inline void enable_interrupt_timer(int enable)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
#ifdef USE_HAL
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <enable_interrupt_timer+0x16>
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <enable_interrupt_timer+0x24>)
 800064c:	f00a f994 	bl	800a978 <HAL_TIM_Base_Start_IT>
	} else {
		LL_TIM_DisableCounter(INTERRUPT_TIM);
		LL_TIM_DisableIT_UPDATE(INTERRUPT_TIM);
	}
#endif
}
 8000650:	e002      	b.n	8000658 <enable_interrupt_timer+0x1c>
	enable ? HAL_TIM_Base_Start_IT(&INTERRUPT_TIM) : HAL_TIM_Base_Stop_IT(&INTERRUPT_TIM);
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <enable_interrupt_timer+0x24>)
 8000654:	f00a fa16 	bl	800aa84 <HAL_TIM_Base_Stop_IT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	24000324 	.word	0x24000324

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ea      	sub	sp, #424	@ 0x1a8
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f003 fad3 	bl	8003c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 f87d 	bl	800076c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000672:	f000 f8e9 	bl	8000848 <PeriphCommonClock_Config>
  // reset, for example pushing the RESET button on a NUCLEO board, or when downloading/running using
  // STM32CubeProgrammer. For these cases, this delay can be removed.
  // When this bug does occur, we recommend including a delay of ~500 ms so that this brief running of the previously
  // loaded program doesn't have any interaction with any peripherals and this re-run program does nothing important.
  // In practice, 50 ms is likely enough of a pause from our testing, but 500 ms is even safer.
  wait_ms(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067a:	f7ff ffd3 	bl	8000624 <wait_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fcbf 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8000682:	f000 fc8d 	bl	8000fa0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000686:	f000 f9b7 	bl	80009f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800068a:	f000 fa87 	bl	8000b9c <MX_TIM2_Init>
  MX_TIM3_Init();
 800068e:	f000 fb0d 	bl	8000cac <MX_TIM3_Init>
  MX_SPI3_Init();
 8000692:	f000 f959 	bl	8000948 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000696:	f000 f907 	bl	80008a8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800069a:	f000 fc33 	bl	8000f04 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 800069e:	f000 fb5d 	bl	8000d5c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  TIM1->EGR |= TIM_EGR_UG;  // update event
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <main+0xf0>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <main+0xf0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6153      	str	r3, [r2, #20]


  // Write register values to pause all used timers when execution pauses during debug
  SET_BIT(DBGMCU->APB1LFZ1, 0b10); // enable pausing TIM3 during debug
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <main+0xf4>)
 80006b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006b2:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <main+0xf4>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB1LFZ1, 0b1); // enable pausing TIM2 during debug
 80006ba:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <main+0xf4>)
 80006bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006be:	4a26      	ldr	r2, [pc, #152]	@ (8000758 <main+0xf4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  SET_BIT(DBGMCU->APB2FZ1, 0b1); // enable pausing TIM1 during debug
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <main+0xf4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <main+0xf4>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	64d3      	str	r3, [r2, #76]	@ 0x4c

  // Allocate sample_memory array which will be used to store acquired data.
  allocate_sample_memory();
 80006d2:	f000 fec5 	bl	8001460 <allocate_sample_memory>

  // Set up SPI DMA configuration for when SPI transfers begin.
  initialize_spi_with_dma();
 80006d6:	f000 fef1 	bl	80014bc <initialize_spi_with_dma>

  // Set up timers used to generate 32-bit SCLK used to read DDR MISO to trigger once TRANSMIT_SPI CS goes low.
  initialize_ddr_sclk_timers();
 80006da:	f000 fefd 	bl	80014d8 <initialize_ddr_sclk_timers>

  // Initialize Intan chip registers with suitable settings for this application.
  // This not only determines the initial registers, but actually writes them via SPI.
  RHDConfigParameters parameters;
  configure_registers(&parameters);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fa1d 	bl	8003b20 <configure_registers>

  // Populate first CONVERT_COMMANDS_PER_SEQUENCE that will repeatedly
  // convert for each sample interrupt.
  // Note that AUX_COMMANDS_PER_SEQUENCE remain unpopulated in command_sequence_MOSI after this.
  configure_convert_commands();
 80006e6:	f003 fa26 	bl	8003b36 <configure_convert_commands>

  // Populate the AUX_COMMANDS_PER_SEQUENCE command lists (default 3) with auxiliary commands.
  configure_aux_commands(&parameters);
 80006ea:	463b      	mov	r3, r7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fa29 	bl	8003b44 <configure_aux_commands>

  // Turn on LED to indicate acquisition is about to start.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2101      	movs	r1, #1
 80006f6:	4819      	ldr	r0, [pc, #100]	@ (800075c <main+0xf8>)
 80006f8:	f7ff ff82 	bl	8000600 <write_pin>

  // Start timer so that at every period defined by INTERRUPT_TIM, an interrupt occurs, starting an SPI command sequence.
  sample_counter = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <main+0xfc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	801a      	strh	r2, [r3, #0]
  enable_interrupt_timer(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff ff9a 	bl	800063c <enable_interrupt_timer>
  main_loop_active = 1;
 8000708:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <main+0x100>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]

  // Keep looping, doing nothing (other than handling interrupts) until enough data has been gathered
  while (1) {

	  // Break infinite loop when loop_escape() condition have been met.
	  if (loop_escape()) break;
 800070e:	f003 f941 	bl	8003994 <loop_escape>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <main+0xc2>

	  // During infinite loop, write this pin High to indicate this main loop is currently processing.
	  write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800071e:	4812      	ldr	r0, [pc, #72]	@ (8000768 <main+0x104>)
 8000720:	f7ff ff6e 	bl	8000600 <write_pin>
	  if (loop_escape()) break;
 8000724:	e7f3      	b.n	800070e <main+0xaa>
 8000726:	bf00      	nop
    /* USER CODE BEGIN 3 */

  }

  // Disable TIM to stop sample interrupts.
  enable_interrupt_timer(0);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff87 	bl	800063c <enable_interrupt_timer>
  main_loop_active = 0;
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <main+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]

  // Disable 32-bit SCLK timers.
  end_ddr_sclk_timers();
 8000734:	f000 fee0 	bl	80014f8 <end_ddr_sclk_timers>

  // Disable SPI DMA.
  end_spi_with_dma();
 8000738:	f000 fec7 	bl	80014ca <end_spi_with_dma>

  // Transmit accumulated data.
  transmit_data_offline();
 800073c:	f003 f984 	bl	8003a48 <transmit_data_offline>

  // Free previously allocated sample memory.
  free_sample_memory();
 8000740:	f000 feb0 	bl	80014a4 <free_sample_memory>

  // Indicate acquisition and data transfer have completed.
  write_pin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2101      	movs	r1, #1
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <main+0xf8>)
 800074a:	f7ff ff59 	bl	8000600 <write_pin>

  // Infinite loop for remainder of program life.
  while (1);
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0xea>
 8000752:	bf00      	nop
 8000754:	40010000 	.word	0x40010000
 8000758:	5c001000 	.word	0x5c001000
 800075c:	58020400 	.word	0x58020400
 8000760:	2400059c 	.word	0x2400059c
 8000764:	240008a6 	.word	0x240008a6
 8000768:	58020800 	.word	0x58020800

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f00d ff18 	bl	800e5b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00d ff12 	bl	800e5b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f006 fc31 	bl	8006ff4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <SystemClock_Config+0xd8>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a2a      	ldr	r2, [pc, #168]	@ (8000844 <SystemClock_Config+0xd8>)
 800079c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b28      	ldr	r3, [pc, #160]	@ (8000844 <SystemClock_Config+0xd8>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ae:	bf00      	nop
 80007b0:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <SystemClock_Config+0xd8>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007bc:	d1f8      	bne.n	80007b0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007be:	2301      	movs	r3, #1
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 132;
 80007d4:	2384      	movs	r3, #132	@ 0x84
 80007d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007e4:	2308      	movs	r3, #8
 80007e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f006 fc37 	bl	8007068 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000800:	f000 fd90 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	233f      	movs	r3, #63	@ 0x3f
 8000806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2303      	movs	r3, #3
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000810:	2308      	movs	r3, #8
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000814:	2340      	movs	r3, #64	@ 0x40
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000818:	2340      	movs	r3, #64	@ 0x40
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000822:	2340      	movs	r3, #64	@ 0x40
 8000824:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2103      	movs	r1, #3
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fff6 	bl	800781c <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000836:	f000 fd75 	bl	8001324 <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3770      	adds	r7, #112	@ 0x70
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024800 	.word	0x58024800

08000848 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0ae      	sub	sp, #184	@ 0xb8
 800084c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	22b8      	movs	r2, #184	@ 0xb8
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f00d feab 	bl	800e5b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1;
 800085a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 33;
 800086a:	2321      	movs	r3, #33	@ 0x21
 800086c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800086e:	2303      	movs	r3, #3
 8000870:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800087a:	23c0      	movs	r3, #192	@ 0xc0
 800087c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4618      	mov	r0, r3
 8000890:	f007 fb50 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800089a:	f000 fd43 	bl	8001324 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	37b8      	adds	r7, #184	@ 0xb8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ae:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <MX_SPI1_Init+0x9c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008c2:	221f      	movs	r2, #31
 80008c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008fc:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_SPI1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <MX_SPI1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_SPI1_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_SPI1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_SPI1_Init+0x98>)
 800092e:	f009 f8c3 	bl	8009ab8 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000938:	f000 fcf4 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2400008c 	.word	0x2400008c
 8000944:	40013000 	.word	0x40013000

08000948 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800094e:	4a29      	ldr	r2, [pc, #164]	@ (80009f4 <MX_SPI3_Init+0xac>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000954:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000958:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800095c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000960:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000964:	220f      	movs	r2, #15
 8000966:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000974:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000976:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800097a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000982:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 800099e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a4:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_06CYCLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009c4:	2260      	movs	r2, #96	@ 0x60
 80009c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_SPI3_Init+0xa8>)
 80009dc:	f009 f86c 	bl	8009ab8 <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80009e6:	f000 fc9d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000114 	.word	0x24000114
 80009f4:	40003c00 	.word	0x40003c00

080009f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0a0      	sub	sp, #128	@ 0x80
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2234      	movs	r2, #52	@ 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00d fdb4 	bl	800e5b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a48:	4b52      	ldr	r3, [pc, #328]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a4a:	4a53      	ldr	r2, [pc, #332]	@ (8000b98 <MX_TIM1_Init+0x1a0>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000a4e:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a50:	220f      	movs	r2, #15
 8000a52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5;
 8000a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b4c      	ldr	r3, [pc, #304]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 31;
 8000a66:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a68:	221f      	movs	r2, #31
 8000a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b49      	ldr	r3, [pc, #292]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a72:	4848      	ldr	r0, [pc, #288]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a74:	f009 ff29 	bl	800a8ca <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a7e:	f000 fc51 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4841      	ldr	r0, [pc, #260]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000a90:	f00a fd80 	bl	800b594 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a9a:	f000 fc43 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a9e:	483d      	ldr	r0, [pc, #244]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000aa0:	f00a fa28 	bl	800aef4 <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000aaa:	f000 fc3b 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4838      	ldr	r0, [pc, #224]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000ab2:	f00a fa80 	bl	800afb6 <HAL_TIM_OnePulse_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000abc:	f000 fc32 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ac8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000acc:	4619      	mov	r1, r3
 8000ace:	4831      	ldr	r0, [pc, #196]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000ad0:	f00a fe58 	bl	800b784 <HAL_TIM_SlaveConfigSynchro>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 8000ada:	f000 fc23 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000aee:	4619      	mov	r1, r3
 8000af0:	4828      	ldr	r0, [pc, #160]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000af2:	f00b fbe7 	bl	800c2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000afc:	f000 fc12 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	@ 0x60
 8000b02:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000b04:	2303      	movs	r3, #3
 8000b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b10:	2304      	movs	r3, #4
 8000b12:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	481b      	ldr	r0, [pc, #108]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b28:	f00a fc20 	bl	800b36c <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000b32:	f000 fbf7 	bl	8001324 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	699a      	ldr	r2, [r3, #24]
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0208 	bic.w	r2, r2, #8
 8000b44:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b78:	f00b fc40 	bl	800c3fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x18e>
  {
    Error_Handler();
 8000b82:	f000 fbcf 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b86:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM1_Init+0x19c>)
 8000b88:	f002 fc62 	bl	8003450 <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3780      	adds	r7, #128	@ 0x80
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2400028c 	.word	0x2400028c
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b090      	sub	sp, #64	@ 0x40
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd0:	4b35      	ldr	r3, [pc, #212]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bd8:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400;
 8000be4:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000be6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf8:	482b      	ldr	r0, [pc, #172]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000bfa:	f009 fe66 	bl	800a8ca <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000c04:	f000 fb8e 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c08:	4827      	ldr	r0, [pc, #156]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c0a:	f00a f973 	bl	800aef4 <HAL_TIM_PWM_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c14:	f000 fb86 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c18:	2108      	movs	r1, #8
 8000c1a:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c1c:	f00a f9cb 	bl	800afb6 <HAL_TIM_OnePulse_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c26:	f000 fb7d 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c2e:	2370      	movs	r3, #112	@ 0x70
 8000c30:	633b      	str	r3, [r7, #48]	@ 0x30
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_INVERTED;
 8000c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sSlaveConfig.TriggerFilter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	4818      	ldr	r0, [pc, #96]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c48:	f00a fd9c 	bl	800b784 <HAL_TIM_SlaveConfigSynchro>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c52:	f000 fb67 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 8000c56:	2360      	movs	r3, #96	@ 0x60
 8000c58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	4619      	mov	r1, r3
 8000c64:	4810      	ldr	r0, [pc, #64]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c66:	f00b fb2d 	bl	800c2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c70:	f000 fb58 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c74:	2370      	movs	r3, #112	@ 0x70
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2208      	movs	r2, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4807      	ldr	r0, [pc, #28]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c8c:	f00a fb6e 	bl	800b36c <HAL_TIM_PWM_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000c96:	f000 fb45 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c9a:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <MX_TIM2_Init+0x10c>)
 8000c9c:	f002 fbd8 	bl	8003450 <HAL_TIM_MspPostInit>

}
 8000ca0:	bf00      	nop
 8000ca2:	3740      	adds	r7, #64	@ 0x40
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	240002d8 	.word	0x240002d8

08000cac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cd2:	4a21      	ldr	r2, [pc, #132]	@ (8000d58 <MX_TIM3_Init+0xac>)
 8000cd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cd8:	220f      	movs	r2, #15
 8000cda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 13750;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000ce4:	f243 52b6 	movw	r2, #13750	@ 0x35b6
 8000ce8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cf2:	2280      	movs	r2, #128	@ 0x80
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000cf6:	4817      	ldr	r0, [pc, #92]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000cf8:	f009 fef3 	bl	800aae2 <HAL_TIM_OC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d02:	f000 fb0f 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000d16:	f00b fad5 	bl	800c2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d20:	f000 fb00 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4806      	ldr	r0, [pc, #24]	@ (8000d54 <MX_TIM3_Init+0xa8>)
 8000d3c:	f00a fa9c 	bl	800b278 <HAL_TIM_OC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d46:	f000 faed 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	24000324 	.word	0x24000324
 8000d58:	40000400 	.word	0x40000400

08000d5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0a0      	sub	sp, #128	@ 0x80
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2234      	movs	r2, #52	@ 0x34
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00d fc02 	bl	800e5b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dac:	4b53      	ldr	r3, [pc, #332]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dae:	4a54      	ldr	r2, [pc, #336]	@ (8000f00 <MX_TIM8_Init+0x1a4>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8000db2:	4b52      	ldr	r3, [pc, #328]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000db4:	220f      	movs	r2, #15
 8000db6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5;
 8000dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dc0:	2205      	movs	r2, #5
 8000dc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 31;
 8000dca:	4b4c      	ldr	r3, [pc, #304]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dcc:	221f      	movs	r2, #31
 8000dce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dd6:	4849      	ldr	r0, [pc, #292]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000dd8:	f009 fd77 	bl	800a8ca <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000de2:	f000 fa9f 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dea:	673b      	str	r3, [r7, #112]	@ 0x70
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000df0:	4619      	mov	r1, r3
 8000df2:	4842      	ldr	r0, [pc, #264]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000df4:	f00a fbce 	bl	800b594 <HAL_TIM_ConfigClockSource>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000dfe:	f000 fa91 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e02:	483e      	ldr	r0, [pc, #248]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e04:	f00a f876 	bl	800aef4 <HAL_TIM_PWM_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000e0e:	f000 fa89 	bl	8001324 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e12:	2108      	movs	r1, #8
 8000e14:	4839      	ldr	r0, [pc, #228]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e16:	f00a f8ce 	bl	800afb6 <HAL_TIM_OnePulse_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000e20:	f000 fa80 	bl	8001324 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000e2c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e30:	4619      	mov	r1, r3
 8000e32:	4832      	ldr	r0, [pc, #200]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e34:	f00a fca6 	bl	800b784 <HAL_TIM_SlaveConfigSynchro>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000e3e:	f000 fa71 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e52:	4619      	mov	r1, r3
 8000e54:	4829      	ldr	r0, [pc, #164]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e56:	f00b fa35 	bl	800c2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000e60:	f000 fa60 	bl	8001324 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e64:	2370      	movs	r3, #112	@ 0x70
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 3;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000e74:	2304      	movs	r3, #4
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e86:	2200      	movs	r2, #0
 8000e88:	4619      	mov	r1, r3
 8000e8a:	481c      	ldr	r0, [pc, #112]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e8c:	f00a fa6e 	bl	800b36c <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000e96:	f000 fa45 	bl	8001324 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0208 	bic.w	r2, r2, #8
 8000ea8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ec2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000ee0:	f00b fa8c 	bl	800c3fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM8_Init+0x192>
  {
    Error_Handler();
 8000eea:	f000 fa1b 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000eee:	4803      	ldr	r0, [pc, #12]	@ (8000efc <MX_TIM8_Init+0x1a0>)
 8000ef0:	f002 faae 	bl	8003450 <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3780      	adds	r7, #128	@ 0x80
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000370 	.word	0x24000370
 8000f00:	40010400 	.word	0x40010400

08000f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 12500000;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f10:	4a22      	ldr	r2, [pc, #136]	@ (8000f9c <MX_USART3_UART_Init+0x98>)
 8000f12:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f14:	4b1f      	ldr	r3, [pc, #124]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f20:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f28:	2208      	movs	r2, #8
 8000f2a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f00b faff 	bl	800c550 <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f58:	f000 f9e4 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f60:	f00d f99d 	bl	800e29e <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f000 f9db 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f72:	f00d f9d2 	bl	800e31a <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 f9d2 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f82:	f00d f953 	bl	800e22c <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 f9ca 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	240003bc 	.word	0x240003bc
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	00bebc20 	.word	0x00bebc20

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_DMA_Init+0x5c>)
 8000fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fac:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <MX_DMA_Init+0x5c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_DMA_Init+0x5c>)
 8000fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	200b      	movs	r0, #11
 8000fca:	f002 ffb4 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f002 ffcb 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	200c      	movs	r0, #12
 8000fda:	f002 ffac 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f002 ffc3 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200d      	movs	r0, #13
 8000fea:	f002 ffa4 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f002 ffbb 	bl	8003f6a <HAL_NVIC_EnableIRQ>

}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	58024400 	.word	0x58024400

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08c      	sub	sp, #48	@ 0x30
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001016:	4bbc      	ldr	r3, [pc, #752]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	4aba      	ldr	r2, [pc, #744]	@ (8001308 <MX_GPIO_Init+0x308>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001026:	4bb8      	ldr	r3, [pc, #736]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4bb4      	ldr	r3, [pc, #720]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	4ab3      	ldr	r2, [pc, #716]	@ (8001308 <MX_GPIO_Init+0x308>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001044:	4bb0      	ldr	r3, [pc, #704]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	4bad      	ldr	r3, [pc, #692]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	4aab      	ldr	r2, [pc, #684]	@ (8001308 <MX_GPIO_Init+0x308>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001062:	4ba9      	ldr	r3, [pc, #676]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4ba5      	ldr	r3, [pc, #660]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	4aa4      	ldr	r2, [pc, #656]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001080:	4ba1      	ldr	r3, [pc, #644]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b9e      	ldr	r3, [pc, #632]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	4a9c      	ldr	r2, [pc, #624]	@ (8001308 <MX_GPIO_Init+0x308>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109e:	4b9a      	ldr	r3, [pc, #616]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ac:	4b96      	ldr	r3, [pc, #600]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	4a95      	ldr	r2, [pc, #596]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010bc:	4b92      	ldr	r3, [pc, #584]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	4a8d      	ldr	r2, [pc, #564]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010da:	4b8b      	ldr	r3, [pc, #556]	@ (8001308 <MX_GPIO_Init+0x308>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010ee:	4887      	ldr	r0, [pc, #540]	@ (800130c <MX_GPIO_Init+0x30c>)
 80010f0:	f005 ff42 	bl	8006f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fa:	4885      	ldr	r0, [pc, #532]	@ (8001310 <MX_GPIO_Init+0x310>)
 80010fc:	f005 ff3c 	bl	8006f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001106:	4882      	ldr	r0, [pc, #520]	@ (8001310 <MX_GPIO_Init+0x310>)
 8001108:	f005 ff36 	bl	8006f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8001112:	4880      	ldr	r0, [pc, #512]	@ (8001314 <MX_GPIO_Init+0x314>)
 8001114:	f005 ff30 	bl	8006f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111e:	487e      	ldr	r0, [pc, #504]	@ (8001318 <MX_GPIO_Init+0x318>)
 8001120:	f005 ff2a 	bl	8006f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ErrorCode_Bit_3_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2103      	movs	r1, #3
 8001128:	487c      	ldr	r0, [pc, #496]	@ (800131c <MX_GPIO_Init+0x31c>)
 800112a:	f005 ff25 	bl	8006f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800112e:	2304      	movs	r3, #4
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001132:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4876      	ldr	r0, [pc, #472]	@ (800131c <MX_GPIO_Init+0x31c>)
 8001144:	f005 fd70 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	486e      	ldr	r0, [pc, #440]	@ (8001318 <MX_GPIO_Init+0x318>)
 800115e:	f005 fd63 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001162:	2332      	movs	r3, #50	@ 0x32
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001172:	230b      	movs	r3, #11
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4866      	ldr	r0, [pc, #408]	@ (8001318 <MX_GPIO_Init+0x318>)
 800117e:	f005 fd53 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001182:	2386      	movs	r3, #134	@ 0x86
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001192:	230b      	movs	r3, #11
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4860      	ldr	r0, [pc, #384]	@ (8001320 <MX_GPIO_Init+0x320>)
 800119e:	f005 fd43 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80011a2:	f244 0301 	movw	r3, #16385	@ 0x4001
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4854      	ldr	r0, [pc, #336]	@ (800130c <MX_GPIO_Init+0x30c>)
 80011bc:	f005 fd34 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d2:	230b      	movs	r3, #11
 80011d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	484b      	ldr	r0, [pc, #300]	@ (800130c <MX_GPIO_Init+0x30c>)
 80011de:	f005 fd23 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Interrupt_Monitor_Pin */
  GPIO_InitStruct.Pin = Interrupt_Monitor_Pin;
 80011e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Interrupt_Monitor_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4845      	ldr	r0, [pc, #276]	@ (8001310 <MX_GPIO_Init+0x310>)
 80011fc:	f005 fd14 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	483d      	ldr	r0, [pc, #244]	@ (8001310 <MX_GPIO_Init+0x310>)
 800121a:	f005 fd05 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ErrorCode_Bit_1_Pin ErrorCode_Bit_0_Pin ErrorCode_Bit_2_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_1_Pin|ErrorCode_Bit_0_Pin|ErrorCode_Bit_2_Pin;
 800121e:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4837      	ldr	r0, [pc, #220]	@ (8001314 <MX_GPIO_Init+0x314>)
 8001238:	f005 fcf6 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4830      	ldr	r0, [pc, #192]	@ (8001314 <MX_GPIO_Init+0x314>)
 8001252:	f005 fce9 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Main_Monitor_Pin */
  GPIO_InitStruct.Pin = Main_Monitor_Pin;
 8001256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Main_Monitor_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	482a      	ldr	r0, [pc, #168]	@ (8001318 <MX_GPIO_Init+0x318>)
 8001270:	f005 fcda 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001286:	230a      	movs	r3, #10
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	4823      	ldr	r0, [pc, #140]	@ (8001320 <MX_GPIO_Init+0x320>)
 8001292:	f005 fcc9 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001296:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4818      	ldr	r0, [pc, #96]	@ (8001314 <MX_GPIO_Init+0x314>)
 80012b4:	f005 fcb8 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ErrorCode_Bit_3_Pin */
  GPIO_InitStruct.Pin = ErrorCode_Bit_3_Pin;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ErrorCode_Bit_3_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_GPIO_Init+0x31c>)
 80012d0:	f005 fcaa 	bl	8006c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_GPIO_Init+0x31c>)
 80012ec:	f005 fc9c 	bl	8006c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2008      	movs	r0, #8
 80012f6:	f002 fe1e 	bl	8003f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80012fa:	2008      	movs	r0, #8
 80012fc:	f002 fe35 	bl	8003f6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	@ 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024400 	.word	0x58024400
 800130c:	58020400 	.word	0x58020400
 8001310:	58020c00 	.word	0x58020c00
 8001314:	58021800 	.word	0x58021800
 8001318:	58020800 	.word	0x58020800
 800131c:	58021000 	.word	0x58021000
 8001320:	58020000 	.word	0x58020000

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <Error_Handler+0x8>

08001330 <write_pin>:
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(gpio_port, gpio_pin, level);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	b29b      	uxth	r3, r3
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f005 fe16 	bl	8006f78 <HAL_GPIO_WritePin>
}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <sample_interrupt_routine>:
// Due to use of DMA in this example (which is very efficient for large data transfers), processing is not
// the likely bottleneck, but rather the rate of SPI communication itself. Shorter SPI command sequences
// (default is 32 CONVERT commands + 3 AUX commands) and/or faster Baud rate will allow SPI communication to
// finish faster.
void sample_interrupt_routine()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	// Check if condition specified in loop_escape (e.g. target number of samples have been acquired) is true.
	// If so, keep from continuing interrupt execution and return to main loop so it can be escaped.
	if (loop_escape()) return;
 8001358:	f002 fb1c 	bl	8003994 <loop_escape>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d120      	bne.n	80013a4 <sample_interrupt_routine+0x50>

	// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
	// Main loop will write Main_Monitor_Pin when processing returns to main, so the duty cycle of this pin
	// can be measured to estimate what percentage of clock cycles are available for main processing.
	write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <sample_interrupt_routine+0x54>)
 800136a:	f7ff ffe1 	bl	8001330 <write_pin>

	// Write aux commands to command_sequence_MOSI, advancing one sample through aux_command_list.
	cycle_aux_commands();
 800136e:	f000 f821 	bl	80013b4 <cycle_aux_commands>

	// If previous DMA transfer has not completed, SPI communication from previous sample has not finished.
	// This is a critical error that will halt execution. To avoid this, all processing from previous interrupt
	// must conclude sooner (most likely, this would be waiting on SPI transfer completion, in which case
	// fewer channels can be included in the command sequence, or the SPI communication itself must be sped up).
	if (command_transfer_state == TRANSFER_WAIT) {
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <sample_interrupt_routine+0x58>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <sample_interrupt_routine+0x2c>
		handle_comm_error(ITClip);
 800137a:	2005      	movs	r0, #5
 800137c:	f000 f8cc 	bl	8001518 <handle_comm_error>

	// Indicate start of timer interrupt by writing Interrupt_Monitor_Pin High.
	// At the end of this function, Interrupt_Monitor_Pin will be written Low (though, keep in mind that
	// this only indicates that the DMA transfer has been initiated - DMA will continue running either until
	// its SPI command sequence concludes, or the next interrupt occurs, causing an ITClip error).
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001386:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <sample_interrupt_routine+0x5c>)
 8001388:	f7ff ffd2 	bl	8001330 <write_pin>

	// Update variable indicate to wait until SPI DMA transfer completes.
	command_transfer_state = TRANSFER_WAIT;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <sample_interrupt_routine+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

	transfer_sequence_spi_dma();
 8001392:	f000 f845 	bl	8001420 <transfer_sequence_spi_dma>

	// SPI DMA transfer has begun, so write Interrupt_Monitor_Pin Low and exit interrupt function,
	// returning to processing main loop.
	write_pin(Interrupt_Monitor_GPIO_Port, Interrupt_Monitor_Pin, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <sample_interrupt_routine+0x5c>)
 800139e:	f7ff ffc7 	bl	8001330 <write_pin>
 80013a2:	e000      	b.n	80013a6 <sample_interrupt_routine+0x52>
	if (loop_escape()) return;
 80013a4:	bf00      	nop
}
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	58020800 	.word	0x58020800
 80013ac:	24000004 	.word	0x24000004
 80013b0:	58020c00 	.word	0x58020c00

080013b4 <cycle_aux_commands>:


// Every sample period, cycle circularly through aux_command_list, adding this sample's AUX commands to the end of
// command_sequence_MOSI array which will be transmitted via SPI.
void cycle_aux_commands()
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e012      	b.n	80013e6 <cycle_aux_commands+0x32>
		command_sequence_MOSI[CONVERT_COMMANDS_PER_SEQUENCE + i] = aux_command_list[i][aux_command_index];
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <cycle_aux_commands+0x60>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3320      	adds	r3, #32
 80013cc:	4912      	ldr	r1, [pc, #72]	@ (8001418 <cycle_aux_commands+0x64>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	01d2      	lsls	r2, r2, #7
 80013d2:	4402      	add	r2, r0
 80013d4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013d8:	b291      	uxth	r1, r2
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <cycle_aux_commands+0x68>)
 80013dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < AUX_COMMANDS_PER_SEQUENCE; i++) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3301      	adds	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	dde9      	ble.n	80013c0 <cycle_aux_commands+0xc>
	}
	if (++aux_command_index >= AUX_COMMAND_LIST_LENGTH) {
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <cycle_aux_commands+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <cycle_aux_commands+0x60>)
 80013f8:	4611      	mov	r1, r2
 80013fa:	7019      	strb	r1, [r3, #0]
 80013fc:	b253      	sxtb	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da02      	bge.n	8001408 <cycle_aux_commands+0x54>
		aux_command_index = 0;
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <cycle_aux_commands+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	// Note that if any command(s) are to be used with a command list different from AUX_COMMAND_LIST_LENGTH,
	// the above code should be commented out, and the last AUX_COMMANDS_PER_SEQUENCE of command_sequence_MOSI
	// should be written here. For example, if impedance check DAC control is used, zcheck_DAC_command_list_length
	// should replace AUX_COMMAND_LIST_LENGTH and zcheck_DAC_command_slot_position should be used to correctly index
	// commands from the proper aux_command_list slot.
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	240008a4 	.word	0x240008a4
 8001418:	240005a4 	.word	0x240005a4
 800141c:	240004c8 	.word	0x240004c8

08001420 <transfer_sequence_spi_dma>:


// Begin receiving MISO data (RHD -> SPI -> DMA -> memory) and transmitting MOSI data (memory -> DMA -> SPI -> RHD).
void transfer_sequence_spi_dma()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	// HAL handles all of SPI DMA transfer with this single function call.

	// Note: this HAL function call seems to not be consistent in how long it takes, causing some jitter between Interrupt_Monitor_Pin (GPIO) and SPI signals.
	// However, SPI/DMA signals seem to be consistent with each other, so this shouldn't affect functionality.
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*)command_sequence_MISO,
 8001424:	2223      	movs	r2, #35	@ 0x23
 8001426:	490a      	ldr	r1, [pc, #40]	@ (8001450 <transfer_sequence_spi_dma+0x30>)
 8001428:	480a      	ldr	r0, [pc, #40]	@ (8001454 <transfer_sequence_spi_dma+0x34>)
 800142a:	f008 fdab 	bl	8009f84 <HAL_SPI_Receive_DMA>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <transfer_sequence_spi_dma+0x18>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001434:	f7ff ff76 	bl	8001324 <Error_Handler>
	}


	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*)command_sequence_MOSI,
 8001438:	2223      	movs	r2, #35	@ 0x23
 800143a:	4907      	ldr	r1, [pc, #28]	@ (8001458 <transfer_sequence_spi_dma+0x38>)
 800143c:	4807      	ldr	r0, [pc, #28]	@ (800145c <transfer_sequence_spi_dma+0x3c>)
 800143e:	f008 fc5f 	bl	8009d00 <HAL_SPI_Transmit_DMA>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <transfer_sequence_spi_dma+0x2c>
			CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) != HAL_OK)
	{
		Error_Handler();
 8001448:	f7ff ff6c 	bl	8001324 <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MISO, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
	begin_spi_tx(LL_DMA_MEMORY_INCREMENT, (uint32_t) command_sequence_MOSI, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);
#endif
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	24000510 	.word	0x24000510
 8001454:	2400008c 	.word	0x2400008c
 8001458:	240004c8 	.word	0x240004c8
 800145c:	24000114 	.word	0x24000114

08001460 <allocate_sample_memory>:


// Calculate suitable size for sample_memory array and allocate memory.
// Note, free_sample_memory() should be called after this function and when memory allocation is no longer needed.
void allocate_sample_memory()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	per_channel_sample_memory_capacity = calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8001466:	f000 f983 	bl	8001770 <calculate_sample_rate>
 800146a:	eeb0 7b40 	vmov.f64	d7, d0
 800146e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001472:	ee17 2a90 	vmov	r2, s15
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <allocate_sample_memory+0x3c>)
 8001478:	601a      	str	r2, [r3, #0]
	uint32_t total_sample_memory_capacity = NUM_SAMPLED_CHANNELS * 2 * per_channel_sample_memory_capacity;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <allocate_sample_memory+0x3c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	607b      	str	r3, [r7, #4]
	sample_memory = (uint16_t *)malloc(total_sample_memory_capacity * sizeof(uint16_t));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f00c ffd4 	bl	800e434 <malloc>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <allocate_sample_memory+0x40>)
 8001492:	601a      	str	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24000000 	.word	0x24000000
 80014a0:	240005a0 	.word	0x240005a0

080014a4 <free_sample_memory>:


// Free memory previously allocated for sample_memory array.
// Note, this should be called after allocate_sample_memory() and when memory allocation is no longer needed.
void free_sample_memory()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	free(sample_memory);
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <free_sample_memory+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c ffc9 	bl	800e444 <free>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	240005a0 	.word	0x240005a0

080014bc <initialize_spi_with_dma>:
// so this function only has an LL implementation.
// Some of these settings (data length, memory location, and memory increment state)
// will be overwritten on a transfer-by-transfer basis, but the general configurations
// like transfer directions, peripheral addresses, and DMAMUX request ID can be permanently set here.
void initialize_spi_with_dma()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
#ifdef USE_HAL
	return;
 80014c0:	bf00      	nop
	LL_DMA_SetDataLength(DMA, DMA_RX_CHANNEL, CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE);

	// Assign RX DMA stream to correct DMAMUX request
	LL_DMA_SetPeriphRequest(DMA, DMA_RX_CHANNEL, LL_DMAMUX1_REQ_SPI1_RX);
#endif
}
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <end_spi_with_dma>:

// Write SPI/DMA registers to cleanly disable once DMA transfer ends.
// HAL automatically does this for each Send/Receive with SPI/DMA,
// so this function only has an LL implementation.
void end_spi_with_dma()
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
#ifdef USE_HAL
#else
	end_spi_rx();
	end_spi_tx();
#endif
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <initialize_ddr_sclk_timers>:


// Start timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void initialize_ddr_sclk_timers()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Start(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 80014dc:	2100      	movs	r1, #0
 80014de:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <initialize_ddr_sclk_timers+0x18>)
 80014e0:	f009 fb56 	bl	800ab90 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&CS_DELAY_TIM, TIM_CHANNEL_3);
 80014e4:	2108      	movs	r1, #8
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <initialize_ddr_sclk_timers+0x1c>)
 80014e8:	f009 fb52 	bl	800ab90 <HAL_TIM_OC_Start>
  LL_TIM_EnableCounter(RECEIVE_SCLK_TIM);

  LL_TIM_CC_EnableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
  LL_TIM_EnableCounter(CS_DELAY_TIM);
#endif
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2400028c 	.word	0x2400028c
 80014f4:	240002d8 	.word	0x240002d8

080014f8 <end_ddr_sclk_timers>:

// End timers used to generate Receive SCLK signal used to read DDR MISO, triggered with delay from Transmit CS.
void end_ddr_sclk_timers()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
#ifdef USE_HAL
  HAL_TIM_OC_Stop(&RECEIVE_SCLK_TIM, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	4804      	ldr	r0, [pc, #16]	@ (8001510 <end_ddr_sclk_timers+0x18>)
 8001500:	f009 fc62 	bl	800adc8 <HAL_TIM_OC_Stop>
  HAL_TIM_OC_Stop(&CS_DELAY_TIM, TIM_CHANNEL_3);
 8001504:	2108      	movs	r1, #8
 8001506:	4803      	ldr	r0, [pc, #12]	@ (8001514 <end_ddr_sclk_timers+0x1c>)
 8001508:	f009 fc5e 	bl	800adc8 <HAL_TIM_OC_Stop>
  LL_TIM_CC_DisableChannel(RECEIVE_SCLK_TIM, LL_TIM_CHANNEL_CH1);

  LL_TIM_DisableCounter(CS_DELAY_TIM);
  LL_TIM_CC_DisableChannel(CS_DELAY_TIM, LL_TIM_CHANNEL_CH3);
#endif
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2400028c 	.word	0x2400028c
 8001514:	240002d8 	.word	0x240002d8

08001518 <handle_comm_error>:
// Handle communication error.
// Write ERROR_DETECTED_PIN (by default, red LED) High.
// Write each bit of a 4-bit error code to a pin so that by measuring pins, user can determine the error code.
// Enter an infinite loop, halting execution and allowing user to measure error pins.
void handle_comm_error(CommErrorStatus error_code)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	// No error, just return.
	if (error_code == 0) return;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03f      	beq.n	80015a8 <handle_comm_error+0x90>

	// Write ERROR_DETECTED_PIN (by default red LED) to communicate that an error occurred.
	write_pin(ERROR_DETECTED_PORT, ERROR_DETECTED_PIN, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800152e:	4820      	ldr	r0, [pc, #128]	@ (80015b0 <handle_comm_error+0x98>)
 8001530:	f7ff fefe 	bl	8001330 <write_pin>

	// Write 4 bits of error code to 4 pins.
	uint8_t error_code_bit_0 = (error_code & 0b0001) >> 0;
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
	uint8_t error_code_bit_1 = (error_code & 0b0010) >> 1;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	105b      	asrs	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
	uint8_t error_code_bit_2 = (error_code & 0b0100) >> 2;
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	109b      	asrs	r3, r3, #2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	737b      	strb	r3, [r7, #13]
	uint8_t error_code_bit_3 = (error_code & 0b1000) >> 3;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	10db      	asrs	r3, r3, #3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	733b      	strb	r3, [r7, #12]
	if (error_code_bit_0) write_pin(ErrorCode_Bit_0_GPIO_Port, ErrorCode_Bit_0_Pin, 1);
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <handle_comm_error+0x58>
 8001566:	2201      	movs	r2, #1
 8001568:	2140      	movs	r1, #64	@ 0x40
 800156a:	4812      	ldr	r0, [pc, #72]	@ (80015b4 <handle_comm_error+0x9c>)
 800156c:	f7ff fee0 	bl	8001330 <write_pin>
	if (error_code_bit_1) write_pin(ErrorCode_Bit_1_GPIO_Port, ErrorCode_Bit_1_Pin, 1);
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <handle_comm_error+0x68>
 8001576:	2201      	movs	r2, #1
 8001578:	2120      	movs	r1, #32
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <handle_comm_error+0x9c>)
 800157c:	f7ff fed8 	bl	8001330 <write_pin>
	if (error_code_bit_2) write_pin(ErrorCode_Bit_2_GPIO_Port, ErrorCode_Bit_2_Pin, 1);
 8001580:	7b7b      	ldrb	r3, [r7, #13]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <handle_comm_error+0x7a>
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <handle_comm_error+0x9c>)
 800158e:	f7ff fecf 	bl	8001330 <write_pin>
	if (error_code_bit_3) write_pin(ErrorCode_Bit_3_GPIO_Port, ErrorCode_Bit_3_Pin, 1);
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <handle_comm_error+0x8c>
 8001598:	2201      	movs	r2, #1
 800159a:	2101      	movs	r1, #1
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <handle_comm_error+0xa0>)
 800159e:	f7ff fec7 	bl	8001330 <write_pin>

	// Enter infinite loop.
	while(1);
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <handle_comm_error+0x8c>
	if (error_code == 0) return;
 80015a8:	bf00      	nop
}
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58020400 	.word	0x58020400
 80015b4:	58021800 	.word	0x58021800
 80015b8:	58021000 	.word	0x58021000

080015bc <spi_rx_cplt_callback>:


// Callback function that executes when Reception of SPI has completed.
void spi_rx_cplt_callback()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	// If main loop is active, drive Main_Monitor_Pin low, write data to memory, transmit data in realtime, and update command_transfer_state
	if (main_loop_active) {
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <spi_rx_cplt_callback+0x34>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00d      	beq.n	80015e6 <spi_rx_cplt_callback+0x2a>
		// Indicate main loop is not currently processing by writing Main_Monitor_Pin Low.
		write_pin(Main_Monitor_GPIO_Port, Main_Monitor_Pin, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <spi_rx_cplt_callback+0x38>)
 80015d2:	f7ff fead 	bl	8001330 <write_pin>

		// User-specified function - here is where specified channel(s) can be written to memory.
		write_data_to_memory();
 80015d6:	f002 f9f3 	bl	80039c0 <write_data_to_memory>

		// User-specified function - here is where user can transmit data in real time every sample period.
		transmit_data_realtime();
 80015da:	f002 fa2d 	bl	8003a38 <transmit_data_realtime>

		// Update state variable to show that transfer has completed.
		command_transfer_state = TRANSFER_COMPLETE;
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <spi_rx_cplt_callback+0x3c>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
#else
		end_spi_rx();
#endif
		reception_in_progress = 0;
	}
}
 80015e4:	e002      	b.n	80015ec <spi_rx_cplt_callback+0x30>
		reception_in_progress = 0;
 80015e6:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <spi_rx_cplt_callback+0x40>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	240008a6 	.word	0x240008a6
 80015f4:	58020800 	.word	0x58020800
 80015f8:	24000004 	.word	0x24000004
 80015fc:	240008a5 	.word	0x240008a5

08001600 <morton_deinterleave>:

// Use 'magic bits' de interleave method inspired by Jeroen Baert's blog post:
// "Morton encoding/decoding through bit interleaving: Implementations" to achieve
// high performance method of separate every other bit from a 32-bit input.
uint16_t morton_deinterleave(uint32_t x)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    x = x & 0x55555555; // Use mask to clear all even bits
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800160e:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 1)) & 0x33333333; // Shift-right by 1, duplicate, and mask data so that valid data is grouped into 2s (00xx00xx00xx...)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	085a      	lsrs	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4313      	orrs	r3, r2
 8001618:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 800161c:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 2)) & 0x0F0F0F0F; // Shift-right by 2, duplicate, and mask data so that valid data is grouped into 4s (0000xxxx0000xxxx...)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	089a      	lsrs	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	f003 330f 	and.w	r3, r3, #252645135	@ 0xf0f0f0f
 800162a:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 4)) & 0x00FF00FF; // Shift-right by 4, duplicate, and mask data so that valid data is grouped into 8s (00000000xxxxxxxx00000000xxxxxxxx...)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	091a      	lsrs	r2, r3, #4
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4313      	orrs	r3, r2
 8001634:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8001638:	607b      	str	r3, [r7, #4]
    x = (x | (x >> 8)) & 0x0000FFFF; // Shift-right by 8, duplicate, and mask data so that 16 MSB data is 0s, 16 LSB data is valid data
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0a1a      	lsrs	r2, r3, #8
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4313      	orrs	r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	607b      	str	r3, [r7, #4]
    return (uint16_t) x; // Cast 32-bit 0000_0000_0000_0000_xxxx_xxxx_xxxx_xxxx data into 16-bit xxxx_xxxx_xxxx_xxxx data
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	b29b      	uxth	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <extract_ddr_words>:


// Separate a 32-bit merged word (interleaved stream A and stream B data) into 2 distinct 16-bit words.
void extract_ddr_words(uint32_t merged_word, volatile uint16_t *word_A, volatile uint16_t *word_B)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
//		*word_B |= bit_B << i;
//	}

	// A much faster, but less obvious method uses 'magic bit' masks to copy, shift, and mask bits in several steps
	// to achieve the same result in fewer operations.
	*word_A = morton_deinterleave(merged_word); // Data stream A is all add
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff ffcc 	bl	8001600 <morton_deinterleave>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	801a      	strh	r2, [r3, #0]
	*word_B = morton_deinterleave(merged_word >> 1);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffc3 	bl	8001600 <morton_deinterleave>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	801a      	strh	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <spi_error_callback>:


// Callback function to show that an SPI error occurred.
void spi_error_callback()
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	command_transfer_state = TRANSFER_ERROR;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <spi_error_callback+0x14>)
 8001692:	2202      	movs	r2, #2
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	24000004 	.word	0x24000004

080016a4 <write_initial_reg_values>:
// Determine suitable values to be written to registers
// (based on default acquisition values from RHX software).
// These suitable default values are saved to RHDConfigParameters argument.
// Write these values to registers, and calibrate and run for 9 commands to fully initialize chip.
void write_initial_reg_values(RHDConfigParameters *p)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b090      	sub	sp, #64	@ 0x40
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	// Determine suitable values to be written for each of the registers.
	p->sample_rate = calculate_sample_rate();
 80016ac:	f000 f860 	bl	8001770 <calculate_sample_rate>
 80016b0:	eeb0 7b40 	vmov.f64	d7, d0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	ed83 7b00 	vstr	d7, [r3]
	set_default_rhd_settings(p);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 f8e4 	bl	8002888 <set_default_rhd_settings>

	uint16_t registers[22];
	for (int i = 0; i < 22; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016c4:	e00e      	b.n	80016e4 <write_initial_reg_values+0x40>
		registers[i] = get_register_value(p, i);
 80016c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 fa25 	bl	8002b18 <get_register_value>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	3340      	adds	r3, #64	@ 0x40
 80016d8:	443b      	add	r3, r7
 80016da:	f823 2c38 	strh.w	r2, [r3, #-56]
	for (int i = 0; i < 22; i++) {
 80016de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e0:	3301      	adds	r3, #1
 80016e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e6:	2b15      	cmp	r3, #21
 80016e8:	dded      	ble.n	80016c6 <write_initial_reg_values+0x22>
	}

	// Send a few dummy commands in case chip is still powering up.
	send_spi_command(read_command(63));
 80016ea:	203f      	movs	r0, #63	@ 0x3f
 80016ec:	f001 fc83 	bl	8002ff6 <read_command>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fa4d 	bl	8001b92 <send_spi_command>
	send_spi_command(read_command(63));
 80016f8:	203f      	movs	r0, #63	@ 0x3f
 80016fa:	f001 fc7c 	bl	8002ff6 <read_command>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fa46 	bl	8001b92 <send_spi_command>


	// Write suitable default values for RHD registers.
	for (int i = 0; i < 22; i++) {
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800170a:	e013      	b.n	8001734 <write_initial_reg_values+0x90>
		send_spi_command(write_command(i, registers[i]));
 800170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800170e:	b2da      	uxtb	r2, r3
 8001710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	3340      	adds	r3, #64	@ 0x40
 8001716:	443b      	add	r3, r7
 8001718:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	4619      	mov	r1, r3
 8001720:	4610      	mov	r0, r2
 8001722:	f001 fc4b 	bl	8002fbc <write_command>
 8001726:	4603      	mov	r3, r0
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fa32 	bl	8001b92 <send_spi_command>
	for (int i = 0; i < 22; i++) {
 800172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001730:	3301      	adds	r3, #1
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001736:	2b15      	cmp	r3, #21
 8001738:	dde8      	ble.n	800170c <write_initial_reg_values+0x68>
	}

	// Calibrate and run for 9 commands.
	send_spi_command(calibrate_command());
 800173a:	f001 fc36 	bl	8002faa <calibrate_command>
 800173e:	4603      	mov	r3, r0
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fa26 	bl	8001b92 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	@ 0x34
 800174a:	e009      	b.n	8001760 <write_initial_reg_values+0xbc>
		send_spi_command(read_command(40));
 800174c:	2028      	movs	r0, #40	@ 0x28
 800174e:	f001 fc52 	bl	8002ff6 <read_command>
 8001752:	4603      	mov	r3, r0
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa1c 	bl	8001b92 <send_spi_command>
	for (int i = 0; i < 9; i++) {
 800175a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800175c:	3301      	adds	r3, #1
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001762:	2b08      	cmp	r3, #8
 8001764:	ddf2      	ble.n	800174c <write_initial_reg_values+0xa8>
	}
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	3740      	adds	r7, #64	@ 0x40
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <calculate_sample_rate>:
// Check timer clock input, clock division, prescaling, and counter period
// to determine the rate at which INTERRUPT_TIM interrupts occur (sample rate).
// Note that this reads clock and timer configuration register values during runtime,
// so this function should adapt to any changes made to the .ioc.
double calculate_sample_rate()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
	uint32_t apb1_timer_freq, ckd_value, psc_value, counter_period;

#ifdef USE_HAL
	apb1_timer_freq = HAL_RCC_GetPCLK1Freq() * 2; // Timer clock inputs on the H7 are multiplied x2 from peripheral clock frequency, which this function reports.
 8001776:	f006 fbb1 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
	ckd_value = INTERRUPT_TIM.Init.ClockDivision;
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <calculate_sample_rate+0xa0>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	61bb      	str	r3, [r7, #24]
	psc_value = INTERRUPT_TIM.Init.Prescaler;
 8001786:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <calculate_sample_rate+0xa0>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	617b      	str	r3, [r7, #20]
	counter_period = INTERRUPT_TIM.Init.Period;
 800178c:	4b20      	ldr	r3, [pc, #128]	@ (8001810 <calculate_sample_rate+0xa0>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	613b      	str	r3, [r7, #16]
	ckd_value = LL_TIM_GetClockDivision(INTERRUPT_TIM);
	psc_value = LL_TIM_GetPrescaler(INTERRUPT_TIM);
	counter_period = LL_TIM_GetAutoReload(INTERRUPT_TIM);
#endif

	double ckd_factor = 1.0;
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <calculate_sample_rate+0xa4>)
 8001798:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ckd_value == 0b01) {
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <calculate_sample_rate+0x40>
		ckd_factor = 2;
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017ae:	e007      	b.n	80017c0 <calculate_sample_rate+0x50>
	} else if (ckd_value == 0b10) {
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d104      	bne.n	80017c0 <calculate_sample_rate+0x50>
		ckd_factor = 4;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <calculate_sample_rate+0xa8>)
 80017bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	}

	double psc_factor = psc_value + 1;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017cc:	ed87 7b02 	vstr	d7, [r7, #8]

	double input_frequency = apb1_timer_freq / (ckd_factor * psc_factor);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80017da:	ed97 6b08 	vldr	d6, [r7, #32]
 80017de:	ed97 7b02 	vldr	d7, [r7, #8]
 80017e2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017ea:	ed87 7b00 	vstr	d7, [r7]
	return input_frequency / counter_period;
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80017f8:	ed97 6b00 	vldr	d6, [r7]
 80017fc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001800:	eeb0 7b45 	vmov.f64	d7, d5
}
 8001804:	eeb0 0b47 	vmov.f64	d0, d7
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	24000324 	.word	0x24000324
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	40100000 	.word	0x40100000

0800181c <create_convert_sequence>:
// and load them into command_sequence_MOSI.
// If the channel_numbers_to_convert parameter is NULL,
// create CONVERT_COMMANDS_PER_SEQUENCE commands from channel 0 (default 0 - 31).
// Otherwise, populate the CONVERT commands in the order specified by channel_numbers_to_convert.
void create_convert_sequence(uint8_t* channel_numbers_to_convert)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	// If no list of channel numbers is provided,
	// then assume CONVERT should occur for channels 0 - CONVERT_COMMANDS_PER_SEQUENCE.
	if (channel_numbers_to_convert == NULL) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <create_convert_sequence+0x3a>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e00e      	b.n	800184e <create_convert_sequence+0x32>
			command_sequence_MOSI[i] = convert_command(i, 0);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f001 fb9a 	bl	8002f70 <convert_command>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <create_convert_sequence+0x70>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b1f      	cmp	r3, #31
 8001852:	dded      	ble.n	8001830 <create_convert_sequence+0x14>
	else {
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
		}
	}
}
 8001854:	e016      	b.n	8001884 <create_convert_sequence+0x68>
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	e010      	b.n	800187e <create_convert_sequence+0x62>
			command_sequence_MOSI[i] = convert_command(channel_numbers_to_convert[i], 0);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fb82 	bl	8002f70 <convert_command>
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	4a06      	ldr	r2, [pc, #24]	@ (800188c <create_convert_sequence+0x70>)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3301      	adds	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b1f      	cmp	r3, #31
 8001882:	ddeb      	ble.n	800185c <create_convert_sequence+0x40>
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	240004c8 	.word	0x240004c8

08001890 <create_command_list_RHD_register_config>:

// Create a list of num_commands commands to program most RAM registers on an RHD2000 chip, read those values
// back to confirm programming, read ROM registers, and (if calibrate == true) run ADC calibration.
// Return the number of populated commands. num_commands must be 60 or greater.
int create_command_list_RHD_register_config(RHDConfigParameters *p, uint16_t *command_list, uint8_t calibrate, int num_commands)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	71fb      	strb	r3, [r7, #7]
	int command_index = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
	// Start with a few dummy commands in case chip is still powering up.
	command_list[command_index++] = read_command(63);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	61fa      	str	r2, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	18d4      	adds	r4, r2, r3
 80018b0:	203f      	movs	r0, #63	@ 0x3f
 80018b2:	f001 fba0 	bl	8002ff6 <read_command>
 80018b6:	4603      	mov	r3, r0
 80018b8:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(63);
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	61fa      	str	r2, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	18d4      	adds	r4, r2, r3
 80018c6:	203f      	movs	r0, #63	@ 0x3f
 80018c8:	f001 fb95 	bl	8002ff6 <read_command>
 80018cc:	4603      	mov	r3, r0
 80018ce:	8023      	strh	r3, [r4, #0]


	// Program RAM registers.
	for (int reg = 0; reg < 22; ++reg) {
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	e01d      	b.n	8001912 <create_command_list_RHD_register_config+0x82>
		// Don't program Register 3 (MUX Load, Temperature Sensor, and Auxiliary Digital Output)
		// or 6 (Impedance Check DAC) here;
		// control temperature sensor and DAC waveforms in other command streams.
		if (reg == 3 || reg == 6) continue;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d016      	beq.n	800190a <create_command_list_RHD_register_config+0x7a>
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d013      	beq.n	800190a <create_command_list_RHD_register_config+0x7a>
		command_list[command_index++] = write_command(reg, get_register_value(p, reg));
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	b2dd      	uxtb	r5, r3
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f001 f915 	bl	8002b18 <get_register_value>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b2d9      	uxtb	r1, r3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	61fa      	str	r2, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	18d4      	adds	r4, r2, r3
 80018fe:	4628      	mov	r0, r5
 8001900:	f001 fb5c 	bl	8002fbc <write_command>
 8001904:	4603      	mov	r3, r0
 8001906:	8023      	strh	r3, [r4, #0]
 8001908:	e000      	b.n	800190c <create_command_list_RHD_register_config+0x7c>
		if (reg == 3 || reg == 6) continue;
 800190a:	bf00      	nop
	for (int reg = 0; reg < 22; ++reg) {
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	3301      	adds	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b15      	cmp	r3, #21
 8001916:	ddde      	ble.n	80018d6 <create_command_list_RHD_register_config+0x46>
	}


	// Read ROM registers.
	command_list[command_index++] = read_command(63);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	61fa      	str	r2, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	18d4      	adds	r4, r2, r3
 8001924:	203f      	movs	r0, #63	@ 0x3f
 8001926:	f001 fb66 	bl	8002ff6 <read_command>
 800192a:	4603      	mov	r3, r0
 800192c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(62);
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	61fa      	str	r2, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	18d4      	adds	r4, r2, r3
 800193a:	203e      	movs	r0, #62	@ 0x3e
 800193c:	f001 fb5b 	bl	8002ff6 <read_command>
 8001940:	4603      	mov	r3, r0
 8001942:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(61);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	61fa      	str	r2, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	18d4      	adds	r4, r2, r3
 8001950:	203d      	movs	r0, #61	@ 0x3d
 8001952:	f001 fb50 	bl	8002ff6 <read_command>
 8001956:	4603      	mov	r3, r0
 8001958:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(60);
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	61fa      	str	r2, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	18d4      	adds	r4, r2, r3
 8001966:	203c      	movs	r0, #60	@ 0x3c
 8001968:	f001 fb45 	bl	8002ff6 <read_command>
 800196c:	4603      	mov	r3, r0
 800196e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(59);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	61fa      	str	r2, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	18d4      	adds	r4, r2, r3
 800197c:	203b      	movs	r0, #59	@ 0x3b
 800197e:	f001 fb3a 	bl	8002ff6 <read_command>
 8001982:	4603      	mov	r3, r0
 8001984:	8023      	strh	r3, [r4, #0]

	// Read chip name from ROM.
	command_list[command_index++] = read_command(48);
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	61fa      	str	r2, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	18d4      	adds	r4, r2, r3
 8001992:	2030      	movs	r0, #48	@ 0x30
 8001994:	f001 fb2f 	bl	8002ff6 <read_command>
 8001998:	4603      	mov	r3, r0
 800199a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(49);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	61fa      	str	r2, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	18d4      	adds	r4, r2, r3
 80019a8:	2031      	movs	r0, #49	@ 0x31
 80019aa:	f001 fb24 	bl	8002ff6 <read_command>
 80019ae:	4603      	mov	r3, r0
 80019b0:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(50);
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	61fa      	str	r2, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	18d4      	adds	r4, r2, r3
 80019be:	2032      	movs	r0, #50	@ 0x32
 80019c0:	f001 fb19 	bl	8002ff6 <read_command>
 80019c4:	4603      	mov	r3, r0
 80019c6:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(51);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	61fa      	str	r2, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	18d4      	adds	r4, r2, r3
 80019d4:	2033      	movs	r0, #51	@ 0x33
 80019d6:	f001 fb0e 	bl	8002ff6 <read_command>
 80019da:	4603      	mov	r3, r0
 80019dc:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(52);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	61fa      	str	r2, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	18d4      	adds	r4, r2, r3
 80019ea:	2034      	movs	r0, #52	@ 0x34
 80019ec:	f001 fb03 	bl	8002ff6 <read_command>
 80019f0:	4603      	mov	r3, r0
 80019f2:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(53);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	61fa      	str	r2, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	18d4      	adds	r4, r2, r3
 8001a00:	2035      	movs	r0, #53	@ 0x35
 8001a02:	f001 faf8 	bl	8002ff6 <read_command>
 8001a06:	4603      	mov	r3, r0
 8001a08:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(54);
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	61fa      	str	r2, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	18d4      	adds	r4, r2, r3
 8001a16:	2036      	movs	r0, #54	@ 0x36
 8001a18:	f001 faed 	bl	8002ff6 <read_command>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(55);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	61fa      	str	r2, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	18d4      	adds	r4, r2, r3
 8001a2c:	2037      	movs	r0, #55	@ 0x37
 8001a2e:	f001 fae2 	bl	8002ff6 <read_command>
 8001a32:	4603      	mov	r3, r0
 8001a34:	8023      	strh	r3, [r4, #0]

	// Read Intan name from ROM.
	command_list[command_index++] = read_command(40);
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	61fa      	str	r2, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	18d4      	adds	r4, r2, r3
 8001a42:	2028      	movs	r0, #40	@ 0x28
 8001a44:	f001 fad7 	bl	8002ff6 <read_command>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(41);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	61fa      	str	r2, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	18d4      	adds	r4, r2, r3
 8001a58:	2029      	movs	r0, #41	@ 0x29
 8001a5a:	f001 facc 	bl	8002ff6 <read_command>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(42);
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	61fa      	str	r2, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	18d4      	adds	r4, r2, r3
 8001a6e:	202a      	movs	r0, #42	@ 0x2a
 8001a70:	f001 fac1 	bl	8002ff6 <read_command>
 8001a74:	4603      	mov	r3, r0
 8001a76:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(43);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	61fa      	str	r2, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	18d4      	adds	r4, r2, r3
 8001a84:	202b      	movs	r0, #43	@ 0x2b
 8001a86:	f001 fab6 	bl	8002ff6 <read_command>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	8023      	strh	r3, [r4, #0]
	command_list[command_index++] = read_command(44);
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	61fa      	str	r2, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	18d4      	adds	r4, r2, r3
 8001a9a:	202c      	movs	r0, #44	@ 0x2c
 8001a9c:	f001 faab 	bl	8002ff6 <read_command>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	8023      	strh	r3, [r4, #0]

	// Read back RAM registers to confirm programming.
	for (int reg = 0; reg < 22; ++reg) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00f      	b.n	8001aca <create_command_list_RHD_register_config+0x23a>
		command_list[command_index++] = read_command(reg);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	61fa      	str	r2, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	18d4      	adds	r4, r2, r3
 8001aba:	4608      	mov	r0, r1
 8001abc:	f001 fa9b 	bl	8002ff6 <read_command>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	8023      	strh	r3, [r4, #0]
	for (int reg = 0; reg < 22; ++reg) {
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b15      	cmp	r3, #21
 8001ace:	ddec      	ble.n	8001aaa <create_command_list_RHD_register_config+0x21a>
		// Note that registers 18-21 are only 'visible' on MISO B, so if register values are being used, be sure to use MISO B read values.
	}

	// Optionally, run ADC calibration (should only be run once after board is plugged in).
	if (calibrate) {
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <create_command_list_RHD_register_config+0x25c>
		command_list[command_index++] = calibrate_command();
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	61fa      	str	r2, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	18d4      	adds	r4, r2, r3
 8001ae2:	f001 fa62 	bl	8002faa <calibrate_command>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	8023      	strh	r3, [r4, #0]
 8001aea:	e00a      	b.n	8001b02 <create_command_list_RHD_register_config+0x272>
	} else {
		command_list[command_index++] = read_command(63);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	61fa      	str	r2, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	18d4      	adds	r4, r2, r3
 8001af8:	203f      	movs	r0, #63	@ 0x3f
 8001afa:	f001 fa7c 	bl	8002ff6 <read_command>
 8001afe:	4603      	mov	r3, r0
 8001b00:	8023      	strh	r3, [r4, #0]
	}

	// End with a dummy command.
	command_list[command_index++] = read_command(63);
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	61fa      	str	r2, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	18d4      	adds	r4, r2, r3
 8001b0e:	203f      	movs	r0, #63	@ 0x3f
 8001b10:	f001 fa71 	bl	8002ff6 <read_command>
 8001b14:	4603      	mov	r3, r0
 8001b16:	8023      	strh	r3, [r4, #0]

	for (int i = 0; i < (num_commands - 64); ++i) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	e00d      	b.n	8001b3a <create_command_list_RHD_register_config+0x2aa>
		command_list[command_index++] = read_command(63);
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	61fa      	str	r2, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	18d4      	adds	r4, r2, r3
 8001b2a:	203f      	movs	r0, #63	@ 0x3f
 8001b2c:	f001 fa63 	bl	8002ff6 <read_command>
 8001b30:	4603      	mov	r3, r0
 8001b32:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < (num_commands - 64); ++i) {
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	3301      	adds	r3, #1
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3b40      	subs	r3, #64	@ 0x40
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbec      	blt.n	8001b1e <create_command_list_RHD_register_config+0x28e>
	}
	return command_index;
 8001b44:	69fb      	ldr	r3, [r7, #28]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}

08001b4e <create_command_list_dummy>:


// Create a list of dummy commands with a specific command.
// Return the length of the command list (which should be n).
int create_command_list_dummy(RHDConfigParameters *p, uint16_t *command_list, int n, uint16_t cmd)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	807b      	strh	r3, [r7, #2]
	int command_index = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < n; i++) {
 8001b60:	2300      	movs	r3, #0
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	e00a      	b.n	8001b7c <create_command_list_dummy+0x2e>
		command_list[command_index++] = cmd;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	617a      	str	r2, [r7, #20]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbf0      	blt.n	8001b66 <create_command_list_dummy+0x18>
	}

	return command_index;
 8001b84:	697b      	ldr	r3, [r7, #20]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <send_spi_command>:
}


// Send provided 16-bit word 'tx_data' over SPI, ignoring resultant 16-bit received word.
void send_spi_command(uint16_t tx_data)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	80fb      	strh	r3, [r7, #6]
	uint16_t dummy_data_A = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	81fb      	strh	r3, [r7, #14]
	uint16_t dummy_data_B = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	81bb      	strh	r3, [r7, #12]
	send_receive_spi_command(tx_data, &dummy_data_A, &dummy_data_B);
 8001ba4:	f107 020c 	add.w	r2, r7, #12
 8001ba8:	f107 010e 	add.w	r1, r7, #14
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f804 	bl	8001bbc <send_receive_spi_command>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <send_receive_spi_command>:

// Send provided 16-bit word 'tx_data' over SPI, and pass resultant 16-bit received work by reference.
// Note that the pipelined nature of the SPI communication has a 2-command delay,
// so the obtained results correspond to the command from 2 transactions earlier.
void send_receive_spi_command(uint16_t tx_data, uint16_t *rx_data_A, uint16_t *rx_data_B)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	81fb      	strh	r3, [r7, #14]
	uint32_t rx_data = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
	reception_in_progress = 1;
 8001bce:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <send_receive_spi_command+0x68>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]

#ifdef USE_HAL
	if (HAL_SPI_Receive_DMA(&RECEIVE_SPI, (uint8_t*) &rx_data, 1) != HAL_OK)
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4812      	ldr	r0, [pc, #72]	@ (8001c28 <send_receive_spi_command+0x6c>)
 8001bde:	f008 f9d1 	bl	8009f84 <HAL_SPI_Receive_DMA>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <send_receive_spi_command+0x30>
	{
		Error_Handler();
 8001be8:	f7ff fb9c 	bl	8001324 <Error_Handler>
	}

	if (HAL_SPI_Transmit_DMA(&TRANSMIT_SPI, (uint8_t*) &tx_data, 1) != HAL_OK)
 8001bec:	f107 030e 	add.w	r3, r7, #14
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <send_receive_spi_command+0x70>)
 8001bf6:	f008 f883 	bl	8009d00 <HAL_SPI_Transmit_DMA>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <send_receive_spi_command+0x48>
	{
		Error_Handler();
 8001c00:	f7ff fb90 	bl	8001324 <Error_Handler>
	}
#else
	begin_spi_rx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &rx_data, 1);
	begin_spi_tx(LL_DMA_MEMORY_NOINCREMENT, (uint32_t) &tx_data, 1);
#endif
	while (reception_in_progress == 1) {}
 8001c04:	bf00      	nop
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <send_receive_spi_command+0x68>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d0fa      	beq.n	8001c06 <send_receive_spi_command+0x4a>
	extract_ddr_words(rx_data, rx_data_A, rx_data_B);
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fd1d 	bl	8001656 <extract_ddr_words>
}
 8001c1c:	bf00      	nop
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	240008a5 	.word	0x240008a5
 8001c28:	2400008c 	.word	0x2400008c
 8001c2c:	24000114 	.word	0x24000114

08001c30 <HAL_SPI_RxCpltCallback>:


#ifdef USE_HAL
// HAL calls this function when Rx has completed.
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	if (hspi == &RECEIVE_SPI) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_SPI_RxCpltCallback+0x1c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_SPI_RxCpltCallback+0x14>
		spi_rx_cplt_callback();
 8001c40:	f7ff fcbc 	bl	80015bc <spi_rx_cplt_callback>
	}
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2400008c 	.word	0x2400008c

08001c50 <HAL_SPI_ErrorCallback>:


// HAL calls this function when an error in the SPI communication has been detected.
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	spi_error_callback();
 8001c58:	f7ff fd18 	bl	800168c <spi_error_callback>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_UART_TxCpltCallback>:


// HAL calls this function when UART Tx has completed.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	uart_ready = 1;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_UART_TxCpltCallback+0x1c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	24000008 	.word	0x24000008

08001c84 <set_DigOut_hiZ>:
}


// Set auxiliary digital output to high-impedance (HiZ) state.
void set_DigOut_hiZ(RHDConfigParameters *p)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	p->digOut = 0;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
	p->digOut_hiZ = 1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	0000      	movs	r0, r0
	...

08001ca8 <set_DSP_cutoff_freq>:


// Set the DSP offset removal filter cutoff frequency as closely to the requested
// newDspCutoffFreq (in Hz) as possible; returns the actual cutoff frequency (in Hz).
double set_DSP_cutoff_freq(RHDConfigParameters *p, double new_DSP_cutoff_freq)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	ed2d 8b02 	vpush	{d8}
 8001cae:	b0b0      	sub	sp, #192	@ 0xc0
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	ed87 0b00 	vstr	d0, [r7]
	double f_cutoff[16] = {0};
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	2280      	movs	r2, #128	@ 0x80
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00c fc75 	bl	800e5b0 <memset>
	// Note: f_cutoff[0] = 0.0 here, but this index should not be used.
	for (int n = 1; n < 16; ++n) {
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001ccc:	e033      	b.n	8001d36 <set_DSP_cutoff_freq+0x8e>
		double x = pow(2.0, (double) n);
 8001cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cda:	eeb0 1b47 	vmov.f64	d1, d7
 8001cde:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 8001ce2:	f00c fe51 	bl	800e988 <pow>
 8001ce6:	ed87 0b24 	vstr	d0, [r7, #144]	@ 0x90
		f_cutoff[n] = p->sample_rate * log(x / (x - 1.0)) / (2.0 * M_PI);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 8b00 	vldr	d8, [r3]
 8001cf0:	ed97 7b24 	vldr	d7, [r7, #144]	@ 0x90
 8001cf4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001cf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cfc:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001d00:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001d04:	eeb0 0b45 	vmov.f64	d0, d5
 8001d08:	f00c fce2 	bl	800e6d0 <log>
 8001d0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001d10:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001d14:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 8001e20 <set_DSP_cutoff_freq+0x178>
 8001d18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	33c0      	adds	r3, #192	@ 0xc0
 8001d24:	443b      	add	r3, r7
 8001d26:	3bb0      	subs	r3, #176	@ 0xb0
 8001d28:	ed83 7b00 	vstr	d7, [r3]
	for (int n = 1; n < 16; ++n) {
 8001d2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d30:	3301      	adds	r3, #1
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	ddc7      	ble.n	8001cce <set_DSP_cutoff_freq+0x26>
	}
	double log_new_DSP_cutoff_freq = log10(new_DSP_cutoff_freq);
 8001d3e:	ed97 0b00 	vldr	d0, [r7]
 8001d42:	f00c fdb9 	bl	800e8b8 <log10>
 8001d46:	ed87 0b28 	vstr	d0, [r7, #160]	@ 0xa0

	// Find the closest value to the requested cutoff frequency (on a logarithmic scale).
	if (new_DSP_cutoff_freq > f_cutoff[1]) {
 8001d4a:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d4e:	ed97 6b00 	vldr	d6, [r7]
 8001d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	dd03      	ble.n	8001d64 <set_DSP_cutoff_freq+0xbc>
		p->DSP_cutoff_freq = 1;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d62:	e049      	b.n	8001df8 <set_DSP_cutoff_freq+0x150>
	} else if (new_DSP_cutoff_freq < f_cutoff[15]) {
 8001d64:	ed97 7b22 	vldr	d7, [r7, #136]	@ 0x88
 8001d68:	ed97 6b00 	vldr	d6, [r7]
 8001d6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d503      	bpl.n	8001d7e <set_DSP_cutoff_freq+0xd6>
		p->DSP_cutoff_freq = 15;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	220f      	movs	r2, #15
 8001d7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d7c:	e03c      	b.n	8001df8 <set_DSP_cutoff_freq+0x150>
	} else {
		double min_log_diff = 10000000.0;
 8001d7e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001e28 <set_DSP_cutoff_freq+0x180>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
		for (int n = 1; n < 16; n++) {
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001d8e:	e02f      	b.n	8001df0 <set_DSP_cutoff_freq+0x148>
			double log_f_cutoff = log10(f_cutoff[n]);
 8001d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	33c0      	adds	r3, #192	@ 0xc0
 8001d98:	443b      	add	r3, r7
 8001d9a:	3bb0      	subs	r3, #176	@ 0xb0
 8001d9c:	ed93 7b00 	vldr	d7, [r3]
 8001da0:	eeb0 0b47 	vmov.f64	d0, d7
 8001da4:	f00c fd88 	bl	800e8b8 <log10>
 8001da8:	ed87 0b26 	vstr	d0, [r7, #152]	@ 0x98
			if (fabs(log_new_DSP_cutoff_freq - log_f_cutoff) < min_log_diff) {
 8001dac:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001db0:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001db4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001db8:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dbc:	ed97 6b2c 	vldr	d6, [r7, #176]	@ 0xb0
 8001dc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	dd0d      	ble.n	8001de6 <set_DSP_cutoff_freq+0x13e>
				min_log_diff = fabs(log_new_DSP_cutoff_freq - log_f_cutoff);
 8001dca:	ed97 6b28 	vldr	d6, [r7, #160]	@ 0xa0
 8001dce:	ed97 7b26 	vldr	d7, [r7, #152]	@ 0x98
 8001dd2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001dd6:	eeb0 7bc7 	vabs.f64	d7, d7
 8001dda:	ed87 7b2c 	vstr	d7, [r7, #176]	@ 0xb0
				p->DSP_cutoff_freq = n;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001de4:	64da      	str	r2, [r3, #76]	@ 0x4c
		for (int n = 1; n < 16; n++) {
 8001de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dea:	3301      	adds	r3, #1
 8001dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	ddcb      	ble.n	8001d90 <set_DSP_cutoff_freq+0xe8>
			}
		}
	}
	return f_cutoff[p->DSP_cutoff_freq];
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	33c0      	adds	r3, #192	@ 0xc0
 8001e00:	443b      	add	r3, r7
 8001e02:	3bb0      	subs	r3, #176	@ 0xb0
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001e10:	37c0      	adds	r7, #192	@ 0xc0
 8001e12:	46bd      	mov	sp, r7
 8001e14:	ecbd 8b02 	vpop	{d8}
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	54442d18 	.word	0x54442d18
 8001e24:	401921fb 	.word	0x401921fb
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	416312d0 	.word	0x416312d0

08001e30 <set_zcheck_scale>:


// Select the series capacitor used to convert the voltage waveform generated by the on-chip DAC into an AC
// current waveform that stimulates a selected electrode for impedance testing (ZcheckCs100fF, ZcheckCs1pF, or Zcheck10pF).
void set_zcheck_scale(RHDConfigParameters *p, ZcheckCs scale)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
	switch (scale) {
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d00e      	beq.n	8001e60 <set_zcheck_scale+0x30>
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	dc10      	bgt.n	8001e68 <set_zcheck_scale+0x38>
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <set_zcheck_scale+0x20>
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d004      	beq.n	8001e58 <set_zcheck_scale+0x28>
		break;
	case ZcheckCs10pF:
		p->zcheck_scale = 0x03;
		break;
	}
}
 8001e4e:	e00b      	b.n	8001e68 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x00;		// Cs = 0.1 pF
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e56:	e007      	b.n	8001e68 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x01;		// Cs = 1.0 pF
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e5e:	e003      	b.n	8001e68 <set_zcheck_scale+0x38>
		p->zcheck_scale = 0x03;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58
		break;
 8001e66:	bf00      	nop
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <set_zcheck_polarity>:


// Select impedance testing of positive or negative amplifier inputs (RHD2216 only), based on
// the variable polarity (ZcheckPositiveInput or ZcheckNegativeInput).
void set_zcheck_polarity(RHDConfigParameters *p, ZcheckPolarity polarity)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
	p->zcheck_sel_pol = polarity == ZcheckNegativeInput; // Negative: 1, Positive: 0
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <set_zcheck_channel>:


// Select the amplifier channel for impedance testing.
int set_zcheck_channel(RHDConfigParameters *p, int channel)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
	if (channel < 0 || channel > max_num_channels_per_chip() - 1) {
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db05      	blt.n	8001eba <set_zcheck_channel+0x1c>
 8001eae:	f000 fce3 	bl	8002878 <max_num_channels_per_chip>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	db02      	blt.n	8001ec0 <set_zcheck_channel+0x22>
		return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ebe:	e004      	b.n	8001eca <set_zcheck_channel+0x2c>
	} else {
		p->zcheck_select = channel;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	669a      	str	r2, [r3, #104]	@ 0x68
		return p->zcheck_select;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
	}
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <power_up_all_amps>:
}


// Power up all amplifiers on chip.
void power_up_all_amps(RHDConfigParameters *p)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e008      	b.n	8001ef2 <power_up_all_amps+0x20>
		p->amp_pwr[channel] = 1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	3228      	adds	r2, #40	@ 0x28
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int channel = 0; channel < max_num_channels_per_chip(); ++channel) {
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	f000 fcc1 	bl	8002878 <max_num_channels_per_chip>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dbf0      	blt.n	8001ee0 <power_up_all_amps+0xe>
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <set_upper_bandwidth>:


// Set the on-chip RH1 and RH2 DAC values appropriately to set a particular amplifier
// upper bandwidth (in Hz).  Return an estimate of the actual upper bandwidth achieved.
double set_upper_bandwidth(RHDConfigParameters *p, double upper_bandwidth)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0a6      	sub	sp, #152	@ 0x98
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	ed87 0b00 	vstr	d0, [r7]
	const double RH1Base = 2200.0;
 8001f14:	a3a1      	add	r3, pc, #644	@ (adr r3, 800219c <set_upper_bandwidth+0x294>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const double RH1Dac1Unit = 600.0;
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b9b      	ldr	r3, [pc, #620]	@ (8002190 <set_upper_bandwidth+0x288>)
 8001f24:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	const double RH1Dac2Unit = 29400.0;
 8001f28:	a393      	add	r3, pc, #588	@ (adr r3, 8002178 <set_upper_bandwidth+0x270>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	const int RH1Dac1Steps = 63;
 8001f32:	233f      	movs	r3, #63	@ 0x3f
 8001f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const int RH1Dac2Steps = 31;
 8001f36:	231f      	movs	r3, #31
 8001f38:	65bb      	str	r3, [r7, #88]	@ 0x58

	const double RH2Base = 8700.0;
 8001f3a:	a391      	add	r3, pc, #580	@ (adr r3, 8002180 <set_upper_bandwidth+0x278>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	const double RH2Dac1Unit = 763.0;
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	4b92      	ldr	r3, [pc, #584]	@ (8002194 <set_upper_bandwidth+0x28c>)
 8001f4a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const double RH2Dac2Unit = 38400.0;
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b91      	ldr	r3, [pc, #580]	@ (8002198 <set_upper_bandwidth+0x290>)
 8001f54:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	const int RH2Dac1Steps = 63;
 8001f58:	233f      	movs	r3, #63	@ 0x3f
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const int RH2Dac2Steps = 31;
 8001f5c:	231f      	movs	r3, #31
 8001f5e:	63bb      	str	r3, [r7, #56]	@ 0x38

	// No upper bandwidths higher than 30 kHz.
	if (upper_bandwidth > 30000.0) {
 8001f60:	ed97 7b00 	vldr	d7, [r7]
 8001f64:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8002188 <set_upper_bandwidth+0x280>
 8001f68:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	dd04      	ble.n	8001f7c <set_upper_bandwidth+0x74>
		upper_bandwidth = 30000.0;
 8001f72:	a385      	add	r3, pc, #532	@ (adr r3, 8002188 <set_upper_bandwidth+0x280>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	e9c7 2300 	strd	r2, r3, [r7]
	}

	double rH1_target = rH1_from_upper_bandwidth(upper_bandwidth);
 8001f7c:	ed97 0b00 	vldr	d0, [r7]
 8001f80:	f000 f9ee 	bl	8002360 <rH1_from_upper_bandwidth>
 8001f84:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

	p->rH1_DAC1 = 0;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	p->rH1_DAC2 = 0;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	double rH1_actual = RH1Base;
 8001f98:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f9c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001fa6:	e028      	b.n	8001ffa <set_upper_bandwidth+0xf2>
		if (rH1_actual < rH1_target - (RH1Dac2Unit - RH1Dac1Unit / 2)) {
 8001fa8:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8001fac:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8001fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fb4:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8001fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fbc:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8001fc0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fc4:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001fc8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	d50e      	bpl.n	8001ff0 <set_upper_bandwidth+0xe8>
			rH1_actual += RH1Dac2Unit;
 8001fd2:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8001fd6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001fda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fde:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC2;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	for (int i = 0; i < RH1Dac2Steps; ++i) {
 8001ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ffa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002000:	429a      	cmp	r2, r3
 8002002:	dbd1      	blt.n	8001fa8 <set_upper_bandwidth+0xa0>
		}
	}

	for (int i = 0; i < RH1Dac1Steps; ++i) {
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800200a:	e024      	b.n	8002056 <set_upper_bandwidth+0x14e>
		if (rH1_actual < rH1_target - (RH1Dac1Unit / 2)) {
 800200c:	ed97 6b1a 	vldr	d6, [r7, #104]	@ 0x68
 8002010:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8002014:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002018:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 800201c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002020:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d50e      	bpl.n	800204c <set_upper_bandwidth+0x144>
			rH1_actual += RH1Dac1Unit;
 800202e:	ed97 6b24 	vldr	d6, [r7, #144]	@ 0x90
 8002032:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8002036:	ee36 7b07 	vadd.f64	d7, d6, d7
 800203a:	ed87 7b24 	vstr	d7, [r7, #144]	@ 0x90
			++p->rH1_DAC1;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	for (int i = 0; i < RH1Dac1Steps; ++i) {
 800204c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002050:	3301      	adds	r3, #1
 8002052:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002056:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800205a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800205c:	429a      	cmp	r2, r3
 800205e:	dbd5      	blt.n	800200c <set_upper_bandwidth+0x104>
		}
	}

	double rH2_target = rH2_from_upper_bandwidth(upper_bandwidth);
 8002060:	ed97 0b00 	vldr	d0, [r7]
 8002064:	f000 f9c0 	bl	80023e8 <rH2_from_upper_bandwidth>
 8002068:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	p->rH2_DAC1 = 0;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	p->rH2_DAC2 = 0;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	double rH2_actual = RH2Base;
 800207c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002080:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	for (int i = 0; i < RH2Dac2Steps; ++i) {
 8002084:	2300      	movs	r3, #0
 8002086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002088:	e026      	b.n	80020d8 <set_upper_bandwidth+0x1d0>
		if (rH2_actual < rH2_target - (RH2Dac2Unit - RH2Dac1Unit / 2)) {
 800208a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800208e:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8002092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002096:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 800209a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800209e:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80020a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020a6:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d50e      	bpl.n	80020d2 <set_upper_bandwidth+0x1ca>
			rH2_actual += RH2Dac2Unit;
 80020b4:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020b8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80020bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020c0:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC2;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	for (int i = 0; i < RH2Dac2Steps; ++i) {
 80020d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020d4:	3301      	adds	r3, #1
 80020d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80020da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbd4      	blt.n	800208a <set_upper_bandwidth+0x182>
		}
	}

	for (int i = 0; i < RH2Dac1Steps; ++i) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020e4:	e022      	b.n	800212c <set_upper_bandwidth+0x224>
		if (rH2_actual < rH2_target - (RH2Dac1Unit / 2)) {
 80020e6:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80020ea:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80020ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80020f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020fa:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 80020fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	d50e      	bpl.n	8002126 <set_upper_bandwidth+0x21e>
			rH2_actual += RH2Dac1Unit;
 8002108:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 800210c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002110:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002114:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
			++p->rH2_DAC1;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	for (int i = 0; i < RH2Dac1Steps; ++i) {
 8002126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002128:	3301      	adds	r3, #1
 800212a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800212c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800212e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002130:	429a      	cmp	r2, r3
 8002132:	dbd8      	blt.n	80020e6 <set_upper_bandwidth+0x1de>
		}
	}

	double actual_upper_bandwidth1 = upper_bandwidth_from_rH1(rH1_actual);
 8002134:	ed97 0b24 	vldr	d0, [r7, #144]	@ 0x90
 8002138:	f000 fa2a 	bl	8002590 <upper_bandwidth_from_rH1>
 800213c:	ed87 0b08 	vstr	d0, [r7, #32]
	double actual_upper_bandwidth2 = upper_bandwidth_from_rH2(rH2_actual);
 8002140:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8002144:	f000 fa88 	bl	8002658 <upper_bandwidth_from_rH2>
 8002148:	ed87 0b06 	vstr	d0, [r7, #24]

	// Upper bandwidth estimates calculated from actual RH1 value and actual RH2 value
	// should be very close; we will take their geometric means to get a single number.
	double actual_upper_bandwidth = sqrt(actual_upper_bandwidth1 * actual_upper_bandwidth2);
 800214c:	ed97 6b08 	vldr	d6, [r7, #32]
 8002150:	ed97 7b06 	vldr	d7, [r7, #24]
 8002154:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002158:	eeb0 0b47 	vmov.f64	d0, d7
 800215c:	f00c fe64 	bl	800ee28 <sqrt>
 8002160:	ed87 0b04 	vstr	d0, [r7, #16]

	return actual_upper_bandwidth;
 8002164:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002168:	ec43 2b17 	vmov	d7, r2, r3
}
 800216c:	eeb0 0b47 	vmov.f64	d0, d7
 8002170:	3798      	adds	r7, #152	@ 0x98
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	00000000 	.word	0x00000000
 800217c:	40dcb600 	.word	0x40dcb600
 8002180:	00000000 	.word	0x00000000
 8002184:	40c0fe00 	.word	0x40c0fe00
 8002188:	00000000 	.word	0x00000000
 800218c:	40dd4c00 	.word	0x40dd4c00
 8002190:	4082c000 	.word	0x4082c000
 8002194:	4087d800 	.word	0x4087d800
 8002198:	40e2c000 	.word	0x40e2c000
 800219c:	00000000 	.word	0x00000000
 80021a0:	40a13000 	.word	0x40a13000
 80021a4:	00000000 	.word	0x00000000

080021a8 <set_lower_bandwidth>:


// Set the on-chip RL DAC values appropriately to set a particular amplifier lower bandwidth (in Hz).
// Return an estimate of the actual lower bandwidth achieved.
double set_lower_bandwidth(RHDConfigParameters *p, double lower_bandwidth)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	@ 0x58
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	ed87 0b00 	vstr	d0, [r7]
    const double RLBase = 3500.0;
 80021b4:	a362      	add	r3, pc, #392	@ (adr r3, 8002340 <set_lower_bandwidth+0x198>)
 80021b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    const double RLDac1Unit = 175.0;
 80021be:	a362      	add	r3, pc, #392	@ (adr r3, 8002348 <set_lower_bandwidth+0x1a0>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    const double RLDac2Unit = 12700.0;
 80021c8:	a361      	add	r3, pc, #388	@ (adr r3, 8002350 <set_lower_bandwidth+0x1a8>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    const double RLDac3Unit = 3000000.0;
 80021d2:	a361      	add	r3, pc, #388	@ (adr r3, 8002358 <set_lower_bandwidth+0x1b0>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    const int RLDac1Steps = 127;
 80021dc:	237f      	movs	r3, #127	@ 0x7f
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
    const int RLDac2Steps = 63;
 80021e0:	233f      	movs	r3, #63	@ 0x3f
 80021e2:	623b      	str	r3, [r7, #32]

    // No lower bandwidths higher than 1.5 kHz.
    if (lower_bandwidth > 1500.0) {
 80021e4:	ed97 7b00 	vldr	d7, [r7]
 80021e8:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8002330 <set_lower_bandwidth+0x188>
 80021ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dd04      	ble.n	8002200 <set_lower_bandwidth+0x58>
    	lower_bandwidth = 1500.0;
 80021f6:	a34e      	add	r3, pc, #312	@ (adr r3, 8002330 <set_lower_bandwidth+0x188>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	e9c7 2300 	strd	r2, r3, [r7]
    }

    double rL_target = rL_from_lower_bandwidth(lower_bandwidth);
 8002200:	ed97 0b00 	vldr	d0, [r7]
 8002204:	f000 f934 	bl	8002470 <rL_from_lower_bandwidth>
 8002208:	ed87 0b06 	vstr	d0, [r7, #24]

    p->rL_DAC1 = 0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    p->rL_DAC2 = 0;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    p->rL_DAC3 = 0;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    double rL_actual = RLBase;
 8002224:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002228:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    if (lower_bandwidth < 0.15) {
 800222c:	ed97 7b00 	vldr	d7, [r7]
 8002230:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002338 <set_lower_bandwidth+0x190>
 8002234:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d50e      	bpl.n	800225c <set_lower_bandwidth+0xb4>
    	rL_actual += RLDac3Unit;
 800223e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002242:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002246:	ee36 7b07 	vadd.f64	d7, d6, d7
 800224a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    	++p->rL_DAC3;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    for (int i = 0; i < RLDac2Steps; ++i) {
 800225c:	2300      	movs	r3, #0
 800225e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002260:	e026      	b.n	80022b0 <set_lower_bandwidth+0x108>
    	if (rL_actual < rL_target - (RLDac2Unit - RLDac1Unit / 2)) {
 8002262:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 8002266:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800226a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800226e:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
 8002272:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002276:	ed97 6b06 	vldr	d6, [r7, #24]
 800227a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800227e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002282:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	d50e      	bpl.n	80022aa <set_lower_bandwidth+0x102>
    		rL_actual += RLDac2Unit;
 800228c:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8002290:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002298:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC2;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    for (int i = 0; i < RLDac2Steps; ++i) {
 80022aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ac:	3301      	adds	r3, #1
 80022ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dbd4      	blt.n	8002262 <set_lower_bandwidth+0xba>
    	}
    }

    for (int i = 0; i < RLDac1Steps; ++i) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022bc:	e022      	b.n	8002304 <set_lower_bandwidth+0x15c>
    	if (rL_actual < rL_target - (RLDac1Unit / 2)) {
 80022be:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80022c2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80022c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022ca:	ed97 6b06 	vldr	d6, [r7, #24]
 80022ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022d2:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80022d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	d50e      	bpl.n	80022fe <set_lower_bandwidth+0x156>
    		rL_actual += RLDac1Unit;
 80022e0:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80022e4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80022e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022ec:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    		++p->rL_DAC1;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    for (int i = 0; i < RLDac1Steps; ++i) {
 80022fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002300:	3301      	adds	r3, #1
 8002302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	429a      	cmp	r2, r3
 800230a:	dbd8      	blt.n	80022be <set_lower_bandwidth+0x116>
    	}
    }

    double actual_lower_bandwidth = lower_bandwidth_from_rL(rL_actual);
 800230c:	ed97 0b14 	vldr	d0, [r7, #80]	@ 0x50
 8002310:	f000 fa06 	bl	8002720 <lower_bandwidth_from_rL>
 8002314:	ed87 0b04 	vstr	d0, [r7, #16]

    return actual_lower_bandwidth;
 8002318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800231c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002320:	eeb0 0b47 	vmov.f64	d0, d7
 8002324:	3758      	adds	r7, #88	@ 0x58
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	f3af 8000 	nop.w
 8002330:	00000000 	.word	0x00000000
 8002334:	40977000 	.word	0x40977000
 8002338:	33333333 	.word	0x33333333
 800233c:	3fc33333 	.word	0x3fc33333
 8002340:	00000000 	.word	0x00000000
 8002344:	40ab5800 	.word	0x40ab5800
 8002348:	00000000 	.word	0x00000000
 800234c:	4065e000 	.word	0x4065e000
 8002350:	00000000 	.word	0x00000000
 8002354:	40c8ce00 	.word	0x40c8ce00
 8002358:	00000000 	.word	0x00000000
 800235c:	4146e360 	.word	0x4146e360

08002360 <rH1_from_upper_bandwidth>:


// Return the value of the RH1 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH1_from_upper_bandwidth(double upper_bandwidth)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	ed87 0b00 	vstr	d0, [r7]
	double log10f = log10(upper_bandwidth);
 800236a:	ed97 0b00 	vldr	d0, [r7]
 800236e:	f00c faa3 	bl	800e8b8 <log10>
 8002372:	ed87 0b02 	vstr	d0, [r7, #8]

    return 0.9730 * pow(10.0, (8.0968 - 1.1892 * log10f + 0.04767 * log10f * log10f));
 8002376:	ed97 7b02 	vldr	d7, [r7, #8]
 800237a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80023c8 <rH1_from_upper_bandwidth+0x68>
 800237e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002382:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80023d0 <rH1_from_upper_bandwidth+0x70>
 8002386:	ee36 6b47 	vsub.f64	d6, d6, d7
 800238a:	ed97 7b02 	vldr	d7, [r7, #8]
 800238e:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 80023d8 <rH1_from_upper_bandwidth+0x78>
 8002392:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002396:	ed97 7b02 	vldr	d7, [r7, #8]
 800239a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800239e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023a2:	eeb0 1b47 	vmov.f64	d1, d7
 80023a6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80023aa:	f00c faed 	bl	800e988 <pow>
 80023ae:	eeb0 7b40 	vmov.f64	d7, d0
 80023b2:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80023e0 <rH1_from_upper_bandwidth+0x80>
 80023b6:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 80023ba:	eeb0 0b47 	vmov.f64	d0, d7
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	94467382 	.word	0x94467382
 80023cc:	3ff306f6 	.word	0x3ff306f6
 80023d0:	c504816f 	.word	0xc504816f
 80023d4:	4020318f 	.word	0x4020318f
 80023d8:	c60029f1 	.word	0xc60029f1
 80023dc:	3fa86833 	.word	0x3fa86833
 80023e0:	e5604189 	.word	0xe5604189
 80023e4:	3fef22d0 	.word	0x3fef22d0

080023e8 <rH2_from_upper_bandwidth>:


// Return the value of the RH2 resistor (in ohms) corresponding to a particular upper bandwidth value (in Hz).
double rH2_from_upper_bandwidth(double upper_bandwidth)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(upper_bandwidth);
 80023f2:	ed97 0b00 	vldr	d0, [r7]
 80023f6:	f00c fa5f 	bl	800e8b8 <log10>
 80023fa:	ed87 0b02 	vstr	d0, [r7, #8]

    return 1.0191 * pow(10.0, (8.1009 - 1.0821 * log10f + 0.03383 * log10f * log10f));
 80023fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002402:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002450 <rH2_from_upper_bandwidth+0x68>
 8002406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800240a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002458 <rH2_from_upper_bandwidth+0x70>
 800240e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002412:	ed97 7b02 	vldr	d7, [r7, #8]
 8002416:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002460 <rH2_from_upper_bandwidth+0x78>
 800241a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800241e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002422:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800242a:	eeb0 1b47 	vmov.f64	d1, d7
 800242e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002432:	f00c faa9 	bl	800e988 <pow>
 8002436:	eeb0 7b40 	vmov.f64	d7, d0
 800243a:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002468 <rH2_from_upper_bandwidth+0x80>
 800243e:	ee27 7b06 	vmul.f64	d7, d7, d6
}
 8002442:	eeb0 0b47 	vmov.f64	d0, d7
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f3af 8000 	nop.w
 8002450:	16f0068e 	.word	0x16f0068e
 8002454:	3ff15048 	.word	0x3ff15048
 8002458:	2a305532 	.word	0x2a305532
 800245c:	402033a9 	.word	0x402033a9
 8002460:	6f3f52fc 	.word	0x6f3f52fc
 8002464:	3fa1522a 	.word	0x3fa1522a
 8002468:	cd35a858 	.word	0xcd35a858
 800246c:	3ff04e3b 	.word	0x3ff04e3b

08002470 <rL_from_lower_bandwidth>:


// Return the value of the RL resistor (in ohms) corresponding to a particular lower bandwidth value (in Hz).
double rL_from_lower_bandwidth(double lower_bandwidth)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	ed87 0b00 	vstr	d0, [r7]
    double log10f = log10(lower_bandwidth);
 800247a:	ed97 0b00 	vldr	d0, [r7]
 800247e:	f00c fa1b 	bl	800e8b8 <log10>
 8002482:	ed87 0b02 	vstr	d0, [r7, #8]

    if (lower_bandwidth < 4.0) {
 8002486:	ed97 7b00 	vldr	d7, [r7]
 800248a:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 800248e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d532      	bpl.n	80024fe <rL_from_lower_bandwidth+0x8e>
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 8002498:	ed97 7b02 	vldr	d7, [r7, #8]
 800249c:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002550 <rL_from_lower_bandwidth+0xe0>
 80024a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024a4:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8002558 <rL_from_lower_bandwidth+0xe8>
 80024a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80024ac:	ed97 7b02 	vldr	d7, [r7, #8]
 80024b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8002560 <rL_from_lower_bandwidth+0xf0>
 80024b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80024b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80024bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024c0:	ee36 6b07 	vadd.f64	d6, d6, d7
            0.1442 * log10f * log10f * log10f));
 80024c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80024c8:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 8002568 <rL_from_lower_bandwidth+0xf8>
 80024cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80024d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80024d4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80024d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80024dc:	ee25 7b07 	vmul.f64	d7, d5, d7
        return 1.0061 * pow(10.0, (4.9391 - 1.2088 * log10f + 0.5698 * log10f * log10f +
 80024e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024e4:	eeb0 1b47 	vmov.f64	d1, d7
 80024e8:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80024ec:	f00c fa4c 	bl	800e988 <pow>
 80024f0:	eeb0 7b40 	vmov.f64	d7, d0
 80024f4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8002570 <rL_from_lower_bandwidth+0x100>
 80024f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80024fc:	e021      	b.n	8002542 <rL_from_lower_bandwidth+0xd2>
    } else {
        return 1.0061 * pow(10.0, (4.7351 - 0.5916 * log10f + 0.08482 * log10f * log10f));
 80024fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002502:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002578 <rL_from_lower_bandwidth+0x108>
 8002506:	ee27 7b06 	vmul.f64	d7, d7, d6
 800250a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002580 <rL_from_lower_bandwidth+0x110>
 800250e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002512:	ed97 7b02 	vldr	d7, [r7, #8]
 8002516:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8002588 <rL_from_lower_bandwidth+0x118>
 800251a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800251e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002522:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002526:	ee36 7b07 	vadd.f64	d7, d6, d7
 800252a:	eeb0 1b47 	vmov.f64	d1, d7
 800252e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002532:	f00c fa29 	bl	800e988 <pow>
 8002536:	eeb0 7b40 	vmov.f64	d7, d0
 800253a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8002570 <rL_from_lower_bandwidth+0x100>
 800253e:	ee27 7b06 	vmul.f64	d7, d7, d6
    }
}
 8002542:	eeb0 0b47 	vmov.f64	d0, d7
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	f3af 8000 	nop.w
 8002550:	ab367a10 	.word	0xab367a10
 8002554:	3ff3573e 	.word	0x3ff3573e
 8002558:	6e2eb1c4 	.word	0x6e2eb1c4
 800255c:	4013c1a3 	.word	0x4013c1a3
 8002560:	35a85879 	.word	0x35a85879
 8002564:	3fe23bcd 	.word	0x3fe23bcd
 8002568:	460aa64c 	.word	0x460aa64c
 800256c:	3fc27525 	.word	0x3fc27525
 8002570:	504816f0 	.word	0x504816f0
 8002574:	3ff018fc 	.word	0x3ff018fc
 8002578:	1f8a0903 	.word	0x1f8a0903
 800257c:	3fe2ee63 	.word	0x3fe2ee63
 8002580:	0ded288d 	.word	0x0ded288d
 8002584:	4012f0be 	.word	0x4012f0be
 8002588:	760bf5d8 	.word	0x760bf5d8
 800258c:	3fb5b6c3 	.word	0x3fb5b6c3

08002590 <upper_bandwidth_from_rH1>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH1 (in Ohms).
double upper_bandwidth_from_rH1(double rH1)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	ed2d 8b02 	vpush	{d8}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.04767;
 800259e:	a32a      	add	r3, pc, #168	@ (adr r3, 8002648 <upper_bandwidth_from_rH1+0xb8>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.1892;
 80025a8:	a329      	add	r3, pc, #164	@ (adr r3, 8002650 <upper_bandwidth_from_rH1+0xc0>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.0968 - log10(rH1 / 0.9730);
 80025b2:	ed97 7b00 	vldr	d7, [r7]
 80025b6:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002638 <upper_bandwidth_from_rH1+0xa8>
 80025ba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80025be:	eeb0 0b46 	vmov.f64	d0, d6
 80025c2:	f00c f979 	bl	800e8b8 <log10>
 80025c6:	eeb0 7b40 	vmov.f64	d7, d0
 80025ca:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002640 <upper_bandwidth_from_rH1+0xb0>
 80025ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025d2:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 80025d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80025da:	eeb1 8b47 	vneg.f64	d8, d7
 80025de:	ed97 7b04 	vldr	d7, [r7, #16]
 80025e2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80025e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80025ea:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80025ee:	ee27 5b05 	vmul.f64	d5, d7, d5
 80025f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80025f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002602:	f00c fc11 	bl	800ee28 <sqrt>
 8002606:	eeb0 7b40 	vmov.f64	d7, d0
 800260a:	ee38 6b47 	vsub.f64	d6, d8, d7
 800260e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002612:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002616:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800261a:	eeb0 1b45 	vmov.f64	d1, d5
 800261e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8002622:	f00c f9b1 	bl	800e988 <pow>
 8002626:	eeb0 7b40 	vmov.f64	d7, d0
}
 800262a:	eeb0 0b47 	vmov.f64	d0, d7
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	ecbd 8b02 	vpop	{d8}
 8002636:	bd80      	pop	{r7, pc}
 8002638:	e5604189 	.word	0xe5604189
 800263c:	3fef22d0 	.word	0x3fef22d0
 8002640:	c504816f 	.word	0xc504816f
 8002644:	4020318f 	.word	0x4020318f
 8002648:	c60029f1 	.word	0xc60029f1
 800264c:	3fa86833 	.word	0x3fa86833
 8002650:	94467382 	.word	0x94467382
 8002654:	bff306f6 	.word	0xbff306f6

08002658 <upper_bandwidth_from_rH2>:


// Return the amplifier upper bandwidth (in Hz) corresponding to a particular value of the resistor RH2 (in Ohms).
double upper_bandwidth_from_rH2(double rH2)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	ed2d 8b02 	vpush	{d8}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    a = 0.03383;
 8002666:	a32a      	add	r3, pc, #168	@ (adr r3, 8002710 <upper_bandwidth_from_rH2+0xb8>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    b = -1.0821;
 8002670:	a329      	add	r3, pc, #164	@ (adr r3, 8002718 <upper_bandwidth_from_rH2+0xc0>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9c7 2304 	strd	r2, r3, [r7, #16]
    c = 8.1009 - log10(rH2 / 1.0191);
 800267a:	ed97 7b00 	vldr	d7, [r7]
 800267e:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8002700 <upper_bandwidth_from_rH2+0xa8>
 8002682:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002686:	eeb0 0b46 	vmov.f64	d0, d6
 800268a:	f00c f915 	bl	800e8b8 <log10>
 800268e:	eeb0 7b40 	vmov.f64	d7, d0
 8002692:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002708 <upper_bandwidth_from_rH2+0xb0>
 8002696:	ee36 7b47 	vsub.f64	d7, d6, d7
 800269a:	ed87 7b02 	vstr	d7, [r7, #8]

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 800269e:	ed97 7b04 	vldr	d7, [r7, #16]
 80026a2:	eeb1 8b47 	vneg.f64	d8, d7
 80026a6:	ed97 7b04 	vldr	d7, [r7, #16]
 80026aa:	ee27 6b07 	vmul.f64	d6, d7, d7
 80026ae:	ed97 7b06 	vldr	d7, [r7, #24]
 80026b2:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80026b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80026be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026c6:	eeb0 0b47 	vmov.f64	d0, d7
 80026ca:	f00c fbad 	bl	800ee28 <sqrt>
 80026ce:	eeb0 7b40 	vmov.f64	d7, d0
 80026d2:	ee38 6b47 	vsub.f64	d6, d8, d7
 80026d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80026da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80026de:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80026e2:	eeb0 1b45 	vmov.f64	d1, d5
 80026e6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80026ea:	f00c f94d 	bl	800e988 <pow>
 80026ee:	eeb0 7b40 	vmov.f64	d7, d0
}
 80026f2:	eeb0 0b47 	vmov.f64	d0, d7
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	ecbd 8b02 	vpop	{d8}
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	cd35a858 	.word	0xcd35a858
 8002704:	3ff04e3b 	.word	0x3ff04e3b
 8002708:	2a305532 	.word	0x2a305532
 800270c:	402033a9 	.word	0x402033a9
 8002710:	6f3f52fc 	.word	0x6f3f52fc
 8002714:	3fa1522a 	.word	0x3fa1522a
 8002718:	16f0068e 	.word	0x16f0068e
 800271c:	bff15048 	.word	0xbff15048

08002720 <lower_bandwidth_from_rL>:


// Return the amplifier lower bandwidth (in Hz) corresponding to a particular value of the resistor RL (in Ohms).
double lower_bandwidth_from_rL(double rL)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	ed2d 8b02 	vpush	{d8}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	ed87 0b00 	vstr	d0, [r7]
    double a, b, c;

    // Quadratic fit below is invalid for values of RL less than 5.1 kOhm.
    if (rL < 5100.0) {
 800272e:	ed97 7b00 	vldr	d7, [r7]
 8002732:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8002830 <lower_bandwidth_from_rL+0x110>
 8002736:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273e:	d504      	bpl.n	800274a <lower_bandwidth_from_rL+0x2a>
        rL = 5100.0;
 8002740:	a33b      	add	r3, pc, #236	@ (adr r3, 8002830 <lower_bandwidth_from_rL+0x110>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	e9c7 2300 	strd	r2, r3, [r7]
    }

    if (rL < 30000.0) {
 800274a:	ed97 7b00 	vldr	d7, [r7]
 800274e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8002838 <lower_bandwidth_from_rL+0x118>
 8002752:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d51c      	bpl.n	8002796 <lower_bandwidth_from_rL+0x76>
        a = 0.08482;
 800275c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002858 <lower_bandwidth_from_rL+0x138>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -0.5916;
 8002766:	a33e      	add	r3, pc, #248	@ (adr r3, 8002860 <lower_bandwidth_from_rL+0x140>)
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.7351 - log10(rL / 1.0061);
 8002770:	ed97 7b00 	vldr	d7, [r7]
 8002774:	ed9f 5b32 	vldr	d5, [pc, #200]	@ 8002840 <lower_bandwidth_from_rL+0x120>
 8002778:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800277c:	eeb0 0b46 	vmov.f64	d0, d6
 8002780:	f00c f89a 	bl	800e8b8 <log10>
 8002784:	eeb0 7b40 	vmov.f64	d7, d0
 8002788:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002848 <lower_bandwidth_from_rL+0x128>
 800278c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002790:	ed87 7b02 	vstr	d7, [r7, #8]
 8002794:	e01b      	b.n	80027ce <lower_bandwidth_from_rL+0xae>
    } else {
        a = 0.3303;
 8002796:	a334      	add	r3, pc, #208	@ (adr r3, 8002868 <lower_bandwidth_from_rL+0x148>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        b = -1.2100;
 80027a0:	a333      	add	r3, pc, #204	@ (adr r3, 8002870 <lower_bandwidth_from_rL+0x150>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        c = 4.9873 - log10(rL / 1.0061);
 80027aa:	ed97 7b00 	vldr	d7, [r7]
 80027ae:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8002840 <lower_bandwidth_from_rL+0x120>
 80027b2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80027b6:	eeb0 0b46 	vmov.f64	d0, d6
 80027ba:	f00c f87d 	bl	800e8b8 <log10>
 80027be:	eeb0 7b40 	vmov.f64	d7, d0
 80027c2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002850 <lower_bandwidth_from_rL+0x130>
 80027c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027ca:	ed87 7b02 	vstr	d7, [r7, #8]
    }

    return pow(10.0, ((-b - sqrt(b * b - 4 * a * c)) / (2 * a)));
 80027ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80027d2:	eeb1 8b47 	vneg.f64	d8, d7
 80027d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80027da:	ee27 6b07 	vmul.f64	d6, d7, d7
 80027de:	ed97 7b06 	vldr	d7, [r7, #24]
 80027e2:	eeb1 5b00 	vmov.f64	d5, #16	@ 0x40800000  4.0
 80027e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80027ea:	ed97 7b02 	vldr	d7, [r7, #8]
 80027ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027f6:	eeb0 0b47 	vmov.f64	d0, d7
 80027fa:	f00c fb15 	bl	800ee28 <sqrt>
 80027fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002802:	ee38 6b47 	vsub.f64	d6, d8, d7
 8002806:	ed97 7b06 	vldr	d7, [r7, #24]
 800280a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800280e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002812:	eeb0 1b45 	vmov.f64	d1, d5
 8002816:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800281a:	f00c f8b5 	bl	800e988 <pow>
 800281e:	eeb0 7b40 	vmov.f64	d7, d0
}
 8002822:	eeb0 0b47 	vmov.f64	d0, d7
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	ecbd 8b02 	vpop	{d8}
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00000000 	.word	0x00000000
 8002834:	40b3ec00 	.word	0x40b3ec00
 8002838:	00000000 	.word	0x00000000
 800283c:	40dd4c00 	.word	0x40dd4c00
 8002840:	504816f0 	.word	0x504816f0
 8002844:	3ff018fc 	.word	0x3ff018fc
 8002848:	0ded288d 	.word	0x0ded288d
 800284c:	4012f0be 	.word	0x4012f0be
 8002850:	c56d5cfb 	.word	0xc56d5cfb
 8002854:	4013f2fe 	.word	0x4013f2fe
 8002858:	760bf5d8 	.word	0x760bf5d8
 800285c:	3fb5b6c3 	.word	0x3fb5b6c3
 8002860:	1f8a0903 	.word	0x1f8a0903
 8002864:	bfe2ee63 	.word	0xbfe2ee63
 8002868:	9c779a6b 	.word	0x9c779a6b
 800286c:	3fd523a2 	.word	0x3fd523a2
 8002870:	f5c28f5c 	.word	0xf5c28f5c
 8002874:	bff35c28 	.word	0xbff35c28

08002878 <max_num_channels_per_chip>:


// Maximum number of amplifier channels per chip.
int max_num_channels_per_chip()
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	return 64;
 800287c:	2340      	movs	r3, #64	@ 0x40
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <set_default_rhd_settings>:


// Set default values for parameters used to configure RAM registers on RHD2000 chip.
void set_default_rhd_settings(RHDConfigParameters *p)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	// D[7:6]: ADC reference BW
	// D[5]: amp fast settle
	// D[4]: amp Vref enable
	// D[3:2]: ADC comparator bias
	// D[1:0]: ADC comparator select
	p->adc_reference_bw = 3;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	609a      	str	r2, [r3, #8]
	p->amp_fast_settle = 0;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
	p->amp_vref_enable = 1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	60da      	str	r2, [r3, #12]
	p->adc_comparator_bias = 3;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2203      	movs	r2, #3
 80028a8:	611a      	str	r2, [r3, #16]
	p->adc_comparator_select = 2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	615a      	str	r2, [r3, #20]

	// Register 1: Supply Sensor and ADC Buffer Bias Current
	// D[7]: X (No Function)
	// D[6]: VDD sense enable
	// D[5:0]: ADC buffer bias (set below in set_biases_based_on_sample_rate)
	p->vdd_sense_enable = 1;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	619a      	str	r2, [r3, #24]

	// Register 2: MUX Bias Current
	// D[7:6]: X (No Function)
	// D[5:0]: MUX bias (set below in set_biases_based_on_sample_rate)
	set_biases_based_on_sample_rate(&p->adc_buffer_bias, &p->mux_bias, p->sample_rate);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 021c 	add.w	r2, r3, #28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0120 	add.w	r1, r3, #32
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	ed93 7b00 	vldr	d7, [r3]
 80028c8:	eeb0 0b47 	vmov.f64	d0, d7
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 f863 	bl	8002998 <set_biases_based_on_sample_rate>
	// D[4]: tempS2
	// D[3]: tempS1
	// D[2]: tempen
	// D[1]: digout HiZ
	// D[0]: digout
	p->mux_load = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24
	p->temp_S1 = 0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	@ 0x28
	p->temp_S2 = 0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	p->temp_en = 0;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	@ 0x30
	set_DigOut_hiZ(p);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff f9ca 	bl	8001c84 <set_DigOut_hiZ>
	// D[7]: weak MISO
	// D[6]: twoscomp
	// D[5]: absmode
	// D[4]: DSPen
	// D[3:0]: DSP cutoff freq
	p->weak_miso = 1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	p->twos_comp = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	641a      	str	r2, [r3, #64]	@ 0x40
	p->abs_mode = 0;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
	p->DSP_en = 1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	649a      	str	r2, [r3, #72]	@ 0x48
	set_DSP_cutoff_freq(p, 1.0);
 8002908:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff f9cb 	bl	8001ca8 <set_DSP_cutoff_freq>
	// D[5]: Zcheck load
	// D[4:3]: Zcheck scale
	// D[2]: Zcheck conn all
	// D[1]: Zcheck sel pol
	// D[0]: Zcheck en
	p->zcheck_DAC_power = 1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	651a      	str	r2, [r3, #80]	@ 0x50
	p->zcheck_load = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54
	set_zcheck_scale(p, ZcheckCs100fF);
 800291e:	2100      	movs	r1, #0
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fa85 	bl	8001e30 <set_zcheck_scale>
	p->zcheck_conn_all = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	65da      	str	r2, [r3, #92]	@ 0x5c
	set_zcheck_polarity(p, ZcheckPositiveInput);
 800292c:	2100      	movs	r1, #0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff faa0 	bl	8001e74 <set_zcheck_polarity>
	p->zcheck_en = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	665a      	str	r2, [r3, #100]	@ 0x64
	// D[7:0]: Zcheck DAC

	// Register 7: Impedance Check Amplifier Select
	// D[7:6]: X (No Function)
	// D[5:0]: Zcheck select
	set_zcheck_channel(p, 0);
 800293a:	2100      	movs	r1, #0
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff faae 	bl	8001e9e <set_zcheck_channel>

	// Registers 8-13: On-Chip Amplifier Bandwidth Select
	// R[8]D[7]: offchip RH1
	// R[8]D[6]: X (No Function)
	// R[8]D[5:0]: RH1 DAC1
	p->off_chip_RH1 = 0;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	66da      	str	r2, [r3, #108]	@ 0x6c

	// R[9]D[7]: ADC aux1 en
	// R[9]D[6:5]: X (No Function)
	// R[9]D[4:0] RH1 DAC2
	p->adc_Aux1_en = 1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	679a      	str	r2, [r3, #120]	@ 0x78

	// R[10]D[7]: offchip RH2
	// R[10]D[6]: X (No Function)
	// R[10]D[5:0]: RH2 DAC1
	p->off_chip_RH2 = 0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	671a      	str	r2, [r3, #112]	@ 0x70

	// R[11]D[7]: ADC2 aux2 en
	// R[11]D[6:5]: X (No Function)
	// R[11]D[4:0]: RH2 DAC2
	p->adc_Aux2_en = 1;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	67da      	str	r2, [r3, #124]	@ 0x7c

	// R[12]D[7]: offchip RL
	// R[12]D[6:0]: RL DAC1
	p->off_chip_RL = 0;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	675a      	str	r2, [r3, #116]	@ 0x74

	// R[13]D[7]: ADC3 aux3 en
	// R[13]D[6]: RL DAC3
	// R[13]D[5:0]: RL DAC2
	p->adc_Aux3_en = 1;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

	set_upper_bandwidth(p, 7500.0);
 8002968:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8002990 <set_default_rhd_settings+0x108>
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff facb 	bl	8001f08 <set_upper_bandwidth>
	set_lower_bandwidth(p, 1.0);
 8002972:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fc16 	bl	80021a8 <set_lower_bandwidth>
	// R[17]D[7:0]: apwr[31:0]
	// R[18]D[7:0] = apwr[39:32]
	// R[19]D[7:0] = apwr[47:40]
	// R[20]D[7:0] = apwr[55:48]
	// R[21]D[7:0] = apwr[63:56]
	power_up_all_amps(p);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff faa8 	bl	8001ed2 <power_up_all_amps>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	f3af 8000 	nop.w
 8002990:	00000000 	.word	0x00000000
 8002994:	40bd4c00 	.word	0x40bd4c00

08002998 <set_biases_based_on_sample_rate>:


// Determine suitable ADC buffer bias and mux bias values based on provided sample rate.
void set_biases_based_on_sample_rate(int *adc_buffer_bias, int *mux_bias, const double sample_rate)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	ed87 0b00 	vstr	d0, [r7]
	double adc_sampling_rate = (CONVERT_COMMANDS_PER_SEQUENCE + AUX_COMMANDS_PER_SEQUENCE) * sample_rate;
 80029a6:	ed97 7b00 	vldr	d7, [r7]
 80029aa:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8002ad0 <set_biases_based_on_sample_rate+0x138>
 80029ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029b2:	ed87 7b04 	vstr	d7, [r7, #16]

	if (adc_sampling_rate <= 120000.0) {
 80029b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029ba:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8002ad8 <set_biases_based_on_sample_rate+0x140>
 80029be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	d806      	bhi.n	80029d6 <set_biases_based_on_sample_rate+0x3e>
		*adc_buffer_bias = 32;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2228      	movs	r2, #40	@ 0x28
 80029d2:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
	} else {
		*adc_buffer_bias = 2;
		*mux_bias = 4;
	}
}
 80029d4:	e075      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 140000.0) {
 80029d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029da:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8002ae0 <set_biases_based_on_sample_rate+0x148>
 80029de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d806      	bhi.n	80029f6 <set_biases_based_on_sample_rate+0x5e>
		*adc_buffer_bias = 16;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2210      	movs	r2, #16
 80029ec:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2228      	movs	r2, #40	@ 0x28
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	e065      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 175000.0) {
 80029f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8002ae8 <set_biases_based_on_sample_rate+0x150>
 80029fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d806      	bhi.n	8002a16 <set_biases_based_on_sample_rate+0x7e>
		*adc_buffer_bias = 8;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	601a      	str	r2, [r3, #0]
		*mux_bias = 40;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2228      	movs	r2, #40	@ 0x28
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	e055      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 220000.0) {
 8002a16:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a1a:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8002af0 <set_biases_based_on_sample_rate+0x158>
 8002a1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	d806      	bhi.n	8002a36 <set_biases_based_on_sample_rate+0x9e>
		*adc_buffer_bias = 8;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	601a      	str	r2, [r3, #0]
		*mux_bias = 32;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2220      	movs	r2, #32
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	e045      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 280000.0) {
 8002a36:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a3a:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8002af8 <set_biases_based_on_sample_rate+0x160>
 8002a3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d806      	bhi.n	8002a56 <set_biases_based_on_sample_rate+0xbe>
		*adc_buffer_bias = 8;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
		*mux_bias = 26;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	221a      	movs	r2, #26
 8002a52:	601a      	str	r2, [r3, #0]
}
 8002a54:	e035      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 350000.0) {
 8002a56:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a5a:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8002b00 <set_biases_based_on_sample_rate+0x168>
 8002a5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a66:	d806      	bhi.n	8002a76 <set_biases_based_on_sample_rate+0xde>
		*adc_buffer_bias = 4;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
		*mux_bias = 18;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2212      	movs	r2, #18
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	e025      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 440000.0) {
 8002a76:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7a:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8002b08 <set_biases_based_on_sample_rate+0x170>
 8002a7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	d806      	bhi.n	8002a96 <set_biases_based_on_sample_rate+0xfe>
		*adc_buffer_bias = 3;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	601a      	str	r2, [r3, #0]
		*mux_bias = 16;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2210      	movs	r2, #16
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	e015      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
	} else if (adc_sampling_rate <= 525000.0) {
 8002a96:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a9a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8002b10 <set_biases_based_on_sample_rate+0x178>
 8002a9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	d806      	bhi.n	8002ab6 <set_biases_based_on_sample_rate+0x11e>
		*adc_buffer_bias = 3;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	601a      	str	r2, [r3, #0]
		*mux_bias = 7;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	601a      	str	r2, [r3, #0]
}
 8002ab4:	e005      	b.n	8002ac2 <set_biases_based_on_sample_rate+0x12a>
		*adc_buffer_bias = 2;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
		*mux_bias = 4;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	00000000 	.word	0x00000000
 8002ad4:	40418000 	.word	0x40418000
 8002ad8:	00000000 	.word	0x00000000
 8002adc:	40fd4c00 	.word	0x40fd4c00
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	41011700 	.word	0x41011700
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	41055cc0 	.word	0x41055cc0
 8002af0:	00000000 	.word	0x00000000
 8002af4:	410adb00 	.word	0x410adb00
 8002af8:	00000000 	.word	0x00000000
 8002afc:	41111700 	.word	0x41111700
 8002b00:	00000000 	.word	0x00000000
 8002b04:	41155cc0 	.word	0x41155cc0
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	411adb00 	.word	0x411adb00
 8002b10:	00000000 	.word	0x00000000
 8002b14:	41200590 	.word	0x41200590

08002b18 <get_register_value>:


// Return the value of a selected RAM register (0-21) on the RHD2164 chip,
// based on the current register variables in RHDConfigParameters.
uint16_t get_register_value(RHDConfigParameters *p, int reg)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	int regout;
	const int ZcheckDac = 128;  // midrange
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	60bb      	str	r3, [r7, #8]

	switch (reg) {
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b15      	cmp	r3, #21
 8002b2a:	f200 8217 	bhi.w	8002f5c <get_register_value+0x444>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <get_register_value+0x1c>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b8d 	.word	0x08002b8d
 8002b38:	08002bb7 	.word	0x08002bb7
 8002b3c:	08002bc7 	.word	0x08002bc7
 8002b40:	08002bcf 	.word	0x08002bcf
 8002b44:	08002bff 	.word	0x08002bff
 8002b48:	08002c27 	.word	0x08002c27
 8002b4c:	08002c57 	.word	0x08002c57
 8002b50:	08002c5d 	.word	0x08002c5d
 8002b54:	08002c65 	.word	0x08002c65
 8002b58:	08002c77 	.word	0x08002c77
 8002b5c:	08002c89 	.word	0x08002c89
 8002b60:	08002c9b 	.word	0x08002c9b
 8002b64:	08002cad 	.word	0x08002cad
 8002b68:	08002cbf 	.word	0x08002cbf
 8002b6c:	08002cdd 	.word	0x08002cdd
 8002b70:	08002d2d 	.word	0x08002d2d
 8002b74:	08002d7d 	.word	0x08002d7d
 8002b78:	08002dcd 	.word	0x08002dcd
 8002b7c:	08002e1d 	.word	0x08002e1d
 8002b80:	08002e6d 	.word	0x08002e6d
 8002b84:	08002ebd 	.word	0x08002ebd
 8002b88:	08002f0d 	.word	0x08002f0d
	case 0:
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8002b98:	015b      	lsls	r3, r3, #5
 8002b9a:	441a      	add	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	009b      	lsls	r3, r3, #2
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002baa:	441a      	add	r2, r3
			(p->adc_comparator_bias << 2) + p->adc_comparator_select;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
		regout = (p->adc_reference_bw << 6) + (p->amp_fast_settle << 5) + (p->amp_vref_enable << 4) +
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
		break;
 8002bb4:	e1d4      	b.n	8002f60 <get_register_value+0x448>

	case 1:
		regout = (p->vdd_sense_enable << 6) + p->adc_buffer_bias;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	019a      	lsls	r2, r3, #6
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
		break;
 8002bc4:	e1cc      	b.n	8002f60 <get_register_value+0x448>

	case 2:
		regout = p->mux_bias;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	60fb      	str	r3, [r7, #12]
		break;
 8002bcc:	e1c8      	b.n	8002f60 <get_register_value+0x448>

	case 3:
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	441a      	add	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	005b      	lsls	r3, r3, #1
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002bf2:	441a      	add	r2, r3
			(p->digOut_hiZ << 1) + p->digOut;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		regout = (p->mux_load << 5) + (p->temp_S2 << 4) + (p->temp_S1 << 3) + (p->temp_en << 2) +
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
		break;
 8002bfc:	e1b0      	b.n	8002f60 <get_register_value+0x448>

	case 4:
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	01da      	lsls	r2, r3, #7
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	015b      	lsls	r3, r3, #5
 8002c12:	441a      	add	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	441a      	add	r2, r3
			(p->DSP_cutoff_freq);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
		regout = (p->weak_miso << 7) + (p->twos_comp << 6) + (p->abs_mode << 5) + (p->DSP_en << 4) +
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
		break;
 8002c24:	e19c      	b.n	8002f60 <get_register_value+0x448>

	case 5:
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	019a      	lsls	r2, r3, #6
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c30:	015b      	lsls	r3, r3, #5
 8002c32:	441a      	add	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	009b      	lsls	r3, r3, #2
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c42:	441a      	add	r2, r3
			(p->zcheck_conn_all << 2) + (p->zcheck_sel_pol << 1) + p->zcheck_en;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	441a      	add	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		regout = (p->zcheck_DAC_power << 6) + (p->zcheck_load << 5) + (p->zcheck_scale << 3) +
 8002c50:	4413      	add	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
		break;
 8002c54:	e184      	b.n	8002f60 <get_register_value+0x448>

	case 6:
		regout = ZcheckDac;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	60fb      	str	r3, [r7, #12]
		break;
 8002c5a:	e181      	b.n	8002f60 <get_register_value+0x448>

	case 7:
		regout = p->zcheck_select;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c60:	60fb      	str	r3, [r7, #12]
		break;
 8002c62:	e17d      	b.n	8002f60 <get_register_value+0x448>

	case 8:
		regout = (p->off_chip_RH1 << 7) + p->rH1_DAC1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c68:	01da      	lsls	r2, r3, #7
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c70:	4413      	add	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
		break;
 8002c74:	e174      	b.n	8002f60 <get_register_value+0x448>

	case 9:
		regout = (p->adc_Aux1_en << 7) + p->rH1_DAC2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c7a:	01da      	lsls	r2, r3, #7
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
		break;
 8002c86:	e16b      	b.n	8002f60 <get_register_value+0x448>

	case 10:
		regout = (p->off_chip_RH2 << 7) + p->rH2_DAC1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	01da      	lsls	r2, r3, #7
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c94:	4413      	add	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
		break;
 8002c98:	e162      	b.n	8002f60 <get_register_value+0x448>

	case 11:
		regout = (p->adc_Aux2_en << 7) + p->rH2_DAC2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c9e:	01da      	lsls	r2, r3, #7
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	4413      	add	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
		break;
 8002caa:	e159      	b.n	8002f60 <get_register_value+0x448>

	case 12:
		regout = (p->off_chip_RL << 7) + p->rL_DAC1;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb0:	01da      	lsls	r2, r3, #7
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb8:	4413      	add	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
		break;
 8002cbc:	e150      	b.n	8002f60 <get_register_value+0x448>

	case 13:
		regout = (p->adc_Aux3_en << 7) + (p->rL_DAC3 << 6) + p->rL_DAC2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc4:	01da      	lsls	r2, r3, #7
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	441a      	add	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
		break;
 8002cda:	e141      	b.n	8002f60 <get_register_value+0x448>

	case 14:
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002ce2:	01da      	lsls	r2, r3, #7
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002cea:	019b      	lsls	r3, r3, #6
 8002cec:	441a      	add	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cf4:	015b      	lsls	r3, r3, #5
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d08:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d0a:	441a      	add	r2, r3
			(p->amp_pwr[3] << 3) + (p->amp_pwr[2] << 2) + (p->amp_pwr[1] << 1) + p->amp_pwr[0];
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	441a      	add	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
		regout = (p->amp_pwr[7] << 7) + (p->amp_pwr[6] << 6) + (p->amp_pwr[5] << 5) + (p->amp_pwr[4] << 4) +
 8002d26:	4413      	add	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
		break;
 8002d2a:	e119      	b.n	8002f60 <get_register_value+0x448>

	case 15:
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002d32:	01da      	lsls	r2, r3, #7
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d3a:	019b      	lsls	r3, r3, #6
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002d44:	015b      	lsls	r3, r3, #5
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002d58:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d5a:	441a      	add	r2, r3
			(p->amp_pwr[11] << 3) + (p->amp_pwr[10] << 2) + (p->amp_pwr[9] << 1) + p->amp_pwr[8];
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	441a      	add	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
		regout = (p->amp_pwr[15] << 7) + (p->amp_pwr[14] << 6) + (p->amp_pwr[13] << 5) + (p->amp_pwr[12] << 4) +
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
		break;
 8002d7a:	e0f1      	b.n	8002f60 <get_register_value+0x448>

	case 16:
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8002d82:	01da      	lsls	r2, r3, #7
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	441a      	add	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	441a      	add	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002da8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002daa:	441a      	add	r2, r3
			(p->amp_pwr[19] << 3) + (p->amp_pwr[18] << 2) + (p->amp_pwr[17] << 1) + p->amp_pwr[16];
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	441a      	add	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
		regout = (p->amp_pwr[23] << 7) + (p->amp_pwr[22] << 6) + (p->amp_pwr[21] << 5) + (p->amp_pwr[20] << 4) +
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
		break;
 8002dca:	e0c9      	b.n	8002f60 <get_register_value+0x448>

	case 17:
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8002dd2:	01da      	lsls	r2, r3, #7
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8002dda:	019b      	lsls	r3, r3, #6
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002de4:	015b      	lsls	r3, r3, #5
 8002de6:	441a      	add	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002df8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002dfa:	441a      	add	r2, r3
			(p->amp_pwr[27] << 3) + (p->amp_pwr[26] << 2) + (p->amp_pwr[25] << 1) + p->amp_pwr[24];
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	441a      	add	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
		regout = (p->amp_pwr[31] << 7) + (p->amp_pwr[30] << 6) + (p->amp_pwr[29] << 5) + (p->amp_pwr[28] << 4) +
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
		break;
 8002e1a:	e0a1      	b.n	8002f60 <get_register_value+0x448>

	case 18:
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e22:	01da      	lsls	r2, r3, #7
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002e2a:	019b      	lsls	r3, r3, #6
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002e34:	015b      	lsls	r3, r3, #5
 8002e36:	441a      	add	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8002e48:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e4a:	441a      	add	r2, r3
			(p->amp_pwr[35] << 3) + (p->amp_pwr[34] << 2) + (p->amp_pwr[33] << 1) + p->amp_pwr[32];
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
		regout = (p->amp_pwr[39] << 7) + (p->amp_pwr[38] << 6) + (p->amp_pwr[37] << 5) + (p->amp_pwr[36] << 4) +
 8002e66:	4413      	add	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
		break;
 8002e6a:	e079      	b.n	8002f60 <get_register_value+0x448>

	case 19:
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8002e72:	01da      	lsls	r2, r3, #7
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8002e7a:	019b      	lsls	r3, r3, #6
 8002e7c:	441a      	add	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	441a      	add	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002e98:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002e9a:	441a      	add	r2, r3
			(p->amp_pwr[43] << 3) + (p->amp_pwr[42] << 2) + (p->amp_pwr[41] << 1) + p->amp_pwr[40];
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	441a      	add	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
		regout = (p->amp_pwr[47] << 7) + (p->amp_pwr[46] << 6) + (p->amp_pwr[45] << 5) + (p->amp_pwr[44] << 4) +
 8002eb6:	4413      	add	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
		break;
 8002eba:	e051      	b.n	8002f60 <get_register_value+0x448>

	case 20:
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8002ec2:	01da      	lsls	r2, r3, #7
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002eca:	019b      	lsls	r3, r3, #6
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	441a      	add	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 8002ee8:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002eea:	441a      	add	r2, r3
			(p->amp_pwr[51] << 3) + (p->amp_pwr[50] << 2) + (p->amp_pwr[49] << 1) + p->amp_pwr[48];
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
		regout = (p->amp_pwr[55] << 7) + (p->amp_pwr[54] << 6) + (p->amp_pwr[53] << 5) + (p->amp_pwr[52] << 4) +
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
		break;
 8002f0a:	e029      	b.n	8002f60 <get_register_value+0x448>

	case 21:
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8002f12:	01da      	lsls	r2, r3, #7
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8002f24:	015b      	lsls	r3, r3, #5
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8002f38:	00db      	lsls	r3, r3, #3
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f3a:	441a      	add	r2, r3
			(p->amp_pwr[59] << 3) + (p->amp_pwr[58] << 2) + (p->amp_pwr[57] << 1) + p->amp_pwr[56];
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
		regout = (p->amp_pwr[63] << 7) + (p->amp_pwr[62] << 6) + (p->amp_pwr[61] << 5) + (p->amp_pwr[60] << 4) +
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
		break;
 8002f5a:	e001      	b.n	8002f60 <get_register_value+0x448>

	default:
		regout = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
	}
	return regout;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	b29b      	uxth	r3, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <convert_command>:
// A special case with channel = 63 can be used to cycle through successive amplifier channels,
// so long as at least one defined-channel convert command is called first.
// Once sent, SPI returns (2 commands later) the 16-bit result of this conversion.
// Command: 00_C[5]-C[0]_0000000H for channel C and hBit H
// Result:  A[15]-A[0] for ADC conversion output A
uint16_t convert_command(uint8_t channel, uint8_t h_bit) {
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	460a      	mov	r2, r1
 8002f7a:	71fb      	strb	r3, [r7, #7]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	71bb      	strb	r3, [r7, #6]
	const uint16_t convert_mask = 0b0000000000000000;
 8002f80:	2300      	movs	r3, #0
 8002f82:	81fb      	strh	r3, [r7, #14]
	const uint16_t channel_mask = channel << 8;
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	81bb      	strh	r3, [r7, #12]
	const uint16_t h_bit_mask = (uint16_t) h_bit;
 8002f8c:	79bb      	ldrb	r3, [r7, #6]
 8002f8e:	817b      	strh	r3, [r7, #10]
	return convert_mask | channel_mask | h_bit_mask;
 8002f90:	89fa      	ldrh	r2, [r7, #14]
 8002f92:	89bb      	ldrh	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <calibrate_command>:
// These dummy commands are not executed (unless another calibration command is sent, which resets the process).
// During the entire 9-command process, the results are all 0s except the for the MSB.
// The MSB will be 0 if 2's complement mode is enabled (see Register 4), otherwise it will be 1.
// Command: 01010101_00000000
// Result:  *0000000_00000000 where * depends on 2's complement mode
uint16_t calibrate_command() {
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
	return 0b0101010100000000;
 8002fae:	f44f 43aa 	mov.w	r3, #21760	@ 0x5500
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <write_command>:
// echoed data that was written (to verify reception of correct data).
// Any attempt to write to a read-only register (or non-existent register) will produce this same result,
// but data will not be written to that register.
// Command: 10_R[5]-R[0]_D[7]-D[0]
// Result:  11111111_D[7]-D[0]
uint16_t write_command(uint8_t reg_addr, uint8_t data) {
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71bb      	strb	r3, [r7, #6]
	const uint16_t read_mask = 0b1000000000000000;
 8002fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fd0:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask | (uint16_t) data;
 8002fda:	89fa      	ldrh	r2, [r7, #14]
 8002fdc:	89bb      	ldrh	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <read_command>:

// Read contents of register.
// Once sent, SPI returns (2 commands later) 8 MSBs of 0s, and 8 LSBs of the read data.
// Command: 11_R[5]-R[0]_00000000
// Result:  00000000_D[7]-D[0]
uint16_t read_command(uint8_t reg_addr) {
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	71fb      	strb	r3, [r7, #7]
	const uint16_t read_mask = 0b1100000000000000;
 8003000:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003004:	81fb      	strh	r3, [r7, #14]
	const uint16_t reg_mask = reg_addr << 8;
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	b29b      	uxth	r3, r3
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	81bb      	strh	r3, [r7, #12]
	return read_mask | reg_mask;
 800300e:	89fa      	ldrh	r2, [r7, #14]
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	b29b      	uxth	r3, r3
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <HAL_MspInit+0x30>)
 800302c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003030:	4a08      	ldr	r2, [pc, #32]	@ (8003054 <HAL_MspInit+0x30>)
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_MspInit+0x30>)
 800303c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	58024400 	.word	0x58024400

08003058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	@ 0x38
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a9c      	ldr	r2, [pc, #624]	@ (80032e8 <HAL_SPI_MspInit+0x290>)
 8003076:	4293      	cmp	r3, r2
 8003078:	f040 8087 	bne.w	800318a <HAL_SPI_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307c:	4b9b      	ldr	r3, [pc, #620]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003082:	4a9a      	ldr	r2, [pc, #616]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 8003084:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003088:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800308c:	4b97      	ldr	r3, [pc, #604]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 800308e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003096:	623b      	str	r3, [r7, #32]
 8003098:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b94      	ldr	r3, [pc, #592]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a0:	4a92      	ldr	r2, [pc, #584]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030aa:	4b90      	ldr	r3, [pc, #576]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80030ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b8:	4b8c      	ldr	r3, [pc, #560]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030be:	4a8b      	ldr	r2, [pc, #556]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80030ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 80030d6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030e8:	2305      	movs	r3, #5
 80030ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f0:	4619      	mov	r1, r3
 80030f2:	487f      	ldr	r0, [pc, #508]	@ (80032f0 <HAL_SPI_MspInit+0x298>)
 80030f4:	f003 fd98 	bl	8006c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003108:	2305      	movs	r3, #5
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	4878      	ldr	r0, [pc, #480]	@ (80032f4 <HAL_SPI_MspInit+0x29c>)
 8003114:	f003 fd88 	bl	8006c28 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8003118:	4b77      	ldr	r3, [pc, #476]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 800311a:	4a78      	ldr	r2, [pc, #480]	@ (80032fc <HAL_SPI_MspInit+0x2a4>)
 800311c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800311e:	4b76      	ldr	r3, [pc, #472]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003120:	2225      	movs	r2, #37	@ 0x25
 8003122:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003124:	4b74      	ldr	r3, [pc, #464]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312a:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003130:	4b71      	ldr	r3, [pc, #452]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003136:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003138:	4b6f      	ldr	r3, [pc, #444]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 800313a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800313e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003140:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003142:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003146:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003148:	4b6b      	ldr	r3, [pc, #428]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 800314a:	2200      	movs	r2, #0
 800314c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800314e:	4b6a      	ldr	r3, [pc, #424]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003150:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003154:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003156:	4b68      	ldr	r3, [pc, #416]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003158:	2200      	movs	r2, #0
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800315c:	4866      	ldr	r0, [pc, #408]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 800315e:	f000 ff1f 	bl	8003fa0 <HAL_DMA_Init>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_SPI_MspInit+0x114>
    {
      Error_Handler();
 8003168:	f7fe f8dc 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a62      	ldr	r2, [pc, #392]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003170:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003172:	4a61      	ldr	r2, [pc, #388]	@ (80032f8 <HAL_SPI_MspInit+0x2a0>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2100      	movs	r1, #0
 800317c:	2023      	movs	r0, #35	@ 0x23
 800317e:	f000 feda 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003182:	2023      	movs	r0, #35	@ 0x23
 8003184:	f000 fef1 	bl	8003f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003188:	e0aa      	b.n	80032e0 <HAL_SPI_MspInit+0x288>
  else if(hspi->Instance==SPI3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5c      	ldr	r2, [pc, #368]	@ (8003300 <HAL_SPI_MspInit+0x2a8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	f040 80a5 	bne.w	80032e0 <HAL_SPI_MspInit+0x288>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003196:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800319c:	4a53      	ldr	r2, [pc, #332]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 800319e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031a6:	4b51      	ldr	r3, [pc, #324]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ba:	4a4c      	ldr	r2, [pc, #304]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c4:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d8:	4a44      	ldr	r2, [pc, #272]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e2:	4b42      	ldr	r3, [pc, #264]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f0:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f6:	4a3d      	ldr	r2, [pc, #244]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003200:	4b3a      	ldr	r3, [pc, #232]	@ (80032ec <HAL_SPI_MspInit+0x294>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800320e:	2310      	movs	r3, #16
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	2302      	movs	r3, #2
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321a:	2303      	movs	r3, #3
 800321c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800321e:	2306      	movs	r3, #6
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003226:	4619      	mov	r1, r3
 8003228:	4831      	ldr	r0, [pc, #196]	@ (80032f0 <HAL_SPI_MspInit+0x298>)
 800322a:	f003 fcfd 	bl	8006c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800322e:	2304      	movs	r3, #4
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	2302      	movs	r3, #2
 8003234:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323a:	2303      	movs	r3, #3
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800323e:	2307      	movs	r3, #7
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003246:	4619      	mov	r1, r3
 8003248:	482e      	ldr	r0, [pc, #184]	@ (8003304 <HAL_SPI_MspInit+0x2ac>)
 800324a:	f003 fced 	bl	8006c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800324e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003260:	2306      	movs	r3, #6
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003268:	4619      	mov	r1, r3
 800326a:	4827      	ldr	r0, [pc, #156]	@ (8003308 <HAL_SPI_MspInit+0x2b0>)
 800326c:	f003 fcdc 	bl	8006c28 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream1;
 8003270:	4b26      	ldr	r3, [pc, #152]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 8003272:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <HAL_SPI_MspInit+0x2b8>)
 8003274:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8003276:	4b25      	ldr	r3, [pc, #148]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 8003278:	223e      	movs	r2, #62	@ 0x3e
 800327a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800327c:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 800327e:	2240      	movs	r2, #64	@ 0x40
 8003280:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003282:	4b22      	ldr	r3, [pc, #136]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003288:	4b20      	ldr	r3, [pc, #128]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 800328a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800328e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 8003292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003296:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 800329a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800329e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032a6:	4b19      	ldr	r3, [pc, #100]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 80032a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80032ac:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ae:	4b17      	ldr	r3, [pc, #92]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80032b4:	4815      	ldr	r0, [pc, #84]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 80032b6:	f000 fe73 	bl	8003fa0 <HAL_DMA_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_SPI_MspInit+0x26c>
      Error_Handler();
 80032c0:	f7fe f830 	bl	8001324 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a11      	ldr	r2, [pc, #68]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 80032c8:	679a      	str	r2, [r3, #120]	@ 0x78
 80032ca:	4a10      	ldr	r2, [pc, #64]	@ (800330c <HAL_SPI_MspInit+0x2b4>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	2033      	movs	r0, #51	@ 0x33
 80032d6:	f000 fe2e 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80032da:	2033      	movs	r0, #51	@ 0x33
 80032dc:	f000 fe45 	bl	8003f6a <HAL_NVIC_EnableIRQ>
}
 80032e0:	bf00      	nop
 80032e2:	3738      	adds	r7, #56	@ 0x38
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40013000 	.word	0x40013000
 80032ec:	58024400 	.word	0x58024400
 80032f0:	58020000 	.word	0x58020000
 80032f4:	58020c00 	.word	0x58020c00
 80032f8:	2400019c 	.word	0x2400019c
 80032fc:	40020010 	.word	0x40020010
 8003300:	40003c00 	.word	0x40003c00
 8003304:	58020400 	.word	0x58020400
 8003308:	58020800 	.word	0x58020800
 800330c:	24000214 	.word	0x24000214
 8003310:	40020028 	.word	0x40020028

08003314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2f      	ldr	r2, [pc, #188]	@ (80033f0 <HAL_TIM_Base_MspInit+0xdc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10f      	bne.n	8003356 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003336:	4b2f      	ldr	r3, [pc, #188]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800333c:	4a2d      	ldr	r2, [pc, #180]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003346:	4b2b      	ldr	r3, [pc, #172]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003354:	e047      	b.n	80033e6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335e:	d12e      	bne.n	80033be <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003360:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003366:	4a23      	ldr	r2, [pc, #140]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003370:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003372:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003384:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800338e:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800339c:	2301      	movs	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ac:	2301      	movs	r3, #1
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 031c 	add.w	r3, r7, #28
 80033b4:	4619      	mov	r1, r3
 80033b6:	4810      	ldr	r0, [pc, #64]	@ (80033f8 <HAL_TIM_Base_MspInit+0xe4>)
 80033b8:	f003 fc36 	bl	8006c28 <HAL_GPIO_Init>
}
 80033bc:	e013      	b.n	80033e6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	@ (80033fc <HAL_TIM_Base_MspInit+0xe8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10e      	bne.n	80033e6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 80033ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ce:	4a09      	ldr	r2, [pc, #36]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_TIM_Base_MspInit+0xe0>)
 80033da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
}
 80033e6:	bf00      	nop
 80033e8:	3730      	adds	r7, #48	@ 0x30
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40010000 	.word	0x40010000
 80033f4:	58024400 	.word	0x58024400
 80033f8:	58020000 	.word	0x58020000
 80033fc:	40010400 	.word	0x40010400

08003400 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <HAL_TIM_OC_MspInit+0x48>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d116      	bne.n	8003440 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <HAL_TIM_OC_MspInit+0x4c>)
 8003414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003418:	4a0c      	ldr	r2, [pc, #48]	@ (800344c <HAL_TIM_OC_MspInit+0x4c>)
 800341a:	f043 0302 	orr.w	r3, r3, #2
 800341e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_TIM_OC_MspInit+0x4c>)
 8003424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003430:	2200      	movs	r2, #0
 8003432:	2101      	movs	r1, #1
 8003434:	201d      	movs	r0, #29
 8003436:	f000 fd7e 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800343a:	201d      	movs	r0, #29
 800343c:	f000 fd95 	bl	8003f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40000400 	.word	0x40000400
 800344c:	58024400 	.word	0x58024400

08003450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	@ 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a38      	ldr	r2, [pc, #224]	@ (8003550 <HAL_TIM_MspPostInit+0x100>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d120      	bne.n	80034b4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003472:	4b38      	ldr	r3, [pc, #224]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 8003474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003478:	4a36      	ldr	r2, [pc, #216]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 800347a:	f043 0310 	orr.w	r3, r3, #16
 800347e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003482:	4b34      	ldr	r3, [pc, #208]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 8003484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003496:	2302      	movs	r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	482a      	ldr	r0, [pc, #168]	@ (8003558 <HAL_TIM_MspPostInit+0x108>)
 80034ae:	f003 fbbb 	bl	8006c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80034b2:	e049      	b.n	8003548 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034bc:	d120      	bne.n	8003500 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	4b25      	ldr	r3, [pc, #148]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 80034c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034c4:	4a23      	ldr	r2, [pc, #140]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034ce:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 80034d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4818      	ldr	r0, [pc, #96]	@ (800355c <HAL_TIM_MspPostInit+0x10c>)
 80034fa:	f003 fb95 	bl	8006c28 <HAL_GPIO_Init>
}
 80034fe:	e023      	b.n	8003548 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a16      	ldr	r2, [pc, #88]	@ (8003560 <HAL_TIM_MspPostInit+0x110>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d11e      	bne.n	8003548 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 800350c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003510:	4a10      	ldr	r2, [pc, #64]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800351a:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <HAL_TIM_MspPostInit+0x104>)
 800351c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003528:	2340      	movs	r3, #64	@ 0x40
 800352a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003538:	2303      	movs	r3, #3
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	4619      	mov	r1, r3
 8003542:	4808      	ldr	r0, [pc, #32]	@ (8003564 <HAL_TIM_MspPostInit+0x114>)
 8003544:	f003 fb70 	bl	8006c28 <HAL_GPIO_Init>
}
 8003548:	bf00      	nop
 800354a:	3728      	adds	r7, #40	@ 0x28
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40010000 	.word	0x40010000
 8003554:	58024400 	.word	0x58024400
 8003558:	58021000 	.word	0x58021000
 800355c:	58020400 	.word	0x58020400
 8003560:	40010400 	.word	0x40010400
 8003564:	58020800 	.word	0x58020800

08003568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b0ba      	sub	sp, #232	@ 0xe8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003580:	f107 0318 	add.w	r3, r7, #24
 8003584:	22b8      	movs	r2, #184	@ 0xb8
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f00b f811 	bl	800e5b0 <memset>
  if(huart->Instance==USART3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a55      	ldr	r2, [pc, #340]	@ (80036e8 <HAL_UART_MspInit+0x180>)
 8003594:	4293      	cmp	r3, r2
 8003596:	f040 80a2 	bne.w	80036de <HAL_UART_MspInit+0x176>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800359a:	f04f 0202 	mov.w	r2, #2
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 fcbf 	bl	8007f34 <HAL_RCCEx_PeriphCLKConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80035bc:	f7fd feb2 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035c0:	4b4a      	ldr	r3, [pc, #296]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035c6:	4a49      	ldr	r2, [pc, #292]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035d0:	4b46      	ldr	r3, [pc, #280]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	4b43      	ldr	r3, [pc, #268]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035e4:	4a41      	ldr	r2, [pc, #260]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035ee:	4b3f      	ldr	r3, [pc, #252]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fc:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <HAL_UART_MspInit+0x184>)
 80035fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003602:	4a3a      	ldr	r2, [pc, #232]	@ (80036ec <HAL_UART_MspInit+0x184>)
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800360c:	4b37      	ldr	r3, [pc, #220]	@ (80036ec <HAL_UART_MspInit+0x184>)
 800360e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800361a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800361e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362e:	2303      	movs	r3, #3
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003634:	2307      	movs	r3, #7
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800363e:	4619      	mov	r1, r3
 8003640:	482b      	ldr	r0, [pc, #172]	@ (80036f0 <HAL_UART_MspInit+0x188>)
 8003642:	f003 faf1 	bl	8006c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin;
 8003646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800364a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365a:	2303      	movs	r3, #3
 800365c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003660:	2307      	movs	r3, #7
 8003662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(STLK_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003666:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800366a:	4619      	mov	r1, r3
 800366c:	4821      	ldr	r0, [pc, #132]	@ (80036f4 <HAL_UART_MspInit+0x18c>)
 800366e:	f003 fadb 	bl	8006c28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8003672:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 8003674:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_UART_MspInit+0x194>)
 8003676:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 800367a:	222e      	movs	r2, #46	@ 0x2e
 800367c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 8003680:	2240      	movs	r2, #64	@ 0x40
 8003682:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003684:	4b1c      	ldr	r3, [pc, #112]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 800368c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003690:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003692:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003698:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800369e:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036a4:	4b14      	ldr	r3, [pc, #80]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 80036a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ac:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036b2:	4811      	ldr	r0, [pc, #68]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 80036b4:	f000 fc74 	bl	8003fa0 <HAL_DMA_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_UART_MspInit+0x15a>
    {
      Error_Handler();
 80036be:	f7fd fe31 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 80036c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80036c8:	4a0b      	ldr	r2, [pc, #44]	@ (80036f8 <HAL_UART_MspInit+0x190>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	2027      	movs	r0, #39	@ 0x27
 80036d4:	f000 fc2f 	bl	8003f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036d8:	2027      	movs	r0, #39	@ 0x27
 80036da:	f000 fc46 	bl	8003f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80036de:	bf00      	nop
 80036e0:	37e8      	adds	r7, #232	@ 0xe8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40004800 	.word	0x40004800
 80036ec:	58024400 	.word	0x58024400
 80036f0:	58020400 	.word	0x58020400
 80036f4:	58020c00 	.word	0x58020c00
 80036f8:	24000450 	.word	0x24000450
 80036fc:	40020040 	.word	0x40020040

08003700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <NMI_Handler+0x4>

08003708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <HardFault_Handler+0x4>

08003710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <MemManage_Handler+0x4>

08003718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <BusFault_Handler+0x4>

08003720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <UsageFault_Handler+0x4>

08003728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_counter++;
 8003758:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <SysTick_Handler+0x20>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	1c50      	adds	r0, r2, #1
 8003760:	f143 0100 	adc.w	r1, r3, #0
 8003764:	4b03      	ldr	r3, [pc, #12]	@ (8003774 <SysTick_Handler+0x20>)
 8003766:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376a:	f000 fac5 	bl	8003cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	240008a8 	.word	0x240008a8

08003778 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  TIM2->CR1 |= TIM_CR1_CEN;
 800377c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800378c:	2004      	movs	r0, #4
 800378e:	f003 fc0c 	bl	8006faa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_rx();
#endif
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800379c:	4802      	ldr	r0, [pc, #8]	@ (80037a8 <DMA1_Stream0_IRQHandler+0x10>)
 800379e:	f001 ff25 	bl	80055ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2400019c 	.word	0x2400019c

080037ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_tx();
#endif
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80037b0:	4802      	ldr	r0, [pc, #8]	@ (80037bc <DMA1_Stream1_IRQHandler+0x10>)
 80037b2:	f001 ff1b 	bl	80055ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	24000214 	.word	0x24000214

080037c0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */
#ifndef USE_HAL
	dma_interrupt_routine_usart_tx();
#endif
  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80037c4:	4802      	ldr	r0, [pc, #8]	@ (80037d0 <DMA1_Stream2_IRQHandler+0x10>)
 80037c6:	f001 ff11 	bl	80055ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	24000450 	.word	0x24000450

080037d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
	if (!LL_TIM_IsActiveFlag_UPDATE(INTERRUPT_TIM)) return; // Ignore any non-UPDATE events that may have generated this interrupt
	LL_TIM_ClearFlag_UPDATE(INTERRUPT_TIM); // If this was an UPDATE event, clear the flag and proceed with interrupt routine
	sample_interrupt_routine();
#endif
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037d8:	4802      	ldr	r0, [pc, #8]	@ (80037e4 <TIM3_IRQHandler+0x10>)
 80037da:	f007 fc46 	bl	800b06a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	24000324 	.word	0x24000324

080037e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_rx();
#endif
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80037ec:	4802      	ldr	r0, [pc, #8]	@ (80037f8 <SPI1_IRQHandler+0x10>)
 80037ee:	f006 fd11 	bl	800a214 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2400008c 	.word	0x2400008c

080037fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
#ifndef USE_HAL
	uart_interrupt_routine();
#endif
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003800:	4802      	ldr	r0, [pc, #8]	@ (800380c <USART3_IRQHandler+0x10>)
 8003802:	f008 ff75 	bl	800c6f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	240003bc 	.word	0x240003bc

08003810 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */
#ifndef USE_HAL
	spi_interrupt_routine_tx();
#endif
  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003814:	4802      	ldr	r0, [pc, #8]	@ (8003820 <SPI3_IRQHandler+0x10>)
 8003816:	f006 fcfd 	bl	800a214 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	24000114 	.word	0x24000114

08003824 <HAL_TIM_PeriodElapsedCallback>:

#ifdef USE_HAL

// This HAL function is called when the timer reaches its counter target - execute interrupt routine when this happens
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	sample_interrupt_routine();
 800382c:	f7fd fd92 	bl	8001354 <sample_interrupt_routine>
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003840:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <_sbrk+0x5c>)
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <_sbrk+0x60>)
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <_sbrk+0x64>)
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <_sbrk+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003868:	f00a feba 	bl	800e5e0 <__errno>
 800386c:	4603      	mov	r3, r0
 800386e:	220c      	movs	r2, #12
 8003870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003876:	e009      	b.n	800388c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	4a05      	ldr	r2, [pc, #20]	@ (800389c <_sbrk+0x64>)
 8003888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	24050000 	.word	0x24050000
 8003898:	00000400 	.word	0x00000400
 800389c:	240008b0 	.word	0x240008b0
 80038a0:	24000a00 	.word	0x24000a00

080038a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <SystemInit+0xd0>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	4a31      	ldr	r2, [pc, #196]	@ (8003974 <SystemInit+0xd0>)
 80038b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003978 <SystemInit+0xd4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d807      	bhi.n	80038d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003978 <SystemInit+0xd4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 030f 	bic.w	r3, r3, #15
 80038cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <SystemInit+0xd4>)
 80038ce:	f043 0307 	orr.w	r3, r3, #7
 80038d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80038d4:	4b29      	ldr	r3, [pc, #164]	@ (800397c <SystemInit+0xd8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a28      	ldr	r2, [pc, #160]	@ (800397c <SystemInit+0xd8>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038e0:	4b26      	ldr	r3, [pc, #152]	@ (800397c <SystemInit+0xd8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80038e6:	4b25      	ldr	r3, [pc, #148]	@ (800397c <SystemInit+0xd8>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4924      	ldr	r1, [pc, #144]	@ (800397c <SystemInit+0xd8>)
 80038ec:	4b24      	ldr	r3, [pc, #144]	@ (8003980 <SystemInit+0xdc>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80038f2:	4b21      	ldr	r3, [pc, #132]	@ (8003978 <SystemInit+0xd4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <SystemInit+0xd4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 030f 	bic.w	r3, r3, #15
 8003906:	4a1c      	ldr	r2, [pc, #112]	@ (8003978 <SystemInit+0xd4>)
 8003908:	f043 0307 	orr.w	r3, r3, #7
 800390c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800390e:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <SystemInit+0xd8>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <SystemInit+0xd8>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800391a:	4b18      	ldr	r3, [pc, #96]	@ (800397c <SystemInit+0xd8>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <SystemInit+0xd8>)
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <SystemInit+0xe0>)
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003926:	4b15      	ldr	r3, [pc, #84]	@ (800397c <SystemInit+0xd8>)
 8003928:	4a17      	ldr	r2, [pc, #92]	@ (8003988 <SystemInit+0xe4>)
 800392a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800392c:	4b13      	ldr	r3, [pc, #76]	@ (800397c <SystemInit+0xd8>)
 800392e:	4a17      	ldr	r2, [pc, #92]	@ (800398c <SystemInit+0xe8>)
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003932:	4b12      	ldr	r3, [pc, #72]	@ (800397c <SystemInit+0xd8>)
 8003934:	2200      	movs	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003938:	4b10      	ldr	r3, [pc, #64]	@ (800397c <SystemInit+0xd8>)
 800393a:	4a14      	ldr	r2, [pc, #80]	@ (800398c <SystemInit+0xe8>)
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800393e:	4b0f      	ldr	r3, [pc, #60]	@ (800397c <SystemInit+0xd8>)
 8003940:	2200      	movs	r2, #0
 8003942:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003944:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <SystemInit+0xd8>)
 8003946:	4a11      	ldr	r2, [pc, #68]	@ (800398c <SystemInit+0xe8>)
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800394a:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <SystemInit+0xd8>)
 800394c:	2200      	movs	r2, #0
 800394e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <SystemInit+0xd8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a09      	ldr	r2, [pc, #36]	@ (800397c <SystemInit+0xd8>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800395c:	4b07      	ldr	r3, [pc, #28]	@ (800397c <SystemInit+0xd8>)
 800395e:	2200      	movs	r2, #0
 8003960:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <SystemInit+0xec>)
 8003964:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003968:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000ed00 	.word	0xe000ed00
 8003978:	52002000 	.word	0x52002000
 800397c:	58024400 	.word	0x58024400
 8003980:	eaf6ed7f 	.word	0xeaf6ed7f
 8003984:	02020200 	.word	0x02020200
 8003988:	01ff0000 	.word	0x01ff0000
 800398c:	01010280 	.word	0x01010280
 8003990:	52004000 	.word	0x52004000

08003994 <loop_escape>:
uint16_t samples[2 * NUM_SAMPLED_CHANNELS];

// Specify condition that should result in the main while loop ending.
// By default, escape once 1 second of data has been gathered.
int loop_escape()
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	// Escape once sample memory capacity (default 1 second of data) has been reached.
#ifdef OFFLINE_TRANSFER
	return sample_counter > per_channel_sample_memory_capacity;
 8003998:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <loop_escape+0x24>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	461a      	mov	r2, r3
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <loop_escape+0x28>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	bf8c      	ite	hi
 80039a8:	2301      	movhi	r3, #1
 80039aa:	2300      	movls	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
#else
	return 0;
#endif
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	2400059c 	.word	0x2400059c
 80039bc:	24000000 	.word	0x24000000

080039c0 <write_data_to_memory>:


// Write any desired data from this sequence to memory.
// By default, only the result corresponding to a CONVERT on FIRST_SAMPLED_CHANNEL is saved per sequence.
void write_data_to_memory()
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
#ifdef OFFLINE_TRANSFER
	// Extract 2 16-bit samples interleaved (stream A and stream B) from each 32-bit word, and save to sample_memory.
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	e020      	b.n	8003a0e <write_data_to_memory+0x4e>
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3307      	adds	r3, #7
 80039d0:	4a16      	ldr	r2, [pc, #88]	@ (8003a2c <write_data_to_memory+0x6c>)
 80039d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039d6:	4b16      	ldr	r3, [pc, #88]	@ (8003a30 <write_data_to_memory+0x70>)
 80039d8:	681a      	ldr	r2, [r3, #0]
				&sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS * 2) + i],
 80039da:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <write_data_to_memory+0x74>)
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	00d9      	lsls	r1, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	440b      	add	r3, r1
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	18d4      	adds	r4, r2, r3
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 80039ea:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <write_data_to_memory+0x70>)
 80039ec:	681a      	ldr	r2, [r3, #0]
				&sample_memory[(sample_counter * NUM_SAMPLED_CHANNELS * 2) + i + NUM_SAMPLED_CHANNELS]);
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <write_data_to_memory+0x74>)
 80039f0:	881b      	ldrh	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	00d9      	lsls	r1, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	440b      	add	r3, r1
 80039fa:	3304      	adds	r3, #4
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
		extract_ddr_words(command_sequence_MISO[FIRST_SAMPLED_CHANNEL + i + 2],
 8003a00:	461a      	mov	r2, r3
 8003a02:	4621      	mov	r1, r4
 8003a04:	f7fd fe27 	bl	8001656 <extract_ddr_words>
	for (int i = 0; i < NUM_SAMPLED_CHANNELS; i++) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	dddb      	ble.n	80039cc <write_data_to_memory+0xc>
	}
	sample_counter++;
 8003a14:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <write_data_to_memory+0x74>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <write_data_to_memory+0x74>)
 8003a20:	801a      	strh	r2, [r3, #0]
//	uint16_t aux2_result_A, aux2_result_B;
//	extract_ddr_words(command_sequence_MISO[34], &aux0_result_A, &aux0_result_B); // Result of AUX SLOT 1 from this command sequence
//	extract_ddr_words(command_sequence_MISO[0],  &aux1_result_A, &aux1_result_B); // Result of AUX SLOT 2 from the previous command sequence
//	extract_ddr_words(command_sequence_MISO[1],  &aux2_result_A, &aux2_result_B); // Result of AUX SLOT 3 from the previous command sequence
#endif
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	24000510 	.word	0x24000510
 8003a30:	240005a0 	.word	0x240005a0
 8003a34:	2400059c 	.word	0x2400059c

08003a38 <transmit_data_realtime>:


// Determine if data is ready to be transmitted, and if so, transmit (for example via USART).
void transmit_data_realtime()
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
				&samples[i],
				&samples[i + NUM_SAMPLED_CHANNELS]);
	}
	transmit_dma_to_usart(samples, NUM_SAMPLED_CHANNELS * 2 * sizeof(uint16_t));
#endif
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <transmit_data_offline>:


// Transmit accumulated data after acquisition has finished (for example via USART).
void transmit_data_offline()
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
	// into very small chunks seems to be the most reliable at high Baud rates.

	// We do the same thing for LL, for consistency - optimized performance is not critical for offline transfers, so there is likely
	// no significant downside to chunking data into many smaller transfers.

	uint16_t samples_per_chunk = 1;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	827b      	strh	r3, [r7, #18]
	uint32_t total_samples_in_memory = NUM_SAMPLED_CHANNELS * 2 * calculate_sample_rate() * NUMBER_OF_SECONDS_TO_ACQUIRE;
 8003a52:	f7fd fe8d 	bl	8001770 <calculate_sample_rate>
 8003a56:	eeb0 7b40 	vmov.f64	d7, d0
 8003a5a:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 8003a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003a62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a66:	ee17 3a90 	vmov	r3, s15
 8003a6a:	60fb      	str	r3, [r7, #12]
	uint32_t num_chunks = floor(total_samples_in_memory / samples_per_chunk);
 8003a6c:	8a7b      	ldrh	r3, [r7, #18]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	ee07 3a90 	vmov	s15, r3
 8003a78:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003a7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a80:	ee17 3a90 	vmov	r3, s15
 8003a84:	60bb      	str	r3, [r7, #8]
	uint16_t remaining_samples = total_samples_in_memory % samples_per_chunk;
 8003a86:	8a7a      	ldrh	r2, [r7, #18]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a8e:	fb01 f202 	mul.w	r2, r1, r2
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]

	// Transmit multiple complete chunks of data
	for (int i = 0; i < num_chunks; i++) {
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e01a      	b.n	8003ad2 <transmit_data_offline+0x8a>
		uart_ready = 0;
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003b18 <transmit_data_offline+0xd0>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * i], samples_per_chunk * sizeof(uint16_t));
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <transmit_data_offline+0xd4>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	8a7b      	ldrh	r3, [r7, #18]
 8003aa8:	6979      	ldr	r1, [r7, #20]
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	441a      	add	r2, r3
 8003ab2:	8a7b      	ldrh	r3, [r7, #18]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f000 f868 	bl	8003b90 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003ac0:	bf00      	nop
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <transmit_data_offline+0xd0>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d1fa      	bne.n	8003ac2 <transmit_data_offline+0x7a>
	for (int i = 0; i < num_chunks; i++) {
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d8e0      	bhi.n	8003a9c <transmit_data_offline+0x54>
	}

	// Transmit any remaining data too small to fit in a complete chunk
	if (remaining_samples > 0) {
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d017      	beq.n	8003b10 <transmit_data_offline+0xc8>
		uart_ready = 0;
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <transmit_data_offline+0xd0>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
		transmit_dma_to_usart(&sample_memory[samples_per_chunk * num_chunks], remaining_samples * sizeof(uint16_t));
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <transmit_data_offline+0xd4>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	8a7b      	ldrh	r3, [r7, #18]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	441a      	add	r2, r3
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 f846 	bl	8003b90 <transmit_dma_to_usart>
		while (uart_ready != 1) {}
 8003b04:	bf00      	nop
 8003b06:	4b04      	ldr	r3, [pc, #16]	@ (8003b18 <transmit_data_offline+0xd0>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d1fa      	bne.n	8003b06 <transmit_data_offline+0xbe>
	}
}
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	24000008 	.word	0x24000008
 8003b1c:	240005a0 	.word	0x240005a0

08003b20 <configure_registers>:

// Configure and transmit register values.
// Initial register values default to the same default settings in the RHX software.
// Any desired changes to these values added after the 'write_initial_reg_values()' function call.
void configure_registers(RHDConfigParameters *parameters)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	write_initial_reg_values(parameters);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fd fdbb 	bl	80016a4 <write_initial_reg_values>
//	// Reg 6: (Actual DAC value which changes over time - instead of setting once here, this should be written sample-by-sample in an aux command list).
//
//	// Reg 7: Set zcheck_select
//	set_zcheck_channel(parameters, FIRST_SAMPLED_CHANNEL);
//	write_command(7, get_register_value(parameters, 7));
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <configure_convert_commands>:


// Configure the CONVERT commands that are loaded at the beginning of command_sequence_MOSI.
// By default, channels from 0 to CONVERT_COMMANDS_PER_SEQUENCE - 1 (0 to 31) are loaded consecutively (0, 1, 2, 3, ... 31).
void configure_convert_commands()
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	af00      	add	r7, sp, #0
	// If default ordering of channel CONVERT commands (0, 1, 2, 3, ... 31) is desired, pass a NULL 2nd parameter to create_convert_sequence().
	create_convert_sequence(NULL);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fd fe6e 	bl	800181c <create_convert_sequence>
	//	uint8_t channel_numbers[CONVERT_COMMANDS_PER_SEQUENCE] = {0};
	//	for (int i = 0; i < CONVERT_COMMANDS_PER_SEQUENCE; i++) {
	//		channel_numbers[i] = (CONVERT_COMMANDS_PER_SEQUENCE - 1) - i;
	//	}
	//	create_convert_sequence(channel_numbers);
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <configure_aux_commands>:


// Configure the AUX commands that are loaded at the end of command_sequence_MOSI.
// By defaults, command lists from 0 to AUX_COMMANDS_PER_SEQUENCE - 1 (0 to 2) are loaded consecutively (32, 33, 34).
void configure_aux_commands(RHDConfigParameters *parameters)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	  // desired frequency, so if using this command list it's important to set zcheck_DAC_command_slot_position to 0, 1, or
	  // 2 (one of the 3 command slots) to indicate its position, and set zcheck_DAC_command_list_length so that during
	  // execution of this list, after the length has been reached it can begin at 0 again.

	// Slot 0: Write RHD register loading to aux_command_list[0], so that the register values saved in software (parameters) are continually re-written.
	create_command_list_RHD_register_config(parameters, (uint16_t*) aux_command_list[0], 0, AUX_COMMAND_LIST_LENGTH);
 8003b4c:	2380      	movs	r3, #128	@ 0x80
 8003b4e:	2200      	movs	r2, #0
 8003b50:	490c      	ldr	r1, [pc, #48]	@ (8003b84 <configure_aux_commands+0x40>)
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fe9c 	bl	8001890 <create_command_list_RHD_register_config>

	// Slot 1: Write dummy reads to aux_command_list[1], so that register 40 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[1], AUX_COMMAND_LIST_LENGTH, read_command(40));
 8003b58:	2028      	movs	r0, #40	@ 0x28
 8003b5a:	f7ff fa4c 	bl	8002ff6 <read_command>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2280      	movs	r2, #128	@ 0x80
 8003b62:	4909      	ldr	r1, [pc, #36]	@ (8003b88 <configure_aux_commands+0x44>)
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd fff2 	bl	8001b4e <create_command_list_dummy>

	// Slot 2: Write dummy reads to aux_command_list[2], so that register 41 is repeatedly read.
	create_command_list_dummy(parameters, (uint16_t*) aux_command_list[2], AUX_COMMAND_LIST_LENGTH, read_command(41));
 8003b6a:	2029      	movs	r0, #41	@ 0x29
 8003b6c:	f7ff fa43 	bl	8002ff6 <read_command>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2280      	movs	r2, #128	@ 0x80
 8003b74:	4905      	ldr	r1, [pc, #20]	@ (8003b8c <configure_aux_commands+0x48>)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd ffe9 	bl	8001b4e <create_command_list_dummy>
	// zcheck_DAC commands can have different lengths depending on desired frequency. To handle this, be sure to:
	// a) assign create_command_list_zcheck_DAC()'s return value to zcheck_DAC_command_list_length, and
	// b) assign which command slot the zcheck_DAC command list is in to zcheck_DAC_command_slot_position.
//	zcheck_DAC_command_list_length = create_command_list_zcheck_DAC(parameters, (uint16_t*) aux_command_list[2], 1000.0, 100);
//	zcheck_DAC_command_slot_position = 2;
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	240005a4 	.word	0x240005a4
 8003b88:	240006a4 	.word	0x240006a4
 8003b8c:	240007a4 	.word	0x240007a4

08003b90 <transmit_dma_to_usart>:

// Use DMA to transmit num_bytes of data from memory pointer tx_data directly to USART.
// Non-blocking, so it may be helpful to set the 'uart_ready' variable to 0 prior to this function call,
// monitor it, and hold off on further transmissions until the USART Tx complete callback sets it to 1.
void transmit_dma_to_usart(volatile uint16_t *tx_data, uint16_t num_bytes)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
#ifdef USE_HAL
	if (HAL_UART_Transmit_DMA(&USART, (uint8_t*) tx_data, num_bytes) != HAL_OK)
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4806      	ldr	r0, [pc, #24]	@ (8003bbc <transmit_dma_to_usart+0x2c>)
 8003ba4:	f008 fd24 	bl	800c5f0 <HAL_UART_Transmit_DMA>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <transmit_dma_to_usart+0x22>
	{
		Error_Handler();
 8003bae:	f7fd fbb9 	bl	8001324 <Error_Handler>
	LL_DMA_EnableStream(DMA, DMA_USART_CHANNEL);

	// Enable DMA transfer for transmit request by setting DMAT bit in UART CR3 register
	LL_USART_EnableDMAReq_TX(USART);
#endif
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	240003bc 	.word	0x240003bc

08003bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bc4:	f7ff fe6e 	bl	80038a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc8:	480c      	ldr	r0, [pc, #48]	@ (8003bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bca:	490d      	ldr	r1, [pc, #52]	@ (8003c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003be0:	4c0a      	ldr	r4, [pc, #40]	@ (8003c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bee:	f00a fcfd 	bl	800e5ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bf2:	f7fc fd37 	bl	8000664 <main>
  bx  lr
 8003bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bf8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003bfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c00:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8003c04:	08011200 	.word	0x08011200
  ldr r2, =_sbss
 8003c08:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8003c0c:	24000a00 	.word	0x24000a00

08003c10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <ADC3_IRQHandler>
	...

08003c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f000 f980 	bl	8003f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c20:	f003 ffb2 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <HAL_Init+0x68>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4913      	ldr	r1, [pc, #76]	@ (8003c80 <HAL_Init+0x6c>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <HAL_Init+0x68>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a0e      	ldr	r2, [pc, #56]	@ (8003c80 <HAL_Init+0x6c>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	4a0b      	ldr	r2, [pc, #44]	@ (8003c84 <HAL_Init+0x70>)
 8003c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c58:	4a0b      	ldr	r2, [pc, #44]	@ (8003c88 <HAL_Init+0x74>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f000 f814 	bl	8003c8c <HAL_InitTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e002      	b.n	8003c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c6e:	f7ff f9d9 	bl	8003024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	0800f060 	.word	0x0800f060
 8003c84:	24000010 	.word	0x24000010
 8003c88:	2400000c 	.word	0x2400000c

08003c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c94:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <HAL_InitTick+0x60>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e021      	b.n	8003ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ca0:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_InitTick+0x64>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b11      	ldr	r3, [pc, #68]	@ (8003cec <HAL_InitTick+0x60>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f965 	bl	8003f86 <HAL_SYSTICK_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00e      	b.n	8003ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0f      	cmp	r3, #15
 8003cca:	d80a      	bhi.n	8003ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cd4:	f000 f92f 	bl	8003f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cd8:	4a06      	ldr	r2, [pc, #24]	@ (8003cf4 <HAL_InitTick+0x68>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	24000018 	.word	0x24000018
 8003cf0:	2400000c 	.word	0x2400000c
 8003cf4:	24000014 	.word	0x24000014

08003cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_IncTick+0x20>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_IncTick+0x24>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <HAL_IncTick+0x24>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	24000018 	.word	0x24000018
 8003d1c:	240008b4 	.word	0x240008b4

08003d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b03      	ldr	r3, [pc, #12]	@ (8003d34 <HAL_GetTick+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	240008b4 	.word	0x240008b4

08003d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff ffee 	bl	8003d20 <HAL_GetTick>
 8003d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d50:	d005      	beq.n	8003d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d52:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <HAL_Delay+0x44>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5e:	bf00      	nop
 8003d60:	f7ff ffde 	bl	8003d20 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d8f7      	bhi.n	8003d60 <HAL_Delay+0x28>
  {
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000018 	.word	0x24000018

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00
 8003dc4:	05fa0000 	.word	0x05fa0000

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db0b      	blt.n	8003e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4907      	ldr	r1, [pc, #28]	@ (8003e1c <__NVIC_EnableIRQ+0x38>)
 8003dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	db0a      	blt.n	8003e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	490c      	ldr	r1, [pc, #48]	@ (8003e6c <__NVIC_SetPriority+0x4c>)
 8003e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e48:	e00a      	b.n	8003e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <__NVIC_SetPriority+0x50>)
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	3b04      	subs	r3, #4
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	761a      	strb	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000e100 	.word	0xe000e100
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	@ 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf28      	it	cs
 8003e92:	2304      	movcs	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d902      	bls.n	8003ea4 <NVIC_EncodePriority+0x30>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <NVIC_EncodePriority+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	4313      	orrs	r3, r2
         );
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003eec:	d301      	bcc.n	8003ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e00f      	b.n	8003f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <SysTick_Config+0x40>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003efa:	210f      	movs	r1, #15
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f00:	f7ff ff8e 	bl	8003e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f04:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <SysTick_Config+0x40>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f0a:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <SysTick_Config+0x40>)
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000e010 	.word	0xe000e010

08003f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff29 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003f2e:	bf00      	nop
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b086      	sub	sp, #24
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff40 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff90 	bl	8003e74 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5f 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ff33 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffa4 	bl	8003edc <SysTick_Config>
 8003f94:	4603      	mov	r3, r0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff feba 	bl	8003d20 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e312      	b.n	80045de <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a66      	ldr	r2, [pc, #408]	@ (8004158 <HAL_DMA_Init+0x1b8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d04a      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_DMA_Init+0x1bc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d045      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a63      	ldr	r2, [pc, #396]	@ (8004160 <HAL_DMA_Init+0x1c0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d040      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a62      	ldr	r2, [pc, #392]	@ (8004164 <HAL_DMA_Init+0x1c4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d03b      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a60      	ldr	r2, [pc, #384]	@ (8004168 <HAL_DMA_Init+0x1c8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d036      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5f      	ldr	r2, [pc, #380]	@ (800416c <HAL_DMA_Init+0x1cc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d031      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5d      	ldr	r2, [pc, #372]	@ (8004170 <HAL_DMA_Init+0x1d0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02c      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a5c      	ldr	r2, [pc, #368]	@ (8004174 <HAL_DMA_Init+0x1d4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d027      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5a      	ldr	r2, [pc, #360]	@ (8004178 <HAL_DMA_Init+0x1d8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d022      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a59      	ldr	r2, [pc, #356]	@ (800417c <HAL_DMA_Init+0x1dc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d01d      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a57      	ldr	r2, [pc, #348]	@ (8004180 <HAL_DMA_Init+0x1e0>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d018      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a56      	ldr	r2, [pc, #344]	@ (8004184 <HAL_DMA_Init+0x1e4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a54      	ldr	r2, [pc, #336]	@ (8004188 <HAL_DMA_Init+0x1e8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00e      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a53      	ldr	r2, [pc, #332]	@ (800418c <HAL_DMA_Init+0x1ec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d009      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a51      	ldr	r2, [pc, #324]	@ (8004190 <HAL_DMA_Init+0x1f0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d004      	beq.n	8004058 <HAL_DMA_Init+0xb8>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a50      	ldr	r2, [pc, #320]	@ (8004194 <HAL_DMA_Init+0x1f4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d101      	bne.n	800405c <HAL_DMA_Init+0xbc>
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_DMA_Init+0xbe>
 800405c:	2300      	movs	r3, #0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 813c 	beq.w	80042dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a37      	ldr	r2, [pc, #220]	@ (8004158 <HAL_DMA_Init+0x1b8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d04a      	beq.n	8004114 <HAL_DMA_Init+0x174>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a36      	ldr	r2, [pc, #216]	@ (800415c <HAL_DMA_Init+0x1bc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d045      	beq.n	8004114 <HAL_DMA_Init+0x174>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a34      	ldr	r2, [pc, #208]	@ (8004160 <HAL_DMA_Init+0x1c0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d040      	beq.n	8004114 <HAL_DMA_Init+0x174>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a33      	ldr	r2, [pc, #204]	@ (8004164 <HAL_DMA_Init+0x1c4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d03b      	beq.n	8004114 <HAL_DMA_Init+0x174>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a31      	ldr	r2, [pc, #196]	@ (8004168 <HAL_DMA_Init+0x1c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d036      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a30      	ldr	r2, [pc, #192]	@ (800416c <HAL_DMA_Init+0x1cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d031      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004170 <HAL_DMA_Init+0x1d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d02c      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2d      	ldr	r2, [pc, #180]	@ (8004174 <HAL_DMA_Init+0x1d4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d027      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004178 <HAL_DMA_Init+0x1d8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2a      	ldr	r2, [pc, #168]	@ (800417c <HAL_DMA_Init+0x1dc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d01d      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <HAL_DMA_Init+0x1e0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <HAL_DMA_Init+0x1e4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a25      	ldr	r2, [pc, #148]	@ (8004188 <HAL_DMA_Init+0x1e8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_DMA_Init+0x174>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a24      	ldr	r2, [pc, #144]	@ (800418c <HAL_DMA_Init+0x1ec>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_DMA_Init+0x174>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a22      	ldr	r2, [pc, #136]	@ (8004190 <HAL_DMA_Init+0x1f0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_DMA_Init+0x174>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a21      	ldr	r2, [pc, #132]	@ (8004194 <HAL_DMA_Init+0x1f4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_DMA_Init+0x186>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e007      	b.n	8004136 <HAL_DMA_Init+0x196>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004136:	e02f      	b.n	8004198 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004138:	f7ff fdf2 	bl	8003d20 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b05      	cmp	r3, #5
 8004144:	d928      	bls.n	8004198 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e242      	b.n	80045de <HAL_DMA_Init+0x63e>
 8004158:	40020010 	.word	0x40020010
 800415c:	40020028 	.word	0x40020028
 8004160:	40020040 	.word	0x40020040
 8004164:	40020058 	.word	0x40020058
 8004168:	40020070 	.word	0x40020070
 800416c:	40020088 	.word	0x40020088
 8004170:	400200a0 	.word	0x400200a0
 8004174:	400200b8 	.word	0x400200b8
 8004178:	40020410 	.word	0x40020410
 800417c:	40020428 	.word	0x40020428
 8004180:	40020440 	.word	0x40020440
 8004184:	40020458 	.word	0x40020458
 8004188:	40020470 	.word	0x40020470
 800418c:	40020488 	.word	0x40020488
 8004190:	400204a0 	.word	0x400204a0
 8004194:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1c8      	bne.n	8004138 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4b83      	ldr	r3, [pc, #524]	@ (80043c0 <HAL_DMA_Init+0x420>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80041be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d107      	bne.n	80041fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	4313      	orrs	r3, r2
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b28      	cmp	r3, #40	@ 0x28
 8004202:	d903      	bls.n	800420c <HAL_DMA_Init+0x26c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b2e      	cmp	r3, #46	@ 0x2e
 800420a:	d91f      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b3e      	cmp	r3, #62	@ 0x3e
 8004212:	d903      	bls.n	800421c <HAL_DMA_Init+0x27c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b42      	cmp	r3, #66	@ 0x42
 800421a:	d917      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b46      	cmp	r3, #70	@ 0x46
 8004222:	d903      	bls.n	800422c <HAL_DMA_Init+0x28c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b48      	cmp	r3, #72	@ 0x48
 800422a:	d90f      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b4e      	cmp	r3, #78	@ 0x4e
 8004232:	d903      	bls.n	800423c <HAL_DMA_Init+0x29c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b52      	cmp	r3, #82	@ 0x52
 800423a:	d907      	bls.n	800424c <HAL_DMA_Init+0x2ac>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b73      	cmp	r3, #115	@ 0x73
 8004242:	d905      	bls.n	8004250 <HAL_DMA_Init+0x2b0>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b77      	cmp	r3, #119	@ 0x77
 800424a:	d801      	bhi.n	8004250 <HAL_DMA_Init+0x2b0>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_DMA_Init+0x2b2>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800425c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	2b04      	cmp	r3, #4
 8004286:	d117      	bne.n	80042b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00e      	beq.n	80042b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f002 fb3a 	bl	8006914 <DMA_CheckFifoParam>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e192      	b.n	80045de <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f002 fa75 	bl	80067b0 <DMA_CalcBaseAndBitshift>
 80042c6:	4603      	mov	r3, r0
 80042c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	223f      	movs	r2, #63	@ 0x3f
 80042d4:	409a      	lsls	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	e0c8      	b.n	800446e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a38      	ldr	r2, [pc, #224]	@ (80043c4 <HAL_DMA_Init+0x424>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_DMA_Init+0x38c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a37      	ldr	r2, [pc, #220]	@ (80043c8 <HAL_DMA_Init+0x428>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <HAL_DMA_Init+0x38c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a35      	ldr	r2, [pc, #212]	@ (80043cc <HAL_DMA_Init+0x42c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_DMA_Init+0x38c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a34      	ldr	r2, [pc, #208]	@ (80043d0 <HAL_DMA_Init+0x430>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_DMA_Init+0x38c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a32      	ldr	r2, [pc, #200]	@ (80043d4 <HAL_DMA_Init+0x434>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_DMA_Init+0x38c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a31      	ldr	r2, [pc, #196]	@ (80043d8 <HAL_DMA_Init+0x438>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_DMA_Init+0x38c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2f      	ldr	r2, [pc, #188]	@ (80043dc <HAL_DMA_Init+0x43c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_DMA_Init+0x38c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2e      	ldr	r2, [pc, #184]	@ (80043e0 <HAL_DMA_Init+0x440>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_DMA_Init+0x390>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_DMA_Init+0x392>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8092 	beq.w	800445c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a21      	ldr	r2, [pc, #132]	@ (80043c4 <HAL_DMA_Init+0x424>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d021      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <HAL_DMA_Init+0x428>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01c      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_DMA_Init+0x42c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <HAL_DMA_Init+0x430>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d012      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <HAL_DMA_Init+0x434>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00d      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1a      	ldr	r2, [pc, #104]	@ (80043d8 <HAL_DMA_Init+0x438>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d008      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <HAL_DMA_Init+0x43c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <HAL_DMA_Init+0x3e6>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <HAL_DMA_Init+0x440>)
 8004384:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4b10      	ldr	r3, [pc, #64]	@ (80043e4 <HAL_DMA_Init+0x444>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b40      	cmp	r3, #64	@ 0x40
 80043ac:	d01c      	beq.n	80043e8 <HAL_DMA_Init+0x448>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d102      	bne.n	80043bc <HAL_DMA_Init+0x41c>
 80043b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043ba:	e016      	b.n	80043ea <HAL_DMA_Init+0x44a>
 80043bc:	2300      	movs	r3, #0
 80043be:	e014      	b.n	80043ea <HAL_DMA_Init+0x44a>
 80043c0:	fe10803f 	.word	0xfe10803f
 80043c4:	58025408 	.word	0x58025408
 80043c8:	5802541c 	.word	0x5802541c
 80043cc:	58025430 	.word	0x58025430
 80043d0:	58025444 	.word	0x58025444
 80043d4:	58025458 	.word	0x58025458
 80043d8:	5802546c 	.word	0x5802546c
 80043dc:	58025480 	.word	0x58025480
 80043e0:	58025494 	.word	0x58025494
 80043e4:	fffe000f 	.word	0xfffe000f
 80043e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68d2      	ldr	r2, [r2, #12]
 80043ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004418:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	4b6e      	ldr	r3, [pc, #440]	@ (80045e8 <HAL_DMA_Init+0x648>)
 8004430:	4413      	add	r3, r2
 8004432:	4a6e      	ldr	r2, [pc, #440]	@ (80045ec <HAL_DMA_Init+0x64c>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	009a      	lsls	r2, r3, #2
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f002 f9b5 	bl	80067b0 <DMA_CalcBaseAndBitshift>
 8004446:	4603      	mov	r3, r0
 8004448:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2201      	movs	r2, #1
 8004454:	409a      	lsls	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e008      	b.n	800446e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2240      	movs	r2, #64	@ 0x40
 8004460:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2203      	movs	r2, #3
 8004466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0b7      	b.n	80045de <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a5f      	ldr	r2, [pc, #380]	@ (80045f0 <HAL_DMA_Init+0x650>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d072      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a5d      	ldr	r2, [pc, #372]	@ (80045f4 <HAL_DMA_Init+0x654>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d06d      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a5c      	ldr	r2, [pc, #368]	@ (80045f8 <HAL_DMA_Init+0x658>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d068      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a5a      	ldr	r2, [pc, #360]	@ (80045fc <HAL_DMA_Init+0x65c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d063      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a59      	ldr	r2, [pc, #356]	@ (8004600 <HAL_DMA_Init+0x660>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d05e      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a57      	ldr	r2, [pc, #348]	@ (8004604 <HAL_DMA_Init+0x664>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d059      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a56      	ldr	r2, [pc, #344]	@ (8004608 <HAL_DMA_Init+0x668>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d054      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a54      	ldr	r2, [pc, #336]	@ (800460c <HAL_DMA_Init+0x66c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04f      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a53      	ldr	r2, [pc, #332]	@ (8004610 <HAL_DMA_Init+0x670>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d04a      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a51      	ldr	r2, [pc, #324]	@ (8004614 <HAL_DMA_Init+0x674>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d045      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a50      	ldr	r2, [pc, #320]	@ (8004618 <HAL_DMA_Init+0x678>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d040      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4e      	ldr	r2, [pc, #312]	@ (800461c <HAL_DMA_Init+0x67c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d03b      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004620 <HAL_DMA_Init+0x680>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d036      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004624 <HAL_DMA_Init+0x684>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d031      	beq.n	800455e <HAL_DMA_Init+0x5be>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004628 <HAL_DMA_Init+0x688>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d02c      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a48      	ldr	r2, [pc, #288]	@ (800462c <HAL_DMA_Init+0x68c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d027      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a47      	ldr	r2, [pc, #284]	@ (8004630 <HAL_DMA_Init+0x690>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d022      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a45      	ldr	r2, [pc, #276]	@ (8004634 <HAL_DMA_Init+0x694>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01d      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a44      	ldr	r2, [pc, #272]	@ (8004638 <HAL_DMA_Init+0x698>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d018      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a42      	ldr	r2, [pc, #264]	@ (800463c <HAL_DMA_Init+0x69c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d013      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a41      	ldr	r2, [pc, #260]	@ (8004640 <HAL_DMA_Init+0x6a0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00e      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <HAL_DMA_Init+0x6a4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d009      	beq.n	800455e <HAL_DMA_Init+0x5be>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3e      	ldr	r2, [pc, #248]	@ (8004648 <HAL_DMA_Init+0x6a8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_DMA_Init+0x5be>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a3c      	ldr	r2, [pc, #240]	@ (800464c <HAL_DMA_Init+0x6ac>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_DMA_Init+0x5c2>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_DMA_Init+0x5c4>
 8004562:	2300      	movs	r3, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d032      	beq.n	80045ce <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f002 fa4f 	bl	8006a0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b80      	cmp	r3, #128	@ 0x80
 8004574:	d102      	bne.n	800457c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004590:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HAL_DMA_Init+0x61c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d80c      	bhi.n	80045bc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f002 facc 	bl	8006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	e008      	b.n	80045ce <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	a7fdabf8 	.word	0xa7fdabf8
 80045ec:	cccccccd 	.word	0xcccccccd
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	58025408 	.word	0x58025408
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025430 	.word	0x58025430
 800463c:	58025444 	.word	0x58025444
 8004640:	58025458 	.word	0x58025458
 8004644:	5802546c 	.word	0x5802546c
 8004648:	58025480 	.word	0x58025480
 800464c:	58025494 	.word	0x58025494

08004650 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e226      	b.n	8004aba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_DMA_Start_IT+0x2a>
 8004676:	2302      	movs	r3, #2
 8004678:	e21f      	b.n	8004aba <HAL_DMA_Start_IT+0x46a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b01      	cmp	r3, #1
 800468c:	f040 820a 	bne.w	8004aa4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a68      	ldr	r2, [pc, #416]	@ (8004844 <HAL_DMA_Start_IT+0x1f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d04a      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a66      	ldr	r2, [pc, #408]	@ (8004848 <HAL_DMA_Start_IT+0x1f8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d045      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a65      	ldr	r2, [pc, #404]	@ (800484c <HAL_DMA_Start_IT+0x1fc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d040      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a63      	ldr	r2, [pc, #396]	@ (8004850 <HAL_DMA_Start_IT+0x200>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d03b      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a62      	ldr	r2, [pc, #392]	@ (8004854 <HAL_DMA_Start_IT+0x204>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d036      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a60      	ldr	r2, [pc, #384]	@ (8004858 <HAL_DMA_Start_IT+0x208>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d031      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a5f      	ldr	r2, [pc, #380]	@ (800485c <HAL_DMA_Start_IT+0x20c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d02c      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004860 <HAL_DMA_Start_IT+0x210>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d027      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004864 <HAL_DMA_Start_IT+0x214>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004868 <HAL_DMA_Start_IT+0x218>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01d      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a59      	ldr	r2, [pc, #356]	@ (800486c <HAL_DMA_Start_IT+0x21c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a57      	ldr	r2, [pc, #348]	@ (8004870 <HAL_DMA_Start_IT+0x220>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a56      	ldr	r2, [pc, #344]	@ (8004874 <HAL_DMA_Start_IT+0x224>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a54      	ldr	r2, [pc, #336]	@ (8004878 <HAL_DMA_Start_IT+0x228>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a53      	ldr	r2, [pc, #332]	@ (800487c <HAL_DMA_Start_IT+0x22c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_DMA_Start_IT+0xee>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a51      	ldr	r2, [pc, #324]	@ (8004880 <HAL_DMA_Start_IT+0x230>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d108      	bne.n	8004750 <HAL_DMA_Start_IT+0x100>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e007      	b.n	8004760 <HAL_DMA_Start_IT+0x110>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f001 fe76 	bl	8006458 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a34      	ldr	r2, [pc, #208]	@ (8004844 <HAL_DMA_Start_IT+0x1f4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d04a      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a33      	ldr	r2, [pc, #204]	@ (8004848 <HAL_DMA_Start_IT+0x1f8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d045      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a31      	ldr	r2, [pc, #196]	@ (800484c <HAL_DMA_Start_IT+0x1fc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d040      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <HAL_DMA_Start_IT+0x200>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d03b      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <HAL_DMA_Start_IT+0x204>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d036      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004858 <HAL_DMA_Start_IT+0x208>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d031      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	@ (800485c <HAL_DMA_Start_IT+0x20c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02c      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004860 <HAL_DMA_Start_IT+0x210>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d027      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a28      	ldr	r2, [pc, #160]	@ (8004864 <HAL_DMA_Start_IT+0x214>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a27      	ldr	r2, [pc, #156]	@ (8004868 <HAL_DMA_Start_IT+0x218>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a25      	ldr	r2, [pc, #148]	@ (800486c <HAL_DMA_Start_IT+0x21c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_DMA_Start_IT+0x220>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <HAL_DMA_Start_IT+0x224>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_DMA_Start_IT+0x228>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <HAL_DMA_Start_IT+0x22c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <HAL_DMA_Start_IT+0x1bc>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	@ (8004880 <HAL_DMA_Start_IT+0x230>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Start_IT+0x1c0>
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <HAL_DMA_Start_IT+0x1c2>
 8004810:	2300      	movs	r3, #0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d036      	beq.n	8004884 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f023 021e 	bic.w	r2, r3, #30
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0216 	orr.w	r2, r2, #22
 8004828:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d03e      	beq.n	80048b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0208 	orr.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e035      	b.n	80048b0 <HAL_DMA_Start_IT+0x260>
 8004844:	40020010 	.word	0x40020010
 8004848:	40020028 	.word	0x40020028
 800484c:	40020040 	.word	0x40020040
 8004850:	40020058 	.word	0x40020058
 8004854:	40020070 	.word	0x40020070
 8004858:	40020088 	.word	0x40020088
 800485c:	400200a0 	.word	0x400200a0
 8004860:	400200b8 	.word	0x400200b8
 8004864:	40020410 	.word	0x40020410
 8004868:	40020428 	.word	0x40020428
 800486c:	40020440 	.word	0x40020440
 8004870:	40020458 	.word	0x40020458
 8004874:	40020470 	.word	0x40020470
 8004878:	40020488 	.word	0x40020488
 800487c:	400204a0 	.word	0x400204a0
 8004880:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 020e 	bic.w	r2, r3, #14
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 020a 	orr.w	r2, r2, #10
 8004896:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0204 	orr.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a83      	ldr	r2, [pc, #524]	@ (8004ac4 <HAL_DMA_Start_IT+0x474>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d072      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a82      	ldr	r2, [pc, #520]	@ (8004ac8 <HAL_DMA_Start_IT+0x478>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d06d      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a80      	ldr	r2, [pc, #512]	@ (8004acc <HAL_DMA_Start_IT+0x47c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d068      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad0 <HAL_DMA_Start_IT+0x480>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d063      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a7d      	ldr	r2, [pc, #500]	@ (8004ad4 <HAL_DMA_Start_IT+0x484>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d05e      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ad8 <HAL_DMA_Start_IT+0x488>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d059      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7a      	ldr	r2, [pc, #488]	@ (8004adc <HAL_DMA_Start_IT+0x48c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d054      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a79      	ldr	r2, [pc, #484]	@ (8004ae0 <HAL_DMA_Start_IT+0x490>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04f      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a77      	ldr	r2, [pc, #476]	@ (8004ae4 <HAL_DMA_Start_IT+0x494>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d04a      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a76      	ldr	r2, [pc, #472]	@ (8004ae8 <HAL_DMA_Start_IT+0x498>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d045      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_DMA_Start_IT+0x49c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d040      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a73      	ldr	r2, [pc, #460]	@ (8004af0 <HAL_DMA_Start_IT+0x4a0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d03b      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a71      	ldr	r2, [pc, #452]	@ (8004af4 <HAL_DMA_Start_IT+0x4a4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d036      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a70      	ldr	r2, [pc, #448]	@ (8004af8 <HAL_DMA_Start_IT+0x4a8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d031      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6e      	ldr	r2, [pc, #440]	@ (8004afc <HAL_DMA_Start_IT+0x4ac>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02c      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b00 <HAL_DMA_Start_IT+0x4b0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d027      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a6b      	ldr	r2, [pc, #428]	@ (8004b04 <HAL_DMA_Start_IT+0x4b4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d022      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6a      	ldr	r2, [pc, #424]	@ (8004b08 <HAL_DMA_Start_IT+0x4b8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01d      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_DMA_Start_IT+0x4bc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a67      	ldr	r2, [pc, #412]	@ (8004b10 <HAL_DMA_Start_IT+0x4c0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a65      	ldr	r2, [pc, #404]	@ (8004b14 <HAL_DMA_Start_IT+0x4c4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a64      	ldr	r2, [pc, #400]	@ (8004b18 <HAL_DMA_Start_IT+0x4c8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a62      	ldr	r2, [pc, #392]	@ (8004b1c <HAL_DMA_Start_IT+0x4cc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_DMA_Start_IT+0x350>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a61      	ldr	r2, [pc, #388]	@ (8004b20 <HAL_DMA_Start_IT+0x4d0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_DMA_Start_IT+0x354>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <HAL_DMA_Start_IT+0x356>
 80049a4:	2300      	movs	r3, #0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01a      	beq.n	80049e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a37      	ldr	r2, [pc, #220]	@ (8004ac4 <HAL_DMA_Start_IT+0x474>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04a      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a36      	ldr	r2, [pc, #216]	@ (8004ac8 <HAL_DMA_Start_IT+0x478>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d045      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a34      	ldr	r2, [pc, #208]	@ (8004acc <HAL_DMA_Start_IT+0x47c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d040      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a33      	ldr	r2, [pc, #204]	@ (8004ad0 <HAL_DMA_Start_IT+0x480>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d03b      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a31      	ldr	r2, [pc, #196]	@ (8004ad4 <HAL_DMA_Start_IT+0x484>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d036      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a30      	ldr	r2, [pc, #192]	@ (8004ad8 <HAL_DMA_Start_IT+0x488>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d031      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2e      	ldr	r2, [pc, #184]	@ (8004adc <HAL_DMA_Start_IT+0x48c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02c      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ae0 <HAL_DMA_Start_IT+0x490>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d027      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ae4 <HAL_DMA_Start_IT+0x494>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae8 <HAL_DMA_Start_IT+0x498>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a28      	ldr	r2, [pc, #160]	@ (8004aec <HAL_DMA_Start_IT+0x49c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a27      	ldr	r2, [pc, #156]	@ (8004af0 <HAL_DMA_Start_IT+0x4a0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a25      	ldr	r2, [pc, #148]	@ (8004af4 <HAL_DMA_Start_IT+0x4a4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a24      	ldr	r2, [pc, #144]	@ (8004af8 <HAL_DMA_Start_IT+0x4a8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a22      	ldr	r2, [pc, #136]	@ (8004afc <HAL_DMA_Start_IT+0x4ac>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_DMA_Start_IT+0x430>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a21      	ldr	r2, [pc, #132]	@ (8004b00 <HAL_DMA_Start_IT+0x4b0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <HAL_DMA_Start_IT+0x442>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e012      	b.n	8004ab8 <HAL_DMA_Start_IT+0x468>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e009      	b.n	8004ab8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40020010 	.word	0x40020010
 8004ac8:	40020028 	.word	0x40020028
 8004acc:	40020040 	.word	0x40020040
 8004ad0:	40020058 	.word	0x40020058
 8004ad4:	40020070 	.word	0x40020070
 8004ad8:	40020088 	.word	0x40020088
 8004adc:	400200a0 	.word	0x400200a0
 8004ae0:	400200b8 	.word	0x400200b8
 8004ae4:	40020410 	.word	0x40020410
 8004ae8:	40020428 	.word	0x40020428
 8004aec:	40020440 	.word	0x40020440
 8004af0:	40020458 	.word	0x40020458
 8004af4:	40020470 	.word	0x40020470
 8004af8:	40020488 	.word	0x40020488
 8004afc:	400204a0 	.word	0x400204a0
 8004b00:	400204b8 	.word	0x400204b8
 8004b04:	58025408 	.word	0x58025408
 8004b08:	5802541c 	.word	0x5802541c
 8004b0c:	58025430 	.word	0x58025430
 8004b10:	58025444 	.word	0x58025444
 8004b14:	58025458 	.word	0x58025458
 8004b18:	5802546c 	.word	0x5802546c
 8004b1c:	58025480 	.word	0x58025480
 8004b20:	58025494 	.word	0x58025494

08004b24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7ff f8f8 	bl	8003d20 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e2dc      	b.n	80050f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d008      	beq.n	8004b5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	@ 0x80
 8004b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e2cd      	b.n	80050f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a76      	ldr	r2, [pc, #472]	@ (8004d38 <HAL_DMA_Abort+0x214>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d04a      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a74      	ldr	r2, [pc, #464]	@ (8004d3c <HAL_DMA_Abort+0x218>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d045      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a73      	ldr	r2, [pc, #460]	@ (8004d40 <HAL_DMA_Abort+0x21c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d040      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a71      	ldr	r2, [pc, #452]	@ (8004d44 <HAL_DMA_Abort+0x220>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a70      	ldr	r2, [pc, #448]	@ (8004d48 <HAL_DMA_Abort+0x224>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d036      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a6e      	ldr	r2, [pc, #440]	@ (8004d4c <HAL_DMA_Abort+0x228>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d031      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8004d50 <HAL_DMA_Abort+0x22c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d02c      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d54 <HAL_DMA_Abort+0x230>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a6a      	ldr	r2, [pc, #424]	@ (8004d58 <HAL_DMA_Abort+0x234>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a68      	ldr	r2, [pc, #416]	@ (8004d5c <HAL_DMA_Abort+0x238>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a67      	ldr	r2, [pc, #412]	@ (8004d60 <HAL_DMA_Abort+0x23c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a65      	ldr	r2, [pc, #404]	@ (8004d64 <HAL_DMA_Abort+0x240>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a64      	ldr	r2, [pc, #400]	@ (8004d68 <HAL_DMA_Abort+0x244>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a62      	ldr	r2, [pc, #392]	@ (8004d6c <HAL_DMA_Abort+0x248>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a61      	ldr	r2, [pc, #388]	@ (8004d70 <HAL_DMA_Abort+0x24c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_Abort+0xd6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8004d74 <HAL_DMA_Abort+0x250>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_DMA_Abort+0xda>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <HAL_DMA_Abort+0xdc>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 021e 	bic.w	r2, r2, #30
 8004c12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e00a      	b.n	8004c42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 020e 	bic.w	r2, r2, #14
 8004c3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a3c      	ldr	r2, [pc, #240]	@ (8004d38 <HAL_DMA_Abort+0x214>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d072      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3a      	ldr	r2, [pc, #232]	@ (8004d3c <HAL_DMA_Abort+0x218>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d06d      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a39      	ldr	r2, [pc, #228]	@ (8004d40 <HAL_DMA_Abort+0x21c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d068      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a37      	ldr	r2, [pc, #220]	@ (8004d44 <HAL_DMA_Abort+0x220>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d063      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a36      	ldr	r2, [pc, #216]	@ (8004d48 <HAL_DMA_Abort+0x224>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d05e      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a34      	ldr	r2, [pc, #208]	@ (8004d4c <HAL_DMA_Abort+0x228>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d059      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <HAL_DMA_Abort+0x22c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d054      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a31      	ldr	r2, [pc, #196]	@ (8004d54 <HAL_DMA_Abort+0x230>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d04f      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a30      	ldr	r2, [pc, #192]	@ (8004d58 <HAL_DMA_Abort+0x234>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d04a      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d5c <HAL_DMA_Abort+0x238>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d045      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2d      	ldr	r2, [pc, #180]	@ (8004d60 <HAL_DMA_Abort+0x23c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d040      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d64 <HAL_DMA_Abort+0x240>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d03b      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004d68 <HAL_DMA_Abort+0x244>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d036      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a28      	ldr	r2, [pc, #160]	@ (8004d6c <HAL_DMA_Abort+0x248>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d031      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a27      	ldr	r2, [pc, #156]	@ (8004d70 <HAL_DMA_Abort+0x24c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d02c      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	@ (8004d74 <HAL_DMA_Abort+0x250>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d027      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a24      	ldr	r2, [pc, #144]	@ (8004d78 <HAL_DMA_Abort+0x254>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d022      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a22      	ldr	r2, [pc, #136]	@ (8004d7c <HAL_DMA_Abort+0x258>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01d      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a21      	ldr	r2, [pc, #132]	@ (8004d80 <HAL_DMA_Abort+0x25c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1f      	ldr	r2, [pc, #124]	@ (8004d84 <HAL_DMA_Abort+0x260>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <HAL_DMA_Abort+0x264>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1c      	ldr	r2, [pc, #112]	@ (8004d8c <HAL_DMA_Abort+0x268>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1b      	ldr	r2, [pc, #108]	@ (8004d90 <HAL_DMA_Abort+0x26c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_DMA_Abort+0x20e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a19      	ldr	r2, [pc, #100]	@ (8004d94 <HAL_DMA_Abort+0x270>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d132      	bne.n	8004d98 <HAL_DMA_Abort+0x274>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e031      	b.n	8004d9a <HAL_DMA_Abort+0x276>
 8004d36:	bf00      	nop
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	40020040 	.word	0x40020040
 8004d44:	40020058 	.word	0x40020058
 8004d48:	40020070 	.word	0x40020070
 8004d4c:	40020088 	.word	0x40020088
 8004d50:	400200a0 	.word	0x400200a0
 8004d54:	400200b8 	.word	0x400200b8
 8004d58:	40020410 	.word	0x40020410
 8004d5c:	40020428 	.word	0x40020428
 8004d60:	40020440 	.word	0x40020440
 8004d64:	40020458 	.word	0x40020458
 8004d68:	40020470 	.word	0x40020470
 8004d6c:	40020488 	.word	0x40020488
 8004d70:	400204a0 	.word	0x400204a0
 8004d74:	400204b8 	.word	0x400204b8
 8004d78:	58025408 	.word	0x58025408
 8004d7c:	5802541c 	.word	0x5802541c
 8004d80:	58025430 	.word	0x58025430
 8004d84:	58025444 	.word	0x58025444
 8004d88:	58025458 	.word	0x58025458
 8004d8c:	5802546c 	.word	0x5802546c
 8004d90:	58025480 	.word	0x58025480
 8004d94:	58025494 	.word	0x58025494
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6d      	ldr	r2, [pc, #436]	@ (8004f68 <HAL_DMA_Abort+0x444>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8004f6c <HAL_DMA_Abort+0x448>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8004f70 <HAL_DMA_Abort+0x44c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a68      	ldr	r2, [pc, #416]	@ (8004f74 <HAL_DMA_Abort+0x450>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a67      	ldr	r2, [pc, #412]	@ (8004f78 <HAL_DMA_Abort+0x454>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a65      	ldr	r2, [pc, #404]	@ (8004f7c <HAL_DMA_Abort+0x458>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a64      	ldr	r2, [pc, #400]	@ (8004f80 <HAL_DMA_Abort+0x45c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a62      	ldr	r2, [pc, #392]	@ (8004f84 <HAL_DMA_Abort+0x460>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a61      	ldr	r2, [pc, #388]	@ (8004f88 <HAL_DMA_Abort+0x464>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5f      	ldr	r2, [pc, #380]	@ (8004f8c <HAL_DMA_Abort+0x468>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5e      	ldr	r2, [pc, #376]	@ (8004f90 <HAL_DMA_Abort+0x46c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a5c      	ldr	r2, [pc, #368]	@ (8004f94 <HAL_DMA_Abort+0x470>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8004f98 <HAL_DMA_Abort+0x474>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a59      	ldr	r2, [pc, #356]	@ (8004f9c <HAL_DMA_Abort+0x478>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a58      	ldr	r2, [pc, #352]	@ (8004fa0 <HAL_DMA_Abort+0x47c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_Abort+0x32a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a56      	ldr	r2, [pc, #344]	@ (8004fa4 <HAL_DMA_Abort+0x480>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <HAL_DMA_Abort+0x33c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e007      	b.n	8004e70 <HAL_DMA_Abort+0x34c>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e70:	e013      	b.n	8004e9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e72:	f7fe ff55 	bl	8003d20 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	d90c      	bls.n	8004e9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2203      	movs	r2, #3
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e12d      	b.n	80050f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8004f68 <HAL_DMA_Abort+0x444>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d04a      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f6c <HAL_DMA_Abort+0x448>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d045      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2c      	ldr	r2, [pc, #176]	@ (8004f70 <HAL_DMA_Abort+0x44c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d040      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f74 <HAL_DMA_Abort+0x450>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d03b      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a29      	ldr	r2, [pc, #164]	@ (8004f78 <HAL_DMA_Abort+0x454>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d036      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a27      	ldr	r2, [pc, #156]	@ (8004f7c <HAL_DMA_Abort+0x458>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d031      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a26      	ldr	r2, [pc, #152]	@ (8004f80 <HAL_DMA_Abort+0x45c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d02c      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a24      	ldr	r2, [pc, #144]	@ (8004f84 <HAL_DMA_Abort+0x460>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a23      	ldr	r2, [pc, #140]	@ (8004f88 <HAL_DMA_Abort+0x464>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d022      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a21      	ldr	r2, [pc, #132]	@ (8004f8c <HAL_DMA_Abort+0x468>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a20      	ldr	r2, [pc, #128]	@ (8004f90 <HAL_DMA_Abort+0x46c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1e      	ldr	r2, [pc, #120]	@ (8004f94 <HAL_DMA_Abort+0x470>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <HAL_DMA_Abort+0x474>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004f9c <HAL_DMA_Abort+0x478>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa0 <HAL_DMA_Abort+0x47c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_DMA_Abort+0x422>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	@ (8004fa4 <HAL_DMA_Abort+0x480>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d101      	bne.n	8004f4a <HAL_DMA_Abort+0x426>
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_DMA_Abort+0x428>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02b      	beq.n	8004fa8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	223f      	movs	r2, #63	@ 0x3f
 8004f60:	409a      	lsls	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	e02a      	b.n	8004fbe <HAL_DMA_Abort+0x49a>
 8004f68:	40020010 	.word	0x40020010
 8004f6c:	40020028 	.word	0x40020028
 8004f70:	40020040 	.word	0x40020040
 8004f74:	40020058 	.word	0x40020058
 8004f78:	40020070 	.word	0x40020070
 8004f7c:	40020088 	.word	0x40020088
 8004f80:	400200a0 	.word	0x400200a0
 8004f84:	400200b8 	.word	0x400200b8
 8004f88:	40020410 	.word	0x40020410
 8004f8c:	40020428 	.word	0x40020428
 8004f90:	40020440 	.word	0x40020440
 8004f94:	40020458 	.word	0x40020458
 8004f98:	40020470 	.word	0x40020470
 8004f9c:	40020488 	.word	0x40020488
 8004fa0:	400204a0 	.word	0x400204a0
 8004fa4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4f      	ldr	r2, [pc, #316]	@ (8005100 <HAL_DMA_Abort+0x5dc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d072      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8005104 <HAL_DMA_Abort+0x5e0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d06d      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4c      	ldr	r2, [pc, #304]	@ (8005108 <HAL_DMA_Abort+0x5e4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d068      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a4a      	ldr	r2, [pc, #296]	@ (800510c <HAL_DMA_Abort+0x5e8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d063      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a49      	ldr	r2, [pc, #292]	@ (8005110 <HAL_DMA_Abort+0x5ec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d05e      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a47      	ldr	r2, [pc, #284]	@ (8005114 <HAL_DMA_Abort+0x5f0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d059      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a46      	ldr	r2, [pc, #280]	@ (8005118 <HAL_DMA_Abort+0x5f4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d054      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a44      	ldr	r2, [pc, #272]	@ (800511c <HAL_DMA_Abort+0x5f8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04f      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a43      	ldr	r2, [pc, #268]	@ (8005120 <HAL_DMA_Abort+0x5fc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d04a      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a41      	ldr	r2, [pc, #260]	@ (8005124 <HAL_DMA_Abort+0x600>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d045      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a40      	ldr	r2, [pc, #256]	@ (8005128 <HAL_DMA_Abort+0x604>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d040      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3e      	ldr	r2, [pc, #248]	@ (800512c <HAL_DMA_Abort+0x608>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d03b      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3d      	ldr	r2, [pc, #244]	@ (8005130 <HAL_DMA_Abort+0x60c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d036      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3b      	ldr	r2, [pc, #236]	@ (8005134 <HAL_DMA_Abort+0x610>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d031      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3a      	ldr	r2, [pc, #232]	@ (8005138 <HAL_DMA_Abort+0x614>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d02c      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a38      	ldr	r2, [pc, #224]	@ (800513c <HAL_DMA_Abort+0x618>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a37      	ldr	r2, [pc, #220]	@ (8005140 <HAL_DMA_Abort+0x61c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <HAL_DMA_Abort+0x620>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <HAL_DMA_Abort+0x624>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a32      	ldr	r2, [pc, #200]	@ (800514c <HAL_DMA_Abort+0x628>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a31      	ldr	r2, [pc, #196]	@ (8005150 <HAL_DMA_Abort+0x62c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2f      	ldr	r2, [pc, #188]	@ (8005154 <HAL_DMA_Abort+0x630>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2e      	ldr	r2, [pc, #184]	@ (8005158 <HAL_DMA_Abort+0x634>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_Abort+0x58a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2c      	ldr	r2, [pc, #176]	@ (800515c <HAL_DMA_Abort+0x638>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_DMA_Abort+0x58e>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_DMA_Abort+0x590>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d015      	beq.n	80050e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80050e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8
 8005140:	58025408 	.word	0x58025408
 8005144:	5802541c 	.word	0x5802541c
 8005148:	58025430 	.word	0x58025430
 800514c:	58025444 	.word	0x58025444
 8005150:	58025458 	.word	0x58025458
 8005154:	5802546c 	.word	0x5802546c
 8005158:	58025480 	.word	0x58025480
 800515c:	58025494 	.word	0x58025494

08005160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e237      	b.n	80055e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d004      	beq.n	8005188 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2280      	movs	r2, #128	@ 0x80
 8005182:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e22c      	b.n	80055e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a5c      	ldr	r2, [pc, #368]	@ (8005300 <HAL_DMA_Abort_IT+0x1a0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04a      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a5b      	ldr	r2, [pc, #364]	@ (8005304 <HAL_DMA_Abort_IT+0x1a4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d045      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a59      	ldr	r2, [pc, #356]	@ (8005308 <HAL_DMA_Abort_IT+0x1a8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d040      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a58      	ldr	r2, [pc, #352]	@ (800530c <HAL_DMA_Abort_IT+0x1ac>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03b      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a56      	ldr	r2, [pc, #344]	@ (8005310 <HAL_DMA_Abort_IT+0x1b0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d036      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a55      	ldr	r2, [pc, #340]	@ (8005314 <HAL_DMA_Abort_IT+0x1b4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d031      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a53      	ldr	r2, [pc, #332]	@ (8005318 <HAL_DMA_Abort_IT+0x1b8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02c      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a52      	ldr	r2, [pc, #328]	@ (800531c <HAL_DMA_Abort_IT+0x1bc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d027      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a50      	ldr	r2, [pc, #320]	@ (8005320 <HAL_DMA_Abort_IT+0x1c0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a4f      	ldr	r2, [pc, #316]	@ (8005324 <HAL_DMA_Abort_IT+0x1c4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01d      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005328 <HAL_DMA_Abort_IT+0x1c8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4c      	ldr	r2, [pc, #304]	@ (800532c <HAL_DMA_Abort_IT+0x1cc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a4a      	ldr	r2, [pc, #296]	@ (8005330 <HAL_DMA_Abort_IT+0x1d0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a49      	ldr	r2, [pc, #292]	@ (8005334 <HAL_DMA_Abort_IT+0x1d4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a47      	ldr	r2, [pc, #284]	@ (8005338 <HAL_DMA_Abort_IT+0x1d8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_DMA_Abort_IT+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a46      	ldr	r2, [pc, #280]	@ (800533c <HAL_DMA_Abort_IT+0x1dc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_DMA_Abort_IT+0xcc>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_DMA_Abort_IT+0xce>
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8086 	beq.w	8005340 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2204      	movs	r2, #4
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2f      	ldr	r2, [pc, #188]	@ (8005300 <HAL_DMA_Abort_IT+0x1a0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d04a      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2e      	ldr	r2, [pc, #184]	@ (8005304 <HAL_DMA_Abort_IT+0x1a4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d045      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2c      	ldr	r2, [pc, #176]	@ (8005308 <HAL_DMA_Abort_IT+0x1a8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d040      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2b      	ldr	r2, [pc, #172]	@ (800530c <HAL_DMA_Abort_IT+0x1ac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d03b      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a29      	ldr	r2, [pc, #164]	@ (8005310 <HAL_DMA_Abort_IT+0x1b0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d036      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a28      	ldr	r2, [pc, #160]	@ (8005314 <HAL_DMA_Abort_IT+0x1b4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d031      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <HAL_DMA_Abort_IT+0x1b8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02c      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a25      	ldr	r2, [pc, #148]	@ (800531c <HAL_DMA_Abort_IT+0x1bc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d027      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a23      	ldr	r2, [pc, #140]	@ (8005320 <HAL_DMA_Abort_IT+0x1c0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d022      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <HAL_DMA_Abort_IT+0x1c4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d01d      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a20      	ldr	r2, [pc, #128]	@ (8005328 <HAL_DMA_Abort_IT+0x1c8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1f      	ldr	r2, [pc, #124]	@ (800532c <HAL_DMA_Abort_IT+0x1cc>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005330 <HAL_DMA_Abort_IT+0x1d0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005334 <HAL_DMA_Abort_IT+0x1d4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005338 <HAL_DMA_Abort_IT+0x1d8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_DMA_Abort_IT+0x17c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a19      	ldr	r2, [pc, #100]	@ (800533c <HAL_DMA_Abort_IT+0x1dc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d108      	bne.n	80052ee <HAL_DMA_Abort_IT+0x18e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e178      	b.n	80055e0 <HAL_DMA_Abort_IT+0x480>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e16f      	b.n	80055e0 <HAL_DMA_Abort_IT+0x480>
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 020e 	bic.w	r2, r2, #14
 800534e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a6c      	ldr	r2, [pc, #432]	@ (8005508 <HAL_DMA_Abort_IT+0x3a8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04a      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a6b      	ldr	r2, [pc, #428]	@ (800550c <HAL_DMA_Abort_IT+0x3ac>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d045      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a69      	ldr	r2, [pc, #420]	@ (8005510 <HAL_DMA_Abort_IT+0x3b0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d040      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a68      	ldr	r2, [pc, #416]	@ (8005514 <HAL_DMA_Abort_IT+0x3b4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03b      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a66      	ldr	r2, [pc, #408]	@ (8005518 <HAL_DMA_Abort_IT+0x3b8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d036      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a65      	ldr	r2, [pc, #404]	@ (800551c <HAL_DMA_Abort_IT+0x3bc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d031      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a63      	ldr	r2, [pc, #396]	@ (8005520 <HAL_DMA_Abort_IT+0x3c0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02c      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a62      	ldr	r2, [pc, #392]	@ (8005524 <HAL_DMA_Abort_IT+0x3c4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d027      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a60      	ldr	r2, [pc, #384]	@ (8005528 <HAL_DMA_Abort_IT+0x3c8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d022      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5f      	ldr	r2, [pc, #380]	@ (800552c <HAL_DMA_Abort_IT+0x3cc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d01d      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005530 <HAL_DMA_Abort_IT+0x3d0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d018      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005534 <HAL_DMA_Abort_IT+0x3d4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d013      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005538 <HAL_DMA_Abort_IT+0x3d8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00e      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a59      	ldr	r2, [pc, #356]	@ (800553c <HAL_DMA_Abort_IT+0x3dc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a57      	ldr	r2, [pc, #348]	@ (8005540 <HAL_DMA_Abort_IT+0x3e0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d004      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x290>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a56      	ldr	r2, [pc, #344]	@ (8005544 <HAL_DMA_Abort_IT+0x3e4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <HAL_DMA_Abort_IT+0x2a2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	e007      	b.n	8005412 <HAL_DMA_Abort_IT+0x2b2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a3c      	ldr	r2, [pc, #240]	@ (8005508 <HAL_DMA_Abort_IT+0x3a8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d072      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a3a      	ldr	r2, [pc, #232]	@ (800550c <HAL_DMA_Abort_IT+0x3ac>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d06d      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a39      	ldr	r2, [pc, #228]	@ (8005510 <HAL_DMA_Abort_IT+0x3b0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d068      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a37      	ldr	r2, [pc, #220]	@ (8005514 <HAL_DMA_Abort_IT+0x3b4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d063      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a36      	ldr	r2, [pc, #216]	@ (8005518 <HAL_DMA_Abort_IT+0x3b8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d05e      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a34      	ldr	r2, [pc, #208]	@ (800551c <HAL_DMA_Abort_IT+0x3bc>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d059      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a33      	ldr	r2, [pc, #204]	@ (8005520 <HAL_DMA_Abort_IT+0x3c0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d054      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a31      	ldr	r2, [pc, #196]	@ (8005524 <HAL_DMA_Abort_IT+0x3c4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04f      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a30      	ldr	r2, [pc, #192]	@ (8005528 <HAL_DMA_Abort_IT+0x3c8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d04a      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2e      	ldr	r2, [pc, #184]	@ (800552c <HAL_DMA_Abort_IT+0x3cc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d045      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2d      	ldr	r2, [pc, #180]	@ (8005530 <HAL_DMA_Abort_IT+0x3d0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d040      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2b      	ldr	r2, [pc, #172]	@ (8005534 <HAL_DMA_Abort_IT+0x3d4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d03b      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2a      	ldr	r2, [pc, #168]	@ (8005538 <HAL_DMA_Abort_IT+0x3d8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d036      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a28      	ldr	r2, [pc, #160]	@ (800553c <HAL_DMA_Abort_IT+0x3dc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d031      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a27      	ldr	r2, [pc, #156]	@ (8005540 <HAL_DMA_Abort_IT+0x3e0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d02c      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a25      	ldr	r2, [pc, #148]	@ (8005544 <HAL_DMA_Abort_IT+0x3e4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d027      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <HAL_DMA_Abort_IT+0x3e8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d022      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	@ (800554c <HAL_DMA_Abort_IT+0x3ec>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01d      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	@ (8005550 <HAL_DMA_Abort_IT+0x3f0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d018      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005554 <HAL_DMA_Abort_IT+0x3f4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d013      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <HAL_DMA_Abort_IT+0x3f8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00e      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	@ (800555c <HAL_DMA_Abort_IT+0x3fc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d009      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005560 <HAL_DMA_Abort_IT+0x400>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d004      	beq.n	8005502 <HAL_DMA_Abort_IT+0x3a2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <HAL_DMA_Abort_IT+0x404>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d132      	bne.n	8005568 <HAL_DMA_Abort_IT+0x408>
 8005502:	2301      	movs	r3, #1
 8005504:	e031      	b.n	800556a <HAL_DMA_Abort_IT+0x40a>
 8005506:	bf00      	nop
 8005508:	40020010 	.word	0x40020010
 800550c:	40020028 	.word	0x40020028
 8005510:	40020040 	.word	0x40020040
 8005514:	40020058 	.word	0x40020058
 8005518:	40020070 	.word	0x40020070
 800551c:	40020088 	.word	0x40020088
 8005520:	400200a0 	.word	0x400200a0
 8005524:	400200b8 	.word	0x400200b8
 8005528:	40020410 	.word	0x40020410
 800552c:	40020428 	.word	0x40020428
 8005530:	40020440 	.word	0x40020440
 8005534:	40020458 	.word	0x40020458
 8005538:	40020470 	.word	0x40020470
 800553c:	40020488 	.word	0x40020488
 8005540:	400204a0 	.word	0x400204a0
 8005544:	400204b8 	.word	0x400204b8
 8005548:	58025408 	.word	0x58025408
 800554c:	5802541c 	.word	0x5802541c
 8005550:	58025430 	.word	0x58025430
 8005554:	58025444 	.word	0x58025444
 8005558:	58025458 	.word	0x58025458
 800555c:	5802546c 	.word	0x5802546c
 8005560:	58025480 	.word	0x58025480
 8005564:	58025494 	.word	0x58025494
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d028      	beq.n	80055c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800557c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800559c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80055be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop

080055ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055f8:	4b67      	ldr	r3, [pc, #412]	@ (8005798 <HAL_DMA_IRQHandler+0x1ac>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a67      	ldr	r2, [pc, #412]	@ (800579c <HAL_DMA_IRQHandler+0x1b0>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	0a9b      	lsrs	r3, r3, #10
 8005604:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005610:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a5f      	ldr	r2, [pc, #380]	@ (80057a0 <HAL_DMA_IRQHandler+0x1b4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d04a      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5d      	ldr	r2, [pc, #372]	@ (80057a4 <HAL_DMA_IRQHandler+0x1b8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d045      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5c      	ldr	r2, [pc, #368]	@ (80057a8 <HAL_DMA_IRQHandler+0x1bc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d040      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a5a      	ldr	r2, [pc, #360]	@ (80057ac <HAL_DMA_IRQHandler+0x1c0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d03b      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a59      	ldr	r2, [pc, #356]	@ (80057b0 <HAL_DMA_IRQHandler+0x1c4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d036      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a57      	ldr	r2, [pc, #348]	@ (80057b4 <HAL_DMA_IRQHandler+0x1c8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d031      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a56      	ldr	r2, [pc, #344]	@ (80057b8 <HAL_DMA_IRQHandler+0x1cc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d02c      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a54      	ldr	r2, [pc, #336]	@ (80057bc <HAL_DMA_IRQHandler+0x1d0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d027      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a53      	ldr	r2, [pc, #332]	@ (80057c0 <HAL_DMA_IRQHandler+0x1d4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a51      	ldr	r2, [pc, #324]	@ (80057c4 <HAL_DMA_IRQHandler+0x1d8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01d      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a50      	ldr	r2, [pc, #320]	@ (80057c8 <HAL_DMA_IRQHandler+0x1dc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d018      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a4e      	ldr	r2, [pc, #312]	@ (80057cc <HAL_DMA_IRQHandler+0x1e0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a4d      	ldr	r2, [pc, #308]	@ (80057d0 <HAL_DMA_IRQHandler+0x1e4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a4b      	ldr	r2, [pc, #300]	@ (80057d4 <HAL_DMA_IRQHandler+0x1e8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a4a      	ldr	r2, [pc, #296]	@ (80057d8 <HAL_DMA_IRQHandler+0x1ec>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_DMA_IRQHandler+0xd2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a48      	ldr	r2, [pc, #288]	@ (80057dc <HAL_DMA_IRQHandler+0x1f0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_IRQHandler+0xd6>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <HAL_DMA_IRQHandler+0xd8>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 842b 	beq.w	8005f20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	2208      	movs	r2, #8
 80056d4:	409a      	lsls	r2, r3
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 80a2 	beq.w	8005824 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2e      	ldr	r2, [pc, #184]	@ (80057a0 <HAL_DMA_IRQHandler+0x1b4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d04a      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2d      	ldr	r2, [pc, #180]	@ (80057a4 <HAL_DMA_IRQHandler+0x1b8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d045      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <HAL_DMA_IRQHandler+0x1bc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d040      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2a      	ldr	r2, [pc, #168]	@ (80057ac <HAL_DMA_IRQHandler+0x1c0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d03b      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a28      	ldr	r2, [pc, #160]	@ (80057b0 <HAL_DMA_IRQHandler+0x1c4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d036      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a27      	ldr	r2, [pc, #156]	@ (80057b4 <HAL_DMA_IRQHandler+0x1c8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d031      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a25      	ldr	r2, [pc, #148]	@ (80057b8 <HAL_DMA_IRQHandler+0x1cc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d02c      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a24      	ldr	r2, [pc, #144]	@ (80057bc <HAL_DMA_IRQHandler+0x1d0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d027      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a22      	ldr	r2, [pc, #136]	@ (80057c0 <HAL_DMA_IRQHandler+0x1d4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d022      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a21      	ldr	r2, [pc, #132]	@ (80057c4 <HAL_DMA_IRQHandler+0x1d8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01d      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1f      	ldr	r2, [pc, #124]	@ (80057c8 <HAL_DMA_IRQHandler+0x1dc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1e      	ldr	r2, [pc, #120]	@ (80057cc <HAL_DMA_IRQHandler+0x1e0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <HAL_DMA_IRQHandler+0x1e4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1b      	ldr	r2, [pc, #108]	@ (80057d4 <HAL_DMA_IRQHandler+0x1e8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_DMA_IRQHandler+0x1ec>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_DMA_IRQHandler+0x194>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a18      	ldr	r2, [pc, #96]	@ (80057dc <HAL_DMA_IRQHandler+0x1f0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d12f      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x1f4>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf14      	ite	ne
 800578e:	2301      	movne	r3, #1
 8005790:	2300      	moveq	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	e02e      	b.n	80057f4 <HAL_DMA_IRQHandler+0x208>
 8005796:	bf00      	nop
 8005798:	2400000c 	.word	0x2400000c
 800579c:	1b4e81b5 	.word	0x1b4e81b5
 80057a0:	40020010 	.word	0x40020010
 80057a4:	40020028 	.word	0x40020028
 80057a8:	40020040 	.word	0x40020040
 80057ac:	40020058 	.word	0x40020058
 80057b0:	40020070 	.word	0x40020070
 80057b4:	40020088 	.word	0x40020088
 80057b8:	400200a0 	.word	0x400200a0
 80057bc:	400200b8 	.word	0x400200b8
 80057c0:	40020410 	.word	0x40020410
 80057c4:	40020428 	.word	0x40020428
 80057c8:	40020440 	.word	0x40020440
 80057cc:	40020458 	.word	0x40020458
 80057d0:	40020470 	.word	0x40020470
 80057d4:	40020488 	.word	0x40020488
 80057d8:	400204a0 	.word	0x400204a0
 80057dc:	400204b8 	.word	0x400204b8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	bf14      	ite	ne
 80057ee:	2301      	movne	r3, #1
 80057f0:	2300      	moveq	r3, #0
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0204 	bic.w	r2, r2, #4
 8005806:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2208      	movs	r2, #8
 8005812:	409a      	lsls	r2, r3
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581c:	f043 0201 	orr.w	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	fa22 f303 	lsr.w	r3, r2, r3
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d06e      	beq.n	8005918 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a69      	ldr	r2, [pc, #420]	@ (80059e4 <HAL_DMA_IRQHandler+0x3f8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a67      	ldr	r2, [pc, #412]	@ (80059e8 <HAL_DMA_IRQHandler+0x3fc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a66      	ldr	r2, [pc, #408]	@ (80059ec <HAL_DMA_IRQHandler+0x400>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a64      	ldr	r2, [pc, #400]	@ (80059f0 <HAL_DMA_IRQHandler+0x404>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a63      	ldr	r2, [pc, #396]	@ (80059f4 <HAL_DMA_IRQHandler+0x408>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a61      	ldr	r2, [pc, #388]	@ (80059f8 <HAL_DMA_IRQHandler+0x40c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a60      	ldr	r2, [pc, #384]	@ (80059fc <HAL_DMA_IRQHandler+0x410>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5e      	ldr	r2, [pc, #376]	@ (8005a00 <HAL_DMA_IRQHandler+0x414>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5d      	ldr	r2, [pc, #372]	@ (8005a04 <HAL_DMA_IRQHandler+0x418>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5b      	ldr	r2, [pc, #364]	@ (8005a08 <HAL_DMA_IRQHandler+0x41c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5a      	ldr	r2, [pc, #360]	@ (8005a0c <HAL_DMA_IRQHandler+0x420>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a58      	ldr	r2, [pc, #352]	@ (8005a10 <HAL_DMA_IRQHandler+0x424>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a57      	ldr	r2, [pc, #348]	@ (8005a14 <HAL_DMA_IRQHandler+0x428>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a55      	ldr	r2, [pc, #340]	@ (8005a18 <HAL_DMA_IRQHandler+0x42c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a54      	ldr	r2, [pc, #336]	@ (8005a1c <HAL_DMA_IRQHandler+0x430>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_IRQHandler+0x2ee>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a52      	ldr	r2, [pc, #328]	@ (8005a20 <HAL_DMA_IRQHandler+0x434>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d10a      	bne.n	80058f0 <HAL_DMA_IRQHandler+0x304>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e003      	b.n	80058f8 <HAL_DMA_IRQHandler+0x30c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2201      	movs	r2, #1
 8005906:	409a      	lsls	r2, r3
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005910:	f043 0202 	orr.w	r2, r3, #2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	2204      	movs	r2, #4
 8005922:	409a      	lsls	r2, r3
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 808f 	beq.w	8005a4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2c      	ldr	r2, [pc, #176]	@ (80059e4 <HAL_DMA_IRQHandler+0x3f8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04a      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a2a      	ldr	r2, [pc, #168]	@ (80059e8 <HAL_DMA_IRQHandler+0x3fc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d045      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a29      	ldr	r2, [pc, #164]	@ (80059ec <HAL_DMA_IRQHandler+0x400>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d040      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <HAL_DMA_IRQHandler+0x404>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d03b      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a26      	ldr	r2, [pc, #152]	@ (80059f4 <HAL_DMA_IRQHandler+0x408>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d036      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a24      	ldr	r2, [pc, #144]	@ (80059f8 <HAL_DMA_IRQHandler+0x40c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a23      	ldr	r2, [pc, #140]	@ (80059fc <HAL_DMA_IRQHandler+0x410>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d02c      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a21      	ldr	r2, [pc, #132]	@ (8005a00 <HAL_DMA_IRQHandler+0x414>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a20      	ldr	r2, [pc, #128]	@ (8005a04 <HAL_DMA_IRQHandler+0x418>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1e      	ldr	r2, [pc, #120]	@ (8005a08 <HAL_DMA_IRQHandler+0x41c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <HAL_DMA_IRQHandler+0x420>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a10 <HAL_DMA_IRQHandler+0x424>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005a14 <HAL_DMA_IRQHandler+0x428>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	@ (8005a18 <HAL_DMA_IRQHandler+0x42c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	@ (8005a1c <HAL_DMA_IRQHandler+0x430>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_IRQHandler+0x3e2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <HAL_DMA_IRQHandler+0x434>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d12a      	bne.n	8005a24 <HAL_DMA_IRQHandler+0x438>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e023      	b.n	8005a2c <HAL_DMA_IRQHandler+0x440>
 80059e4:	40020010 	.word	0x40020010
 80059e8:	40020028 	.word	0x40020028
 80059ec:	40020040 	.word	0x40020040
 80059f0:	40020058 	.word	0x40020058
 80059f4:	40020070 	.word	0x40020070
 80059f8:	40020088 	.word	0x40020088
 80059fc:	400200a0 	.word	0x400200a0
 8005a00:	400200b8 	.word	0x400200b8
 8005a04:	40020410 	.word	0x40020410
 8005a08:	40020428 	.word	0x40020428
 8005a0c:	40020440 	.word	0x40020440
 8005a10:	40020458 	.word	0x40020458
 8005a14:	40020470 	.word	0x40020470
 8005a18:	40020488 	.word	0x40020488
 8005a1c:	400204a0 	.word	0x400204a0
 8005a20:	400204b8 	.word	0x400204b8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a34:	f003 031f 	and.w	r3, r3, #31
 8005a38:	2204      	movs	r2, #4
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a44:	f043 0204 	orr.w	r2, r3, #4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	2210      	movs	r2, #16
 8005a56:	409a      	lsls	r2, r3
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80a6 	beq.w	8005bae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a85      	ldr	r2, [pc, #532]	@ (8005c7c <HAL_DMA_IRQHandler+0x690>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d04a      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a83      	ldr	r2, [pc, #524]	@ (8005c80 <HAL_DMA_IRQHandler+0x694>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d045      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a82      	ldr	r2, [pc, #520]	@ (8005c84 <HAL_DMA_IRQHandler+0x698>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d040      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a80      	ldr	r2, [pc, #512]	@ (8005c88 <HAL_DMA_IRQHandler+0x69c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d03b      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a7f      	ldr	r2, [pc, #508]	@ (8005c8c <HAL_DMA_IRQHandler+0x6a0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d036      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a7d      	ldr	r2, [pc, #500]	@ (8005c90 <HAL_DMA_IRQHandler+0x6a4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d031      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8005c94 <HAL_DMA_IRQHandler+0x6a8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d02c      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a7a      	ldr	r2, [pc, #488]	@ (8005c98 <HAL_DMA_IRQHandler+0x6ac>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d027      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a79      	ldr	r2, [pc, #484]	@ (8005c9c <HAL_DMA_IRQHandler+0x6b0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a77      	ldr	r2, [pc, #476]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6b4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a76      	ldr	r2, [pc, #472]	@ (8005ca4 <HAL_DMA_IRQHandler+0x6b8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a74      	ldr	r2, [pc, #464]	@ (8005ca8 <HAL_DMA_IRQHandler+0x6bc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a73      	ldr	r2, [pc, #460]	@ (8005cac <HAL_DMA_IRQHandler+0x6c0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a71      	ldr	r2, [pc, #452]	@ (8005cb0 <HAL_DMA_IRQHandler+0x6c4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a70      	ldr	r2, [pc, #448]	@ (8005cb4 <HAL_DMA_IRQHandler+0x6c8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x516>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6e      	ldr	r2, [pc, #440]	@ (8005cb8 <HAL_DMA_IRQHandler+0x6cc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10a      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x52c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bf14      	ite	ne
 8005b10:	2301      	movne	r3, #1
 8005b12:	2300      	moveq	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	e009      	b.n	8005b2c <HAL_DMA_IRQHandler+0x540>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bf14      	ite	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	2300      	moveq	r3, #0
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d03e      	beq.n	8005bae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2210      	movs	r2, #16
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d018      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d108      	bne.n	8005b6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d024      	beq.n	8005bae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
 8005b6c:	e01f      	b.n	8005bae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01b      	beq.n	8005bae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
 8005b7e:	e016      	b.n	8005bae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0208 	bic.w	r2, r2, #8
 8005b9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8110 	beq.w	8005de4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8005c7c <HAL_DMA_IRQHandler+0x690>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d04a      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c80 <HAL_DMA_IRQHandler+0x694>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d045      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a29      	ldr	r2, [pc, #164]	@ (8005c84 <HAL_DMA_IRQHandler+0x698>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d040      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a28      	ldr	r2, [pc, #160]	@ (8005c88 <HAL_DMA_IRQHandler+0x69c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d03b      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a26      	ldr	r2, [pc, #152]	@ (8005c8c <HAL_DMA_IRQHandler+0x6a0>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d036      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a25      	ldr	r2, [pc, #148]	@ (8005c90 <HAL_DMA_IRQHandler+0x6a4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d031      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <HAL_DMA_IRQHandler+0x6a8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d02c      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a22      	ldr	r2, [pc, #136]	@ (8005c98 <HAL_DMA_IRQHandler+0x6ac>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d027      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a20      	ldr	r2, [pc, #128]	@ (8005c9c <HAL_DMA_IRQHandler+0x6b0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d022      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca0 <HAL_DMA_IRQHandler+0x6b4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d01d      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca4 <HAL_DMA_IRQHandler+0x6b8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d018      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca8 <HAL_DMA_IRQHandler+0x6bc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	@ (8005cac <HAL_DMA_IRQHandler+0x6c0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00e      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <HAL_DMA_IRQHandler+0x6c4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a17      	ldr	r2, [pc, #92]	@ (8005cb4 <HAL_DMA_IRQHandler+0x6c8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x678>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a16      	ldr	r2, [pc, #88]	@ (8005cb8 <HAL_DMA_IRQHandler+0x6cc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d12b      	bne.n	8005cbc <HAL_DMA_IRQHandler+0x6d0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf14      	ite	ne
 8005c72:	2301      	movne	r3, #1
 8005c74:	2300      	moveq	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	e02a      	b.n	8005cd0 <HAL_DMA_IRQHandler+0x6e4>
 8005c7a:	bf00      	nop
 8005c7c:	40020010 	.word	0x40020010
 8005c80:	40020028 	.word	0x40020028
 8005c84:	40020040 	.word	0x40020040
 8005c88:	40020058 	.word	0x40020058
 8005c8c:	40020070 	.word	0x40020070
 8005c90:	40020088 	.word	0x40020088
 8005c94:	400200a0 	.word	0x400200a0
 8005c98:	400200b8 	.word	0x400200b8
 8005c9c:	40020410 	.word	0x40020410
 8005ca0:	40020428 	.word	0x40020428
 8005ca4:	40020440 	.word	0x40020440
 8005ca8:	40020458 	.word	0x40020458
 8005cac:	40020470 	.word	0x40020470
 8005cb0:	40020488 	.word	0x40020488
 8005cb4:	400204a0 	.word	0x400204a0
 8005cb8:	400204b8 	.word	0x400204b8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8087 	beq.w	8005de4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2220      	movs	r2, #32
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d139      	bne.n	8005d66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0216 	bic.w	r2, r2, #22
 8005d00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x736>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d007      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0208 	bic.w	r2, r2, #8
 8005d30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	223f      	movs	r2, #63	@ 0x3f
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 834a 	beq.w	80063f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
          }
          return;
 8005d64:	e344      	b.n	80063f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d018      	beq.n	8005da6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d108      	bne.n	8005d94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02c      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
 8005d92:	e027      	b.n	8005de4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d023      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
 8005da4:	e01e      	b.n	8005de4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10f      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0210 	bic.w	r2, r2, #16
 8005dc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8306 	beq.w	80063fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8088 	beq.w	8005f0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a7a      	ldr	r2, [pc, #488]	@ (8005ff4 <HAL_DMA_IRQHandler+0xa08>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d04a      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a79      	ldr	r2, [pc, #484]	@ (8005ff8 <HAL_DMA_IRQHandler+0xa0c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d045      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a77      	ldr	r2, [pc, #476]	@ (8005ffc <HAL_DMA_IRQHandler+0xa10>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d040      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a76      	ldr	r2, [pc, #472]	@ (8006000 <HAL_DMA_IRQHandler+0xa14>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d03b      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a74      	ldr	r2, [pc, #464]	@ (8006004 <HAL_DMA_IRQHandler+0xa18>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d036      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a73      	ldr	r2, [pc, #460]	@ (8006008 <HAL_DMA_IRQHandler+0xa1c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d031      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a71      	ldr	r2, [pc, #452]	@ (800600c <HAL_DMA_IRQHandler+0xa20>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d02c      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a70      	ldr	r2, [pc, #448]	@ (8006010 <HAL_DMA_IRQHandler+0xa24>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d027      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a6e      	ldr	r2, [pc, #440]	@ (8006014 <HAL_DMA_IRQHandler+0xa28>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d022      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a6d      	ldr	r2, [pc, #436]	@ (8006018 <HAL_DMA_IRQHandler+0xa2c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d01d      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800601c <HAL_DMA_IRQHandler+0xa30>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d018      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6a      	ldr	r2, [pc, #424]	@ (8006020 <HAL_DMA_IRQHandler+0xa34>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a68      	ldr	r2, [pc, #416]	@ (8006024 <HAL_DMA_IRQHandler+0xa38>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00e      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a67      	ldr	r2, [pc, #412]	@ (8006028 <HAL_DMA_IRQHandler+0xa3c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a65      	ldr	r2, [pc, #404]	@ (800602c <HAL_DMA_IRQHandler+0xa40>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_DMA_IRQHandler+0x8b8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a64      	ldr	r2, [pc, #400]	@ (8006030 <HAL_DMA_IRQHandler+0xa44>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <HAL_DMA_IRQHandler+0x8ca>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0201 	bic.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	e007      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x8da>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d307      	bcc.n	8005ee2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f2      	bne.n	8005ec6 <HAL_DMA_IRQHandler+0x8da>
 8005ee0:	e000      	b.n	8005ee4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005ee2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005efa:	e003      	b.n	8005f04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8272 	beq.w	80063fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	e26c      	b.n	80063fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a43      	ldr	r2, [pc, #268]	@ (8006034 <HAL_DMA_IRQHandler+0xa48>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d022      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a42      	ldr	r2, [pc, #264]	@ (8006038 <HAL_DMA_IRQHandler+0xa4c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d01d      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a40      	ldr	r2, [pc, #256]	@ (800603c <HAL_DMA_IRQHandler+0xa50>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d018      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a3f      	ldr	r2, [pc, #252]	@ (8006040 <HAL_DMA_IRQHandler+0xa54>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a3d      	ldr	r2, [pc, #244]	@ (8006044 <HAL_DMA_IRQHandler+0xa58>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00e      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a3c      	ldr	r2, [pc, #240]	@ (8006048 <HAL_DMA_IRQHandler+0xa5c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d009      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a3a      	ldr	r2, [pc, #232]	@ (800604c <HAL_DMA_IRQHandler+0xa60>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x984>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a39      	ldr	r2, [pc, #228]	@ (8006050 <HAL_DMA_IRQHandler+0xa64>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d101      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x988>
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <HAL_DMA_IRQHandler+0x98a>
 8005f74:	2300      	movs	r3, #0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 823f 	beq.w	80063fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	409a      	lsls	r2, r3
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80cd 	beq.w	8006134 <HAL_DMA_IRQHandler+0xb48>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80c7 	beq.w	8006134 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2204      	movs	r2, #4
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d049      	beq.n	8006054 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8210 	beq.w	80063f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fdc:	e20a      	b.n	80063f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8206 	beq.w	80063f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ff0:	e200      	b.n	80063f4 <HAL_DMA_IRQHandler+0xe08>
 8005ff2:	bf00      	nop
 8005ff4:	40020010 	.word	0x40020010
 8005ff8:	40020028 	.word	0x40020028
 8005ffc:	40020040 	.word	0x40020040
 8006000:	40020058 	.word	0x40020058
 8006004:	40020070 	.word	0x40020070
 8006008:	40020088 	.word	0x40020088
 800600c:	400200a0 	.word	0x400200a0
 8006010:	400200b8 	.word	0x400200b8
 8006014:	40020410 	.word	0x40020410
 8006018:	40020428 	.word	0x40020428
 800601c:	40020440 	.word	0x40020440
 8006020:	40020458 	.word	0x40020458
 8006024:	40020470 	.word	0x40020470
 8006028:	40020488 	.word	0x40020488
 800602c:	400204a0 	.word	0x400204a0
 8006030:	400204b8 	.word	0x400204b8
 8006034:	58025408 	.word	0x58025408
 8006038:	5802541c 	.word	0x5802541c
 800603c:	58025430 	.word	0x58025430
 8006040:	58025444 	.word	0x58025444
 8006044:	58025458 	.word	0x58025458
 8006048:	5802546c 	.word	0x5802546c
 800604c:	58025480 	.word	0x58025480
 8006050:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d160      	bne.n	8006120 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a7f      	ldr	r2, [pc, #508]	@ (8006260 <HAL_DMA_IRQHandler+0xc74>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d04a      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a7d      	ldr	r2, [pc, #500]	@ (8006264 <HAL_DMA_IRQHandler+0xc78>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d045      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a7c      	ldr	r2, [pc, #496]	@ (8006268 <HAL_DMA_IRQHandler+0xc7c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d040      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a7a      	ldr	r2, [pc, #488]	@ (800626c <HAL_DMA_IRQHandler+0xc80>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d03b      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a79      	ldr	r2, [pc, #484]	@ (8006270 <HAL_DMA_IRQHandler+0xc84>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d036      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a77      	ldr	r2, [pc, #476]	@ (8006274 <HAL_DMA_IRQHandler+0xc88>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d031      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a76      	ldr	r2, [pc, #472]	@ (8006278 <HAL_DMA_IRQHandler+0xc8c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d02c      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a74      	ldr	r2, [pc, #464]	@ (800627c <HAL_DMA_IRQHandler+0xc90>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d027      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a73      	ldr	r2, [pc, #460]	@ (8006280 <HAL_DMA_IRQHandler+0xc94>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d022      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a71      	ldr	r2, [pc, #452]	@ (8006284 <HAL_DMA_IRQHandler+0xc98>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01d      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a70      	ldr	r2, [pc, #448]	@ (8006288 <HAL_DMA_IRQHandler+0xc9c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d018      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6e      	ldr	r2, [pc, #440]	@ (800628c <HAL_DMA_IRQHandler+0xca0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6d      	ldr	r2, [pc, #436]	@ (8006290 <HAL_DMA_IRQHandler+0xca4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006294 <HAL_DMA_IRQHandler+0xca8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6a      	ldr	r2, [pc, #424]	@ (8006298 <HAL_DMA_IRQHandler+0xcac>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_DMA_IRQHandler+0xb12>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a68      	ldr	r2, [pc, #416]	@ (800629c <HAL_DMA_IRQHandler+0xcb0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d108      	bne.n	8006110 <HAL_DMA_IRQHandler+0xb24>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0208 	bic.w	r2, r2, #8
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e007      	b.n	8006120 <HAL_DMA_IRQHandler+0xb34>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0204 	bic.w	r2, r2, #4
 800611e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8165 	beq.w	80063f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006132:	e15f      	b.n	80063f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2202      	movs	r2, #2
 800613e:	409a      	lsls	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80c5 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xce8>
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80bf 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2202      	movs	r2, #2
 8006160:	409a      	lsls	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d018      	beq.n	80061a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 813a 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	e134      	b.n	80063f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8130 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a0:	e12a      	b.n	80063f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8089 	bne.w	80062c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006260 <HAL_DMA_IRQHandler+0xc74>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d04a      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a29      	ldr	r2, [pc, #164]	@ (8006264 <HAL_DMA_IRQHandler+0xc78>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d045      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a28      	ldr	r2, [pc, #160]	@ (8006268 <HAL_DMA_IRQHandler+0xc7c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d040      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a26      	ldr	r2, [pc, #152]	@ (800626c <HAL_DMA_IRQHandler+0xc80>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a25      	ldr	r2, [pc, #148]	@ (8006270 <HAL_DMA_IRQHandler+0xc84>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a23      	ldr	r2, [pc, #140]	@ (8006274 <HAL_DMA_IRQHandler+0xc88>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d031      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a22      	ldr	r2, [pc, #136]	@ (8006278 <HAL_DMA_IRQHandler+0xc8c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d02c      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a20      	ldr	r2, [pc, #128]	@ (800627c <HAL_DMA_IRQHandler+0xc90>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d027      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1f      	ldr	r2, [pc, #124]	@ (8006280 <HAL_DMA_IRQHandler+0xc94>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d022      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1d      	ldr	r2, [pc, #116]	@ (8006284 <HAL_DMA_IRQHandler+0xc98>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1c      	ldr	r2, [pc, #112]	@ (8006288 <HAL_DMA_IRQHandler+0xc9c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1a      	ldr	r2, [pc, #104]	@ (800628c <HAL_DMA_IRQHandler+0xca0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a19      	ldr	r2, [pc, #100]	@ (8006290 <HAL_DMA_IRQHandler+0xca4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a17      	ldr	r2, [pc, #92]	@ (8006294 <HAL_DMA_IRQHandler+0xca8>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a16      	ldr	r2, [pc, #88]	@ (8006298 <HAL_DMA_IRQHandler+0xcac>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_DMA_IRQHandler+0xc62>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a14      	ldr	r2, [pc, #80]	@ (800629c <HAL_DMA_IRQHandler+0xcb0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d128      	bne.n	80062a0 <HAL_DMA_IRQHandler+0xcb4>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0214 	bic.w	r2, r2, #20
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e027      	b.n	80062b0 <HAL_DMA_IRQHandler+0xcc4>
 8006260:	40020010 	.word	0x40020010
 8006264:	40020028 	.word	0x40020028
 8006268:	40020040 	.word	0x40020040
 800626c:	40020058 	.word	0x40020058
 8006270:	40020070 	.word	0x40020070
 8006274:	40020088 	.word	0x40020088
 8006278:	400200a0 	.word	0x400200a0
 800627c:	400200b8 	.word	0x400200b8
 8006280:	40020410 	.word	0x40020410
 8006284:	40020428 	.word	0x40020428
 8006288:	40020440 	.word	0x40020440
 800628c:	40020458 	.word	0x40020458
 8006290:	40020470 	.word	0x40020470
 8006294:	40020488 	.word	0x40020488
 8006298:	400204a0 	.word	0x400204a0
 800629c:	400204b8 	.word	0x400204b8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 020a 	bic.w	r2, r2, #10
 80062ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8097 	beq.w	80063f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d2:	e091      	b.n	80063f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2208      	movs	r2, #8
 80062de:	409a      	lsls	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8088 	beq.w	80063fa <HAL_DMA_IRQHandler+0xe0e>
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8082 	beq.w	80063fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a41      	ldr	r2, [pc, #260]	@ (8006400 <HAL_DMA_IRQHandler+0xe14>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d04a      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a3f      	ldr	r2, [pc, #252]	@ (8006404 <HAL_DMA_IRQHandler+0xe18>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d045      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a3e      	ldr	r2, [pc, #248]	@ (8006408 <HAL_DMA_IRQHandler+0xe1c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d040      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3c      	ldr	r2, [pc, #240]	@ (800640c <HAL_DMA_IRQHandler+0xe20>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d03b      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3b      	ldr	r2, [pc, #236]	@ (8006410 <HAL_DMA_IRQHandler+0xe24>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d036      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a39      	ldr	r2, [pc, #228]	@ (8006414 <HAL_DMA_IRQHandler+0xe28>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d031      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a38      	ldr	r2, [pc, #224]	@ (8006418 <HAL_DMA_IRQHandler+0xe2c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d02c      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a36      	ldr	r2, [pc, #216]	@ (800641c <HAL_DMA_IRQHandler+0xe30>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d027      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a35      	ldr	r2, [pc, #212]	@ (8006420 <HAL_DMA_IRQHandler+0xe34>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a33      	ldr	r2, [pc, #204]	@ (8006424 <HAL_DMA_IRQHandler+0xe38>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01d      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a32      	ldr	r2, [pc, #200]	@ (8006428 <HAL_DMA_IRQHandler+0xe3c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d018      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a30      	ldr	r2, [pc, #192]	@ (800642c <HAL_DMA_IRQHandler+0xe40>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2f      	ldr	r2, [pc, #188]	@ (8006430 <HAL_DMA_IRQHandler+0xe44>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00e      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a2d      	ldr	r2, [pc, #180]	@ (8006434 <HAL_DMA_IRQHandler+0xe48>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d009      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a2c      	ldr	r2, [pc, #176]	@ (8006438 <HAL_DMA_IRQHandler+0xe4c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_DMA_IRQHandler+0xdaa>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a2a      	ldr	r2, [pc, #168]	@ (800643c <HAL_DMA_IRQHandler+0xe50>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <HAL_DMA_IRQHandler+0xdbc>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 021c 	bic.w	r2, r2, #28
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e007      	b.n	80063b8 <HAL_DMA_IRQHandler+0xdcc>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 020e 	bic.w	r2, r2, #14
 80063b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	2201      	movs	r2, #1
 80063c2:	409a      	lsls	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
 80063ee:	e004      	b.n	80063fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063f0:	bf00      	nop
 80063f2:	e002      	b.n	80063fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063f4:	bf00      	nop
 80063f6:	e000      	b.n	80063fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063fa:	3728      	adds	r7, #40	@ 0x28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40020010 	.word	0x40020010
 8006404:	40020028 	.word	0x40020028
 8006408:	40020040 	.word	0x40020040
 800640c:	40020058 	.word	0x40020058
 8006410:	40020070 	.word	0x40020070
 8006414:	40020088 	.word	0x40020088
 8006418:	400200a0 	.word	0x400200a0
 800641c:	400200b8 	.word	0x400200b8
 8006420:	40020410 	.word	0x40020410
 8006424:	40020428 	.word	0x40020428
 8006428:	40020440 	.word	0x40020440
 800642c:	40020458 	.word	0x40020458
 8006430:	40020470 	.word	0x40020470
 8006434:	40020488 	.word	0x40020488
 8006438:	400204a0 	.word	0x400204a0
 800643c:	400204b8 	.word	0x400204b8

08006440 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006470:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7f      	ldr	r2, [pc, #508]	@ (8006674 <DMA_SetConfig+0x21c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d072      	beq.n	8006562 <DMA_SetConfig+0x10a>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7d      	ldr	r2, [pc, #500]	@ (8006678 <DMA_SetConfig+0x220>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d06d      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a7c      	ldr	r2, [pc, #496]	@ (800667c <DMA_SetConfig+0x224>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d068      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a7a      	ldr	r2, [pc, #488]	@ (8006680 <DMA_SetConfig+0x228>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d063      	beq.n	8006562 <DMA_SetConfig+0x10a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a79      	ldr	r2, [pc, #484]	@ (8006684 <DMA_SetConfig+0x22c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d05e      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a77      	ldr	r2, [pc, #476]	@ (8006688 <DMA_SetConfig+0x230>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d059      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a76      	ldr	r2, [pc, #472]	@ (800668c <DMA_SetConfig+0x234>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d054      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a74      	ldr	r2, [pc, #464]	@ (8006690 <DMA_SetConfig+0x238>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d04f      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a73      	ldr	r2, [pc, #460]	@ (8006694 <DMA_SetConfig+0x23c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d04a      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a71      	ldr	r2, [pc, #452]	@ (8006698 <DMA_SetConfig+0x240>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d045      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a70      	ldr	r2, [pc, #448]	@ (800669c <DMA_SetConfig+0x244>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d040      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a6e      	ldr	r2, [pc, #440]	@ (80066a0 <DMA_SetConfig+0x248>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d03b      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a6d      	ldr	r2, [pc, #436]	@ (80066a4 <DMA_SetConfig+0x24c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d036      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a6b      	ldr	r2, [pc, #428]	@ (80066a8 <DMA_SetConfig+0x250>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d031      	beq.n	8006562 <DMA_SetConfig+0x10a>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a6a      	ldr	r2, [pc, #424]	@ (80066ac <DMA_SetConfig+0x254>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d02c      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a68      	ldr	r2, [pc, #416]	@ (80066b0 <DMA_SetConfig+0x258>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d027      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a67      	ldr	r2, [pc, #412]	@ (80066b4 <DMA_SetConfig+0x25c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d022      	beq.n	8006562 <DMA_SetConfig+0x10a>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a65      	ldr	r2, [pc, #404]	@ (80066b8 <DMA_SetConfig+0x260>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01d      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a64      	ldr	r2, [pc, #400]	@ (80066bc <DMA_SetConfig+0x264>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d018      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a62      	ldr	r2, [pc, #392]	@ (80066c0 <DMA_SetConfig+0x268>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <DMA_SetConfig+0x10a>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a61      	ldr	r2, [pc, #388]	@ (80066c4 <DMA_SetConfig+0x26c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a5f      	ldr	r2, [pc, #380]	@ (80066c8 <DMA_SetConfig+0x270>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <DMA_SetConfig+0x10a>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a5e      	ldr	r2, [pc, #376]	@ (80066cc <DMA_SetConfig+0x274>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <DMA_SetConfig+0x10a>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a5c      	ldr	r2, [pc, #368]	@ (80066d0 <DMA_SetConfig+0x278>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <DMA_SetConfig+0x10e>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <DMA_SetConfig+0x110>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00d      	beq.n	8006588 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006574:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006586:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a39      	ldr	r2, [pc, #228]	@ (8006674 <DMA_SetConfig+0x21c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d04a      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a38      	ldr	r2, [pc, #224]	@ (8006678 <DMA_SetConfig+0x220>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d045      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a36      	ldr	r2, [pc, #216]	@ (800667c <DMA_SetConfig+0x224>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d040      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a35      	ldr	r2, [pc, #212]	@ (8006680 <DMA_SetConfig+0x228>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d03b      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a33      	ldr	r2, [pc, #204]	@ (8006684 <DMA_SetConfig+0x22c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d036      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a32      	ldr	r2, [pc, #200]	@ (8006688 <DMA_SetConfig+0x230>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d031      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a30      	ldr	r2, [pc, #192]	@ (800668c <DMA_SetConfig+0x234>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02c      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a2f      	ldr	r2, [pc, #188]	@ (8006690 <DMA_SetConfig+0x238>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d027      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006694 <DMA_SetConfig+0x23c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d022      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <DMA_SetConfig+0x240>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d01d      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2a      	ldr	r2, [pc, #168]	@ (800669c <DMA_SetConfig+0x244>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d018      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a29      	ldr	r2, [pc, #164]	@ (80066a0 <DMA_SetConfig+0x248>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a27      	ldr	r2, [pc, #156]	@ (80066a4 <DMA_SetConfig+0x24c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00e      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a26      	ldr	r2, [pc, #152]	@ (80066a8 <DMA_SetConfig+0x250>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a24      	ldr	r2, [pc, #144]	@ (80066ac <DMA_SetConfig+0x254>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <DMA_SetConfig+0x1d0>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a23      	ldr	r2, [pc, #140]	@ (80066b0 <DMA_SetConfig+0x258>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <DMA_SetConfig+0x1d4>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <DMA_SetConfig+0x1d6>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d059      	beq.n	80066e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	223f      	movs	r2, #63	@ 0x3f
 800663c:	409a      	lsls	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006650:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b40      	cmp	r3, #64	@ 0x40
 8006660:	d138      	bne.n	80066d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006672:	e086      	b.n	8006782 <DMA_SetConfig+0x32a>
 8006674:	40020010 	.word	0x40020010
 8006678:	40020028 	.word	0x40020028
 800667c:	40020040 	.word	0x40020040
 8006680:	40020058 	.word	0x40020058
 8006684:	40020070 	.word	0x40020070
 8006688:	40020088 	.word	0x40020088
 800668c:	400200a0 	.word	0x400200a0
 8006690:	400200b8 	.word	0x400200b8
 8006694:	40020410 	.word	0x40020410
 8006698:	40020428 	.word	0x40020428
 800669c:	40020440 	.word	0x40020440
 80066a0:	40020458 	.word	0x40020458
 80066a4:	40020470 	.word	0x40020470
 80066a8:	40020488 	.word	0x40020488
 80066ac:	400204a0 	.word	0x400204a0
 80066b0:	400204b8 	.word	0x400204b8
 80066b4:	58025408 	.word	0x58025408
 80066b8:	5802541c 	.word	0x5802541c
 80066bc:	58025430 	.word	0x58025430
 80066c0:	58025444 	.word	0x58025444
 80066c4:	58025458 	.word	0x58025458
 80066c8:	5802546c 	.word	0x5802546c
 80066cc:	58025480 	.word	0x58025480
 80066d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]
}
 80066e4:	e04d      	b.n	8006782 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a29      	ldr	r2, [pc, #164]	@ (8006790 <DMA_SetConfig+0x338>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d022      	beq.n	8006736 <DMA_SetConfig+0x2de>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a27      	ldr	r2, [pc, #156]	@ (8006794 <DMA_SetConfig+0x33c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01d      	beq.n	8006736 <DMA_SetConfig+0x2de>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a26      	ldr	r2, [pc, #152]	@ (8006798 <DMA_SetConfig+0x340>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <DMA_SetConfig+0x2de>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a24      	ldr	r2, [pc, #144]	@ (800679c <DMA_SetConfig+0x344>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <DMA_SetConfig+0x2de>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a23      	ldr	r2, [pc, #140]	@ (80067a0 <DMA_SetConfig+0x348>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <DMA_SetConfig+0x2de>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a21      	ldr	r2, [pc, #132]	@ (80067a4 <DMA_SetConfig+0x34c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <DMA_SetConfig+0x2de>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a20      	ldr	r2, [pc, #128]	@ (80067a8 <DMA_SetConfig+0x350>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <DMA_SetConfig+0x2de>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1e      	ldr	r2, [pc, #120]	@ (80067ac <DMA_SetConfig+0x354>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d101      	bne.n	800673a <DMA_SetConfig+0x2e2>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <DMA_SetConfig+0x2e4>
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2b40      	cmp	r3, #64	@ 0x40
 800675e:	d108      	bne.n	8006772 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	60da      	str	r2, [r3, #12]
}
 8006770:	e007      	b.n	8006782 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	60da      	str	r2, [r3, #12]
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	58025408 	.word	0x58025408
 8006794:	5802541c 	.word	0x5802541c
 8006798:	58025430 	.word	0x58025430
 800679c:	58025444 	.word	0x58025444
 80067a0:	58025458 	.word	0x58025458
 80067a4:	5802546c 	.word	0x5802546c
 80067a8:	58025480 	.word	0x58025480
 80067ac:	58025494 	.word	0x58025494

080067b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a42      	ldr	r2, [pc, #264]	@ (80068c8 <DMA_CalcBaseAndBitshift+0x118>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d04a      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a41      	ldr	r2, [pc, #260]	@ (80068cc <DMA_CalcBaseAndBitshift+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d045      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a3f      	ldr	r2, [pc, #252]	@ (80068d0 <DMA_CalcBaseAndBitshift+0x120>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d040      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3e      	ldr	r2, [pc, #248]	@ (80068d4 <DMA_CalcBaseAndBitshift+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d03b      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3c      	ldr	r2, [pc, #240]	@ (80068d8 <DMA_CalcBaseAndBitshift+0x128>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d036      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a3b      	ldr	r2, [pc, #236]	@ (80068dc <DMA_CalcBaseAndBitshift+0x12c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d031      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a39      	ldr	r2, [pc, #228]	@ (80068e0 <DMA_CalcBaseAndBitshift+0x130>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d02c      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a38      	ldr	r2, [pc, #224]	@ (80068e4 <DMA_CalcBaseAndBitshift+0x134>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d027      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a36      	ldr	r2, [pc, #216]	@ (80068e8 <DMA_CalcBaseAndBitshift+0x138>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d022      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a35      	ldr	r2, [pc, #212]	@ (80068ec <DMA_CalcBaseAndBitshift+0x13c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d01d      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a33      	ldr	r2, [pc, #204]	@ (80068f0 <DMA_CalcBaseAndBitshift+0x140>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a32      	ldr	r2, [pc, #200]	@ (80068f4 <DMA_CalcBaseAndBitshift+0x144>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a30      	ldr	r2, [pc, #192]	@ (80068f8 <DMA_CalcBaseAndBitshift+0x148>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2f      	ldr	r2, [pc, #188]	@ (80068fc <DMA_CalcBaseAndBitshift+0x14c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2d      	ldr	r2, [pc, #180]	@ (8006900 <DMA_CalcBaseAndBitshift+0x150>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <DMA_CalcBaseAndBitshift+0xa8>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2c      	ldr	r2, [pc, #176]	@ (8006904 <DMA_CalcBaseAndBitshift+0x154>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d101      	bne.n	800685c <DMA_CalcBaseAndBitshift+0xac>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <DMA_CalcBaseAndBitshift+0xae>
 800685c:	2300      	movs	r3, #0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d024      	beq.n	80068ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	3b10      	subs	r3, #16
 800686a:	4a27      	ldr	r2, [pc, #156]	@ (8006908 <DMA_CalcBaseAndBitshift+0x158>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	4a24      	ldr	r2, [pc, #144]	@ (800690c <DMA_CalcBaseAndBitshift+0x15c>)
 800687c:	5cd3      	ldrb	r3, [r2, r3]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d908      	bls.n	800689c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <DMA_CalcBaseAndBitshift+0x160>)
 8006892:	4013      	ands	r3, r2
 8006894:	1d1a      	adds	r2, r3, #4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	659a      	str	r2, [r3, #88]	@ 0x58
 800689a:	e00d      	b.n	80068b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006910 <DMA_CalcBaseAndBitshift+0x160>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068aa:	e005      	b.n	80068b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	40020010 	.word	0x40020010
 80068cc:	40020028 	.word	0x40020028
 80068d0:	40020040 	.word	0x40020040
 80068d4:	40020058 	.word	0x40020058
 80068d8:	40020070 	.word	0x40020070
 80068dc:	40020088 	.word	0x40020088
 80068e0:	400200a0 	.word	0x400200a0
 80068e4:	400200b8 	.word	0x400200b8
 80068e8:	40020410 	.word	0x40020410
 80068ec:	40020428 	.word	0x40020428
 80068f0:	40020440 	.word	0x40020440
 80068f4:	40020458 	.word	0x40020458
 80068f8:	40020470 	.word	0x40020470
 80068fc:	40020488 	.word	0x40020488
 8006900:	400204a0 	.word	0x400204a0
 8006904:	400204b8 	.word	0x400204b8
 8006908:	aaaaaaab 	.word	0xaaaaaaab
 800690c:	0800f070 	.word	0x0800f070
 8006910:	fffffc00 	.word	0xfffffc00

08006914 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d120      	bne.n	800696a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692c:	2b03      	cmp	r3, #3
 800692e:	d858      	bhi.n	80069e2 <DMA_CheckFifoParam+0xce>
 8006930:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <DMA_CheckFifoParam+0x24>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	08006949 	.word	0x08006949
 800693c:	0800695b 	.word	0x0800695b
 8006940:	08006949 	.word	0x08006949
 8006944:	080069e3 	.word	0x080069e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d048      	beq.n	80069e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006958:	e045      	b.n	80069e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006962:	d142      	bne.n	80069ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006968:	e03f      	b.n	80069ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006972:	d123      	bne.n	80069bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	2b03      	cmp	r3, #3
 800697a:	d838      	bhi.n	80069ee <DMA_CheckFifoParam+0xda>
 800697c:	a201      	add	r2, pc, #4	@ (adr r2, 8006984 <DMA_CheckFifoParam+0x70>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	08006995 	.word	0x08006995
 8006988:	0800699b 	.word	0x0800699b
 800698c:	08006995 	.word	0x08006995
 8006990:	080069ad 	.word	0x080069ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]
        break;
 8006998:	e030      	b.n	80069fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d025      	beq.n	80069f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069aa:	e022      	b.n	80069f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80069b4:	d11f      	bne.n	80069f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069ba:	e01c      	b.n	80069f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d902      	bls.n	80069ca <DMA_CheckFifoParam+0xb6>
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d003      	beq.n	80069d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80069c8:	e018      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	73fb      	strb	r3, [r7, #15]
        break;
 80069ce:	e015      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00e      	beq.n	80069fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
    break;
 80069e0:	e00b      	b.n	80069fa <DMA_CheckFifoParam+0xe6>
        break;
 80069e2:	bf00      	nop
 80069e4:	e00a      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        break;
 80069e6:	bf00      	nop
 80069e8:	e008      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        break;
 80069ea:	bf00      	nop
 80069ec:	e006      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        break;
 80069ee:	bf00      	nop
 80069f0:	e004      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        break;
 80069f2:	bf00      	nop
 80069f4:	e002      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
        break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <DMA_CheckFifoParam+0xe8>
    break;
 80069fa:	bf00      	nop
    }
  }

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop

08006a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a38      	ldr	r2, [pc, #224]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a36      	ldr	r2, [pc, #216]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01d      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a35      	ldr	r2, [pc, #212]	@ (8006b08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a33      	ldr	r2, [pc, #204]	@ (8006b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a32      	ldr	r2, [pc, #200]	@ (8006b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a30      	ldr	r2, [pc, #192]	@ (8006b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2d      	ldr	r2, [pc, #180]	@ (8006b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d101      	bne.n	8006a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	3b08      	subs	r3, #8
 8006a7c:	4a28      	ldr	r2, [pc, #160]	@ (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	091b      	lsrs	r3, r3, #4
 8006a84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4b26      	ldr	r3, [pc, #152]	@ (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a24      	ldr	r2, [pc, #144]	@ (8006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006aa8:	e024      	b.n	8006af4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	3b10      	subs	r3, #16
 8006ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	091b      	lsrs	r3, r3, #4
 8006aba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4a1c      	ldr	r2, [pc, #112]	@ (8006b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d806      	bhi.n	8006ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d902      	bls.n	8006ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4b18      	ldr	r3, [pc, #96]	@ (8006b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006ad6:	4413      	add	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006ae4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f003 031f 	and.w	r3, r3, #31
 8006aec:	2201      	movs	r2, #1
 8006aee:	409a      	lsls	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494
 8006b20:	cccccccd 	.word	0xcccccccd
 8006b24:	16009600 	.word	0x16009600
 8006b28:	58025880 	.word	0x58025880
 8006b2c:	aaaaaaab 	.word	0xaaaaaaab
 8006b30:	400204b8 	.word	0x400204b8
 8006b34:	4002040f 	.word	0x4002040f
 8006b38:	10008200 	.word	0x10008200
 8006b3c:	40020880 	.word	0x40020880

08006b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d04a      	beq.n	8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d847      	bhi.n	8006bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a25      	ldr	r2, [pc, #148]	@ (8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a24      	ldr	r2, [pc, #144]	@ (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a22      	ldr	r2, [pc, #136]	@ (8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a21      	ldr	r2, [pc, #132]	@ (8006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1f      	ldr	r2, [pc, #124]	@ (8006c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1e      	ldr	r2, [pc, #120]	@ (8006c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4b17      	ldr	r3, [pc, #92]	@ (8006c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006bc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8006bca:	e009      	b.n	8006be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4b14      	ldr	r3, [pc, #80]	@ (8006c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a11      	ldr	r2, [pc, #68]	@ (8006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006bde:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	2201      	movs	r2, #1
 8006be6:	409a      	lsls	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	58025408 	.word	0x58025408
 8006bfc:	5802541c 	.word	0x5802541c
 8006c00:	58025430 	.word	0x58025430
 8006c04:	58025444 	.word	0x58025444
 8006c08:	58025458 	.word	0x58025458
 8006c0c:	5802546c 	.word	0x5802546c
 8006c10:	58025480 	.word	0x58025480
 8006c14:	58025494 	.word	0x58025494
 8006c18:	1600963f 	.word	0x1600963f
 8006c1c:	58025940 	.word	0x58025940
 8006c20:	1000823f 	.word	0x1000823f
 8006c24:	40020940 	.word	0x40020940

08006c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b089      	sub	sp, #36	@ 0x24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c36:	4b86      	ldr	r3, [pc, #536]	@ (8006e50 <HAL_GPIO_Init+0x228>)
 8006c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c3a:	e18c      	b.n	8006f56 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2101      	movs	r1, #1
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	fa01 f303 	lsl.w	r3, r1, r3
 8006c48:	4013      	ands	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 817e 	beq.w	8006f50 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d005      	beq.n	8006c6c <HAL_GPIO_Init+0x44>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d130      	bne.n	8006cce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	2203      	movs	r2, #3
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4013      	ands	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	091b      	lsrs	r3, r3, #4
 8006cb8:	f003 0201 	and.w	r2, r3, #1
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d017      	beq.n	8006d0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	43db      	mvns	r3, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d123      	bne.n	8006d5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	08da      	lsrs	r2, r3, #3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3208      	adds	r2, #8
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	220f      	movs	r2, #15
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43db      	mvns	r3, r3
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	4013      	ands	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	08da      	lsrs	r2, r3, #3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3208      	adds	r2, #8
 8006d58:	69b9      	ldr	r1, [r7, #24]
 8006d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	2203      	movs	r2, #3
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	43db      	mvns	r3, r3
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	4013      	ands	r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f003 0203 	and.w	r2, r3, #3
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80d8 	beq.w	8006f50 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006da0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e54 <HAL_GPIO_Init+0x22c>)
 8006da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006da6:	4a2b      	ldr	r2, [pc, #172]	@ (8006e54 <HAL_GPIO_Init+0x22c>)
 8006da8:	f043 0302 	orr.w	r3, r3, #2
 8006dac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006db0:	4b28      	ldr	r3, [pc, #160]	@ (8006e54 <HAL_GPIO_Init+0x22c>)
 8006db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dbe:	4a26      	ldr	r2, [pc, #152]	@ (8006e58 <HAL_GPIO_Init+0x230>)
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	3302      	adds	r3, #2
 8006dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	220f      	movs	r2, #15
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4013      	ands	r3, r2
 8006de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e5c <HAL_GPIO_Init+0x234>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d04a      	beq.n	8006e80 <HAL_GPIO_Init+0x258>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1c      	ldr	r2, [pc, #112]	@ (8006e60 <HAL_GPIO_Init+0x238>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d02b      	beq.n	8006e4a <HAL_GPIO_Init+0x222>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	@ (8006e64 <HAL_GPIO_Init+0x23c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d025      	beq.n	8006e46 <HAL_GPIO_Init+0x21e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006e68 <HAL_GPIO_Init+0x240>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01f      	beq.n	8006e42 <HAL_GPIO_Init+0x21a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a19      	ldr	r2, [pc, #100]	@ (8006e6c <HAL_GPIO_Init+0x244>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d019      	beq.n	8006e3e <HAL_GPIO_Init+0x216>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a18      	ldr	r2, [pc, #96]	@ (8006e70 <HAL_GPIO_Init+0x248>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d013      	beq.n	8006e3a <HAL_GPIO_Init+0x212>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a17      	ldr	r2, [pc, #92]	@ (8006e74 <HAL_GPIO_Init+0x24c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00d      	beq.n	8006e36 <HAL_GPIO_Init+0x20e>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a16      	ldr	r2, [pc, #88]	@ (8006e78 <HAL_GPIO_Init+0x250>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <HAL_GPIO_Init+0x20a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a15      	ldr	r2, [pc, #84]	@ (8006e7c <HAL_GPIO_Init+0x254>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d101      	bne.n	8006e2e <HAL_GPIO_Init+0x206>
 8006e2a:	2309      	movs	r3, #9
 8006e2c:	e029      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e2e:	230a      	movs	r3, #10
 8006e30:	e027      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e32:	2307      	movs	r3, #7
 8006e34:	e025      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e36:	2306      	movs	r3, #6
 8006e38:	e023      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e3a:	2305      	movs	r3, #5
 8006e3c:	e021      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e3e:	2304      	movs	r3, #4
 8006e40:	e01f      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e42:	2303      	movs	r3, #3
 8006e44:	e01d      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e01b      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e019      	b.n	8006e82 <HAL_GPIO_Init+0x25a>
 8006e4e:	bf00      	nop
 8006e50:	58000080 	.word	0x58000080
 8006e54:	58024400 	.word	0x58024400
 8006e58:	58000400 	.word	0x58000400
 8006e5c:	58020000 	.word	0x58020000
 8006e60:	58020400 	.word	0x58020400
 8006e64:	58020800 	.word	0x58020800
 8006e68:	58020c00 	.word	0x58020c00
 8006e6c:	58021000 	.word	0x58021000
 8006e70:	58021400 	.word	0x58021400
 8006e74:	58021800 	.word	0x58021800
 8006e78:	58021c00 	.word	0x58021c00
 8006e7c:	58022400 	.word	0x58022400
 8006e80:	2300      	movs	r3, #0
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	f002 0203 	and.w	r2, r2, #3
 8006e88:	0092      	lsls	r2, r2, #2
 8006e8a:	4093      	lsls	r3, r2
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e92:	4938      	ldr	r1, [pc, #224]	@ (8006f74 <HAL_GPIO_Init+0x34c>)
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	089b      	lsrs	r3, r3, #2
 8006e98:	3302      	adds	r3, #2
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4013      	ands	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4013      	ands	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	3301      	adds	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f47f ae6b 	bne.w	8006c3c <HAL_GPIO_Init+0x14>
  }
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	3724      	adds	r7, #36	@ 0x24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	58000400 	.word	0x58000400

08006f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
 8006f84:	4613      	mov	r3, r2
 8006f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f88:	787b      	ldrb	r3, [r7, #1]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f8e:	887a      	ldrh	r2, [r7, #2]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006f94:	e003      	b.n	8006f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f96:	887b      	ldrh	r3, [r7, #2]
 8006f98:	041a      	lsls	r2, r3, #16
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	619a      	str	r2, [r3, #24]
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b082      	sub	sp, #8
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fce:	88fb      	ldrh	r3, [r7, #6]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f804 	bl	8006fde <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006ffc:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <HAL_PWREx_ConfigSupply+0x70>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b04      	cmp	r3, #4
 8007006:	d00a      	beq.n	800701e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007008:	4b16      	ldr	r3, [pc, #88]	@ (8007064 <HAL_PWREx_ConfigSupply+0x70>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d001      	beq.n	800701a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e01f      	b.n	800705a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	e01d      	b.n	800705a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800701e:	4b11      	ldr	r3, [pc, #68]	@ (8007064 <HAL_PWREx_ConfigSupply+0x70>)
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f023 0207 	bic.w	r2, r3, #7
 8007026:	490f      	ldr	r1, [pc, #60]	@ (8007064 <HAL_PWREx_ConfigSupply+0x70>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4313      	orrs	r3, r2
 800702c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800702e:	f7fc fe77 	bl	8003d20 <HAL_GetTick>
 8007032:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007034:	e009      	b.n	800704a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007036:	f7fc fe73 	bl	8003d20 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007044:	d901      	bls.n	800704a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e007      	b.n	800705a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_PWREx_ConfigSupply+0x70>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007056:	d1ee      	bne.n	8007036 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	58024800 	.word	0x58024800

08007068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08c      	sub	sp, #48	@ 0x30
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e3c8      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8087 	beq.w	8007196 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007088:	4b88      	ldr	r3, [pc, #544]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007090:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007092:	4b86      	ldr	r3, [pc, #536]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007096:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709a:	2b10      	cmp	r3, #16
 800709c:	d007      	beq.n	80070ae <HAL_RCC_OscConfig+0x46>
 800709e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a0:	2b18      	cmp	r3, #24
 80070a2:	d110      	bne.n	80070c6 <HAL_RCC_OscConfig+0x5e>
 80070a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d10b      	bne.n	80070c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ae:	4b7f      	ldr	r3, [pc, #508]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06c      	beq.n	8007194 <HAL_RCC_OscConfig+0x12c>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d168      	bne.n	8007194 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e3a2      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ce:	d106      	bne.n	80070de <HAL_RCC_OscConfig+0x76>
 80070d0:	4b76      	ldr	r3, [pc, #472]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a75      	ldr	r2, [pc, #468]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	e02e      	b.n	800713c <HAL_RCC_OscConfig+0xd4>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10c      	bne.n	8007100 <HAL_RCC_OscConfig+0x98>
 80070e6:	4b71      	ldr	r3, [pc, #452]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a70      	ldr	r2, [pc, #448]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4b6e      	ldr	r3, [pc, #440]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a6d      	ldr	r2, [pc, #436]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80070f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e01d      	b.n	800713c <HAL_RCC_OscConfig+0xd4>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0xbc>
 800710a:	4b68      	ldr	r3, [pc, #416]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a67      	ldr	r2, [pc, #412]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b65      	ldr	r3, [pc, #404]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a64      	ldr	r2, [pc, #400]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e00b      	b.n	800713c <HAL_RCC_OscConfig+0xd4>
 8007124:	4b61      	ldr	r3, [pc, #388]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a60      	ldr	r2, [pc, #384]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800712a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	4b5e      	ldr	r3, [pc, #376]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a5d      	ldr	r2, [pc, #372]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800713a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d013      	beq.n	800716c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007144:	f7fc fdec 	bl	8003d20 <HAL_GetTick>
 8007148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714c:	f7fc fde8 	bl	8003d20 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	@ 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e356      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800715e:	4b53      	ldr	r3, [pc, #332]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0xe4>
 800716a:	e014      	b.n	8007196 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fc fdd8 	bl	8003d20 <HAL_GetTick>
 8007170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007174:	f7fc fdd4 	bl	8003d20 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	@ 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e342      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007186:	4b49      	ldr	r3, [pc, #292]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x10c>
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 808c 	beq.w	80072bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071a4:	4b41      	ldr	r3, [pc, #260]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071ae:	4b3f      	ldr	r3, [pc, #252]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80071b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <HAL_RCC_OscConfig+0x162>
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2b18      	cmp	r3, #24
 80071be:	d137      	bne.n	8007230 <HAL_RCC_OscConfig+0x1c8>
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d132      	bne.n	8007230 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071ca:	4b38      	ldr	r3, [pc, #224]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_RCC_OscConfig+0x17a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e314      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80071e2:	4b32      	ldr	r3, [pc, #200]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f023 0219 	bic.w	r2, r3, #25
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	492f      	ldr	r1, [pc, #188]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f4:	f7fc fd94 	bl	8003d20 <HAL_GetTick>
 80071f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071fa:	e008      	b.n	800720e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071fc:	f7fc fd90 	bl	8003d20 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e2fe      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800720e:	4b27      	ldr	r3, [pc, #156]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0f0      	beq.n	80071fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800721a:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	061b      	lsls	r3, r3, #24
 8007228:	4920      	ldr	r1, [pc, #128]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800722a:	4313      	orrs	r3, r2
 800722c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800722e:	e045      	b.n	80072bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d026      	beq.n	8007286 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007238:	4b1c      	ldr	r3, [pc, #112]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 0219 	bic.w	r2, r3, #25
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4919      	ldr	r1, [pc, #100]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724a:	f7fc fd69 	bl	8003d20 <HAL_GetTick>
 800724e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007252:	f7fc fd65 	bl	8003d20 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e2d3      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007264:	4b11      	ldr	r3, [pc, #68]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007270:	4b0e      	ldr	r3, [pc, #56]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	061b      	lsls	r3, r3, #24
 800727e:	490b      	ldr	r1, [pc, #44]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007280:	4313      	orrs	r3, r2
 8007282:	604b      	str	r3, [r1, #4]
 8007284:	e01a      	b.n	80072bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007286:	4b09      	ldr	r3, [pc, #36]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a08      	ldr	r2, [pc, #32]	@ (80072ac <HAL_RCC_OscConfig+0x244>)
 800728c:	f023 0301 	bic.w	r3, r3, #1
 8007290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007292:	f7fc fd45 	bl	8003d20 <HAL_GetTick>
 8007296:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007298:	e00a      	b.n	80072b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800729a:	f7fc fd41 	bl	8003d20 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d903      	bls.n	80072b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e2af      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
 80072ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072b0:	4b96      	ldr	r3, [pc, #600]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ee      	bne.n	800729a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d06a      	beq.n	800739e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c8:	4b90      	ldr	r3, [pc, #576]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072d2:	4b8e      	ldr	r3, [pc, #568]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d007      	beq.n	80072ee <HAL_RCC_OscConfig+0x286>
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b18      	cmp	r3, #24
 80072e2:	d11b      	bne.n	800731c <HAL_RCC_OscConfig+0x2b4>
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d116      	bne.n	800731c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072ee:	4b87      	ldr	r3, [pc, #540]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <HAL_RCC_OscConfig+0x29e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	2b80      	cmp	r3, #128	@ 0x80
 8007300:	d001      	beq.n	8007306 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e282      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007306:	4b81      	ldr	r3, [pc, #516]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	061b      	lsls	r3, r3, #24
 8007314:	497d      	ldr	r1, [pc, #500]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007316:	4313      	orrs	r3, r2
 8007318:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800731a:	e040      	b.n	800739e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d023      	beq.n	800736c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007324:	4b79      	ldr	r3, [pc, #484]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a78      	ldr	r2, [pc, #480]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 800732a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007330:	f7fc fcf6 	bl	8003d20 <HAL_GetTick>
 8007334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007336:	e008      	b.n	800734a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007338:	f7fc fcf2 	bl	8003d20 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b02      	cmp	r3, #2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e260      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800734a:	4b70      	ldr	r3, [pc, #448]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0f0      	beq.n	8007338 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007356:	4b6d      	ldr	r3, [pc, #436]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	061b      	lsls	r3, r3, #24
 8007364:	4969      	ldr	r1, [pc, #420]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007366:	4313      	orrs	r3, r2
 8007368:	60cb      	str	r3, [r1, #12]
 800736a:	e018      	b.n	800739e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800736c:	4b67      	ldr	r3, [pc, #412]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a66      	ldr	r2, [pc, #408]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fc fcd2 	bl	8003d20 <HAL_GetTick>
 800737c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007380:	f7fc fcce 	bl	8003d20 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e23c      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007392:	4b5e      	ldr	r3, [pc, #376]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f0      	bne.n	8007380 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d036      	beq.n	8007418 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d019      	beq.n	80073e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073b2:	4b56      	ldr	r3, [pc, #344]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80073b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b6:	4a55      	ldr	r2, [pc, #340]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073be:	f7fc fcaf 	bl	8003d20 <HAL_GetTick>
 80073c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073c4:	e008      	b.n	80073d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073c6:	f7fc fcab 	bl	8003d20 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e219      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80073d8:	4b4c      	ldr	r3, [pc, #304]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80073da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d0f0      	beq.n	80073c6 <HAL_RCC_OscConfig+0x35e>
 80073e4:	e018      	b.n	8007418 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073e6:	4b49      	ldr	r3, [pc, #292]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80073e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ea:	4a48      	ldr	r2, [pc, #288]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f2:	f7fc fc95 	bl	8003d20 <HAL_GetTick>
 80073f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073f8:	e008      	b.n	800740c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073fa:	f7fc fc91 	bl	8003d20 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e1ff      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800740c:	4b3f      	ldr	r3, [pc, #252]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 800740e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f0      	bne.n	80073fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d036      	beq.n	8007492 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d019      	beq.n	8007460 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800742c:	4b37      	ldr	r3, [pc, #220]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a36      	ldr	r2, [pc, #216]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007432:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007436:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007438:	f7fc fc72 	bl	8003d20 <HAL_GetTick>
 800743c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007440:	f7fc fc6e 	bl	8003d20 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e1dc      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007452:	4b2e      	ldr	r3, [pc, #184]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x3d8>
 800745e:	e018      	b.n	8007492 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007460:	4b2a      	ldr	r3, [pc, #168]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a29      	ldr	r2, [pc, #164]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800746a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800746c:	f7fc fc58 	bl	8003d20 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007474:	f7fc fc54 	bl	8003d20 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e1c2      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007486:	4b21      	ldr	r3, [pc, #132]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8086 	beq.w	80075ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007510 <HAL_RCC_OscConfig+0x4a8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007510 <HAL_RCC_OscConfig+0x4a8>)
 80074a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074ac:	f7fc fc38 	bl	8003d20 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074b4:	f7fc fc34 	bl	8003d20 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b64      	cmp	r3, #100	@ 0x64
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e1a2      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c6:	4b12      	ldr	r3, [pc, #72]	@ (8007510 <HAL_RCC_OscConfig+0x4a8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d106      	bne.n	80074e8 <HAL_RCC_OscConfig+0x480>
 80074da:	4b0c      	ldr	r3, [pc, #48]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80074dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074de:	4a0b      	ldr	r2, [pc, #44]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80074e6:	e032      	b.n	800754e <HAL_RCC_OscConfig+0x4e6>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d111      	bne.n	8007514 <HAL_RCC_OscConfig+0x4ac>
 80074f0:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80074f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f4:	4a05      	ldr	r2, [pc, #20]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80074f6:	f023 0301 	bic.w	r3, r3, #1
 80074fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80074fc:	4b03      	ldr	r3, [pc, #12]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007500:	4a02      	ldr	r2, [pc, #8]	@ (800750c <HAL_RCC_OscConfig+0x4a4>)
 8007502:	f023 0304 	bic.w	r3, r3, #4
 8007506:	6713      	str	r3, [r2, #112]	@ 0x70
 8007508:	e021      	b.n	800754e <HAL_RCC_OscConfig+0x4e6>
 800750a:	bf00      	nop
 800750c:	58024400 	.word	0x58024400
 8007510:	58024800 	.word	0x58024800
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b05      	cmp	r3, #5
 800751a:	d10c      	bne.n	8007536 <HAL_RCC_OscConfig+0x4ce>
 800751c:	4b83      	ldr	r3, [pc, #524]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800751e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007520:	4a82      	ldr	r2, [pc, #520]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007522:	f043 0304 	orr.w	r3, r3, #4
 8007526:	6713      	str	r3, [r2, #112]	@ 0x70
 8007528:	4b80      	ldr	r3, [pc, #512]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800752a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752c:	4a7f      	ldr	r2, [pc, #508]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	6713      	str	r3, [r2, #112]	@ 0x70
 8007534:	e00b      	b.n	800754e <HAL_RCC_OscConfig+0x4e6>
 8007536:	4b7d      	ldr	r3, [pc, #500]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800753a:	4a7c      	ldr	r2, [pc, #496]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	6713      	str	r3, [r2, #112]	@ 0x70
 8007542:	4b7a      	ldr	r3, [pc, #488]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007546:	4a79      	ldr	r2, [pc, #484]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007548:	f023 0304 	bic.w	r3, r3, #4
 800754c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d015      	beq.n	8007582 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007556:	f7fc fbe3 	bl	8003d20 <HAL_GetTick>
 800755a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800755c:	e00a      	b.n	8007574 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800755e:	f7fc fbdf 	bl	8003d20 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800756c:	4293      	cmp	r3, r2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e14b      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007574:	4b6d      	ldr	r3, [pc, #436]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0ee      	beq.n	800755e <HAL_RCC_OscConfig+0x4f6>
 8007580:	e014      	b.n	80075ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007582:	f7fc fbcd 	bl	8003d20 <HAL_GetTick>
 8007586:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007588:	e00a      	b.n	80075a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758a:	f7fc fbc9 	bl	8003d20 <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e135      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075a0:	4b62      	ldr	r3, [pc, #392]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ee      	bne.n	800758a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 812a 	beq.w	800780a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075b6:	4b5d      	ldr	r3, [pc, #372]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075be:	2b18      	cmp	r3, #24
 80075c0:	f000 80ba 	beq.w	8007738 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	f040 8095 	bne.w	80076f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ce:	4b57      	ldr	r3, [pc, #348]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a56      	ldr	r2, [pc, #344]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80075d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075da:	f7fc fba1 	bl	8003d20 <HAL_GetTick>
 80075de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e2:	f7fc fb9d 	bl	8003d20 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e10b      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075f4:	4b4d      	ldr	r3, [pc, #308]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f0      	bne.n	80075e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007600:	4b4a      	ldr	r3, [pc, #296]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007602:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007604:	4b4a      	ldr	r3, [pc, #296]	@ (8007730 <HAL_RCC_OscConfig+0x6c8>)
 8007606:	4013      	ands	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007610:	0112      	lsls	r2, r2, #4
 8007612:	430a      	orrs	r2, r1
 8007614:	4945      	ldr	r1, [pc, #276]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007616:	4313      	orrs	r3, r2
 8007618:	628b      	str	r3, [r1, #40]	@ 0x28
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	3b01      	subs	r3, #1
 8007620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007628:	3b01      	subs	r3, #1
 800762a:	025b      	lsls	r3, r3, #9
 800762c:	b29b      	uxth	r3, r3
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007634:	3b01      	subs	r3, #1
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007642:	3b01      	subs	r3, #1
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800764a:	4938      	ldr	r1, [pc, #224]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800764c:	4313      	orrs	r3, r2
 800764e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007650:	4b36      	ldr	r3, [pc, #216]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007654:	4a35      	ldr	r2, [pc, #212]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800765c:	4b33      	ldr	r3, [pc, #204]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800765e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007660:	4b34      	ldr	r3, [pc, #208]	@ (8007734 <HAL_RCC_OscConfig+0x6cc>)
 8007662:	4013      	ands	r3, r2
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007668:	00d2      	lsls	r2, r2, #3
 800766a:	4930      	ldr	r1, [pc, #192]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800766c:	4313      	orrs	r3, r2
 800766e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007670:	4b2e      	ldr	r3, [pc, #184]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	f023 020c 	bic.w	r2, r3, #12
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800767c:	492b      	ldr	r1, [pc, #172]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800767e:	4313      	orrs	r3, r2
 8007680:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007682:	4b2a      	ldr	r3, [pc, #168]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	f023 0202 	bic.w	r2, r3, #2
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800768e:	4927      	ldr	r1, [pc, #156]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007690:	4313      	orrs	r3, r2
 8007692:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007694:	4b25      	ldr	r3, [pc, #148]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	4a24      	ldr	r2, [pc, #144]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 800769a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800769e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a0:	4b22      	ldr	r3, [pc, #136]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	4a21      	ldr	r2, [pc, #132]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076ac:	4b1f      	ldr	r3, [pc, #124]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	4a1e      	ldr	r2, [pc, #120]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076b8:	4b1c      	ldr	r3, [pc, #112]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	4a1b      	ldr	r2, [pc, #108]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076be:	f043 0301 	orr.w	r3, r3, #1
 80076c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c4:	4b19      	ldr	r3, [pc, #100]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a18      	ldr	r2, [pc, #96]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fc fb26 	bl	8003d20 <HAL_GetTick>
 80076d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076d8:	f7fc fb22 	bl	8003d20 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e090      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076ea:	4b10      	ldr	r3, [pc, #64]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x670>
 80076f6:	e088      	b.n	800780a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f8:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a0b      	ldr	r2, [pc, #44]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 80076fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007704:	f7fc fb0c 	bl	8003d20 <HAL_GetTick>
 8007708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800770c:	f7fc fb08 	bl	8003d20 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e076      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800771e:	4b03      	ldr	r3, [pc, #12]	@ (800772c <HAL_RCC_OscConfig+0x6c4>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f0      	bne.n	800770c <HAL_RCC_OscConfig+0x6a4>
 800772a:	e06e      	b.n	800780a <HAL_RCC_OscConfig+0x7a2>
 800772c:	58024400 	.word	0x58024400
 8007730:	fffffc0c 	.word	0xfffffc0c
 8007734:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007738:	4b36      	ldr	r3, [pc, #216]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 800773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800773e:	4b35      	ldr	r3, [pc, #212]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 8007740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007742:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007748:	2b01      	cmp	r3, #1
 800774a:	d031      	beq.n	80077b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	f003 0203 	and.w	r2, r3, #3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007756:	429a      	cmp	r2, r3
 8007758:	d12a      	bne.n	80077b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007766:	429a      	cmp	r2, r3
 8007768:	d122      	bne.n	80077b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007774:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007776:	429a      	cmp	r2, r3
 8007778:	d11a      	bne.n	80077b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	0a5b      	lsrs	r3, r3, #9
 800777e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007786:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007788:	429a      	cmp	r2, r3
 800778a:	d111      	bne.n	80077b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0c1b      	lsrs	r3, r3, #16
 8007790:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800779a:	429a      	cmp	r2, r3
 800779c:	d108      	bne.n	80077b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	0e1b      	lsrs	r3, r3, #24
 80077a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d001      	beq.n	80077b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e02b      	b.n	800780c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80077b4:	4b17      	ldr	r3, [pc, #92]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 80077b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b8:	08db      	lsrs	r3, r3, #3
 80077ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d01f      	beq.n	800780a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80077ca:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	4a11      	ldr	r2, [pc, #68]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 80077d0:	f023 0301 	bic.w	r3, r3, #1
 80077d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077d6:	f7fc faa3 	bl	8003d20 <HAL_GetTick>
 80077da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80077dc:	bf00      	nop
 80077de:	f7fc fa9f 	bl	8003d20 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d0f9      	beq.n	80077de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 80077ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <HAL_RCC_OscConfig+0x7b0>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80077f6:	00d2      	lsls	r2, r2, #3
 80077f8:	4906      	ldr	r1, [pc, #24]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80077fe:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	4a04      	ldr	r2, [pc, #16]	@ (8007814 <HAL_RCC_OscConfig+0x7ac>)
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3730      	adds	r7, #48	@ 0x30
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	58024400 	.word	0x58024400
 8007818:	ffff0007 	.word	0xffff0007

0800781c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e19c      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007830:	4b8a      	ldr	r3, [pc, #552]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d910      	bls.n	8007860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783e:	4b87      	ldr	r3, [pc, #540]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f023 020f 	bic.w	r2, r3, #15
 8007846:	4985      	ldr	r1, [pc, #532]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	4313      	orrs	r3, r2
 800784c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800784e:	4b83      	ldr	r3, [pc, #524]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d001      	beq.n	8007860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e184      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	4b7b      	ldr	r3, [pc, #492]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007878:	429a      	cmp	r2, r3
 800787a:	d908      	bls.n	800788e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800787c:	4b78      	ldr	r3, [pc, #480]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	4975      	ldr	r1, [pc, #468]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800788a:	4313      	orrs	r3, r2
 800788c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d010      	beq.n	80078bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695a      	ldr	r2, [r3, #20]
 800789e:	4b70      	ldr	r3, [pc, #448]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d908      	bls.n	80078bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	496a      	ldr	r1, [pc, #424]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d010      	beq.n	80078ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	4b64      	ldr	r3, [pc, #400]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d908      	bls.n	80078ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078d8:	4b61      	ldr	r3, [pc, #388]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	495e      	ldr	r1, [pc, #376]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d010      	beq.n	8007918 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69da      	ldr	r2, [r3, #28]
 80078fa:	4b59      	ldr	r3, [pc, #356]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007902:	429a      	cmp	r2, r3
 8007904:	d908      	bls.n	8007918 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007906:	4b56      	ldr	r3, [pc, #344]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	4953      	ldr	r1, [pc, #332]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007914:	4313      	orrs	r3, r2
 8007916:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	4b4d      	ldr	r3, [pc, #308]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 030f 	and.w	r3, r3, #15
 8007930:	429a      	cmp	r2, r3
 8007932:	d908      	bls.n	8007946 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007934:	4b4a      	ldr	r3, [pc, #296]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f023 020f 	bic.w	r2, r3, #15
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4947      	ldr	r1, [pc, #284]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007942:	4313      	orrs	r3, r2
 8007944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d055      	beq.n	80079fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007952:	4b43      	ldr	r3, [pc, #268]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	4940      	ldr	r1, [pc, #256]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007960:	4313      	orrs	r3, r2
 8007962:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d107      	bne.n	800797c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800796c:	4b3c      	ldr	r3, [pc, #240]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d121      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e0f6      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d107      	bne.n	8007994 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007984:	4b36      	ldr	r3, [pc, #216]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d115      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0ea      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d107      	bne.n	80079ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800799c:	4b30      	ldr	r3, [pc, #192]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d109      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0de      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e0d6      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f023 0207 	bic.w	r2, r3, #7
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4925      	ldr	r1, [pc, #148]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fc f9a7 	bl	8003d20 <HAL_GetTick>
 80079d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d4:	e00a      	b.n	80079ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d6:	f7fc f9a3 	bl	8003d20 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e0be      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d1eb      	bne.n	80079d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d010      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d208      	bcs.n	8007a2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a1a:	4b11      	ldr	r3, [pc, #68]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	f023 020f 	bic.w	r2, r3, #15
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	490e      	ldr	r1, [pc, #56]	@ (8007a60 <HAL_RCC_ClockConfig+0x244>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d214      	bcs.n	8007a64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a3a:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 020f 	bic.w	r2, r3, #15
 8007a42:	4906      	ldr	r1, [pc, #24]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a4a:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <HAL_RCC_ClockConfig+0x240>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d005      	beq.n	8007a64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e086      	b.n	8007b6a <HAL_RCC_ClockConfig+0x34e>
 8007a5c:	52002000 	.word	0x52002000
 8007a60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d010      	beq.n	8007a92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	4b3f      	ldr	r3, [pc, #252]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d208      	bcs.n	8007a92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a80:	4b3c      	ldr	r3, [pc, #240]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	4939      	ldr	r1, [pc, #228]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d010      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	4b34      	ldr	r3, [pc, #208]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d208      	bcs.n	8007ac0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007aae:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	492e      	ldr	r1, [pc, #184]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0310 	and.w	r3, r3, #16
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	4b28      	ldr	r3, [pc, #160]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d208      	bcs.n	8007aee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007adc:	4b25      	ldr	r3, [pc, #148]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	4922      	ldr	r1, [pc, #136]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69da      	ldr	r2, [r3, #28]
 8007afe:	4b1d      	ldr	r3, [pc, #116]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d208      	bcs.n	8007b1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4917      	ldr	r1, [pc, #92]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b1c:	f000 f834 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007b20:	4602      	mov	r2, r0
 8007b22:	4b14      	ldr	r3, [pc, #80]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	4912      	ldr	r1, [pc, #72]	@ (8007b78 <HAL_RCC_ClockConfig+0x35c>)
 8007b2e:	5ccb      	ldrb	r3, [r1, r3]
 8007b30:	f003 031f 	and.w	r3, r3, #31
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b74 <HAL_RCC_ClockConfig+0x358>)
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f003 030f 	and.w	r3, r3, #15
 8007b42:	4a0d      	ldr	r2, [pc, #52]	@ (8007b78 <HAL_RCC_ClockConfig+0x35c>)
 8007b44:	5cd3      	ldrb	r3, [r2, r3]
 8007b46:	f003 031f 	and.w	r3, r3, #31
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	4a0a      	ldr	r2, [pc, #40]	@ (8007b7c <HAL_RCC_ClockConfig+0x360>)
 8007b52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b54:	4a0a      	ldr	r2, [pc, #40]	@ (8007b80 <HAL_RCC_ClockConfig+0x364>)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b84 <HAL_RCC_ClockConfig+0x368>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fc f894 	bl	8003c8c <HAL_InitTick>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	58024400 	.word	0x58024400
 8007b78:	0800f060 	.word	0x0800f060
 8007b7c:	24000010 	.word	0x24000010
 8007b80:	2400000c 	.word	0x2400000c
 8007b84:	24000014 	.word	0x24000014

08007b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b089      	sub	sp, #36	@ 0x24
 8007b8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b8e:	4bb3      	ldr	r3, [pc, #716]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b96:	2b18      	cmp	r3, #24
 8007b98:	f200 8155 	bhi.w	8007e46 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007c09 	.word	0x08007c09
 8007ba8:	08007e47 	.word	0x08007e47
 8007bac:	08007e47 	.word	0x08007e47
 8007bb0:	08007e47 	.word	0x08007e47
 8007bb4:	08007e47 	.word	0x08007e47
 8007bb8:	08007e47 	.word	0x08007e47
 8007bbc:	08007e47 	.word	0x08007e47
 8007bc0:	08007e47 	.word	0x08007e47
 8007bc4:	08007c2f 	.word	0x08007c2f
 8007bc8:	08007e47 	.word	0x08007e47
 8007bcc:	08007e47 	.word	0x08007e47
 8007bd0:	08007e47 	.word	0x08007e47
 8007bd4:	08007e47 	.word	0x08007e47
 8007bd8:	08007e47 	.word	0x08007e47
 8007bdc:	08007e47 	.word	0x08007e47
 8007be0:	08007e47 	.word	0x08007e47
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	08007e47 	.word	0x08007e47
 8007bec:	08007e47 	.word	0x08007e47
 8007bf0:	08007e47 	.word	0x08007e47
 8007bf4:	08007e47 	.word	0x08007e47
 8007bf8:	08007e47 	.word	0x08007e47
 8007bfc:	08007e47 	.word	0x08007e47
 8007c00:	08007e47 	.word	0x08007e47
 8007c04:	08007c3b 	.word	0x08007c3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c08:	4b94      	ldr	r3, [pc, #592]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d009      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c14:	4b91      	ldr	r3, [pc, #580]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a90      	ldr	r2, [pc, #576]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c26:	e111      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c28:	4b8d      	ldr	r3, [pc, #564]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c2a:	61bb      	str	r3, [r7, #24]
      break;
 8007c2c:	e10e      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c2e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c30:	61bb      	str	r3, [r7, #24]
      break;
 8007c32:	e10b      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c34:	4b8c      	ldr	r3, [pc, #560]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c36:	61bb      	str	r3, [r7, #24]
      break;
 8007c38:	e108      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c3a:	4b88      	ldr	r3, [pc, #544]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c44:	4b85      	ldr	r3, [pc, #532]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	091b      	lsrs	r3, r3, #4
 8007c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c50:	4b82      	ldr	r3, [pc, #520]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c5a:	4b80      	ldr	r3, [pc, #512]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c5e:	08db      	lsrs	r3, r3, #3
 8007c60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80e1 	beq.w	8007e40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	f000 8083 	beq.w	8007d8c <HAL_RCC_GetSysClockFreq+0x204>
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f200 80a1 	bhi.w	8007dd0 <HAL_RCC_GetSysClockFreq+0x248>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x114>
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d056      	beq.n	8007d48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c9a:	e099      	b.n	8007dd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d02d      	beq.n	8007d04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	08db      	lsrs	r3, r3, #3
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	4a6b      	ldr	r2, [pc, #428]	@ (8007e60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd2:	4b62      	ldr	r3, [pc, #392]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ce6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007d02:	e087      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d16:	4b51      	ldr	r3, [pc, #324]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d2a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d46:	e065      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d52:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b40      	ldr	r3, [pc, #256]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d6e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d8a:	e043      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007db2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dce:	e021      	b.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	ee07 3a90 	vmov	s15, r3
 8007dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dda:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007de2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007df6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e14:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e18:	0a5b      	lsrs	r3, r3, #9
 8007e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e1e:	3301      	adds	r3, #1
 8007e20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e38:	ee17 3a90 	vmov	r3, s15
 8007e3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e3e:	e005      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61bb      	str	r3, [r7, #24]
      break;
 8007e44:	e002      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e46:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e48:	61bb      	str	r3, [r7, #24]
      break;
 8007e4a:	bf00      	nop
  }

  return sysclockfreq;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3724      	adds	r7, #36	@ 0x24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	58024400 	.word	0x58024400
 8007e60:	03d09000 	.word	0x03d09000
 8007e64:	003d0900 	.word	0x003d0900
 8007e68:	007f2815 	.word	0x007f2815
 8007e6c:	46000000 	.word	0x46000000
 8007e70:	4c742400 	.word	0x4c742400
 8007e74:	4a742400 	.word	0x4a742400
 8007e78:	4afe502a 	.word	0x4afe502a

08007e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e82:	f7ff fe81 	bl	8007b88 <HAL_RCC_GetSysClockFreq>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b10      	ldr	r3, [pc, #64]	@ (8007ecc <HAL_RCC_GetHCLKFreq+0x50>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	490f      	ldr	r1, [pc, #60]	@ (8007ed0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e94:	5ccb      	ldrb	r3, [r1, r3]
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <HAL_RCC_GetHCLKFreq+0x50>)
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	4a09      	ldr	r2, [pc, #36]	@ (8007ed0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eaa:	5cd3      	ldrb	r3, [r2, r3]
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	4a07      	ldr	r2, [pc, #28]	@ (8007ed4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007eb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007eba:	4a07      	ldr	r2, [pc, #28]	@ (8007ed8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ec0:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	58024400 	.word	0x58024400
 8007ed0:	0800f060 	.word	0x0800f060
 8007ed4:	24000010 	.word	0x24000010
 8007ed8:	2400000c 	.word	0x2400000c

08007edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ee0:	f7ff ffcc 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	4904      	ldr	r1, [pc, #16]	@ (8007f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ef2:	5ccb      	ldrb	r3, [r1, r3]
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	58024400 	.word	0x58024400
 8007f04:	0800f060 	.word	0x0800f060

08007f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f0c:	f7ff ffb6 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	4904      	ldr	r1, [pc, #16]	@ (8007f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f1e:	5ccb      	ldrb	r3, [r1, r3]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	58024400 	.word	0x58024400
 8007f30:	0800f060 	.word	0x0800f060

08007f34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f38:	b0c6      	sub	sp, #280	@ 0x118
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f40:	2300      	movs	r3, #0
 8007f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f58:	2500      	movs	r5, #0
 8007f5a:	ea54 0305 	orrs.w	r3, r4, r5
 8007f5e:	d049      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f6a:	d02f      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f70:	d828      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f76:	d01a      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f7c:	d822      	bhi.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f86:	d007      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f88:	e01c      	b.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f8a:	4bab      	ldr	r3, [pc, #684]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	4aaa      	ldr	r2, [pc, #680]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f96:	e01a      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fc25 	bl	80097f0 <RCCEx_PLL2_Config>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fac:	e00f      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb2:	3328      	adds	r3, #40	@ 0x28
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f001 fccc 	bl	8009954 <RCCEx_PLL3_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fc2:	e004      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007fca:	e000      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10a      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fd6:	4b98      	ldr	r3, [pc, #608]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe4:	4a94      	ldr	r2, [pc, #592]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fe6:	430b      	orrs	r3, r1
 8007fe8:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fea:	e003      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008000:	f04f 0900 	mov.w	r9, #0
 8008004:	ea58 0309 	orrs.w	r3, r8, r9
 8008008:	d047      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800800a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	2b04      	cmp	r3, #4
 8008012:	d82a      	bhi.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008014:	a201      	add	r2, pc, #4	@ (adr r2, 800801c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008031 	.word	0x08008031
 8008020:	0800803f 	.word	0x0800803f
 8008024:	08008055 	.word	0x08008055
 8008028:	08008073 	.word	0x08008073
 800802c:	08008073 	.word	0x08008073
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4b81      	ldr	r3, [pc, #516]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a80      	ldr	r2, [pc, #512]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800803c:	e01a      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008042:	3308      	adds	r3, #8
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fbd2 	bl	80097f0 <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008052:	e00f      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008058:	3328      	adds	r3, #40	@ 0x28
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 fc79 	bl	8009954 <RCCEx_PLL3_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800807c:	4b6e      	ldr	r3, [pc, #440]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800807e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008080:	f023 0107 	bic.w	r1, r3, #7
 8008084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	4a6b      	ldr	r2, [pc, #428]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800808c:	430b      	orrs	r3, r1
 800808e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008096:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800809a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80080a6:	f04f 0b00 	mov.w	fp, #0
 80080aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80080ae:	d05b      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80080b8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80080bc:	d03b      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80080be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80080c2:	d834      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080c8:	d037      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80080ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080ce:	d82e      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080d4:	d033      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80080d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080da:	d828      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e0:	d01a      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80080e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080e6:	d822      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80080ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080f0:	d007      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80080f2:	e01c      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080f4:	4b50      	ldr	r3, [pc, #320]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f8:	4a4f      	ldr	r2, [pc, #316]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008100:	e01e      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008106:	3308      	adds	r3, #8
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fb70 	bl	80097f0 <RCCEx_PLL2_Config>
 8008110:	4603      	mov	r3, r0
 8008112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008116:	e013      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800811c:	3328      	adds	r3, #40	@ 0x28
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f001 fc17 	bl	8009954 <RCCEx_PLL3_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800812c:	e008      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008134:	e004      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008136:	bf00      	nop
 8008138:	e002      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800813e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10b      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008148:	4b3b      	ldr	r3, [pc, #236]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800814a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800814c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008158:	4a37      	ldr	r2, [pc, #220]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800815a:	430b      	orrs	r3, r1
 800815c:	6593      	str	r3, [r2, #88]	@ 0x58
 800815e:	e003      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008174:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008178:	2300      	movs	r3, #0
 800817a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800817e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008182:	460b      	mov	r3, r1
 8008184:	4313      	orrs	r3, r2
 8008186:	d05d      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800818c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008190:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008194:	d03b      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008196:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800819a:	d834      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800819c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081a0:	d037      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80081a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081a6:	d82e      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081ac:	d033      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80081ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081b2:	d828      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081b8:	d01a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80081ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081be:	d822      	bhi.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80081c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081c8:	d007      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80081ca:	e01c      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	4a19      	ldr	r2, [pc, #100]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081d8:	e01e      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081de:	3308      	adds	r3, #8
 80081e0:	2100      	movs	r1, #0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 fb04 	bl	80097f0 <RCCEx_PLL2_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081ee:	e013      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f4:	3328      	adds	r3, #40	@ 0x28
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fbab 	bl	8009954 <RCCEx_PLL3_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008204:	e008      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800820c:	e004      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800820e:	bf00      	nop
 8008210:	e002      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10d      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008220:	4b05      	ldr	r3, [pc, #20]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008224:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008230:	4a01      	ldr	r2, [pc, #4]	@ (8008238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008232:	430b      	orrs	r3, r1
 8008234:	6593      	str	r3, [r2, #88]	@ 0x58
 8008236:	e005      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800823c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008250:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008254:	2300      	movs	r3, #0
 8008256:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800825a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800825e:	460b      	mov	r3, r1
 8008260:	4313      	orrs	r3, r2
 8008262:	d03a      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800826a:	2b30      	cmp	r3, #48	@ 0x30
 800826c:	d01f      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800826e:	2b30      	cmp	r3, #48	@ 0x30
 8008270:	d819      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008272:	2b20      	cmp	r3, #32
 8008274:	d00c      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008276:	2b20      	cmp	r3, #32
 8008278:	d815      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d019      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800827e:	2b10      	cmp	r3, #16
 8008280:	d111      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008282:	4baa      	ldr	r3, [pc, #680]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008286:	4aa9      	ldr	r2, [pc, #676]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800828c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800828e:	e011      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008294:	3308      	adds	r3, #8
 8008296:	2102      	movs	r1, #2
 8008298:	4618      	mov	r0, r3
 800829a:	f001 faa9 	bl	80097f0 <RCCEx_PLL2_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80082a4:	e006      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80082ac:	e002      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80082b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082bc:	4b9b      	ldr	r3, [pc, #620]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ca:	4a98      	ldr	r2, [pc, #608]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082cc:	430b      	orrs	r3, r1
 80082ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082d0:	e003      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80082d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082ea:	2300      	movs	r3, #0
 80082ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082f4:	460b      	mov	r3, r1
 80082f6:	4313      	orrs	r3, r2
 80082f8:	d051      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008304:	d035      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800830a:	d82e      	bhi.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800830c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008310:	d031      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008312:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008316:	d828      	bhi.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800831c:	d01a      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800831e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008322:	d822      	bhi.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800832c:	d007      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800832e:	e01c      	b.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008330:	4b7e      	ldr	r3, [pc, #504]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	4a7d      	ldr	r2, [pc, #500]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800833a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800833c:	e01c      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	3308      	adds	r3, #8
 8008344:	2100      	movs	r1, #0
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fa52 	bl	80097f0 <RCCEx_PLL2_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008352:	e011      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008358:	3328      	adds	r3, #40	@ 0x28
 800835a:	2100      	movs	r1, #0
 800835c:	4618      	mov	r0, r3
 800835e:	f001 faf9 	bl	8009954 <RCCEx_PLL3_Config>
 8008362:	4603      	mov	r3, r0
 8008364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008368:	e006      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008370:	e002      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008380:	4b6a      	ldr	r3, [pc, #424]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008384:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800838c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800838e:	4a67      	ldr	r2, [pc, #412]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008390:	430b      	orrs	r3, r1
 8008392:	6513      	str	r3, [r2, #80]	@ 0x50
 8008394:	e003      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800839a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800839e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80083aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083ae:	2300      	movs	r3, #0
 80083b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d053      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083c8:	d033      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80083ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083ce:	d82c      	bhi.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083d4:	d02f      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80083d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083da:	d826      	bhi.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083e0:	d02b      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80083e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083e6:	d820      	bhi.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ec:	d012      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80083ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083f2:	d81a      	bhi.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d022      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083fc:	d115      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008402:	3308      	adds	r3, #8
 8008404:	2101      	movs	r1, #1
 8008406:	4618      	mov	r0, r3
 8008408:	f001 f9f2 	bl	80097f0 <RCCEx_PLL2_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008412:	e015      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008418:	3328      	adds	r3, #40	@ 0x28
 800841a:	2101      	movs	r1, #1
 800841c:	4618      	mov	r0, r3
 800841e:	f001 fa99 	bl	8009954 <RCCEx_PLL3_Config>
 8008422:	4603      	mov	r3, r0
 8008424:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008428:	e00a      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008430:	e006      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008432:	bf00      	nop
 8008434:	e004      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800843e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008440:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008448:	4b38      	ldr	r3, [pc, #224]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800844a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800844c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008456:	4a35      	ldr	r2, [pc, #212]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008458:	430b      	orrs	r3, r1
 800845a:	6513      	str	r3, [r2, #80]	@ 0x50
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008462:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008472:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008476:	2300      	movs	r3, #0
 8008478:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800847c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008480:	460b      	mov	r3, r1
 8008482:	4313      	orrs	r3, r2
 8008484:	d058      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800848a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800848e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008492:	d033      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008498:	d82c      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800849a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849e:	d02f      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084a4:	d826      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084aa:	d02b      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80084ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80084b0:	d820      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b6:	d012      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80084b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084bc:	d81a      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d022      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084c6:	d115      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084cc:	3308      	adds	r3, #8
 80084ce:	2101      	movs	r1, #1
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 f98d 	bl	80097f0 <RCCEx_PLL2_Config>
 80084d6:	4603      	mov	r3, r0
 80084d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084dc:	e015      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084e2:	3328      	adds	r3, #40	@ 0x28
 80084e4:	2101      	movs	r1, #1
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 fa34 	bl	8009954 <RCCEx_PLL3_Config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084f2:	e00a      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80084fa:	e006      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084fc:	bf00      	nop
 80084fe:	e004      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008500:	bf00      	nop
 8008502:	e002      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008504:	bf00      	nop
 8008506:	e000      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10e      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008512:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008516:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800851e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008522:	4a02      	ldr	r2, [pc, #8]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008524:	430b      	orrs	r3, r1
 8008526:	6593      	str	r3, [r2, #88]	@ 0x58
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008530:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008534:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008548:	2300      	movs	r3, #0
 800854a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800854e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008552:	460b      	mov	r3, r1
 8008554:	4313      	orrs	r3, r2
 8008556:	d037      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800855c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d00e      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008568:	d816      	bhi.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d018      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800856e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008572:	d111      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008574:	4bc4      	ldr	r3, [pc, #784]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4ac3      	ldr	r2, [pc, #780]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800857e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008580:	e00f      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008586:	3308      	adds	r3, #8
 8008588:	2101      	movs	r1, #1
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f930 	bl	80097f0 <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008596:	e004      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80085a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085aa:	4bb7      	ldr	r3, [pc, #732]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80085b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b8:	4ab3      	ldr	r2, [pc, #716]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085ba:	430b      	orrs	r3, r1
 80085bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80085be:	e003      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80085c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085d8:	2300      	movs	r3, #0
 80085da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80085e2:	460b      	mov	r3, r1
 80085e4:	4313      	orrs	r3, r2
 80085e6:	d039      	beq.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d81c      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085f2:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008609 	.word	0x08008609
 8008600:	08008617 	.word	0x08008617
 8008604:	08008635 	.word	0x08008635
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008608:	4b9f      	ldr	r3, [pc, #636]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	4a9e      	ldr	r2, [pc, #632]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008614:	e00f      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800861a:	3308      	adds	r3, #8
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f8e6 	bl	80097f0 <RCCEx_PLL2_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800863e:	4b92      	ldr	r3, [pc, #584]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008642:	f023 0103 	bic.w	r1, r3, #3
 8008646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800864a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864c:	4a8e      	ldr	r2, [pc, #568]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800864e:	430b      	orrs	r3, r1
 8008650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008652:	e003      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008658:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800865c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800866c:	2300      	movs	r3, #0
 800866e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008672:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	f000 8099 	beq.w	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800867e:	4b83      	ldr	r3, [pc, #524]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a82      	ldr	r2, [pc, #520]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008688:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800868a:	f7fb fb49 	bl	8003d20 <HAL_GetTick>
 800868e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008692:	e00b      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008694:	f7fb fb44 	bl	8003d20 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b64      	cmp	r3, #100	@ 0x64
 80086a2:	d903      	bls.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ac:	4b77      	ldr	r3, [pc, #476]	@ (800888c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0ed      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d173      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086c0:	4b71      	ldr	r3, [pc, #452]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80086cc:	4053      	eors	r3, r2
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d015      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086e2:	4b69      	ldr	r3, [pc, #420]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a68      	ldr	r2, [pc, #416]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086ee:	4b66      	ldr	r3, [pc, #408]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	4a65      	ldr	r2, [pc, #404]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086fa:	4a63      	ldr	r2, [pc, #396]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008700:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800870a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870e:	d118      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fb fb06 	bl	8003d20 <HAL_GetTick>
 8008714:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008718:	e00d      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800871a:	f7fb fb01 	bl	8003d20 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008724:	1ad2      	subs	r2, r2, r3
 8008726:	f241 3388 	movw	r3, #5000	@ 0x1388
 800872a:	429a      	cmp	r2, r3
 800872c:	d903      	bls.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008734:	e005      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008736:	4b54      	ldr	r3, [pc, #336]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0eb      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008746:	2b00      	cmp	r3, #0
 8008748:	d129      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800874a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800875a:	d10e      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800875c:	4b4a      	ldr	r3, [pc, #296]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800876c:	091a      	lsrs	r2, r3, #4
 800876e:	4b48      	ldr	r3, [pc, #288]	@ (8008890 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008770:	4013      	ands	r3, r2
 8008772:	4a45      	ldr	r2, [pc, #276]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008774:	430b      	orrs	r3, r1
 8008776:	6113      	str	r3, [r2, #16]
 8008778:	e005      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800877a:	4b43      	ldr	r3, [pc, #268]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	4a42      	ldr	r2, [pc, #264]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008780:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008784:	6113      	str	r3, [r2, #16]
 8008786:	4b40      	ldr	r3, [pc, #256]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008788:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800878a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008796:	4a3c      	ldr	r2, [pc, #240]	@ (8008888 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008798:	430b      	orrs	r3, r1
 800879a:	6713      	str	r3, [r2, #112]	@ 0x70
 800879c:	e008      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800879e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80087a6:	e003      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f002 0301 	and.w	r3, r2, #1
 80087bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087ca:	460b      	mov	r3, r1
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f000 808f 	beq.w	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087d8:	2b28      	cmp	r3, #40	@ 0x28
 80087da:	d871      	bhi.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087dc:	a201      	add	r2, pc, #4	@ (adr r2, 80087e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	080088c9 	.word	0x080088c9
 80087e8:	080088c1 	.word	0x080088c1
 80087ec:	080088c1 	.word	0x080088c1
 80087f0:	080088c1 	.word	0x080088c1
 80087f4:	080088c1 	.word	0x080088c1
 80087f8:	080088c1 	.word	0x080088c1
 80087fc:	080088c1 	.word	0x080088c1
 8008800:	080088c1 	.word	0x080088c1
 8008804:	08008895 	.word	0x08008895
 8008808:	080088c1 	.word	0x080088c1
 800880c:	080088c1 	.word	0x080088c1
 8008810:	080088c1 	.word	0x080088c1
 8008814:	080088c1 	.word	0x080088c1
 8008818:	080088c1 	.word	0x080088c1
 800881c:	080088c1 	.word	0x080088c1
 8008820:	080088c1 	.word	0x080088c1
 8008824:	080088ab 	.word	0x080088ab
 8008828:	080088c1 	.word	0x080088c1
 800882c:	080088c1 	.word	0x080088c1
 8008830:	080088c1 	.word	0x080088c1
 8008834:	080088c1 	.word	0x080088c1
 8008838:	080088c1 	.word	0x080088c1
 800883c:	080088c1 	.word	0x080088c1
 8008840:	080088c1 	.word	0x080088c1
 8008844:	080088c9 	.word	0x080088c9
 8008848:	080088c1 	.word	0x080088c1
 800884c:	080088c1 	.word	0x080088c1
 8008850:	080088c1 	.word	0x080088c1
 8008854:	080088c1 	.word	0x080088c1
 8008858:	080088c1 	.word	0x080088c1
 800885c:	080088c1 	.word	0x080088c1
 8008860:	080088c1 	.word	0x080088c1
 8008864:	080088c9 	.word	0x080088c9
 8008868:	080088c1 	.word	0x080088c1
 800886c:	080088c1 	.word	0x080088c1
 8008870:	080088c1 	.word	0x080088c1
 8008874:	080088c1 	.word	0x080088c1
 8008878:	080088c1 	.word	0x080088c1
 800887c:	080088c1 	.word	0x080088c1
 8008880:	080088c1 	.word	0x080088c1
 8008884:	080088c9 	.word	0x080088c9
 8008888:	58024400 	.word	0x58024400
 800888c:	58024800 	.word	0x58024800
 8008890:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008898:	3308      	adds	r3, #8
 800889a:	2101      	movs	r1, #1
 800889c:	4618      	mov	r0, r3
 800889e:	f000 ffa7 	bl	80097f0 <RCCEx_PLL2_Config>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088a8:	e00f      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ae:	3328      	adds	r3, #40	@ 0x28
 80088b0:	2101      	movs	r1, #1
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f84e 	bl	8009954 <RCCEx_PLL3_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088be:	e004      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088c6:	e000      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088d2:	4bbf      	ldr	r3, [pc, #764]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088e0:	4abb      	ldr	r2, [pc, #748]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088e2:	430b      	orrs	r3, r1
 80088e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80088e6:	e003      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f002 0302 	and.w	r3, r2, #2
 80088fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008906:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	d041      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008916:	2b05      	cmp	r3, #5
 8008918:	d824      	bhi.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	0800896d 	.word	0x0800896d
 8008924:	08008939 	.word	0x08008939
 8008928:	0800894f 	.word	0x0800894f
 800892c:	0800896d 	.word	0x0800896d
 8008930:	0800896d 	.word	0x0800896d
 8008934:	0800896d 	.word	0x0800896d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800893c:	3308      	adds	r3, #8
 800893e:	2101      	movs	r1, #1
 8008940:	4618      	mov	r0, r3
 8008942:	f000 ff55 	bl	80097f0 <RCCEx_PLL2_Config>
 8008946:	4603      	mov	r3, r0
 8008948:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800894c:	e00f      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800894e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008952:	3328      	adds	r3, #40	@ 0x28
 8008954:	2101      	movs	r1, #1
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fffc 	bl	8009954 <RCCEx_PLL3_Config>
 800895c:	4603      	mov	r3, r0
 800895e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008962:	e004      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800896a:	e000      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800896c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800896e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008976:	4b96      	ldr	r3, [pc, #600]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800897a:	f023 0107 	bic.w	r1, r3, #7
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008984:	4a92      	ldr	r2, [pc, #584]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008986:	430b      	orrs	r3, r1
 8008988:	6553      	str	r3, [r2, #84]	@ 0x54
 800898a:	e003      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f002 0304 	and.w	r3, r2, #4
 80089a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089a4:	2300      	movs	r3, #0
 80089a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089ae:	460b      	mov	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	d044      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089bc:	2b05      	cmp	r3, #5
 80089be:	d825      	bhi.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80089c0:	a201      	add	r2, pc, #4	@ (adr r2, 80089c8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80089c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c6:	bf00      	nop
 80089c8:	08008a15 	.word	0x08008a15
 80089cc:	080089e1 	.word	0x080089e1
 80089d0:	080089f7 	.word	0x080089f7
 80089d4:	08008a15 	.word	0x08008a15
 80089d8:	08008a15 	.word	0x08008a15
 80089dc:	08008a15 	.word	0x08008a15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089e4:	3308      	adds	r3, #8
 80089e6:	2101      	movs	r1, #1
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 ff01 	bl	80097f0 <RCCEx_PLL2_Config>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089f4:	e00f      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089fa:	3328      	adds	r3, #40	@ 0x28
 80089fc:	2101      	movs	r1, #1
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 ffa8 	bl	8009954 <RCCEx_PLL3_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a0a:	e004      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a12:	e000      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10b      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a1e:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a22:	f023 0107 	bic.w	r1, r3, #7
 8008a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2e:	4a68      	ldr	r2, [pc, #416]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a30:	430b      	orrs	r3, r1
 8008a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a34:	e003      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f002 0320 	and.w	r3, r2, #32
 8008a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	d055      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a6a:	d033      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a70:	d82c      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a76:	d02f      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a7c:	d826      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a82:	d02b      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a88:	d820      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a8e:	d012      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a94:	d81a      	bhi.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d022      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a9e:	d115      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fea1 	bl	80097f0 <RCCEx_PLL2_Config>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008ab4:	e015      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aba:	3328      	adds	r3, #40	@ 0x28
 8008abc:	2102      	movs	r1, #2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 ff48 	bl	8009954 <RCCEx_PLL3_Config>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008aca:	e00a      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ad2:	e006      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ad4:	bf00      	nop
 8008ad6:	e004      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ad8:	bf00      	nop
 8008ada:	e002      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008adc:	bf00      	nop
 8008ade:	e000      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10b      	bne.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aea:	4b39      	ldr	r3, [pc, #228]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008afa:	4a35      	ldr	r2, [pc, #212]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b00:	e003      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b20:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b24:	460b      	mov	r3, r1
 8008b26:	4313      	orrs	r3, r2
 8008b28:	d058      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008b32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b36:	d033      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008b38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b3c:	d82c      	bhi.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b42:	d02f      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b48:	d826      	bhi.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b4e:	d02b      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b54:	d820      	bhi.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b5a:	d012      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b60:	d81a      	bhi.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d022      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b6a:	d115      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b70:	3308      	adds	r3, #8
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fe3b 	bl	80097f0 <RCCEx_PLL2_Config>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b80:	e015      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b86:	3328      	adds	r3, #40	@ 0x28
 8008b88:	2102      	movs	r1, #2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fee2 	bl	8009954 <RCCEx_PLL3_Config>
 8008b90:	4603      	mov	r3, r0
 8008b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b96:	e00a      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b9e:	e006      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008ba0:	bf00      	nop
 8008ba2:	e004      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008ba4:	bf00      	nop
 8008ba6:	e002      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e000      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10e      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bb6:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bc6:	4a02      	ldr	r2, [pc, #8]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bcc:	e006      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008bce:	bf00      	nop
 8008bd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008be8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bf2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	d055      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c04:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c08:	d033      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008c0a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008c0e:	d82c      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c14:	d02f      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c1a:	d826      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c1c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c20:	d02b      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c22:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c26:	d820      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c2c:	d012      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c32:	d81a      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d022      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c3c:	d115      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c42:	3308      	adds	r3, #8
 8008c44:	2100      	movs	r1, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 fdd2 	bl	80097f0 <RCCEx_PLL2_Config>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c52:	e015      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c58:	3328      	adds	r3, #40	@ 0x28
 8008c5a:	2102      	movs	r1, #2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 fe79 	bl	8009954 <RCCEx_PLL3_Config>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c68:	e00a      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c70:	e006      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c72:	bf00      	nop
 8008c74:	e004      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c76:	bf00      	nop
 8008c78:	e002      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10b      	bne.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c88:	4ba0      	ldr	r3, [pc, #640]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c8c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c98:	4a9c      	ldr	r2, [pc, #624]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c9e:	e003      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f002 0308 	and.w	r3, r2, #8
 8008cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008cbe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	d01e      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd4:	d10c      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cda:	3328      	adds	r3, #40	@ 0x28
 8008cdc:	2102      	movs	r1, #2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fe38 	bl	8009954 <RCCEx_PLL3_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008cf0:	4b86      	ldr	r3, [pc, #536]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d00:	4a82      	ldr	r2, [pc, #520]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d02:	430b      	orrs	r3, r1
 8008d04:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f002 0310 	and.w	r3, r2, #16
 8008d12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d16:	2300      	movs	r3, #0
 8008d18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d1c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d01e      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d32:	d10c      	bne.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d38:	3328      	adds	r3, #40	@ 0x28
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f000 fe09 	bl	8009954 <RCCEx_PLL3_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d72:	2300      	movs	r3, #0
 8008d74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d76:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	d03e      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d8c:	d022      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d92:	d81b      	bhi.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d9c:	d00b      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008d9e:	e015      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da4:	3308      	adds	r3, #8
 8008da6:	2100      	movs	r1, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fd21 	bl	80097f0 <RCCEx_PLL2_Config>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008db4:	e00f      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dba:	3328      	adds	r3, #40	@ 0x28
 8008dbc:	2102      	movs	r1, #2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fdc8 	bl	8009954 <RCCEx_PLL3_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dca:	e004      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10b      	bne.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008dde:	4b4b      	ldr	r3, [pc, #300]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008dee:	4a47      	ldr	r2, [pc, #284]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008df0:	430b      	orrs	r3, r1
 8008df2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008df4:	e003      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008e0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e14:	460b      	mov	r3, r1
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d03b      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e26:	d01f      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e2c:	d818      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e32:	d003      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008e34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e38:	d007      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008e3a:	e011      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3c:	4b33      	ldr	r3, [pc, #204]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e40:	4a32      	ldr	r2, [pc, #200]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e48:	e00f      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4e:	3328      	adds	r3, #40	@ 0x28
 8008e50:	2101      	movs	r1, #1
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fd7e 	bl	8009954 <RCCEx_PLL3_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e5e:	e004      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e66:	e000      	b.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10b      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e72:	4b26      	ldr	r3, [pc, #152]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e82:	4a22      	ldr	r2, [pc, #136]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e88:	e003      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ea4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	d034      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ebc:	d007      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008ebe:	e011      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec0:	4b12      	ldr	r3, [pc, #72]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec4:	4a11      	ldr	r2, [pc, #68]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ecc:	e00e      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fc8a 	bl	80097f0 <RCCEx_PLL2_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ee2:	e003      	b.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10d      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ef4:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ef8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f02:	4a02      	ldr	r2, [pc, #8]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f04:	430b      	orrs	r3, r1
 8008f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008f08:	e006      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f24:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f26:	2300      	movs	r3, #0
 8008f28:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f2a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4313      	orrs	r3, r2
 8008f32:	d00c      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f38:	3328      	adds	r3, #40	@ 0x28
 8008f3a:	2102      	movs	r1, #2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fd09 	bl	8009954 <RCCEx_PLL3_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f60:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f64:	460b      	mov	r3, r1
 8008f66:	4313      	orrs	r3, r2
 8008f68:	d036      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f74:	d018      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f7a:	d811      	bhi.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f80:	d014      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f86:	d80b      	bhi.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d011      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f90:	d106      	bne.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f92:	4bb7      	ldr	r3, [pc, #732]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f96:	4ab6      	ldr	r2, [pc, #728]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fa6:	e004      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008fa8:	bf00      	nop
 8008faa:	e002      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fba:	4bad      	ldr	r3, [pc, #692]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008fc8:	4aa9      	ldr	r2, [pc, #676]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fce:	e003      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008fe4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	d009      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ff4:	4b9e      	ldr	r3, [pc, #632]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	4a9b      	ldr	r2, [pc, #620]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009004:	430b      	orrs	r3, r1
 8009006:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009016:	2300      	movs	r3, #0
 8009018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800901a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800901e:	460b      	mov	r3, r1
 8009020:	4313      	orrs	r3, r2
 8009022:	d009      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009024:	4b92      	ldr	r3, [pc, #584]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009028:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800902c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009030:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009032:	4a8f      	ldr	r2, [pc, #572]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009034:	430b      	orrs	r3, r1
 8009036:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009044:	643b      	str	r3, [r7, #64]	@ 0x40
 8009046:	2300      	movs	r3, #0
 8009048:	647b      	str	r3, [r7, #68]	@ 0x44
 800904a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800904e:	460b      	mov	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	d00e      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009054:	4b86      	ldr	r3, [pc, #536]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	4a85      	ldr	r2, [pc, #532]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800905a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800905e:	6113      	str	r3, [r2, #16]
 8009060:	4b83      	ldr	r3, [pc, #524]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009062:	6919      	ldr	r1, [r3, #16]
 8009064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800906c:	4a80      	ldr	r2, [pc, #512]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800906e:	430b      	orrs	r3, r1
 8009070:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800907e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009080:	2300      	movs	r3, #0
 8009082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009084:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009088:	460b      	mov	r3, r1
 800908a:	4313      	orrs	r3, r2
 800908c:	d009      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800908e:	4b78      	ldr	r3, [pc, #480]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009092:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800909a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800909c:	4a74      	ldr	r2, [pc, #464]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800909e:	430b      	orrs	r3, r1
 80090a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b0:	2300      	movs	r3, #0
 80090b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090b8:	460b      	mov	r3, r1
 80090ba:	4313      	orrs	r3, r2
 80090bc:	d00a      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090be:	4b6c      	ldr	r3, [pc, #432]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80090c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ce:	4a68      	ldr	r2, [pc, #416]	@ (8009270 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090d0:	430b      	orrs	r3, r1
 80090d2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	2100      	movs	r1, #0
 80090de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090ea:	460b      	mov	r3, r1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	d011      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f4:	3308      	adds	r3, #8
 80090f6:	2100      	movs	r1, #0
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fb79 	bl	80097f0 <RCCEx_PLL2_Config>
 80090fe:	4603      	mov	r3, r0
 8009100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009108:	2b00      	cmp	r3, #0
 800910a:	d003      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009110:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	2100      	movs	r1, #0
 800911e:	6239      	str	r1, [r7, #32]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	627b      	str	r3, [r7, #36]	@ 0x24
 8009126:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800912a:	460b      	mov	r3, r1
 800912c:	4313      	orrs	r3, r2
 800912e:	d011      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009134:	3308      	adds	r3, #8
 8009136:	2101      	movs	r1, #1
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fb59 	bl	80097f0 <RCCEx_PLL2_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	2100      	movs	r1, #0
 800915e:	61b9      	str	r1, [r7, #24]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800916a:	460b      	mov	r3, r1
 800916c:	4313      	orrs	r3, r2
 800916e:	d011      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009174:	3308      	adds	r3, #8
 8009176:	2102      	movs	r1, #2
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fb39 	bl	80097f0 <RCCEx_PLL2_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800918c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009190:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919c:	2100      	movs	r1, #0
 800919e:	6139      	str	r1, [r7, #16]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091aa:	460b      	mov	r3, r1
 80091ac:	4313      	orrs	r3, r2
 80091ae:	d011      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b4:	3328      	adds	r3, #40	@ 0x28
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 fbcb 	bl	8009954 <RCCEx_PLL3_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80091c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	2100      	movs	r1, #0
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091ea:	460b      	mov	r3, r1
 80091ec:	4313      	orrs	r3, r2
 80091ee:	d011      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f4:	3328      	adds	r3, #40	@ 0x28
 80091f6:	2101      	movs	r1, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 fbab 	bl	8009954 <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	2100      	movs	r1, #0
 800921e:	6039      	str	r1, [r7, #0]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	e9d7 1200 	ldrd	r1, r2, [r7]
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	d011      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009234:	3328      	adds	r3, #40	@ 0x28
 8009236:	2102      	movs	r1, #2
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fb8b 	bl	8009954 <RCCEx_PLL3_Config>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009248:	2b00      	cmp	r3, #0
 800924a:	d003      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009250:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009254:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	e000      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
}
 8009262:	4618      	mov	r0, r3
 8009264:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009268:	46bd      	mov	sp, r7
 800926a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800926e:	bf00      	nop
 8009270:	58024400 	.word	0x58024400

08009274 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009278:	f7fe fe00 	bl	8007e7c <HAL_RCC_GetHCLKFreq>
 800927c:	4602      	mov	r2, r0
 800927e:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	091b      	lsrs	r3, r3, #4
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	4904      	ldr	r1, [pc, #16]	@ (800929c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800928a:	5ccb      	ldrb	r3, [r1, r3]
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009294:	4618      	mov	r0, r3
 8009296:	bd80      	pop	{r7, pc}
 8009298:	58024400 	.word	0x58024400
 800929c:	0800f060 	.word	0x0800f060

080092a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b089      	sub	sp, #36	@ 0x24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80092a8:	4ba1      	ldr	r3, [pc, #644]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092b2:	4b9f      	ldr	r3, [pc, #636]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b6:	0b1b      	lsrs	r3, r3, #12
 80092b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092be:	4b9c      	ldr	r3, [pc, #624]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c2:	091b      	lsrs	r3, r3, #4
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092ca:	4b99      	ldr	r3, [pc, #612]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ce:	08db      	lsrs	r3, r3, #3
 80092d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8111 	beq.w	8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	f000 8083 	beq.w	80093fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	f200 80a1 	bhi.w	8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d056      	beq.n	80093b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800930a:	e099      	b.n	8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800930c:	4b88      	ldr	r3, [pc, #544]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d02d      	beq.n	8009374 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009318:	4b85      	ldr	r3, [pc, #532]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	08db      	lsrs	r3, r3, #3
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	4a84      	ldr	r2, [pc, #528]	@ (8009534 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009324:	fa22 f303 	lsr.w	r3, r2, r3
 8009328:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	ee07 3a90 	vmov	s15, r3
 8009330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009342:	4b7b      	ldr	r3, [pc, #492]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009352:	ed97 6a03 	vldr	s12, [r7, #12]
 8009356:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800935a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800935e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800936e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009372:	e087      	b.n	8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800953c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009386:	4b6a      	ldr	r3, [pc, #424]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009396:	ed97 6a03 	vldr	s12, [r7, #12]
 800939a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800939e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093b6:	e065      	b.n	8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ca:	4b59      	ldr	r3, [pc, #356]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093da:	ed97 6a03 	vldr	s12, [r7, #12]
 80093de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093fa:	e043      	b.n	8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b48      	ldr	r3, [pc, #288]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009422:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800943e:	e021      	b.n	8009484 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b37      	ldr	r3, [pc, #220]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a03 	vldr	s12, [r7, #12]
 8009466:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009538 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009482:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009484:	4b2a      	ldr	r3, [pc, #168]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009488:	0a5b      	lsrs	r3, r3, #9
 800948a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800949a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800949e:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094aa:	ee17 2a90 	vmov	r2, s15
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b6:	0c1b      	lsrs	r3, r3, #16
 80094b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094bc:	ee07 3a90 	vmov	s15, r3
 80094c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d8:	ee17 2a90 	vmov	r2, s15
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094e0:	4b13      	ldr	r3, [pc, #76]	@ (8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	0e1b      	lsrs	r3, r3, #24
 80094e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ea:	ee07 3a90 	vmov	s15, r3
 80094ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80094fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009506:	ee17 2a90 	vmov	r2, s15
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800950e:	e008      	b.n	8009522 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	609a      	str	r2, [r3, #8]
}
 8009522:	bf00      	nop
 8009524:	3724      	adds	r7, #36	@ 0x24
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	58024400 	.word	0x58024400
 8009534:	03d09000 	.word	0x03d09000
 8009538:	46000000 	.word	0x46000000
 800953c:	4c742400 	.word	0x4c742400
 8009540:	4a742400 	.word	0x4a742400
 8009544:	4afe502a 	.word	0x4afe502a

08009548 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	@ 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009550:	4ba1      	ldr	r3, [pc, #644]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009554:	f003 0303 	and.w	r3, r3, #3
 8009558:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800955a:	4b9f      	ldr	r3, [pc, #636]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955e:	0d1b      	lsrs	r3, r3, #20
 8009560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009564:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009566:	4b9c      	ldr	r3, [pc, #624]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956a:	0a1b      	lsrs	r3, r3, #8
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009572:	4b99      	ldr	r3, [pc, #612]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009576:	08db      	lsrs	r3, r3, #3
 8009578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	fb02 f303 	mul.w	r3, r2, r3
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 8111 	beq.w	80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b02      	cmp	r3, #2
 800959a:	f000 8083 	beq.w	80096a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	f200 80a1 	bhi.w	80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d056      	beq.n	8009660 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095b2:	e099      	b.n	80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b4:	4b88      	ldr	r3, [pc, #544]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0320 	and.w	r3, r3, #32
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d02d      	beq.n	800961c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c0:	4b85      	ldr	r3, [pc, #532]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	08db      	lsrs	r3, r3, #3
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	4a84      	ldr	r2, [pc, #528]	@ (80097dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095cc:	fa22 f303 	lsr.w	r3, r2, r3
 80095d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ea:	4b7b      	ldr	r3, [pc, #492]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800960e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800961a:	e087      	b.n	800972c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800962a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962e:	4b6a      	ldr	r3, [pc, #424]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009642:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800965e:	e065      	b.n	800972c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800966e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009672:	4b59      	ldr	r3, [pc, #356]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009682:	ed97 6a03 	vldr	s12, [r7, #12]
 8009686:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800968a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a2:	e043      	b.n	800972c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b6:	4b48      	ldr	r3, [pc, #288]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096e6:	e021      	b.n	800972c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fa:	4b37      	ldr	r3, [pc, #220]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970a:	ed97 6a03 	vldr	s12, [r7, #12]
 800970e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800971e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800972a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800972c:	4b2a      	ldr	r3, [pc, #168]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800972e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009730:	0a5b      	lsrs	r3, r3, #9
 8009732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009746:	edd7 6a07 	vldr	s13, [r7, #28]
 800974a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800974e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009752:	ee17 2a90 	vmov	r2, s15
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800975a:	4b1f      	ldr	r3, [pc, #124]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800975c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009764:	ee07 3a90 	vmov	s15, r3
 8009768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009770:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009774:	edd7 6a07 	vldr	s13, [r7, #28]
 8009778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800977c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009780:	ee17 2a90 	vmov	r2, s15
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009788:	4b13      	ldr	r3, [pc, #76]	@ (80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800978a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978c:	0e1b      	lsrs	r3, r3, #24
 800978e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800979e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ae:	ee17 2a90 	vmov	r2, s15
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097b6:	e008      	b.n	80097ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	609a      	str	r2, [r3, #8]
}
 80097ca:	bf00      	nop
 80097cc:	3724      	adds	r7, #36	@ 0x24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	58024400 	.word	0x58024400
 80097dc:	03d09000 	.word	0x03d09000
 80097e0:	46000000 	.word	0x46000000
 80097e4:	4c742400 	.word	0x4c742400
 80097e8:	4a742400 	.word	0x4a742400
 80097ec:	4afe502a 	.word	0x4afe502a

080097f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097fe:	4b53      	ldr	r3, [pc, #332]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	2b03      	cmp	r3, #3
 8009808:	d101      	bne.n	800980e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e099      	b.n	8009942 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800980e:	4b4f      	ldr	r3, [pc, #316]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a4e      	ldr	r2, [pc, #312]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009814:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800981a:	f7fa fa81 	bl	8003d20 <HAL_GetTick>
 800981e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009820:	e008      	b.n	8009834 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009822:	f7fa fa7d 	bl	8003d20 <HAL_GetTick>
 8009826:	4602      	mov	r2, r0
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	2b02      	cmp	r3, #2
 800982e:	d901      	bls.n	8009834 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e086      	b.n	8009942 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009834:	4b45      	ldr	r3, [pc, #276]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f0      	bne.n	8009822 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009840:	4b42      	ldr	r3, [pc, #264]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009844:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	031b      	lsls	r3, r3, #12
 800984e:	493f      	ldr	r1, [pc, #252]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009850:	4313      	orrs	r3, r2
 8009852:	628b      	str	r3, [r1, #40]	@ 0x28
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	3b01      	subs	r3, #1
 800985a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	3b01      	subs	r3, #1
 8009864:	025b      	lsls	r3, r3, #9
 8009866:	b29b      	uxth	r3, r3
 8009868:	431a      	orrs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	3b01      	subs	r3, #1
 8009870:	041b      	lsls	r3, r3, #16
 8009872:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	3b01      	subs	r3, #1
 800987e:	061b      	lsls	r3, r3, #24
 8009880:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009884:	4931      	ldr	r1, [pc, #196]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009886:	4313      	orrs	r3, r2
 8009888:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800988a:	4b30      	ldr	r3, [pc, #192]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 800988c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800988e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	492d      	ldr	r1, [pc, #180]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009898:	4313      	orrs	r3, r2
 800989a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800989c:	4b2b      	ldr	r3, [pc, #172]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 800989e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a0:	f023 0220 	bic.w	r2, r3, #32
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	4928      	ldr	r1, [pc, #160]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80098ae:	4b27      	ldr	r3, [pc, #156]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	4a26      	ldr	r2, [pc, #152]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098b4:	f023 0310 	bic.w	r3, r3, #16
 80098b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098ba:	4b24      	ldr	r3, [pc, #144]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098be:	4b24      	ldr	r3, [pc, #144]	@ (8009950 <RCCEx_PLL2_Config+0x160>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	69d2      	ldr	r2, [r2, #28]
 80098c6:	00d2      	lsls	r2, r2, #3
 80098c8:	4920      	ldr	r1, [pc, #128]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098ce:	4b1f      	ldr	r3, [pc, #124]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d2:	4a1e      	ldr	r2, [pc, #120]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098d4:	f043 0310 	orr.w	r3, r3, #16
 80098d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098e0:	4b1a      	ldr	r3, [pc, #104]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e4:	4a19      	ldr	r2, [pc, #100]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098ec:	e00f      	b.n	800990e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d106      	bne.n	8009902 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098f4:	4b15      	ldr	r3, [pc, #84]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f8:	4a14      	ldr	r2, [pc, #80]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 80098fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009900:	e005      	b.n	800990e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009902:	4b12      	ldr	r3, [pc, #72]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	4a11      	ldr	r2, [pc, #68]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800990c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800990e:	4b0f      	ldr	r3, [pc, #60]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a0e      	ldr	r2, [pc, #56]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009914:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800991a:	f7fa fa01 	bl	8003d20 <HAL_GetTick>
 800991e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009920:	e008      	b.n	8009934 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009922:	f7fa f9fd 	bl	8003d20 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b02      	cmp	r3, #2
 800992e:	d901      	bls.n	8009934 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009930:	2303      	movs	r3, #3
 8009932:	e006      	b.n	8009942 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <RCCEx_PLL2_Config+0x15c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d0f0      	beq.n	8009922 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	58024400 	.word	0x58024400
 8009950:	ffff0007 	.word	0xffff0007

08009954 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009962:	4b53      	ldr	r3, [pc, #332]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	2b03      	cmp	r3, #3
 800996c:	d101      	bne.n	8009972 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e099      	b.n	8009aa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009972:	4b4f      	ldr	r3, [pc, #316]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a4e      	ldr	r2, [pc, #312]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800997c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800997e:	f7fa f9cf 	bl	8003d20 <HAL_GetTick>
 8009982:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009984:	e008      	b.n	8009998 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009986:	f7fa f9cb 	bl	8003d20 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	d901      	bls.n	8009998 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e086      	b.n	8009aa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009998:	4b45      	ldr	r3, [pc, #276]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f0      	bne.n	8009986 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099a4:	4b42      	ldr	r3, [pc, #264]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	051b      	lsls	r3, r3, #20
 80099b2:	493f      	ldr	r1, [pc, #252]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	3b01      	subs	r3, #1
 80099be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	025b      	lsls	r3, r3, #9
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	431a      	orrs	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	041b      	lsls	r3, r3, #16
 80099d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	061b      	lsls	r3, r3, #24
 80099e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099e8:	4931      	ldr	r1, [pc, #196]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 80099ea:	4313      	orrs	r3, r2
 80099ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099ee:	4b30      	ldr	r3, [pc, #192]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	695b      	ldr	r3, [r3, #20]
 80099fa:	492d      	ldr	r1, [pc, #180]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a00:	4b2b      	ldr	r3, [pc, #172]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	4928      	ldr	r1, [pc, #160]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a12:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a16:	4a26      	ldr	r2, [pc, #152]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a1e:	4b24      	ldr	r3, [pc, #144]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a22:	4b24      	ldr	r3, [pc, #144]	@ (8009ab4 <RCCEx_PLL3_Config+0x160>)
 8009a24:	4013      	ands	r3, r2
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	69d2      	ldr	r2, [r2, #28]
 8009a2a:	00d2      	lsls	r2, r2, #3
 8009a2c:	4920      	ldr	r1, [pc, #128]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a32:	4b1f      	ldr	r3, [pc, #124]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a36:	4a1e      	ldr	r2, [pc, #120]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d106      	bne.n	8009a52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a44:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a48:	4a19      	ldr	r2, [pc, #100]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a50:	e00f      	b.n	8009a72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d106      	bne.n	8009a66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a58:	4b15      	ldr	r3, [pc, #84]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5c:	4a14      	ldr	r2, [pc, #80]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a64:	e005      	b.n	8009a72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a66:	4b12      	ldr	r3, [pc, #72]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6a:	4a11      	ldr	r2, [pc, #68]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a72:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a0e      	ldr	r2, [pc, #56]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a7e:	f7fa f94f 	bl	8003d20 <HAL_GetTick>
 8009a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a84:	e008      	b.n	8009a98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a86:	f7fa f94b 	bl	8003d20 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d901      	bls.n	8009a98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e006      	b.n	8009aa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a98:	4b05      	ldr	r3, [pc, #20]	@ (8009ab0 <RCCEx_PLL3_Config+0x15c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0f0      	beq.n	8009a86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	ffff0007 	.word	0xffff0007

08009ab8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e10f      	b.n	8009cea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a87      	ldr	r2, [pc, #540]	@ (8009cf4 <HAL_SPI_Init+0x23c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d00f      	beq.n	8009afa <HAL_SPI_Init+0x42>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a86      	ldr	r2, [pc, #536]	@ (8009cf8 <HAL_SPI_Init+0x240>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00a      	beq.n	8009afa <HAL_SPI_Init+0x42>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a84      	ldr	r2, [pc, #528]	@ (8009cfc <HAL_SPI_Init+0x244>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d005      	beq.n	8009afa <HAL_SPI_Init+0x42>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2b0f      	cmp	r3, #15
 8009af4:	d901      	bls.n	8009afa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e0f7      	b.n	8009cea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 feca 	bl	800a894 <SPI_GetPacketSize>
 8009b00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a7b      	ldr	r2, [pc, #492]	@ (8009cf4 <HAL_SPI_Init+0x23c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00c      	beq.n	8009b26 <HAL_SPI_Init+0x6e>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a79      	ldr	r2, [pc, #484]	@ (8009cf8 <HAL_SPI_Init+0x240>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d007      	beq.n	8009b26 <HAL_SPI_Init+0x6e>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a78      	ldr	r2, [pc, #480]	@ (8009cfc <HAL_SPI_Init+0x244>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d002      	beq.n	8009b26 <HAL_SPI_Init+0x6e>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d811      	bhi.n	8009b4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b2a:	4a72      	ldr	r2, [pc, #456]	@ (8009cf4 <HAL_SPI_Init+0x23c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d009      	beq.n	8009b44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a70      	ldr	r2, [pc, #448]	@ (8009cf8 <HAL_SPI_Init+0x240>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d004      	beq.n	8009b44 <HAL_SPI_Init+0x8c>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a6f      	ldr	r2, [pc, #444]	@ (8009cfc <HAL_SPI_Init+0x244>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d104      	bne.n	8009b4e <HAL_SPI_Init+0x96>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d901      	bls.n	8009b4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e0cd      	b.n	8009cea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f9 fa78 	bl	8003058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0201 	bic.w	r2, r2, #1
 8009b7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009b8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b94:	d119      	bne.n	8009bca <HAL_SPI_Init+0x112>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b9e:	d103      	bne.n	8009ba8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d008      	beq.n	8009bba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10c      	bne.n	8009bca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bb8:	d107      	bne.n	8009bca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009bc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00f      	beq.n	8009bf6 <HAL_SPI_Init+0x13e>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d90b      	bls.n	8009bf6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	e007      	b.n	8009c06 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	69da      	ldr	r2, [r3, #28]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c18:	ea42 0103 	orr.w	r1, r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c36:	431a      	orrs	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	431a      	orrs	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	431a      	orrs	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	431a      	orrs	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c66:	ea42 0103 	orr.w	r1, r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d113      	bne.n	8009ca6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ca4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	40013000 	.word	0x40013000
 8009cf8:	40003800 	.word	0x40003800
 8009cfc:	40003c00 	.word	0x40003c00

08009d00 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d001      	beq.n	8009d1e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009d1a:	2302      	movs	r3, #2
 8009d1c:	e126      	b.n	8009f6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <HAL_SPI_Transmit_DMA+0x2a>
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e11e      	b.n	8009f6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_SPI_Transmit_DMA+0x3c>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e117      	b.n	8009f6c <HAL_SPI_Transmit_DMA+0x26c>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2203      	movs	r2, #3
 8009d48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	88fa      	ldrh	r2, [r7, #6]
 8009d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	88fa      	ldrh	r2, [r7, #6]
 8009d66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009d94:	d108      	bne.n	8009da8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e009      	b.n	8009dbc <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009dba:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	2b0f      	cmp	r3, #15
 8009dc2:	d905      	bls.n	8009dd0 <HAL_SPI_Transmit_DMA+0xd0>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dce:	d10f      	bne.n	8009df0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009dd4:	2b07      	cmp	r3, #7
 8009dd6:	d911      	bls.n	8009dfc <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009de2:	d00b      	beq.n	8009dfc <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009de8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dee:	d005      	beq.n	8009dfc <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e0b7      	b.n	8009f6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	2b07      	cmp	r3, #7
 8009e02:	d820      	bhi.n	8009e46 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e0e:	d109      	bne.n	8009e24 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	3301      	adds	r3, #1
 8009e1a:	105b      	asrs	r3, r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e2e:	d11e      	bne.n	8009e6e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	3303      	adds	r3, #3
 8009e3a:	109b      	asrs	r3, r3, #2
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009e44:	e013      	b.n	8009e6e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	2b0f      	cmp	r3, #15
 8009e4c:	d80f      	bhi.n	8009e6e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e58:	d109      	bne.n	8009e6e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3301      	adds	r3, #1
 8009e64:	105b      	asrs	r3, r3, #1
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e72:	4a40      	ldr	r2, [pc, #256]	@ (8009f74 <HAL_SPI_Transmit_DMA+0x274>)
 8009e74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8009f78 <HAL_SPI_Transmit_DMA+0x278>)
 8009e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e82:	4a3e      	ldr	r2, [pc, #248]	@ (8009f7c <HAL_SPI_Transmit_DMA+0x27c>)
 8009e84:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e9c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3320      	adds	r3, #32
 8009eae:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009eb6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009eb8:	f7fa fbca 	bl	8004650 <HAL_DMA_Start_IT>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d011      	beq.n	8009ee6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ec8:	f043 0210 	orr.w	r2, r3, #16
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e042      	b.n	8009f6c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eea:	69db      	ldr	r3, [r3, #28]
 8009eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef0:	d108      	bne.n	8009f04 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6859      	ldr	r1, [r3, #4]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	4b20      	ldr	r3, [pc, #128]	@ (8009f80 <HAL_SPI_Transmit_DMA+0x280>)
 8009efe:	400b      	ands	r3, r1
 8009f00:	6053      	str	r3, [r2, #4]
 8009f02:	e009      	b.n	8009f18 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009f80 <HAL_SPI_Transmit_DMA+0x280>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	88f9      	ldrh	r1, [r7, #6]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	430b      	orrs	r3, r1
 8009f16:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f26:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	691a      	ldr	r2, [r3, #16]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009f36:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f50:	d107      	bne.n	8009f62 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f60:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	0800a6a1 	.word	0x0800a6a1
 8009f78:	0800a615 	.word	0x0800a615
 8009f7c:	0800a6d9 	.word	0x0800a6d9
 8009f80:	ffff0000 	.word	0xffff0000

08009f84 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d005      	beq.n	8009faa <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_BUSY;
 8009fa6:	2302      	movs	r3, #2
 8009fa8:	e127      	b.n	800a1fa <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <HAL_SPI_Receive_DMA+0x32>
 8009fb0:	88fb      	ldrh	r3, [r7, #6]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d105      	bne.n	8009fc2 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e11b      	b.n	800a1fa <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_SPI_Receive_DMA+0x4c>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e114      	b.n	800a1fa <HAL_SPI_Receive_DMA+0x276>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2204      	movs	r2, #4
 8009fdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	88fa      	ldrh	r2, [r7, #6]
 8009ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	88fa      	ldrh	r2, [r7, #6]
 8009ffa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a022:	d108      	bne.n	800a036 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	e009      	b.n	800a04a <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a048:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	2b0f      	cmp	r3, #15
 800a050:	d905      	bls.n	800a05e <HAL_SPI_Receive_DMA+0xda>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a05c:	d10f      	bne.n	800a07e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a062:	2b07      	cmp	r3, #7
 800a064:	d911      	bls.n	800a08a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a070:	d00b      	beq.n	800a08a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a076:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a07c:	d005      	beq.n	800a08a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e0b7      	b.n	800a1fa <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a098:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	2b07      	cmp	r3, #7
 800a0a0:	d820      	bhi.n	800a0e4 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0ac:	d109      	bne.n	800a0c2 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	105b      	asrs	r3, r3, #1
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0cc:	d11e      	bne.n	800a10c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	3303      	adds	r3, #3
 800a0d8:	109b      	asrs	r3, r3, #2
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0e2:	e013      	b.n	800a10c <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	2b0f      	cmp	r3, #15
 800a0ea:	d80f      	bhi.n	800a10c <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0f6:	d109      	bne.n	800a10c <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	3301      	adds	r3, #1
 800a102:	105b      	asrs	r3, r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a110:	4a3c      	ldr	r2, [pc, #240]	@ (800a204 <HAL_SPI_Receive_DMA+0x280>)
 800a112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a118:	4a3b      	ldr	r2, [pc, #236]	@ (800a208 <HAL_SPI_Receive_DMA+0x284>)
 800a11a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a120:	4a3a      	ldr	r2, [pc, #232]	@ (800a20c <HAL_SPI_Receive_DMA+0x288>)
 800a122:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a128:	2200      	movs	r2, #0
 800a12a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3330      	adds	r3, #48	@ 0x30
 800a136:	4619      	mov	r1, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a13c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a144:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a146:	f7fa fa83 	bl	8004650 <HAL_DMA_Start_IT>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d011      	beq.n	800a174 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a156:	f043 0210 	orr.w	r2, r3, #16
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e042      	b.n	800a1fa <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a178:	69db      	ldr	r3, [r3, #28]
 800a17a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a17e:	d108      	bne.n	800a192 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6859      	ldr	r1, [r3, #4]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	4b21      	ldr	r3, [pc, #132]	@ (800a210 <HAL_SPI_Receive_DMA+0x28c>)
 800a18c:	400b      	ands	r3, r1
 800a18e:	6053      	str	r3, [r2, #4]
 800a190:	e009      	b.n	800a1a6 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	4b1d      	ldr	r3, [pc, #116]	@ (800a210 <HAL_SPI_Receive_DMA+0x28c>)
 800a19a:	4013      	ands	r3, r2
 800a19c:	88f9      	ldrh	r1, [r7, #6]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	6812      	ldr	r2, [r2, #0]
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1b4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800a1c4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0201 	orr.w	r2, r2, #1
 800a1d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1de:	d107      	bne.n	800a1f0 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1ee:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	0800a6bd 	.word	0x0800a6bd
 800a208:	0800a65b 	.word	0x0800a65b
 800a20c:	0800a6d9 	.word	0x0800a6d9
 800a210:	ffff0000 	.word	0xffff0000

0800a214 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b08a      	sub	sp, #40	@ 0x28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a22c:	6a3a      	ldr	r2, [r7, #32]
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	4013      	ands	r3, r2
 800a232:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a23c:	2300      	movs	r3, #0
 800a23e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a246:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3330      	adds	r3, #48	@ 0x30
 800a24e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a256:	2b00      	cmp	r3, #0
 800a258:	d010      	beq.n	800a27c <HAL_SPI_IRQHandler+0x68>
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	f003 0308 	and.w	r3, r3, #8
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00b      	beq.n	800a27c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a272:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f9c3 	bl	800a600 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a27a:	e192      	b.n	800a5a2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	d113      	bne.n	800a2ae <HAL_SPI_IRQHandler+0x9a>
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	f003 0320 	and.w	r3, r3, #32
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10e      	bne.n	800a2ae <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
    handled = 1UL;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10f      	bne.n	800a2d8 <HAL_SPI_IRQHandler+0xc4>
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d105      	bne.n	800a2d8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
    handled = 1UL;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10f      	bne.n	800a302 <HAL_SPI_IRQHandler+0xee>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00a      	beq.n	800a302 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	4798      	blx	r3
    handled = 1UL;
 800a2fe:	2301      	movs	r3, #1
 800a300:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	2b00      	cmp	r3, #0
 800a306:	f040 8147 	bne.w	800a598 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f003 0308 	and.w	r3, r3, #8
 800a310:	2b00      	cmp	r3, #0
 800a312:	f000 808b 	beq.w	800a42c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0208 	orr.w	r2, r2, #8
 800a324:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	699a      	ldr	r2, [r3, #24]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f042 0210 	orr.w	r2, r2, #16
 800a334:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	699a      	ldr	r2, [r3, #24]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a344:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0208 	bic.w	r2, r2, #8
 800a354:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d13d      	bne.n	800a3e0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a364:	e036      	b.n	800a3d4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b0f      	cmp	r3, #15
 800a36c:	d90b      	bls.n	800a386 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a376:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a378:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a37e:	1d1a      	adds	r2, r3, #4
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	665a      	str	r2, [r3, #100]	@ 0x64
 800a384:	e01d      	b.n	800a3c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	2b07      	cmp	r3, #7
 800a38c:	d90b      	bls.n	800a3a6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	8812      	ldrh	r2, [r2, #0]
 800a396:	b292      	uxth	r2, r2
 800a398:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a39e:	1c9a      	adds	r2, r3, #2
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	665a      	str	r2, [r3, #100]	@ 0x64
 800a3a4:	e00d      	b.n	800a3c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b2:	7812      	ldrb	r2, [r2, #0]
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1c2      	bne.n	800a366 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f9b7 	bl	800a754 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7f7 fc29 	bl	8001c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a3fe:	e0d0      	b.n	800a5a2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a400:	7cfb      	ldrb	r3, [r7, #19]
 800a402:	2b05      	cmp	r3, #5
 800a404:	d103      	bne.n	800a40e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f8dc 	bl	800a5c4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a40c:	e0c6      	b.n	800a59c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a40e:	7cfb      	ldrb	r3, [r7, #19]
 800a410:	2b04      	cmp	r3, #4
 800a412:	d103      	bne.n	800a41c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7f7 fc0b 	bl	8001c30 <HAL_SPI_RxCpltCallback>
    return;
 800a41a:	e0bf      	b.n	800a59c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a41c:	7cfb      	ldrb	r3, [r7, #19]
 800a41e:	2b03      	cmp	r3, #3
 800a420:	f040 80bc 	bne.w	800a59c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f8c3 	bl	800a5b0 <HAL_SPI_TxCpltCallback>
    return;
 800a42a:	e0b7      	b.n	800a59c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800a432:	2b00      	cmp	r3, #0
 800a434:	f000 80b5 	beq.w	800a5a2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a448:	f043 0204 	orr.w	r2, r3, #4
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	699a      	ldr	r2, [r3, #24]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a460:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00f      	beq.n	800a48c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a472:	f043 0201 	orr.w	r2, r3, #1
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a48a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00f      	beq.n	800a4b6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a49c:	f043 0208 	orr.w	r2, r3, #8
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	699a      	ldr	r2, [r3, #24]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00f      	beq.n	800a4e0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699a      	ldr	r2, [r3, #24]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f042 0220 	orr.w	r2, r2, #32
 800a4de:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d05a      	beq.n	800a5a0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0201 	bic.w	r2, r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6919      	ldr	r1, [r3, #16]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	4b28      	ldr	r3, [pc, #160]	@ (800a5a8 <HAL_SPI_IRQHandler+0x394>)
 800a506:	400b      	ands	r3, r1
 800a508:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a510:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a514:	d138      	bne.n	800a588 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689a      	ldr	r2, [r3, #8]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a524:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d013      	beq.n	800a556 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a532:	4a1e      	ldr	r2, [pc, #120]	@ (800a5ac <HAL_SPI_IRQHandler+0x398>)
 800a534:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fa fe10 	bl	8005160 <HAL_DMA_Abort_IT>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d007      	beq.n	800a556 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a54c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d020      	beq.n	800a5a0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a562:	4a12      	ldr	r2, [pc, #72]	@ (800a5ac <HAL_SPI_IRQHandler+0x398>)
 800a564:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fa fdf8 	bl	8005160 <HAL_DMA_Abort_IT>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d014      	beq.n	800a5a0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a57c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a586:	e00b      	b.n	800a5a0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7f7 fb5d 	bl	8001c50 <HAL_SPI_ErrorCallback>
    return;
 800a596:	e003      	b.n	800a5a0 <HAL_SPI_IRQHandler+0x38c>
    return;
 800a598:	bf00      	nop
 800a59a:	e002      	b.n	800a5a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a59c:	bf00      	nop
 800a59e:	e000      	b.n	800a5a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 800a5a0:	bf00      	nop
  }
}
 800a5a2:	3728      	adds	r7, #40	@ 0x28
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	fffffc94 	.word	0xfffffc94
 800a5ac:	0800a71f 	.word	0x0800a71f

0800a5b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a620:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b07      	cmp	r3, #7
 800a62c:	d011      	beq.n	800a652 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a638:	d103      	bne.n	800a642 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7ff ffb8 	bl	800a5b0 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a640:	e007      	b.n	800a652 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f042 0208 	orr.w	r2, r2, #8
 800a650:	611a      	str	r2, [r3, #16]
}
 800a652:	bf00      	nop
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b084      	sub	sp, #16
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a666:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b07      	cmp	r3, #7
 800a672:	d011      	beq.n	800a698 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a67e:	d103      	bne.n	800a688 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7f7 fad5 	bl	8001c30 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800a686:	e007      	b.n	800a698 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f042 0208 	orr.w	r2, r2, #8
 800a696:	611a      	str	r2, [r3, #16]
}
 800a698:	bf00      	nop
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ac:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff ff92 	bl	800a5d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6b4:	bf00      	nop
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff ff8e 	bl	800a5ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7fb feaa 	bl	8006440 <HAL_DMA_GetError>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d011      	beq.n	800a716 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 f82e 	bl	800a754 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6fe:	f043 0210 	orr.w	r2, r3, #16
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7f7 fa9d 	bl	8001c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f7f7 fa83 	bl	8001c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0208 	orr.w	r2, r2, #8
 800a772:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0210 	orr.w	r2, r2, #16
 800a782:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0201 	bic.w	r2, r2, #1
 800a792:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6919      	ldr	r1, [r3, #16]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	4b3c      	ldr	r3, [pc, #240]	@ (800a890 <SPI_CloseTransfer+0x13c>)
 800a7a0:	400b      	ands	r3, r1
 800a7a2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a7b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b04      	cmp	r3, #4
 800a7be:	d014      	beq.n	800a7ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00f      	beq.n	800a7ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	699a      	ldr	r2, [r3, #24]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f042 0220 	orr.w	r2, r2, #32
 800a7e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d014      	beq.n	800a820 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00f      	beq.n	800a820 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a806:	f043 0204 	orr.w	r2, r3, #4
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	699a      	ldr	r2, [r3, #24]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a81e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00f      	beq.n	800a84a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a830:	f043 0201 	orr.w	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	699a      	ldr	r2, [r3, #24]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a848:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00f      	beq.n	800a874 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a85a:	f043 0208 	orr.w	r2, r3, #8
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a872:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a884:	bf00      	nop
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	fffffc90 	.word	0xfffffc90

0800a894 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a0:	095b      	lsrs	r3, r3, #5
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	3307      	adds	r3, #7
 800a8b2:	08db      	lsrs	r3, r3, #3
 800a8b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e049      	b.n	800a970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7f8 fd0f 	bl	8003314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3304      	adds	r3, #4
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f000 ffa5 	bl	800b858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d001      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e05e      	b.n	800aa4e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a2b      	ldr	r2, [pc, #172]	@ (800aa5c <HAL_TIM_Base_Start_IT+0xe4>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d02c      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ba:	d027      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a27      	ldr	r2, [pc, #156]	@ (800aa60 <HAL_TIM_Base_Start_IT+0xe8>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d022      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a26      	ldr	r2, [pc, #152]	@ (800aa64 <HAL_TIM_Base_Start_IT+0xec>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d01d      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a24      	ldr	r2, [pc, #144]	@ (800aa68 <HAL_TIM_Base_Start_IT+0xf0>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d018      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4a23      	ldr	r2, [pc, #140]	@ (800aa6c <HAL_TIM_Base_Start_IT+0xf4>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d013      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a21      	ldr	r2, [pc, #132]	@ (800aa70 <HAL_TIM_Base_Start_IT+0xf8>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00e      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a20      	ldr	r2, [pc, #128]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xfc>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d009      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a1e      	ldr	r2, [pc, #120]	@ (800aa78 <HAL_TIM_Base_Start_IT+0x100>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d004      	beq.n	800aa0c <HAL_TIM_Base_Start_IT+0x94>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a1d      	ldr	r2, [pc, #116]	@ (800aa7c <HAL_TIM_Base_Start_IT+0x104>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d115      	bne.n	800aa38 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	4b1b      	ldr	r3, [pc, #108]	@ (800aa80 <HAL_TIM_Base_Start_IT+0x108>)
 800aa14:	4013      	ands	r3, r2
 800aa16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b06      	cmp	r3, #6
 800aa1c:	d015      	beq.n	800aa4a <HAL_TIM_Base_Start_IT+0xd2>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa24:	d011      	beq.n	800aa4a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f042 0201 	orr.w	r2, r2, #1
 800aa34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa36:	e008      	b.n	800aa4a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f042 0201 	orr.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	e000      	b.n	800aa4c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40000400 	.word	0x40000400
 800aa64:	40000800 	.word	0x40000800
 800aa68:	40000c00 	.word	0x40000c00
 800aa6c:	40010400 	.word	0x40010400
 800aa70:	40001800 	.word	0x40001800
 800aa74:	40014000 	.word	0x40014000
 800aa78:	4000e000 	.word	0x4000e000
 800aa7c:	4000e400 	.word	0x4000e400
 800aa80:	00010007 	.word	0x00010007

0800aa84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f022 0201 	bic.w	r2, r2, #1
 800aa9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6a1a      	ldr	r2, [r3, #32]
 800aaa2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10f      	bne.n	800aacc <HAL_TIM_Base_Stop_IT+0x48>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6a1a      	ldr	r2, [r3, #32]
 800aab2:	f240 4344 	movw	r3, #1092	@ 0x444
 800aab6:	4013      	ands	r3, r2
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d107      	bne.n	800aacc <HAL_TIM_Base_Stop_IT+0x48>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f022 0201 	bic.w	r2, r2, #1
 800aaca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e049      	b.n	800ab88 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d106      	bne.n	800ab0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7f8 fc79 	bl	8003400 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2202      	movs	r2, #2
 800ab12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4610      	mov	r0, r2
 800ab22:	f000 fe99 	bl	800b858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2201      	movs	r2, #1
 800ab5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d109      	bne.n	800abb4 <HAL_TIM_OC_Start+0x24>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	bf14      	ite	ne
 800abac:	2301      	movne	r3, #1
 800abae:	2300      	moveq	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	e03c      	b.n	800ac2e <HAL_TIM_OC_Start+0x9e>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d109      	bne.n	800abce <HAL_TIM_OC_Start+0x3e>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	bf14      	ite	ne
 800abc6:	2301      	movne	r3, #1
 800abc8:	2300      	moveq	r3, #0
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	e02f      	b.n	800ac2e <HAL_TIM_OC_Start+0x9e>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d109      	bne.n	800abe8 <HAL_TIM_OC_Start+0x58>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b01      	cmp	r3, #1
 800abde:	bf14      	ite	ne
 800abe0:	2301      	movne	r3, #1
 800abe2:	2300      	moveq	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	e022      	b.n	800ac2e <HAL_TIM_OC_Start+0x9e>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b0c      	cmp	r3, #12
 800abec:	d109      	bne.n	800ac02 <HAL_TIM_OC_Start+0x72>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	bf14      	ite	ne
 800abfa:	2301      	movne	r3, #1
 800abfc:	2300      	moveq	r3, #0
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	e015      	b.n	800ac2e <HAL_TIM_OC_Start+0x9e>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b10      	cmp	r3, #16
 800ac06:	d109      	bne.n	800ac1c <HAL_TIM_OC_Start+0x8c>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	bf14      	ite	ne
 800ac14:	2301      	movne	r3, #1
 800ac16:	2300      	moveq	r3, #0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	e008      	b.n	800ac2e <HAL_TIM_OC_Start+0x9e>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	bf14      	ite	ne
 800ac28:	2301      	movne	r3, #1
 800ac2a:	2300      	moveq	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e0ab      	b.n	800ad8e <HAL_TIM_OC_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <HAL_TIM_OC_Start+0xb6>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac44:	e023      	b.n	800ac8e <HAL_TIM_OC_Start+0xfe>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b04      	cmp	r3, #4
 800ac4a:	d104      	bne.n	800ac56 <HAL_TIM_OC_Start+0xc6>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac54:	e01b      	b.n	800ac8e <HAL_TIM_OC_Start+0xfe>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b08      	cmp	r3, #8
 800ac5a:	d104      	bne.n	800ac66 <HAL_TIM_OC_Start+0xd6>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac64:	e013      	b.n	800ac8e <HAL_TIM_OC_Start+0xfe>
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	2b0c      	cmp	r3, #12
 800ac6a:	d104      	bne.n	800ac76 <HAL_TIM_OC_Start+0xe6>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac74:	e00b      	b.n	800ac8e <HAL_TIM_OC_Start+0xfe>
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b10      	cmp	r3, #16
 800ac7a:	d104      	bne.n	800ac86 <HAL_TIM_OC_Start+0xf6>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac84:	e003      	b.n	800ac8e <HAL_TIM_OC_Start+0xfe>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2202      	movs	r2, #2
 800ac8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2201      	movs	r2, #1
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 faee 	bl	800c278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a3d      	ldr	r2, [pc, #244]	@ (800ad98 <HAL_TIM_OC_Start+0x208>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d013      	beq.n	800acce <HAL_TIM_OC_Start+0x13e>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a3c      	ldr	r2, [pc, #240]	@ (800ad9c <HAL_TIM_OC_Start+0x20c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00e      	beq.n	800acce <HAL_TIM_OC_Start+0x13e>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a3a      	ldr	r2, [pc, #232]	@ (800ada0 <HAL_TIM_OC_Start+0x210>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d009      	beq.n	800acce <HAL_TIM_OC_Start+0x13e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a39      	ldr	r2, [pc, #228]	@ (800ada4 <HAL_TIM_OC_Start+0x214>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d004      	beq.n	800acce <HAL_TIM_OC_Start+0x13e>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a37      	ldr	r2, [pc, #220]	@ (800ada8 <HAL_TIM_OC_Start+0x218>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d101      	bne.n	800acd2 <HAL_TIM_OC_Start+0x142>
 800acce:	2301      	movs	r3, #1
 800acd0:	e000      	b.n	800acd4 <HAL_TIM_OC_Start+0x144>
 800acd2:	2300      	movs	r3, #0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ace6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a2a      	ldr	r2, [pc, #168]	@ (800ad98 <HAL_TIM_OC_Start+0x208>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d02c      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acfa:	d027      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a2a      	ldr	r2, [pc, #168]	@ (800adac <HAL_TIM_OC_Start+0x21c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d022      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a29      	ldr	r2, [pc, #164]	@ (800adb0 <HAL_TIM_OC_Start+0x220>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d01d      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a27      	ldr	r2, [pc, #156]	@ (800adb4 <HAL_TIM_OC_Start+0x224>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d018      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ad9c <HAL_TIM_OC_Start+0x20c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d013      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a23      	ldr	r2, [pc, #140]	@ (800adb8 <HAL_TIM_OC_Start+0x228>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d00e      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a1b      	ldr	r2, [pc, #108]	@ (800ada0 <HAL_TIM_OC_Start+0x210>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d009      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a1f      	ldr	r2, [pc, #124]	@ (800adbc <HAL_TIM_OC_Start+0x22c>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d004      	beq.n	800ad4c <HAL_TIM_OC_Start+0x1bc>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a1e      	ldr	r2, [pc, #120]	@ (800adc0 <HAL_TIM_OC_Start+0x230>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d115      	bne.n	800ad78 <HAL_TIM_OC_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	4b1c      	ldr	r3, [pc, #112]	@ (800adc4 <HAL_TIM_OC_Start+0x234>)
 800ad54:	4013      	ands	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b06      	cmp	r3, #6
 800ad5c:	d015      	beq.n	800ad8a <HAL_TIM_OC_Start+0x1fa>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad64:	d011      	beq.n	800ad8a <HAL_TIM_OC_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f042 0201 	orr.w	r2, r2, #1
 800ad74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad76:	e008      	b.n	800ad8a <HAL_TIM_OC_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f042 0201 	orr.w	r2, r2, #1
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	e000      	b.n	800ad8c <HAL_TIM_OC_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	40010000 	.word	0x40010000
 800ad9c:	40010400 	.word	0x40010400
 800ada0:	40014000 	.word	0x40014000
 800ada4:	40014400 	.word	0x40014400
 800ada8:	40014800 	.word	0x40014800
 800adac:	40000400 	.word	0x40000400
 800adb0:	40000800 	.word	0x40000800
 800adb4:	40000c00 	.word	0x40000c00
 800adb8:	40001800 	.word	0x40001800
 800adbc:	4000e000 	.word	0x4000e000
 800adc0:	4000e400 	.word	0x4000e400
 800adc4:	00010007 	.word	0x00010007

0800adc8 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2200      	movs	r2, #0
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	4618      	mov	r0, r3
 800addc:	f001 fa4c 	bl	800c278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a3e      	ldr	r2, [pc, #248]	@ (800aee0 <HAL_TIM_OC_Stop+0x118>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d013      	beq.n	800ae12 <HAL_TIM_OC_Stop+0x4a>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a3d      	ldr	r2, [pc, #244]	@ (800aee4 <HAL_TIM_OC_Stop+0x11c>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00e      	beq.n	800ae12 <HAL_TIM_OC_Stop+0x4a>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a3b      	ldr	r2, [pc, #236]	@ (800aee8 <HAL_TIM_OC_Stop+0x120>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d009      	beq.n	800ae12 <HAL_TIM_OC_Stop+0x4a>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a3a      	ldr	r2, [pc, #232]	@ (800aeec <HAL_TIM_OC_Stop+0x124>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d004      	beq.n	800ae12 <HAL_TIM_OC_Stop+0x4a>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a38      	ldr	r2, [pc, #224]	@ (800aef0 <HAL_TIM_OC_Stop+0x128>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d101      	bne.n	800ae16 <HAL_TIM_OC_Stop+0x4e>
 800ae12:	2301      	movs	r3, #1
 800ae14:	e000      	b.n	800ae18 <HAL_TIM_OC_Stop+0x50>
 800ae16:	2300      	movs	r3, #0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d017      	beq.n	800ae4c <HAL_TIM_OC_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6a1a      	ldr	r2, [r3, #32]
 800ae22:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae26:	4013      	ands	r3, r2
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10f      	bne.n	800ae4c <HAL_TIM_OC_Stop+0x84>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6a1a      	ldr	r2, [r3, #32]
 800ae32:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae36:	4013      	ands	r3, r2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d107      	bne.n	800ae4c <HAL_TIM_OC_Stop+0x84>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6a1a      	ldr	r2, [r3, #32]
 800ae52:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ae56:	4013      	ands	r3, r2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10f      	bne.n	800ae7c <HAL_TIM_OC_Stop+0xb4>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6a1a      	ldr	r2, [r3, #32]
 800ae62:	f240 4344 	movw	r3, #1092	@ 0x444
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d107      	bne.n	800ae7c <HAL_TIM_OC_Stop+0xb4>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d104      	bne.n	800ae8c <HAL_TIM_OC_Stop+0xc4>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae8a:	e023      	b.n	800aed4 <HAL_TIM_OC_Stop+0x10c>
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	d104      	bne.n	800ae9c <HAL_TIM_OC_Stop+0xd4>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae9a:	e01b      	b.n	800aed4 <HAL_TIM_OC_Stop+0x10c>
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2b08      	cmp	r3, #8
 800aea0:	d104      	bne.n	800aeac <HAL_TIM_OC_Stop+0xe4>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aeaa:	e013      	b.n	800aed4 <HAL_TIM_OC_Stop+0x10c>
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b0c      	cmp	r3, #12
 800aeb0:	d104      	bne.n	800aebc <HAL_TIM_OC_Stop+0xf4>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeba:	e00b      	b.n	800aed4 <HAL_TIM_OC_Stop+0x10c>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b10      	cmp	r3, #16
 800aec0:	d104      	bne.n	800aecc <HAL_TIM_OC_Stop+0x104>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aeca:	e003      	b.n	800aed4 <HAL_TIM_OC_Stop+0x10c>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	40010000 	.word	0x40010000
 800aee4:	40010400 	.word	0x40010400
 800aee8:	40014000 	.word	0x40014000
 800aeec:	40014400 	.word	0x40014400
 800aef0:	40014800 	.word	0x40014800

0800aef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e049      	b.n	800af9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f841 	bl	800afa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2202      	movs	r2, #2
 800af24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	3304      	adds	r3, #4
 800af30:	4619      	mov	r1, r3
 800af32:	4610      	mov	r0, r2
 800af34:	f000 fc90 	bl	800b858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b083      	sub	sp, #12
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800afaa:	bf00      	nop
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e041      	b.n	800b04e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d106      	bne.n	800afe4 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f839 	bl	800b056 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3304      	adds	r3, #4
 800aff4:	4619      	mov	r1, r3
 800aff6:	4610      	mov	r0, r2
 800aff8:	f000 fc2e 	bl	800b858 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0208 	bic.w	r2, r2, #8
 800b00a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6819      	ldr	r1, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d020      	beq.n	800b0ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01b      	beq.n	800b0ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f06f 0202 	mvn.w	r2, #2
 800b09e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	f003 0303 	and.w	r3, r3, #3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 fbb1 	bl	800b81c <HAL_TIM_IC_CaptureCallback>
 800b0ba:	e005      	b.n	800b0c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fba3 	bl	800b808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fbb4 	bl	800b830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d020      	beq.n	800b11a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d01b      	beq.n	800b11a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f06f 0204 	mvn.w	r2, #4
 800b0ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fb8b 	bl	800b81c <HAL_TIM_IC_CaptureCallback>
 800b106:	e005      	b.n	800b114 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fb7d 	bl	800b808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fb8e 	bl	800b830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f003 0308 	and.w	r3, r3, #8
 800b120:	2b00      	cmp	r3, #0
 800b122:	d020      	beq.n	800b166 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 0308 	and.w	r3, r3, #8
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d01b      	beq.n	800b166 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f06f 0208 	mvn.w	r2, #8
 800b136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2204      	movs	r2, #4
 800b13c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	69db      	ldr	r3, [r3, #28]
 800b144:	f003 0303 	and.w	r3, r3, #3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fb65 	bl	800b81c <HAL_TIM_IC_CaptureCallback>
 800b152:	e005      	b.n	800b160 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fb57 	bl	800b808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fb68 	bl	800b830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	f003 0310 	and.w	r3, r3, #16
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d020      	beq.n	800b1b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f003 0310 	and.w	r3, r3, #16
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01b      	beq.n	800b1b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f06f 0210 	mvn.w	r2, #16
 800b182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2208      	movs	r2, #8
 800b188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fb3f 	bl	800b81c <HAL_TIM_IC_CaptureCallback>
 800b19e:	e005      	b.n	800b1ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fb31 	bl	800b808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fb42 	bl	800b830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f003 0301 	and.w	r3, r3, #1
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00c      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d007      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f06f 0201 	mvn.w	r2, #1
 800b1ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7f8 fb27 	bl	8003824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00c      	beq.n	800b204 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d007      	beq.n	800b204 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b1fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 f992 	bl	800c528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00c      	beq.n	800b228 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b214:	2b00      	cmp	r3, #0
 800b216:	d007      	beq.n	800b228 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f001 f98a 	bl	800c53c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00c      	beq.n	800b24c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d007      	beq.n	800b24c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fafc 	bl	800b844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00c      	beq.n	800b270 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f003 0320 	and.w	r3, r3, #32
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d007      	beq.n	800b270 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f06f 0220 	mvn.w	r2, #32
 800b268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 f952 	bl	800c514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d101      	bne.n	800b296 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b292:	2302      	movs	r3, #2
 800b294:	e066      	b.n	800b364 <HAL_TIM_OC_ConfigChannel+0xec>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2b14      	cmp	r3, #20
 800b2a2:	d857      	bhi.n	800b354 <HAL_TIM_OC_ConfigChannel+0xdc>
 800b2a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2ac <HAL_TIM_OC_ConfigChannel+0x34>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b301 	.word	0x0800b301
 800b2b0:	0800b355 	.word	0x0800b355
 800b2b4:	0800b355 	.word	0x0800b355
 800b2b8:	0800b355 	.word	0x0800b355
 800b2bc:	0800b30f 	.word	0x0800b30f
 800b2c0:	0800b355 	.word	0x0800b355
 800b2c4:	0800b355 	.word	0x0800b355
 800b2c8:	0800b355 	.word	0x0800b355
 800b2cc:	0800b31d 	.word	0x0800b31d
 800b2d0:	0800b355 	.word	0x0800b355
 800b2d4:	0800b355 	.word	0x0800b355
 800b2d8:	0800b355 	.word	0x0800b355
 800b2dc:	0800b32b 	.word	0x0800b32b
 800b2e0:	0800b355 	.word	0x0800b355
 800b2e4:	0800b355 	.word	0x0800b355
 800b2e8:	0800b355 	.word	0x0800b355
 800b2ec:	0800b339 	.word	0x0800b339
 800b2f0:	0800b355 	.word	0x0800b355
 800b2f4:	0800b355 	.word	0x0800b355
 800b2f8:	0800b355 	.word	0x0800b355
 800b2fc:	0800b347 	.word	0x0800b347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68b9      	ldr	r1, [r7, #8]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fb58 	bl	800b9bc <TIM_OC1_SetConfig>
      break;
 800b30c:	e025      	b.n	800b35a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68b9      	ldr	r1, [r7, #8]
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fbe1 	bl	800badc <TIM_OC2_SetConfig>
      break;
 800b31a:	e01e      	b.n	800b35a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68b9      	ldr	r1, [r7, #8]
 800b322:	4618      	mov	r0, r3
 800b324:	f000 fc64 	bl	800bbf0 <TIM_OC3_SetConfig>
      break;
 800b328:	e017      	b.n	800b35a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 fce5 	bl	800bd00 <TIM_OC4_SetConfig>
      break;
 800b336:	e010      	b.n	800b35a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fd48 	bl	800bdd4 <TIM_OC5_SetConfig>
      break;
 800b344:	e009      	b.n	800b35a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68b9      	ldr	r1, [r7, #8]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fda5 	bl	800be9c <TIM_OC6_SetConfig>
      break;
 800b352:	e002      	b.n	800b35a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	75fb      	strb	r3, [r7, #23]
      break;
 800b358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b362:	7dfb      	ldrb	r3, [r7, #23]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b382:	2b01      	cmp	r3, #1
 800b384:	d101      	bne.n	800b38a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b386:	2302      	movs	r3, #2
 800b388:	e0ff      	b.n	800b58a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b14      	cmp	r3, #20
 800b396:	f200 80f0 	bhi.w	800b57a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b39a:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a0:	0800b3f5 	.word	0x0800b3f5
 800b3a4:	0800b57b 	.word	0x0800b57b
 800b3a8:	0800b57b 	.word	0x0800b57b
 800b3ac:	0800b57b 	.word	0x0800b57b
 800b3b0:	0800b435 	.word	0x0800b435
 800b3b4:	0800b57b 	.word	0x0800b57b
 800b3b8:	0800b57b 	.word	0x0800b57b
 800b3bc:	0800b57b 	.word	0x0800b57b
 800b3c0:	0800b477 	.word	0x0800b477
 800b3c4:	0800b57b 	.word	0x0800b57b
 800b3c8:	0800b57b 	.word	0x0800b57b
 800b3cc:	0800b57b 	.word	0x0800b57b
 800b3d0:	0800b4b7 	.word	0x0800b4b7
 800b3d4:	0800b57b 	.word	0x0800b57b
 800b3d8:	0800b57b 	.word	0x0800b57b
 800b3dc:	0800b57b 	.word	0x0800b57b
 800b3e0:	0800b4f9 	.word	0x0800b4f9
 800b3e4:	0800b57b 	.word	0x0800b57b
 800b3e8:	0800b57b 	.word	0x0800b57b
 800b3ec:	0800b57b 	.word	0x0800b57b
 800b3f0:	0800b539 	.word	0x0800b539
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68b9      	ldr	r1, [r7, #8]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f000 fade 	bl	800b9bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	699a      	ldr	r2, [r3, #24]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0208 	orr.w	r2, r2, #8
 800b40e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	699a      	ldr	r2, [r3, #24]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f022 0204 	bic.w	r2, r2, #4
 800b41e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6999      	ldr	r1, [r3, #24]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	691a      	ldr	r2, [r3, #16]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	430a      	orrs	r2, r1
 800b430:	619a      	str	r2, [r3, #24]
      break;
 800b432:	e0a5      	b.n	800b580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68b9      	ldr	r1, [r7, #8]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fb4e 	bl	800badc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b44e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	699a      	ldr	r2, [r3, #24]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b45e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	6999      	ldr	r1, [r3, #24]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	021a      	lsls	r2, r3, #8
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	619a      	str	r2, [r3, #24]
      break;
 800b474:	e084      	b.n	800b580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68b9      	ldr	r1, [r7, #8]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 fbb7 	bl	800bbf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	69da      	ldr	r2, [r3, #28]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f042 0208 	orr.w	r2, r2, #8
 800b490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	69da      	ldr	r2, [r3, #28]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f022 0204 	bic.w	r2, r2, #4
 800b4a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	69d9      	ldr	r1, [r3, #28]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	691a      	ldr	r2, [r3, #16]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	61da      	str	r2, [r3, #28]
      break;
 800b4b4:	e064      	b.n	800b580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68b9      	ldr	r1, [r7, #8]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f000 fc1f 	bl	800bd00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69da      	ldr	r2, [r3, #28]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69da      	ldr	r2, [r3, #28]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69d9      	ldr	r1, [r3, #28]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	021a      	lsls	r2, r3, #8
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	430a      	orrs	r2, r1
 800b4f4:	61da      	str	r2, [r3, #28]
      break;
 800b4f6:	e043      	b.n	800b580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fc68 	bl	800bdd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f042 0208 	orr.w	r2, r2, #8
 800b512:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0204 	bic.w	r2, r2, #4
 800b522:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	691a      	ldr	r2, [r3, #16]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b536:	e023      	b.n	800b580 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68b9      	ldr	r1, [r7, #8]
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fcac 	bl	800be9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b552:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b562:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	021a      	lsls	r2, r3, #8
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	430a      	orrs	r2, r1
 800b576:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b578:	e002      	b.n	800b580 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	75fb      	strb	r3, [r7, #23]
      break;
 800b57e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop

0800b594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d101      	bne.n	800b5b0 <HAL_TIM_ConfigClockSource+0x1c>
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	e0dc      	b.n	800b76a <HAL_TIM_ConfigClockSource+0x1d6>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	4b6a      	ldr	r3, [pc, #424]	@ (800b774 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a64      	ldr	r2, [pc, #400]	@ (800b778 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	f000 80a9 	beq.w	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b5ec:	4a62      	ldr	r2, [pc, #392]	@ (800b778 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	f200 80ae 	bhi.w	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b5f4:	4a61      	ldr	r2, [pc, #388]	@ (800b77c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	f000 80a1 	beq.w	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b5fc:	4a5f      	ldr	r2, [pc, #380]	@ (800b77c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	f200 80a6 	bhi.w	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b604:	4a5e      	ldr	r2, [pc, #376]	@ (800b780 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b606:	4293      	cmp	r3, r2
 800b608:	f000 8099 	beq.w	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b60c:	4a5c      	ldr	r2, [pc, #368]	@ (800b780 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	f200 809e 	bhi.w	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b614:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b618:	f000 8091 	beq.w	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b61c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b620:	f200 8096 	bhi.w	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b624:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b628:	f000 8089 	beq.w	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b62c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b630:	f200 808e 	bhi.w	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b638:	d03e      	beq.n	800b6b8 <HAL_TIM_ConfigClockSource+0x124>
 800b63a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b63e:	f200 8087 	bhi.w	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b646:	f000 8086 	beq.w	800b756 <HAL_TIM_ConfigClockSource+0x1c2>
 800b64a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b64e:	d87f      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b650:	2b70      	cmp	r3, #112	@ 0x70
 800b652:	d01a      	beq.n	800b68a <HAL_TIM_ConfigClockSource+0xf6>
 800b654:	2b70      	cmp	r3, #112	@ 0x70
 800b656:	d87b      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b658:	2b60      	cmp	r3, #96	@ 0x60
 800b65a:	d050      	beq.n	800b6fe <HAL_TIM_ConfigClockSource+0x16a>
 800b65c:	2b60      	cmp	r3, #96	@ 0x60
 800b65e:	d877      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b660:	2b50      	cmp	r3, #80	@ 0x50
 800b662:	d03c      	beq.n	800b6de <HAL_TIM_ConfigClockSource+0x14a>
 800b664:	2b50      	cmp	r3, #80	@ 0x50
 800b666:	d873      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b668:	2b40      	cmp	r3, #64	@ 0x40
 800b66a:	d058      	beq.n	800b71e <HAL_TIM_ConfigClockSource+0x18a>
 800b66c:	2b40      	cmp	r3, #64	@ 0x40
 800b66e:	d86f      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b670:	2b30      	cmp	r3, #48	@ 0x30
 800b672:	d064      	beq.n	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b674:	2b30      	cmp	r3, #48	@ 0x30
 800b676:	d86b      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b678:	2b20      	cmp	r3, #32
 800b67a:	d060      	beq.n	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b67c:	2b20      	cmp	r3, #32
 800b67e:	d867      	bhi.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d05c      	beq.n	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b684:	2b10      	cmp	r3, #16
 800b686:	d05a      	beq.n	800b73e <HAL_TIM_ConfigClockSource+0x1aa>
 800b688:	e062      	b.n	800b750 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b69a:	f000 fdcd 	bl	800c238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b6ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	609a      	str	r2, [r3, #8]
      break;
 800b6b6:	e04f      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b6c8:	f000 fdb6 	bl	800c238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689a      	ldr	r2, [r3, #8]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b6da:	609a      	str	r2, [r3, #8]
      break;
 800b6dc:	e03c      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f000 fd26 	bl	800c13c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2150      	movs	r1, #80	@ 0x50
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fd80 	bl	800c1fc <TIM_ITRx_SetConfig>
      break;
 800b6fc:	e02c      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b70a:	461a      	mov	r2, r3
 800b70c:	f000 fd45 	bl	800c19a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2160      	movs	r1, #96	@ 0x60
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fd70 	bl	800c1fc <TIM_ITRx_SetConfig>
      break;
 800b71c:	e01c      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b72a:	461a      	mov	r2, r3
 800b72c:	f000 fd06 	bl	800c13c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2140      	movs	r1, #64	@ 0x40
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fd60 	bl	800c1fc <TIM_ITRx_SetConfig>
      break;
 800b73c:	e00c      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4619      	mov	r1, r3
 800b748:	4610      	mov	r0, r2
 800b74a:	f000 fd57 	bl	800c1fc <TIM_ITRx_SetConfig>
      break;
 800b74e:	e003      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	73fb      	strb	r3, [r7, #15]
      break;
 800b754:	e000      	b.n	800b758 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	ffceff88 	.word	0xffceff88
 800b778:	00100040 	.word	0x00100040
 800b77c:	00100030 	.word	0x00100030
 800b780:	00100020 	.word	0x00100020

0800b784 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b794:	2b01      	cmp	r3, #1
 800b796:	d101      	bne.n	800b79c <HAL_TIM_SlaveConfigSynchro+0x18>
 800b798:	2302      	movs	r3, #2
 800b79a:	e031      	b.n	800b800 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fbda 	bl	800bf68 <TIM_SlaveTimer_SetConfig>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e018      	b.n	800b800 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68da      	ldr	r2, [r3, #12]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b7dc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68da      	ldr	r2, [r3, #12]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b7ec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a4a      	ldr	r2, [pc, #296]	@ (800b994 <TIM_Base_SetConfig+0x13c>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d013      	beq.n	800b898 <TIM_Base_SetConfig+0x40>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b876:	d00f      	beq.n	800b898 <TIM_Base_SetConfig+0x40>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a47      	ldr	r2, [pc, #284]	@ (800b998 <TIM_Base_SetConfig+0x140>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d00b      	beq.n	800b898 <TIM_Base_SetConfig+0x40>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a46      	ldr	r2, [pc, #280]	@ (800b99c <TIM_Base_SetConfig+0x144>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d007      	beq.n	800b898 <TIM_Base_SetConfig+0x40>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a45      	ldr	r2, [pc, #276]	@ (800b9a0 <TIM_Base_SetConfig+0x148>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d003      	beq.n	800b898 <TIM_Base_SetConfig+0x40>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a44      	ldr	r2, [pc, #272]	@ (800b9a4 <TIM_Base_SetConfig+0x14c>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d108      	bne.n	800b8aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b89e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a39      	ldr	r2, [pc, #228]	@ (800b994 <TIM_Base_SetConfig+0x13c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d027      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8b8:	d023      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a36      	ldr	r2, [pc, #216]	@ (800b998 <TIM_Base_SetConfig+0x140>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d01f      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a35      	ldr	r2, [pc, #212]	@ (800b99c <TIM_Base_SetConfig+0x144>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d01b      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a34      	ldr	r2, [pc, #208]	@ (800b9a0 <TIM_Base_SetConfig+0x148>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d017      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a33      	ldr	r2, [pc, #204]	@ (800b9a4 <TIM_Base_SetConfig+0x14c>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d013      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a32      	ldr	r2, [pc, #200]	@ (800b9a8 <TIM_Base_SetConfig+0x150>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d00f      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a31      	ldr	r2, [pc, #196]	@ (800b9ac <TIM_Base_SetConfig+0x154>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d00b      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a30      	ldr	r2, [pc, #192]	@ (800b9b0 <TIM_Base_SetConfig+0x158>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d007      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a2f      	ldr	r2, [pc, #188]	@ (800b9b4 <TIM_Base_SetConfig+0x15c>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d003      	beq.n	800b902 <TIM_Base_SetConfig+0xaa>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b8 <TIM_Base_SetConfig+0x160>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d108      	bne.n	800b914 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	4313      	orrs	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a16      	ldr	r2, [pc, #88]	@ (800b994 <TIM_Base_SetConfig+0x13c>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d00f      	beq.n	800b960 <TIM_Base_SetConfig+0x108>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a18      	ldr	r2, [pc, #96]	@ (800b9a4 <TIM_Base_SetConfig+0x14c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d00b      	beq.n	800b960 <TIM_Base_SetConfig+0x108>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a17      	ldr	r2, [pc, #92]	@ (800b9a8 <TIM_Base_SetConfig+0x150>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d007      	beq.n	800b960 <TIM_Base_SetConfig+0x108>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a16      	ldr	r2, [pc, #88]	@ (800b9ac <TIM_Base_SetConfig+0x154>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d003      	beq.n	800b960 <TIM_Base_SetConfig+0x108>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a15      	ldr	r2, [pc, #84]	@ (800b9b0 <TIM_Base_SetConfig+0x158>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d103      	bne.n	800b968 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	691a      	ldr	r2, [r3, #16]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	2b01      	cmp	r3, #1
 800b978:	d105      	bne.n	800b986 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	f023 0201 	bic.w	r2, r3, #1
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	611a      	str	r2, [r3, #16]
  }
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	40010000 	.word	0x40010000
 800b998:	40000400 	.word	0x40000400
 800b99c:	40000800 	.word	0x40000800
 800b9a0:	40000c00 	.word	0x40000c00
 800b9a4:	40010400 	.word	0x40010400
 800b9a8:	40014000 	.word	0x40014000
 800b9ac:	40014400 	.word	0x40014400
 800b9b0:	40014800 	.word	0x40014800
 800b9b4:	4000e000 	.word	0x4000e000
 800b9b8:	4000e400 	.word	0x4000e400

0800b9bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	f023 0201 	bic.w	r2, r3, #1
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	699b      	ldr	r3, [r3, #24]
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4b37      	ldr	r3, [pc, #220]	@ (800bac4 <TIM_OC1_SetConfig+0x108>)
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f023 0302 	bic.w	r3, r3, #2
 800ba04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a2d      	ldr	r2, [pc, #180]	@ (800bac8 <TIM_OC1_SetConfig+0x10c>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d00f      	beq.n	800ba38 <TIM_OC1_SetConfig+0x7c>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a2c      	ldr	r2, [pc, #176]	@ (800bacc <TIM_OC1_SetConfig+0x110>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d00b      	beq.n	800ba38 <TIM_OC1_SetConfig+0x7c>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a2b      	ldr	r2, [pc, #172]	@ (800bad0 <TIM_OC1_SetConfig+0x114>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d007      	beq.n	800ba38 <TIM_OC1_SetConfig+0x7c>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a2a      	ldr	r2, [pc, #168]	@ (800bad4 <TIM_OC1_SetConfig+0x118>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d003      	beq.n	800ba38 <TIM_OC1_SetConfig+0x7c>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	4a29      	ldr	r2, [pc, #164]	@ (800bad8 <TIM_OC1_SetConfig+0x11c>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d10c      	bne.n	800ba52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f023 0308 	bic.w	r3, r3, #8
 800ba3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f023 0304 	bic.w	r3, r3, #4
 800ba50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a1c      	ldr	r2, [pc, #112]	@ (800bac8 <TIM_OC1_SetConfig+0x10c>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d00f      	beq.n	800ba7a <TIM_OC1_SetConfig+0xbe>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bacc <TIM_OC1_SetConfig+0x110>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d00b      	beq.n	800ba7a <TIM_OC1_SetConfig+0xbe>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4a1a      	ldr	r2, [pc, #104]	@ (800bad0 <TIM_OC1_SetConfig+0x114>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d007      	beq.n	800ba7a <TIM_OC1_SetConfig+0xbe>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a19      	ldr	r2, [pc, #100]	@ (800bad4 <TIM_OC1_SetConfig+0x118>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d003      	beq.n	800ba7a <TIM_OC1_SetConfig+0xbe>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4a18      	ldr	r2, [pc, #96]	@ (800bad8 <TIM_OC1_SetConfig+0x11c>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d111      	bne.n	800ba9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	621a      	str	r2, [r3, #32]
}
 800bab8:	bf00      	nop
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	fffeff8f 	.word	0xfffeff8f
 800bac8:	40010000 	.word	0x40010000
 800bacc:	40010400 	.word	0x40010400
 800bad0:	40014000 	.word	0x40014000
 800bad4:	40014400 	.word	0x40014400
 800bad8:	40014800 	.word	0x40014800

0800badc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a1b      	ldr	r3, [r3, #32]
 800baea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a1b      	ldr	r3, [r3, #32]
 800baf0:	f023 0210 	bic.w	r2, r3, #16
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	699b      	ldr	r3, [r3, #24]
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4b34      	ldr	r3, [pc, #208]	@ (800bbd8 <TIM_OC2_SetConfig+0xfc>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	f023 0320 	bic.w	r3, r3, #32
 800bb26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	697a      	ldr	r2, [r7, #20]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a29      	ldr	r2, [pc, #164]	@ (800bbdc <TIM_OC2_SetConfig+0x100>)
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d003      	beq.n	800bb44 <TIM_OC2_SetConfig+0x68>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a28      	ldr	r2, [pc, #160]	@ (800bbe0 <TIM_OC2_SetConfig+0x104>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d10d      	bne.n	800bb60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a1e      	ldr	r2, [pc, #120]	@ (800bbdc <TIM_OC2_SetConfig+0x100>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d00f      	beq.n	800bb88 <TIM_OC2_SetConfig+0xac>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbe0 <TIM_OC2_SetConfig+0x104>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00b      	beq.n	800bb88 <TIM_OC2_SetConfig+0xac>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	4a1c      	ldr	r2, [pc, #112]	@ (800bbe4 <TIM_OC2_SetConfig+0x108>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d007      	beq.n	800bb88 <TIM_OC2_SetConfig+0xac>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe8 <TIM_OC2_SetConfig+0x10c>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d003      	beq.n	800bb88 <TIM_OC2_SetConfig+0xac>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a1a      	ldr	r2, [pc, #104]	@ (800bbec <TIM_OC2_SetConfig+0x110>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d113      	bne.n	800bbb0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	621a      	str	r2, [r3, #32]
}
 800bbca:	bf00      	nop
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	feff8fff 	.word	0xfeff8fff
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	40010400 	.word	0x40010400
 800bbe4:	40014000 	.word	0x40014000
 800bbe8:	40014400 	.word	0x40014400
 800bbec:	40014800 	.word	0x40014800

0800bbf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6a1b      	ldr	r3, [r3, #32]
 800bc04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	69db      	ldr	r3, [r3, #28]
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4b33      	ldr	r3, [pc, #204]	@ (800bce8 <TIM_OC3_SetConfig+0xf8>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f023 0303 	bic.w	r3, r3, #3
 800bc26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	021b      	lsls	r3, r3, #8
 800bc40:	697a      	ldr	r2, [r7, #20]
 800bc42:	4313      	orrs	r3, r2
 800bc44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a28      	ldr	r2, [pc, #160]	@ (800bcec <TIM_OC3_SetConfig+0xfc>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d003      	beq.n	800bc56 <TIM_OC3_SetConfig+0x66>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a27      	ldr	r2, [pc, #156]	@ (800bcf0 <TIM_OC3_SetConfig+0x100>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d10d      	bne.n	800bc72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bc5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	021b      	lsls	r3, r3, #8
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bc70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a1d      	ldr	r2, [pc, #116]	@ (800bcec <TIM_OC3_SetConfig+0xfc>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00f      	beq.n	800bc9a <TIM_OC3_SetConfig+0xaa>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a1c      	ldr	r2, [pc, #112]	@ (800bcf0 <TIM_OC3_SetConfig+0x100>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d00b      	beq.n	800bc9a <TIM_OC3_SetConfig+0xaa>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a1b      	ldr	r2, [pc, #108]	@ (800bcf4 <TIM_OC3_SetConfig+0x104>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d007      	beq.n	800bc9a <TIM_OC3_SetConfig+0xaa>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a1a      	ldr	r2, [pc, #104]	@ (800bcf8 <TIM_OC3_SetConfig+0x108>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d003      	beq.n	800bc9a <TIM_OC3_SetConfig+0xaa>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a19      	ldr	r2, [pc, #100]	@ (800bcfc <TIM_OC3_SetConfig+0x10c>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d113      	bne.n	800bcc2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	011b      	lsls	r3, r3, #4
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	621a      	str	r2, [r3, #32]
}
 800bcdc:	bf00      	nop
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	fffeff8f 	.word	0xfffeff8f
 800bcec:	40010000 	.word	0x40010000
 800bcf0:	40010400 	.word	0x40010400
 800bcf4:	40014000 	.word	0x40014000
 800bcf8:	40014400 	.word	0x40014400
 800bcfc:	40014800 	.word	0x40014800

0800bd00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4b24      	ldr	r3, [pc, #144]	@ (800bdbc <TIM_OC4_SetConfig+0xbc>)
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	021b      	lsls	r3, r3, #8
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bd4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	031b      	lsls	r3, r3, #12
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a19      	ldr	r2, [pc, #100]	@ (800bdc0 <TIM_OC4_SetConfig+0xc0>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00f      	beq.n	800bd80 <TIM_OC4_SetConfig+0x80>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a18      	ldr	r2, [pc, #96]	@ (800bdc4 <TIM_OC4_SetConfig+0xc4>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d00b      	beq.n	800bd80 <TIM_OC4_SetConfig+0x80>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a17      	ldr	r2, [pc, #92]	@ (800bdc8 <TIM_OC4_SetConfig+0xc8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d007      	beq.n	800bd80 <TIM_OC4_SetConfig+0x80>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a16      	ldr	r2, [pc, #88]	@ (800bdcc <TIM_OC4_SetConfig+0xcc>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d003      	beq.n	800bd80 <TIM_OC4_SetConfig+0x80>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a15      	ldr	r2, [pc, #84]	@ (800bdd0 <TIM_OC4_SetConfig+0xd0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d109      	bne.n	800bd94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	019b      	lsls	r3, r3, #6
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	621a      	str	r2, [r3, #32]
}
 800bdae:	bf00      	nop
 800bdb0:	371c      	adds	r7, #28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	feff8fff 	.word	0xfeff8fff
 800bdc0:	40010000 	.word	0x40010000
 800bdc4:	40010400 	.word	0x40010400
 800bdc8:	40014000 	.word	0x40014000
 800bdcc:	40014400 	.word	0x40014400
 800bdd0:	40014800 	.word	0x40014800

0800bdd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4b21      	ldr	r3, [pc, #132]	@ (800be84 <TIM_OC5_SetConfig+0xb0>)
 800be00:	4013      	ands	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800be14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	041b      	lsls	r3, r3, #16
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	4313      	orrs	r3, r2
 800be20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a18      	ldr	r2, [pc, #96]	@ (800be88 <TIM_OC5_SetConfig+0xb4>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d00f      	beq.n	800be4a <TIM_OC5_SetConfig+0x76>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a17      	ldr	r2, [pc, #92]	@ (800be8c <TIM_OC5_SetConfig+0xb8>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d00b      	beq.n	800be4a <TIM_OC5_SetConfig+0x76>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a16      	ldr	r2, [pc, #88]	@ (800be90 <TIM_OC5_SetConfig+0xbc>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d007      	beq.n	800be4a <TIM_OC5_SetConfig+0x76>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a15      	ldr	r2, [pc, #84]	@ (800be94 <TIM_OC5_SetConfig+0xc0>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d003      	beq.n	800be4a <TIM_OC5_SetConfig+0x76>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a14      	ldr	r2, [pc, #80]	@ (800be98 <TIM_OC5_SetConfig+0xc4>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d109      	bne.n	800be5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	021b      	lsls	r3, r3, #8
 800be58:	697a      	ldr	r2, [r7, #20]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	621a      	str	r2, [r3, #32]
}
 800be78:	bf00      	nop
 800be7a:	371c      	adds	r7, #28
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	fffeff8f 	.word	0xfffeff8f
 800be88:	40010000 	.word	0x40010000
 800be8c:	40010400 	.word	0x40010400
 800be90:	40014000 	.word	0x40014000
 800be94:	40014400 	.word	0x40014400
 800be98:	40014800 	.word	0x40014800

0800be9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4b22      	ldr	r3, [pc, #136]	@ (800bf50 <TIM_OC6_SetConfig+0xb4>)
 800bec8:	4013      	ands	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	051b      	lsls	r3, r3, #20
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	4313      	orrs	r3, r2
 800beea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a19      	ldr	r2, [pc, #100]	@ (800bf54 <TIM_OC6_SetConfig+0xb8>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d00f      	beq.n	800bf14 <TIM_OC6_SetConfig+0x78>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a18      	ldr	r2, [pc, #96]	@ (800bf58 <TIM_OC6_SetConfig+0xbc>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d00b      	beq.n	800bf14 <TIM_OC6_SetConfig+0x78>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a17      	ldr	r2, [pc, #92]	@ (800bf5c <TIM_OC6_SetConfig+0xc0>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d007      	beq.n	800bf14 <TIM_OC6_SetConfig+0x78>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4a16      	ldr	r2, [pc, #88]	@ (800bf60 <TIM_OC6_SetConfig+0xc4>)
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	d003      	beq.n	800bf14 <TIM_OC6_SetConfig+0x78>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a15      	ldr	r2, [pc, #84]	@ (800bf64 <TIM_OC6_SetConfig+0xc8>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d109      	bne.n	800bf28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bf1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	029b      	lsls	r3, r3, #10
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	4313      	orrs	r3, r2
 800bf26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	621a      	str	r2, [r3, #32]
}
 800bf42:	bf00      	nop
 800bf44:	371c      	adds	r7, #28
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	feff8fff 	.word	0xfeff8fff
 800bf54:	40010000 	.word	0x40010000
 800bf58:	40010400 	.word	0x40010400
 800bf5c:	40014000 	.word	0x40014000
 800bf60:	40014400 	.word	0x40014400
 800bf64:	40014800 	.word	0x40014800

0800bf68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b086      	sub	sp, #24
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4b65      	ldr	r3, [pc, #404]	@ (800c118 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800bf82:	4013      	ands	r3, r2
 800bf84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4b62      	ldr	r3, [pc, #392]	@ (800c11c <TIM_SlaveTimer_SetConfig+0x1b4>)
 800bf94:	4013      	ands	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	693a      	ldr	r2, [r7, #16]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	4a5c      	ldr	r2, [pc, #368]	@ (800c120 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	f000 80ab 	beq.w	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfb6:	4a5a      	ldr	r2, [pc, #360]	@ (800c120 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	f200 80a4 	bhi.w	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfc2:	f000 80a3 	beq.w	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bfca:	f200 809c 	bhi.w	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfce:	4a55      	ldr	r2, [pc, #340]	@ (800c124 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	f000 809b 	beq.w	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfd6:	4a53      	ldr	r2, [pc, #332]	@ (800c124 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	f200 8094 	bhi.w	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfde:	4a52      	ldr	r2, [pc, #328]	@ (800c128 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	f000 8093 	beq.w	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800bfe6:	4a50      	ldr	r2, [pc, #320]	@ (800c128 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	f200 808c 	bhi.w	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800bfee:	4a4f      	ldr	r2, [pc, #316]	@ (800c12c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	f000 808b 	beq.w	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800bff6:	4a4d      	ldr	r2, [pc, #308]	@ (800c12c <TIM_SlaveTimer_SetConfig+0x1c4>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	f200 8084 	bhi.w	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800bffe:	4a4c      	ldr	r2, [pc, #304]	@ (800c130 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c000:	4293      	cmp	r3, r2
 800c002:	f000 8083 	beq.w	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c006:	4a4a      	ldr	r2, [pc, #296]	@ (800c130 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d87c      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c00c:	4a49      	ldr	r2, [pc, #292]	@ (800c134 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d07c      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c012:	4a48      	ldr	r2, [pc, #288]	@ (800c134 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d876      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c018:	4a47      	ldr	r2, [pc, #284]	@ (800c138 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d076      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c01e:	4a46      	ldr	r2, [pc, #280]	@ (800c138 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d870      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c024:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c028:	d070      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c02a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c02e:	d86a      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c034:	d06a      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c03a:	d864      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c03c:	2b70      	cmp	r3, #112	@ 0x70
 800c03e:	d01a      	beq.n	800c076 <TIM_SlaveTimer_SetConfig+0x10e>
 800c040:	2b70      	cmp	r3, #112	@ 0x70
 800c042:	d860      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c044:	2b60      	cmp	r3, #96	@ 0x60
 800c046:	d054      	beq.n	800c0f2 <TIM_SlaveTimer_SetConfig+0x18a>
 800c048:	2b60      	cmp	r3, #96	@ 0x60
 800c04a:	d85c      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c04c:	2b50      	cmp	r3, #80	@ 0x50
 800c04e:	d046      	beq.n	800c0de <TIM_SlaveTimer_SetConfig+0x176>
 800c050:	2b50      	cmp	r3, #80	@ 0x50
 800c052:	d858      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c054:	2b40      	cmp	r3, #64	@ 0x40
 800c056:	d019      	beq.n	800c08c <TIM_SlaveTimer_SetConfig+0x124>
 800c058:	2b40      	cmp	r3, #64	@ 0x40
 800c05a:	d854      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c05c:	2b30      	cmp	r3, #48	@ 0x30
 800c05e:	d055      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c060:	2b30      	cmp	r3, #48	@ 0x30
 800c062:	d850      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c064:	2b20      	cmp	r3, #32
 800c066:	d051      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c068:	2b20      	cmp	r3, #32
 800c06a:	d84c      	bhi.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d04d      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c070:	2b10      	cmp	r3, #16
 800c072:	d04b      	beq.n	800c10c <TIM_SlaveTimer_SetConfig+0x1a4>
 800c074:	e047      	b.n	800c106 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800c086:	f000 f8d7 	bl	800c238 <TIM_ETR_SetConfig>
      break;
 800c08a:	e040      	b.n	800c10e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b05      	cmp	r3, #5
 800c092:	d101      	bne.n	800c098 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800c094:	2301      	movs	r3, #1
 800c096:	e03b      	b.n	800c110 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6a1a      	ldr	r2, [r3, #32]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 0201 	bic.w	r2, r2, #1
 800c0ae:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c0be:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	011b      	lsls	r3, r3, #4
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	621a      	str	r2, [r3, #32]
      break;
 800c0dc:	e017      	b.n	800c10e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	f000 f826 	bl	800c13c <TIM_TI1_ConfigInputStage>
      break;
 800c0f0:	e00d      	b.n	800c10e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0fe:	461a      	mov	r2, r3
 800c100:	f000 f84b 	bl	800c19a <TIM_TI2_ConfigInputStage>
      break;
 800c104:	e003      	b.n	800c10e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	75fb      	strb	r3, [r7, #23]
      break;
 800c10a:	e000      	b.n	800c10e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800c10c:	bf00      	nop
  }

  return status;
 800c10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	ffcfff8f 	.word	0xffcfff8f
 800c11c:	fffefff8 	.word	0xfffefff8
 800c120:	00200010 	.word	0x00200010
 800c124:	00100070 	.word	0x00100070
 800c128:	00100060 	.word	0x00100060
 800c12c:	00100050 	.word	0x00100050
 800c130:	00100040 	.word	0x00100040
 800c134:	00100030 	.word	0x00100030
 800c138:	00100020 	.word	0x00100020

0800c13c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	f023 0201 	bic.w	r2, r3, #1
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	011b      	lsls	r3, r3, #4
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	4313      	orrs	r3, r2
 800c170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f023 030a 	bic.w	r3, r3, #10
 800c178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	4313      	orrs	r3, r2
 800c180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	621a      	str	r2, [r3, #32]
}
 800c18e:	bf00      	nop
 800c190:	371c      	adds	r7, #28
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b087      	sub	sp, #28
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6a1b      	ldr	r3, [r3, #32]
 800c1b0:	f023 0210 	bic.w	r2, r3, #16
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	031b      	lsls	r3, r3, #12
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	011b      	lsls	r3, r3, #4
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	621a      	str	r2, [r3, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
	...

0800c1fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	4b09      	ldr	r3, [pc, #36]	@ (800c234 <TIM_ITRx_SetConfig+0x38>)
 800c210:	4013      	ands	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4313      	orrs	r3, r2
 800c21a:	f043 0307 	orr.w	r3, r3, #7
 800c21e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	609a      	str	r2, [r3, #8]
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	ffcfff8f 	.word	0xffcfff8f

0800c238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	021a      	lsls	r2, r3, #8
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	431a      	orrs	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	4313      	orrs	r3, r2
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	4313      	orrs	r3, r2
 800c264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	609a      	str	r2, [r3, #8]
}
 800c26c:	bf00      	nop
 800c26e:	371c      	adds	r7, #28
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c278:	b480      	push	{r7}
 800c27a:	b087      	sub	sp, #28
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	f003 031f 	and.w	r3, r3, #31
 800c28a:	2201      	movs	r2, #1
 800c28c:	fa02 f303 	lsl.w	r3, r2, r3
 800c290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6a1a      	ldr	r2, [r3, #32]
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	43db      	mvns	r3, r3
 800c29a:	401a      	ands	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6a1a      	ldr	r2, [r3, #32]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	f003 031f 	and.w	r3, r3, #31
 800c2aa:	6879      	ldr	r1, [r7, #4]
 800c2ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	621a      	str	r2, [r3, #32]
}
 800c2b6:	bf00      	nop
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
	...

0800c2c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d101      	bne.n	800c2dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2d8:	2302      	movs	r3, #2
 800c2da:	e077      	b.n	800c3cc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2201      	movs	r2, #1
 800c2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a35      	ldr	r2, [pc, #212]	@ (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d004      	beq.n	800c310 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a34      	ldr	r2, [pc, #208]	@ (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d108      	bne.n	800c322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c316:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	4313      	orrs	r3, r2
 800c320:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c328:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	4313      	orrs	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a25      	ldr	r2, [pc, #148]	@ (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d02c      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c34e:	d027      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a22      	ldr	r2, [pc, #136]	@ (800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d022      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a21      	ldr	r2, [pc, #132]	@ (800c3e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d01d      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a1f      	ldr	r2, [pc, #124]	@ (800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d018      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a1a      	ldr	r2, [pc, #104]	@ (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d013      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a1b      	ldr	r2, [pc, #108]	@ (800c3ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d00e      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a1a      	ldr	r2, [pc, #104]	@ (800c3f0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d009      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a18      	ldr	r2, [pc, #96]	@ (800c3f4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d004      	beq.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a17      	ldr	r2, [pc, #92]	@ (800c3f8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d10c      	bne.n	800c3ba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2201      	movs	r2, #1
 800c3be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	40010000 	.word	0x40010000
 800c3dc:	40010400 	.word	0x40010400
 800c3e0:	40000400 	.word	0x40000400
 800c3e4:	40000800 	.word	0x40000800
 800c3e8:	40000c00 	.word	0x40000c00
 800c3ec:	40001800 	.word	0x40001800
 800c3f0:	40014000 	.word	0x40014000
 800c3f4:	4000e000 	.word	0x4000e000
 800c3f8:	4000e400 	.word	0x4000e400

0800c3fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c406:	2300      	movs	r3, #0
 800c408:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c410:	2b01      	cmp	r3, #1
 800c412:	d101      	bne.n	800c418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c414:	2302      	movs	r3, #2
 800c416:	e073      	b.n	800c500 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	4313      	orrs	r3, r2
 800c43a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	4313      	orrs	r3, r2
 800c448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4313      	orrs	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	4313      	orrs	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	695b      	ldr	r3, [r3, #20]
 800c470:	4313      	orrs	r3, r2
 800c472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c47e:	4313      	orrs	r3, r2
 800c480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	041b      	lsls	r3, r3, #16
 800c48e:	4313      	orrs	r3, r2
 800c490:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	69db      	ldr	r3, [r3, #28]
 800c49c:	4313      	orrs	r3, r2
 800c49e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a19      	ldr	r2, [pc, #100]	@ (800c50c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d004      	beq.n	800c4b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a18      	ldr	r2, [pc, #96]	@ (800c510 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d11c      	bne.n	800c4ee <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4be:	051b      	lsls	r3, r3, #20
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	40010000 	.word	0x40010000
 800c510:	40010400 	.word	0x40010400

0800c514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr

0800c528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d101      	bne.n	800c562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e042      	b.n	800c5e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d106      	bne.n	800c57a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7f6 fff7 	bl	8003568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2224      	movs	r2, #36	@ 0x24
 800c57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f022 0201 	bic.w	r2, r2, #1
 800c590:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f001 faee 	bl	800db7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fc7f 	bl	800cea4 <UART_SetConfig>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d101      	bne.n	800c5b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e01b      	b.n	800c5e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	685a      	ldr	r2, [r3, #4]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c5be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689a      	ldr	r2, [r3, #8]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f042 0201 	orr.w	r2, r2, #1
 800c5de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f001 fb6d 	bl	800dcc0 <UART_CheckIdleState>
 800c5e6:	4603      	mov	r3, r0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08a      	sub	sp, #40	@ 0x28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c604:	2b20      	cmp	r3, #32
 800c606:	d167      	bne.n	800c6d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <HAL_UART_Transmit_DMA+0x24>
 800c60e:	88fb      	ldrh	r3, [r7, #6]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e060      	b.n	800c6da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	88fa      	ldrh	r2, [r7, #6]
 800c622:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	88fa      	ldrh	r2, [r7, #6]
 800c62a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2221      	movs	r2, #33	@ 0x21
 800c63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c642:	2b00      	cmp	r3, #0
 800c644:	d028      	beq.n	800c698 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c64a:	4a26      	ldr	r2, [pc, #152]	@ (800c6e4 <HAL_UART_Transmit_DMA+0xf4>)
 800c64c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c652:	4a25      	ldr	r2, [pc, #148]	@ (800c6e8 <HAL_UART_Transmit_DMA+0xf8>)
 800c654:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c65a:	4a24      	ldr	r2, [pc, #144]	@ (800c6ec <HAL_UART_Transmit_DMA+0xfc>)
 800c65c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c662:	2200      	movs	r2, #0
 800c664:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c66e:	4619      	mov	r1, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3328      	adds	r3, #40	@ 0x28
 800c676:	461a      	mov	r2, r3
 800c678:	88fb      	ldrh	r3, [r7, #6]
 800c67a:	f7f7 ffe9 	bl	8004650 <HAL_DMA_Start_IT>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d009      	beq.n	800c698 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2210      	movs	r2, #16
 800c688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2220      	movs	r2, #32
 800c690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e020      	b.n	800c6da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	2240      	movs	r2, #64	@ 0x40
 800c69e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	e853 3f00 	ldrex	r3, [r3]
 800c6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3308      	adds	r3, #8
 800c6be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6c0:	623a      	str	r2, [r7, #32]
 800c6c2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c4:	69f9      	ldr	r1, [r7, #28]
 800c6c6:	6a3a      	ldr	r2, [r7, #32]
 800c6c8:	e841 2300 	strex	r3, r2, [r1]
 800c6cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e5      	bne.n	800c6a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e000      	b.n	800c6da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c6d8:	2302      	movs	r3, #2
  }
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3728      	adds	r7, #40	@ 0x28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0800e03d 	.word	0x0800e03d
 800c6e8:	0800e0d3 	.word	0x0800e0d3
 800c6ec:	0800e0ef 	.word	0x0800e0ef

0800c6f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b0ba      	sub	sp, #232	@ 0xe8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c71a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c71e:	4013      	ands	r3, r2
 800c720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d11b      	bne.n	800c764 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c730:	f003 0320 	and.w	r3, r3, #32
 800c734:	2b00      	cmp	r3, #0
 800c736:	d015      	beq.n	800c764 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c73c:	f003 0320 	and.w	r3, r3, #32
 800c740:	2b00      	cmp	r3, #0
 800c742:	d105      	bne.n	800c750 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d009      	beq.n	800c764 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 8377 	beq.w	800ce48 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	4798      	blx	r3
      }
      return;
 800c762:	e371      	b.n	800ce48 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 8123 	beq.w	800c9b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c76e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c772:	4b8d      	ldr	r3, [pc, #564]	@ (800c9a8 <HAL_UART_IRQHandler+0x2b8>)
 800c774:	4013      	ands	r3, r2
 800c776:	2b00      	cmp	r3, #0
 800c778:	d106      	bne.n	800c788 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c77a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c77e:	4b8b      	ldr	r3, [pc, #556]	@ (800c9ac <HAL_UART_IRQHandler+0x2bc>)
 800c780:	4013      	ands	r3, r2
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8116 	beq.w	800c9b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d011      	beq.n	800c7b8 <HAL_UART_IRQHandler+0xc8>
 800c794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00b      	beq.n	800c7b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7ae:	f043 0201 	orr.w	r2, r3, #1
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7bc:	f003 0302 	and.w	r3, r3, #2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d011      	beq.n	800c7e8 <HAL_UART_IRQHandler+0xf8>
 800c7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7c8:	f003 0301 	and.w	r3, r3, #1
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2202      	movs	r2, #2
 800c7d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7de:	f043 0204 	orr.w	r2, r3, #4
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ec:	f003 0304 	and.w	r3, r3, #4
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d011      	beq.n	800c818 <HAL_UART_IRQHandler+0x128>
 800c7f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00b      	beq.n	800c818 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2204      	movs	r2, #4
 800c806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c80e:	f043 0202 	orr.w	r2, r3, #2
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c81c:	f003 0308 	and.w	r3, r3, #8
 800c820:	2b00      	cmp	r3, #0
 800c822:	d017      	beq.n	800c854 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c828:	f003 0320 	and.w	r3, r3, #32
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d105      	bne.n	800c83c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c834:	4b5c      	ldr	r3, [pc, #368]	@ (800c9a8 <HAL_UART_IRQHandler+0x2b8>)
 800c836:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00b      	beq.n	800c854 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2208      	movs	r2, #8
 800c842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c84a:	f043 0208 	orr.w	r2, r3, #8
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d012      	beq.n	800c886 <HAL_UART_IRQHandler+0x196>
 800c860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c864:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00c      	beq.n	800c886 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c87c:	f043 0220 	orr.w	r2, r3, #32
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 82dd 	beq.w	800ce4c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c896:	f003 0320 	and.w	r3, r3, #32
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d013      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c89e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d105      	bne.n	800c8b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d007      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d003      	beq.n	800c8c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8da:	2b40      	cmp	r3, #64	@ 0x40
 800c8dc:	d005      	beq.n	800c8ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c8de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d054      	beq.n	800c994 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f001 fb40 	bl	800df70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8fa:	2b40      	cmp	r3, #64	@ 0x40
 800c8fc:	d146      	bne.n	800c98c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3308      	adds	r3, #8
 800c904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c90c:	e853 3f00 	ldrex	r3, [r3]
 800c910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c91c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3308      	adds	r3, #8
 800c926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c92a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c92e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c93a:	e841 2300 	strex	r3, r2, [r1]
 800c93e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1d9      	bne.n	800c8fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c950:	2b00      	cmp	r3, #0
 800c952:	d017      	beq.n	800c984 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c95a:	4a15      	ldr	r2, [pc, #84]	@ (800c9b0 <HAL_UART_IRQHandler+0x2c0>)
 800c95c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c964:	4618      	mov	r0, r3
 800c966:	f7f8 fbfb 	bl	8005160 <HAL_DMA_Abort_IT>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d019      	beq.n	800c9a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c97e:	4610      	mov	r0, r2
 800c980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c982:	e00f      	b.n	800c9a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fa77 	bl	800ce78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c98a:	e00b      	b.n	800c9a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fa73 	bl	800ce78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c992:	e007      	b.n	800c9a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fa6f 	bl	800ce78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c9a2:	e253      	b.n	800ce4c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9a4:	bf00      	nop
    return;
 800c9a6:	e251      	b.n	800ce4c <HAL_UART_IRQHandler+0x75c>
 800c9a8:	10000001 	.word	0x10000001
 800c9ac:	04000120 	.word	0x04000120
 800c9b0:	0800e16f 	.word	0x0800e16f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	f040 81e7 	bne.w	800cd8c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c9be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9c2:	f003 0310 	and.w	r3, r3, #16
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 81e0 	beq.w	800cd8c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9d0:	f003 0310 	and.w	r3, r3, #16
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 81d9 	beq.w	800cd8c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2210      	movs	r2, #16
 800c9e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ec:	2b40      	cmp	r3, #64	@ 0x40
 800c9ee:	f040 8151 	bne.w	800cc94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a96      	ldr	r2, [pc, #600]	@ (800cc54 <HAL_UART_IRQHandler+0x564>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d068      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a93      	ldr	r2, [pc, #588]	@ (800cc58 <HAL_UART_IRQHandler+0x568>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d061      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a91      	ldr	r2, [pc, #580]	@ (800cc5c <HAL_UART_IRQHandler+0x56c>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d05a      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a8e      	ldr	r2, [pc, #568]	@ (800cc60 <HAL_UART_IRQHandler+0x570>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d053      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a8c      	ldr	r2, [pc, #560]	@ (800cc64 <HAL_UART_IRQHandler+0x574>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d04c      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a89      	ldr	r2, [pc, #548]	@ (800cc68 <HAL_UART_IRQHandler+0x578>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d045      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a87      	ldr	r2, [pc, #540]	@ (800cc6c <HAL_UART_IRQHandler+0x57c>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d03e      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a84      	ldr	r2, [pc, #528]	@ (800cc70 <HAL_UART_IRQHandler+0x580>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d037      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a82      	ldr	r2, [pc, #520]	@ (800cc74 <HAL_UART_IRQHandler+0x584>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d030      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a7f      	ldr	r2, [pc, #508]	@ (800cc78 <HAL_UART_IRQHandler+0x588>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d029      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a7d      	ldr	r2, [pc, #500]	@ (800cc7c <HAL_UART_IRQHandler+0x58c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d022      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a7a      	ldr	r2, [pc, #488]	@ (800cc80 <HAL_UART_IRQHandler+0x590>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d01b      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a78      	ldr	r2, [pc, #480]	@ (800cc84 <HAL_UART_IRQHandler+0x594>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d014      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a75      	ldr	r2, [pc, #468]	@ (800cc88 <HAL_UART_IRQHandler+0x598>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d00d      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a73      	ldr	r2, [pc, #460]	@ (800cc8c <HAL_UART_IRQHandler+0x59c>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d006      	beq.n	800cad2 <HAL_UART_IRQHandler+0x3e2>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a70      	ldr	r2, [pc, #448]	@ (800cc90 <HAL_UART_IRQHandler+0x5a0>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d106      	bne.n	800cae0 <HAL_UART_IRQHandler+0x3f0>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	e005      	b.n	800caec <HAL_UART_IRQHandler+0x3fc>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	b29b      	uxth	r3, r3
 800caec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800caf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f000 81ab 	beq.w	800ce50 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cb00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb04:	429a      	cmp	r2, r3
 800cb06:	f080 81a3 	bcs.w	800ce50 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cb10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb1a:	69db      	ldr	r3, [r3, #28]
 800cb1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb20:	f000 8087 	beq.w	800cc32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cb38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cb3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cb4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cb5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cb5e:	e841 2300 	strex	r3, r2, [r1]
 800cb62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cb66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1da      	bne.n	800cb24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3308      	adds	r3, #8
 800cb74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb78:	e853 3f00 	ldrex	r3, [r3]
 800cb7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cb7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb80:	f023 0301 	bic.w	r3, r3, #1
 800cb84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cb96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cb9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cb9e:	e841 2300 	strex	r3, r2, [r1]
 800cba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1e1      	bne.n	800cb6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	3308      	adds	r3, #8
 800cbb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbb4:	e853 3f00 	ldrex	r3, [r3]
 800cbb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cbba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	3308      	adds	r3, #8
 800cbca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cbce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cbd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cbd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cbd6:	e841 2300 	strex	r3, r2, [r1]
 800cbda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cbdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d1e3      	bne.n	800cbaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2220      	movs	r2, #32
 800cbe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbf8:	e853 3f00 	ldrex	r3, [r3]
 800cbfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cbfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc00:	f023 0310 	bic.w	r3, r3, #16
 800cc04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc1a:	e841 2300 	strex	r3, r2, [r1]
 800cc1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1e4      	bne.n	800cbf0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7f7 ff79 	bl	8004b24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2202      	movs	r2, #2
 800cc36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f91d 	bl	800ce8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc52:	e0fd      	b.n	800ce50 <HAL_UART_IRQHandler+0x760>
 800cc54:	40020010 	.word	0x40020010
 800cc58:	40020028 	.word	0x40020028
 800cc5c:	40020040 	.word	0x40020040
 800cc60:	40020058 	.word	0x40020058
 800cc64:	40020070 	.word	0x40020070
 800cc68:	40020088 	.word	0x40020088
 800cc6c:	400200a0 	.word	0x400200a0
 800cc70:	400200b8 	.word	0x400200b8
 800cc74:	40020410 	.word	0x40020410
 800cc78:	40020428 	.word	0x40020428
 800cc7c:	40020440 	.word	0x40020440
 800cc80:	40020458 	.word	0x40020458
 800cc84:	40020470 	.word	0x40020470
 800cc88:	40020488 	.word	0x40020488
 800cc8c:	400204a0 	.word	0x400204a0
 800cc90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 80cf 	beq.w	800ce54 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ccb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 80ca 	beq.w	800ce54 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc8:	e853 3f00 	ldrex	r3, [r3]
 800cccc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cce2:	647b      	str	r3, [r7, #68]	@ 0x44
 800cce4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e4      	bne.n	800ccc0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	e853 3f00 	ldrex	r3, [r3]
 800cd04:	623b      	str	r3, [r7, #32]
   return(result);
 800cd06:	6a3a      	ldr	r2, [r7, #32]
 800cd08:	4b55      	ldr	r3, [pc, #340]	@ (800ce60 <HAL_UART_IRQHandler+0x770>)
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3308      	adds	r3, #8
 800cd16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cd1a:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e3      	bne.n	800ccf6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2220      	movs	r2, #32
 800cd32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	e853 3f00 	ldrex	r3, [r3]
 800cd4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 0310 	bic.w	r3, r3, #16
 800cd56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cd64:	61fb      	str	r3, [r7, #28]
 800cd66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd68:	69b9      	ldr	r1, [r7, #24]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	e841 2300 	strex	r3, r2, [r1]
 800cd70:	617b      	str	r3, [r7, #20]
   return(result);
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1e4      	bne.n	800cd42 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cd7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f881 	bl	800ce8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd8a:	e063      	b.n	800ce54 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00e      	beq.n	800cdb6 <HAL_UART_IRQHandler+0x6c6>
 800cd98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d008      	beq.n	800cdb6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cdac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f001 fa1e 	bl	800e1f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cdb4:	e051      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cdb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d014      	beq.n	800cdec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cdc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cdce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d008      	beq.n	800cdec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d03a      	beq.n	800ce58 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	4798      	blx	r3
    }
    return;
 800cdea:	e035      	b.n	800ce58 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cdec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d009      	beq.n	800ce0c <HAL_UART_IRQHandler+0x71c>
 800cdf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d003      	beq.n	800ce0c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f001 f9c8 	bl	800e19a <UART_EndTransmit_IT>
    return;
 800ce0a:	e026      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d009      	beq.n	800ce2c <HAL_UART_IRQHandler+0x73c>
 800ce18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d003      	beq.n	800ce2c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f001 f9f7 	bl	800e218 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce2a:	e016      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d010      	beq.n	800ce5a <HAL_UART_IRQHandler+0x76a>
 800ce38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	da0c      	bge.n	800ce5a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f001 f9df 	bl	800e204 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce46:	e008      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
      return;
 800ce48:	bf00      	nop
 800ce4a:	e006      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
    return;
 800ce4c:	bf00      	nop
 800ce4e:	e004      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
      return;
 800ce50:	bf00      	nop
 800ce52:	e002      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
      return;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <HAL_UART_IRQHandler+0x76a>
    return;
 800ce58:	bf00      	nop
  }
}
 800ce5a:	37e8      	adds	r7, #232	@ 0xe8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	effffffe 	.word	0xeffffffe

0800ce64 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cea8:	b092      	sub	sp, #72	@ 0x48
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	689a      	ldr	r2, [r3, #8]
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	431a      	orrs	r2, r3
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	431a      	orrs	r2, r3
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	69db      	ldr	r3, [r3, #28]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	4bbe      	ldr	r3, [pc, #760]	@ (800d1cc <UART_SetConfig+0x328>)
 800ced4:	4013      	ands	r3, r2
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	6812      	ldr	r2, [r2, #0]
 800ceda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cedc:	430b      	orrs	r3, r1
 800cede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	68da      	ldr	r2, [r3, #12]
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	699b      	ldr	r3, [r3, #24]
 800cefa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4ab3      	ldr	r2, [pc, #716]	@ (800d1d0 <UART_SetConfig+0x32c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d004      	beq.n	800cf10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	689a      	ldr	r2, [r3, #8]
 800cf16:	4baf      	ldr	r3, [pc, #700]	@ (800d1d4 <UART_SetConfig+0x330>)
 800cf18:	4013      	ands	r3, r2
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	6812      	ldr	r2, [r2, #0]
 800cf1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cf20:	430b      	orrs	r3, r1
 800cf22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2a:	f023 010f 	bic.w	r1, r3, #15
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	430a      	orrs	r2, r1
 800cf38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4aa6      	ldr	r2, [pc, #664]	@ (800d1d8 <UART_SetConfig+0x334>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d177      	bne.n	800d034 <UART_SetConfig+0x190>
 800cf44:	4ba5      	ldr	r3, [pc, #660]	@ (800d1dc <UART_SetConfig+0x338>)
 800cf46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf4c:	2b28      	cmp	r3, #40	@ 0x28
 800cf4e:	d86d      	bhi.n	800d02c <UART_SetConfig+0x188>
 800cf50:	a201      	add	r2, pc, #4	@ (adr r2, 800cf58 <UART_SetConfig+0xb4>)
 800cf52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf56:	bf00      	nop
 800cf58:	0800cffd 	.word	0x0800cffd
 800cf5c:	0800d02d 	.word	0x0800d02d
 800cf60:	0800d02d 	.word	0x0800d02d
 800cf64:	0800d02d 	.word	0x0800d02d
 800cf68:	0800d02d 	.word	0x0800d02d
 800cf6c:	0800d02d 	.word	0x0800d02d
 800cf70:	0800d02d 	.word	0x0800d02d
 800cf74:	0800d02d 	.word	0x0800d02d
 800cf78:	0800d005 	.word	0x0800d005
 800cf7c:	0800d02d 	.word	0x0800d02d
 800cf80:	0800d02d 	.word	0x0800d02d
 800cf84:	0800d02d 	.word	0x0800d02d
 800cf88:	0800d02d 	.word	0x0800d02d
 800cf8c:	0800d02d 	.word	0x0800d02d
 800cf90:	0800d02d 	.word	0x0800d02d
 800cf94:	0800d02d 	.word	0x0800d02d
 800cf98:	0800d00d 	.word	0x0800d00d
 800cf9c:	0800d02d 	.word	0x0800d02d
 800cfa0:	0800d02d 	.word	0x0800d02d
 800cfa4:	0800d02d 	.word	0x0800d02d
 800cfa8:	0800d02d 	.word	0x0800d02d
 800cfac:	0800d02d 	.word	0x0800d02d
 800cfb0:	0800d02d 	.word	0x0800d02d
 800cfb4:	0800d02d 	.word	0x0800d02d
 800cfb8:	0800d015 	.word	0x0800d015
 800cfbc:	0800d02d 	.word	0x0800d02d
 800cfc0:	0800d02d 	.word	0x0800d02d
 800cfc4:	0800d02d 	.word	0x0800d02d
 800cfc8:	0800d02d 	.word	0x0800d02d
 800cfcc:	0800d02d 	.word	0x0800d02d
 800cfd0:	0800d02d 	.word	0x0800d02d
 800cfd4:	0800d02d 	.word	0x0800d02d
 800cfd8:	0800d01d 	.word	0x0800d01d
 800cfdc:	0800d02d 	.word	0x0800d02d
 800cfe0:	0800d02d 	.word	0x0800d02d
 800cfe4:	0800d02d 	.word	0x0800d02d
 800cfe8:	0800d02d 	.word	0x0800d02d
 800cfec:	0800d02d 	.word	0x0800d02d
 800cff0:	0800d02d 	.word	0x0800d02d
 800cff4:	0800d02d 	.word	0x0800d02d
 800cff8:	0800d025 	.word	0x0800d025
 800cffc:	2301      	movs	r3, #1
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e326      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d004:	2304      	movs	r3, #4
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e322      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d00c:	2308      	movs	r3, #8
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e31e      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d014:	2310      	movs	r3, #16
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e31a      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d01c:	2320      	movs	r3, #32
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e316      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d024:	2340      	movs	r3, #64	@ 0x40
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e312      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d02c:	2380      	movs	r3, #128	@ 0x80
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e30e      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a69      	ldr	r2, [pc, #420]	@ (800d1e0 <UART_SetConfig+0x33c>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d130      	bne.n	800d0a0 <UART_SetConfig+0x1fc>
 800d03e:	4b67      	ldr	r3, [pc, #412]	@ (800d1dc <UART_SetConfig+0x338>)
 800d040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d042:	f003 0307 	and.w	r3, r3, #7
 800d046:	2b05      	cmp	r3, #5
 800d048:	d826      	bhi.n	800d098 <UART_SetConfig+0x1f4>
 800d04a:	a201      	add	r2, pc, #4	@ (adr r2, 800d050 <UART_SetConfig+0x1ac>)
 800d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d050:	0800d069 	.word	0x0800d069
 800d054:	0800d071 	.word	0x0800d071
 800d058:	0800d079 	.word	0x0800d079
 800d05c:	0800d081 	.word	0x0800d081
 800d060:	0800d089 	.word	0x0800d089
 800d064:	0800d091 	.word	0x0800d091
 800d068:	2300      	movs	r3, #0
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e2f0      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d070:	2304      	movs	r3, #4
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e2ec      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d078:	2308      	movs	r3, #8
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e2e8      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d080:	2310      	movs	r3, #16
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e2e4      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d088:	2320      	movs	r3, #32
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e2e0      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d090:	2340      	movs	r3, #64	@ 0x40
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e2dc      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d098:	2380      	movs	r3, #128	@ 0x80
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e2d8      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a4f      	ldr	r2, [pc, #316]	@ (800d1e4 <UART_SetConfig+0x340>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d130      	bne.n	800d10c <UART_SetConfig+0x268>
 800d0aa:	4b4c      	ldr	r3, [pc, #304]	@ (800d1dc <UART_SetConfig+0x338>)
 800d0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0ae:	f003 0307 	and.w	r3, r3, #7
 800d0b2:	2b05      	cmp	r3, #5
 800d0b4:	d826      	bhi.n	800d104 <UART_SetConfig+0x260>
 800d0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0bc <UART_SetConfig+0x218>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d0d5 	.word	0x0800d0d5
 800d0c0:	0800d0dd 	.word	0x0800d0dd
 800d0c4:	0800d0e5 	.word	0x0800d0e5
 800d0c8:	0800d0ed 	.word	0x0800d0ed
 800d0cc:	0800d0f5 	.word	0x0800d0f5
 800d0d0:	0800d0fd 	.word	0x0800d0fd
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0da:	e2ba      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d0dc:	2304      	movs	r3, #4
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e2b6      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d0e4:	2308      	movs	r3, #8
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e2b2      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e2ae      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d0f4:	2320      	movs	r3, #32
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e2aa      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d0fc:	2340      	movs	r3, #64	@ 0x40
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e2a6      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d104:	2380      	movs	r3, #128	@ 0x80
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e2a2      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4a35      	ldr	r2, [pc, #212]	@ (800d1e8 <UART_SetConfig+0x344>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d130      	bne.n	800d178 <UART_SetConfig+0x2d4>
 800d116:	4b31      	ldr	r3, [pc, #196]	@ (800d1dc <UART_SetConfig+0x338>)
 800d118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d11a:	f003 0307 	and.w	r3, r3, #7
 800d11e:	2b05      	cmp	r3, #5
 800d120:	d826      	bhi.n	800d170 <UART_SetConfig+0x2cc>
 800d122:	a201      	add	r2, pc, #4	@ (adr r2, 800d128 <UART_SetConfig+0x284>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d141 	.word	0x0800d141
 800d12c:	0800d149 	.word	0x0800d149
 800d130:	0800d151 	.word	0x0800d151
 800d134:	0800d159 	.word	0x0800d159
 800d138:	0800d161 	.word	0x0800d161
 800d13c:	0800d169 	.word	0x0800d169
 800d140:	2300      	movs	r3, #0
 800d142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d146:	e284      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d148:	2304      	movs	r3, #4
 800d14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d14e:	e280      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d150:	2308      	movs	r3, #8
 800d152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d156:	e27c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d158:	2310      	movs	r3, #16
 800d15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d15e:	e278      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d160:	2320      	movs	r3, #32
 800d162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d166:	e274      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d168:	2340      	movs	r3, #64	@ 0x40
 800d16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d16e:	e270      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d170:	2380      	movs	r3, #128	@ 0x80
 800d172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d176:	e26c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a1b      	ldr	r2, [pc, #108]	@ (800d1ec <UART_SetConfig+0x348>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d142      	bne.n	800d208 <UART_SetConfig+0x364>
 800d182:	4b16      	ldr	r3, [pc, #88]	@ (800d1dc <UART_SetConfig+0x338>)
 800d184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d186:	f003 0307 	and.w	r3, r3, #7
 800d18a:	2b05      	cmp	r3, #5
 800d18c:	d838      	bhi.n	800d200 <UART_SetConfig+0x35c>
 800d18e:	a201      	add	r2, pc, #4	@ (adr r2, 800d194 <UART_SetConfig+0x2f0>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d1ad 	.word	0x0800d1ad
 800d198:	0800d1b5 	.word	0x0800d1b5
 800d19c:	0800d1bd 	.word	0x0800d1bd
 800d1a0:	0800d1c5 	.word	0x0800d1c5
 800d1a4:	0800d1f1 	.word	0x0800d1f1
 800d1a8:	0800d1f9 	.word	0x0800d1f9
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b2:	e24e      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d1b4:	2304      	movs	r3, #4
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	e24a      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d1bc:	2308      	movs	r3, #8
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1c2:	e246      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d1c4:	2310      	movs	r3, #16
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ca:	e242      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d1cc:	cfff69f3 	.word	0xcfff69f3
 800d1d0:	58000c00 	.word	0x58000c00
 800d1d4:	11fff4ff 	.word	0x11fff4ff
 800d1d8:	40011000 	.word	0x40011000
 800d1dc:	58024400 	.word	0x58024400
 800d1e0:	40004400 	.word	0x40004400
 800d1e4:	40004800 	.word	0x40004800
 800d1e8:	40004c00 	.word	0x40004c00
 800d1ec:	40005000 	.word	0x40005000
 800d1f0:	2320      	movs	r3, #32
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f6:	e22c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d1f8:	2340      	movs	r3, #64	@ 0x40
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e228      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d200:	2380      	movs	r3, #128	@ 0x80
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e224      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4ab1      	ldr	r2, [pc, #708]	@ (800d4d4 <UART_SetConfig+0x630>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d176      	bne.n	800d300 <UART_SetConfig+0x45c>
 800d212:	4bb1      	ldr	r3, [pc, #708]	@ (800d4d8 <UART_SetConfig+0x634>)
 800d214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d21a:	2b28      	cmp	r3, #40	@ 0x28
 800d21c:	d86c      	bhi.n	800d2f8 <UART_SetConfig+0x454>
 800d21e:	a201      	add	r2, pc, #4	@ (adr r2, 800d224 <UART_SetConfig+0x380>)
 800d220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d224:	0800d2c9 	.word	0x0800d2c9
 800d228:	0800d2f9 	.word	0x0800d2f9
 800d22c:	0800d2f9 	.word	0x0800d2f9
 800d230:	0800d2f9 	.word	0x0800d2f9
 800d234:	0800d2f9 	.word	0x0800d2f9
 800d238:	0800d2f9 	.word	0x0800d2f9
 800d23c:	0800d2f9 	.word	0x0800d2f9
 800d240:	0800d2f9 	.word	0x0800d2f9
 800d244:	0800d2d1 	.word	0x0800d2d1
 800d248:	0800d2f9 	.word	0x0800d2f9
 800d24c:	0800d2f9 	.word	0x0800d2f9
 800d250:	0800d2f9 	.word	0x0800d2f9
 800d254:	0800d2f9 	.word	0x0800d2f9
 800d258:	0800d2f9 	.word	0x0800d2f9
 800d25c:	0800d2f9 	.word	0x0800d2f9
 800d260:	0800d2f9 	.word	0x0800d2f9
 800d264:	0800d2d9 	.word	0x0800d2d9
 800d268:	0800d2f9 	.word	0x0800d2f9
 800d26c:	0800d2f9 	.word	0x0800d2f9
 800d270:	0800d2f9 	.word	0x0800d2f9
 800d274:	0800d2f9 	.word	0x0800d2f9
 800d278:	0800d2f9 	.word	0x0800d2f9
 800d27c:	0800d2f9 	.word	0x0800d2f9
 800d280:	0800d2f9 	.word	0x0800d2f9
 800d284:	0800d2e1 	.word	0x0800d2e1
 800d288:	0800d2f9 	.word	0x0800d2f9
 800d28c:	0800d2f9 	.word	0x0800d2f9
 800d290:	0800d2f9 	.word	0x0800d2f9
 800d294:	0800d2f9 	.word	0x0800d2f9
 800d298:	0800d2f9 	.word	0x0800d2f9
 800d29c:	0800d2f9 	.word	0x0800d2f9
 800d2a0:	0800d2f9 	.word	0x0800d2f9
 800d2a4:	0800d2e9 	.word	0x0800d2e9
 800d2a8:	0800d2f9 	.word	0x0800d2f9
 800d2ac:	0800d2f9 	.word	0x0800d2f9
 800d2b0:	0800d2f9 	.word	0x0800d2f9
 800d2b4:	0800d2f9 	.word	0x0800d2f9
 800d2b8:	0800d2f9 	.word	0x0800d2f9
 800d2bc:	0800d2f9 	.word	0x0800d2f9
 800d2c0:	0800d2f9 	.word	0x0800d2f9
 800d2c4:	0800d2f1 	.word	0x0800d2f1
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ce:	e1c0      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d6:	e1bc      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d2d8:	2308      	movs	r3, #8
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2de:	e1b8      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d2e0:	2310      	movs	r3, #16
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e6:	e1b4      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d2e8:	2320      	movs	r3, #32
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ee:	e1b0      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d2f0:	2340      	movs	r3, #64	@ 0x40
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f6:	e1ac      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d2f8:	2380      	movs	r3, #128	@ 0x80
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fe:	e1a8      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a75      	ldr	r2, [pc, #468]	@ (800d4dc <UART_SetConfig+0x638>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d130      	bne.n	800d36c <UART_SetConfig+0x4c8>
 800d30a:	4b73      	ldr	r3, [pc, #460]	@ (800d4d8 <UART_SetConfig+0x634>)
 800d30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	2b05      	cmp	r3, #5
 800d314:	d826      	bhi.n	800d364 <UART_SetConfig+0x4c0>
 800d316:	a201      	add	r2, pc, #4	@ (adr r2, 800d31c <UART_SetConfig+0x478>)
 800d318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31c:	0800d335 	.word	0x0800d335
 800d320:	0800d33d 	.word	0x0800d33d
 800d324:	0800d345 	.word	0x0800d345
 800d328:	0800d34d 	.word	0x0800d34d
 800d32c:	0800d355 	.word	0x0800d355
 800d330:	0800d35d 	.word	0x0800d35d
 800d334:	2300      	movs	r3, #0
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33a:	e18a      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d33c:	2304      	movs	r3, #4
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e186      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d344:	2308      	movs	r3, #8
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e182      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d34c:	2310      	movs	r3, #16
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e17e      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d354:	2320      	movs	r3, #32
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e17a      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d35c:	2340      	movs	r3, #64	@ 0x40
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d362:	e176      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d364:	2380      	movs	r3, #128	@ 0x80
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36a:	e172      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a5b      	ldr	r2, [pc, #364]	@ (800d4e0 <UART_SetConfig+0x63c>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d130      	bne.n	800d3d8 <UART_SetConfig+0x534>
 800d376:	4b58      	ldr	r3, [pc, #352]	@ (800d4d8 <UART_SetConfig+0x634>)
 800d378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d37a:	f003 0307 	and.w	r3, r3, #7
 800d37e:	2b05      	cmp	r3, #5
 800d380:	d826      	bhi.n	800d3d0 <UART_SetConfig+0x52c>
 800d382:	a201      	add	r2, pc, #4	@ (adr r2, 800d388 <UART_SetConfig+0x4e4>)
 800d384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d388:	0800d3a1 	.word	0x0800d3a1
 800d38c:	0800d3a9 	.word	0x0800d3a9
 800d390:	0800d3b1 	.word	0x0800d3b1
 800d394:	0800d3b9 	.word	0x0800d3b9
 800d398:	0800d3c1 	.word	0x0800d3c1
 800d39c:	0800d3c9 	.word	0x0800d3c9
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a6:	e154      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3a8:	2304      	movs	r3, #4
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ae:	e150      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3b0:	2308      	movs	r3, #8
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b6:	e14c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3b8:	2310      	movs	r3, #16
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3be:	e148      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3c0:	2320      	movs	r3, #32
 800d3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c6:	e144      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3c8:	2340      	movs	r3, #64	@ 0x40
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ce:	e140      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3d0:	2380      	movs	r3, #128	@ 0x80
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3d6:	e13c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a41      	ldr	r2, [pc, #260]	@ (800d4e4 <UART_SetConfig+0x640>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	f040 8082 	bne.w	800d4e8 <UART_SetConfig+0x644>
 800d3e4:	4b3c      	ldr	r3, [pc, #240]	@ (800d4d8 <UART_SetConfig+0x634>)
 800d3e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3ec:	2b28      	cmp	r3, #40	@ 0x28
 800d3ee:	d86d      	bhi.n	800d4cc <UART_SetConfig+0x628>
 800d3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f8 <UART_SetConfig+0x554>)
 800d3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f6:	bf00      	nop
 800d3f8:	0800d49d 	.word	0x0800d49d
 800d3fc:	0800d4cd 	.word	0x0800d4cd
 800d400:	0800d4cd 	.word	0x0800d4cd
 800d404:	0800d4cd 	.word	0x0800d4cd
 800d408:	0800d4cd 	.word	0x0800d4cd
 800d40c:	0800d4cd 	.word	0x0800d4cd
 800d410:	0800d4cd 	.word	0x0800d4cd
 800d414:	0800d4cd 	.word	0x0800d4cd
 800d418:	0800d4a5 	.word	0x0800d4a5
 800d41c:	0800d4cd 	.word	0x0800d4cd
 800d420:	0800d4cd 	.word	0x0800d4cd
 800d424:	0800d4cd 	.word	0x0800d4cd
 800d428:	0800d4cd 	.word	0x0800d4cd
 800d42c:	0800d4cd 	.word	0x0800d4cd
 800d430:	0800d4cd 	.word	0x0800d4cd
 800d434:	0800d4cd 	.word	0x0800d4cd
 800d438:	0800d4ad 	.word	0x0800d4ad
 800d43c:	0800d4cd 	.word	0x0800d4cd
 800d440:	0800d4cd 	.word	0x0800d4cd
 800d444:	0800d4cd 	.word	0x0800d4cd
 800d448:	0800d4cd 	.word	0x0800d4cd
 800d44c:	0800d4cd 	.word	0x0800d4cd
 800d450:	0800d4cd 	.word	0x0800d4cd
 800d454:	0800d4cd 	.word	0x0800d4cd
 800d458:	0800d4b5 	.word	0x0800d4b5
 800d45c:	0800d4cd 	.word	0x0800d4cd
 800d460:	0800d4cd 	.word	0x0800d4cd
 800d464:	0800d4cd 	.word	0x0800d4cd
 800d468:	0800d4cd 	.word	0x0800d4cd
 800d46c:	0800d4cd 	.word	0x0800d4cd
 800d470:	0800d4cd 	.word	0x0800d4cd
 800d474:	0800d4cd 	.word	0x0800d4cd
 800d478:	0800d4bd 	.word	0x0800d4bd
 800d47c:	0800d4cd 	.word	0x0800d4cd
 800d480:	0800d4cd 	.word	0x0800d4cd
 800d484:	0800d4cd 	.word	0x0800d4cd
 800d488:	0800d4cd 	.word	0x0800d4cd
 800d48c:	0800d4cd 	.word	0x0800d4cd
 800d490:	0800d4cd 	.word	0x0800d4cd
 800d494:	0800d4cd 	.word	0x0800d4cd
 800d498:	0800d4c5 	.word	0x0800d4c5
 800d49c:	2301      	movs	r3, #1
 800d49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4a2:	e0d6      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4aa:	e0d2      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4ac:	2308      	movs	r3, #8
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4b2:	e0ce      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4b4:	2310      	movs	r3, #16
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ba:	e0ca      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4bc:	2320      	movs	r3, #32
 800d4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4c2:	e0c6      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4c4:	2340      	movs	r3, #64	@ 0x40
 800d4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ca:	e0c2      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4cc:	2380      	movs	r3, #128	@ 0x80
 800d4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4d2:	e0be      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d4d4:	40011400 	.word	0x40011400
 800d4d8:	58024400 	.word	0x58024400
 800d4dc:	40007800 	.word	0x40007800
 800d4e0:	40007c00 	.word	0x40007c00
 800d4e4:	40011800 	.word	0x40011800
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4aad      	ldr	r2, [pc, #692]	@ (800d7a4 <UART_SetConfig+0x900>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d176      	bne.n	800d5e0 <UART_SetConfig+0x73c>
 800d4f2:	4bad      	ldr	r3, [pc, #692]	@ (800d7a8 <UART_SetConfig+0x904>)
 800d4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d4fa:	2b28      	cmp	r3, #40	@ 0x28
 800d4fc:	d86c      	bhi.n	800d5d8 <UART_SetConfig+0x734>
 800d4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d504 <UART_SetConfig+0x660>)
 800d500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d504:	0800d5a9 	.word	0x0800d5a9
 800d508:	0800d5d9 	.word	0x0800d5d9
 800d50c:	0800d5d9 	.word	0x0800d5d9
 800d510:	0800d5d9 	.word	0x0800d5d9
 800d514:	0800d5d9 	.word	0x0800d5d9
 800d518:	0800d5d9 	.word	0x0800d5d9
 800d51c:	0800d5d9 	.word	0x0800d5d9
 800d520:	0800d5d9 	.word	0x0800d5d9
 800d524:	0800d5b1 	.word	0x0800d5b1
 800d528:	0800d5d9 	.word	0x0800d5d9
 800d52c:	0800d5d9 	.word	0x0800d5d9
 800d530:	0800d5d9 	.word	0x0800d5d9
 800d534:	0800d5d9 	.word	0x0800d5d9
 800d538:	0800d5d9 	.word	0x0800d5d9
 800d53c:	0800d5d9 	.word	0x0800d5d9
 800d540:	0800d5d9 	.word	0x0800d5d9
 800d544:	0800d5b9 	.word	0x0800d5b9
 800d548:	0800d5d9 	.word	0x0800d5d9
 800d54c:	0800d5d9 	.word	0x0800d5d9
 800d550:	0800d5d9 	.word	0x0800d5d9
 800d554:	0800d5d9 	.word	0x0800d5d9
 800d558:	0800d5d9 	.word	0x0800d5d9
 800d55c:	0800d5d9 	.word	0x0800d5d9
 800d560:	0800d5d9 	.word	0x0800d5d9
 800d564:	0800d5c1 	.word	0x0800d5c1
 800d568:	0800d5d9 	.word	0x0800d5d9
 800d56c:	0800d5d9 	.word	0x0800d5d9
 800d570:	0800d5d9 	.word	0x0800d5d9
 800d574:	0800d5d9 	.word	0x0800d5d9
 800d578:	0800d5d9 	.word	0x0800d5d9
 800d57c:	0800d5d9 	.word	0x0800d5d9
 800d580:	0800d5d9 	.word	0x0800d5d9
 800d584:	0800d5c9 	.word	0x0800d5c9
 800d588:	0800d5d9 	.word	0x0800d5d9
 800d58c:	0800d5d9 	.word	0x0800d5d9
 800d590:	0800d5d9 	.word	0x0800d5d9
 800d594:	0800d5d9 	.word	0x0800d5d9
 800d598:	0800d5d9 	.word	0x0800d5d9
 800d59c:	0800d5d9 	.word	0x0800d5d9
 800d5a0:	0800d5d9 	.word	0x0800d5d9
 800d5a4:	0800d5d1 	.word	0x0800d5d1
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ae:	e050      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5b6:	e04c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5b8:	2308      	movs	r3, #8
 800d5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5be:	e048      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5c0:	2310      	movs	r3, #16
 800d5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5c6:	e044      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5c8:	2320      	movs	r3, #32
 800d5ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5ce:	e040      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5d0:	2340      	movs	r3, #64	@ 0x40
 800d5d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5d6:	e03c      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5d8:	2380      	movs	r3, #128	@ 0x80
 800d5da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5de:	e038      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a71      	ldr	r2, [pc, #452]	@ (800d7ac <UART_SetConfig+0x908>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d130      	bne.n	800d64c <UART_SetConfig+0x7a8>
 800d5ea:	4b6f      	ldr	r3, [pc, #444]	@ (800d7a8 <UART_SetConfig+0x904>)
 800d5ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5ee:	f003 0307 	and.w	r3, r3, #7
 800d5f2:	2b05      	cmp	r3, #5
 800d5f4:	d826      	bhi.n	800d644 <UART_SetConfig+0x7a0>
 800d5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d5fc <UART_SetConfig+0x758>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d615 	.word	0x0800d615
 800d600:	0800d61d 	.word	0x0800d61d
 800d604:	0800d625 	.word	0x0800d625
 800d608:	0800d62d 	.word	0x0800d62d
 800d60c:	0800d635 	.word	0x0800d635
 800d610:	0800d63d 	.word	0x0800d63d
 800d614:	2302      	movs	r3, #2
 800d616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61a:	e01a      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d61c:	2304      	movs	r3, #4
 800d61e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d622:	e016      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d624:	2308      	movs	r3, #8
 800d626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62a:	e012      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d62c:	2310      	movs	r3, #16
 800d62e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d632:	e00e      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d634:	2320      	movs	r3, #32
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d63a:	e00a      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d63c:	2340      	movs	r3, #64	@ 0x40
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d642:	e006      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d644:	2380      	movs	r3, #128	@ 0x80
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d64a:	e002      	b.n	800d652 <UART_SetConfig+0x7ae>
 800d64c:	2380      	movs	r3, #128	@ 0x80
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a55      	ldr	r2, [pc, #340]	@ (800d7ac <UART_SetConfig+0x908>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	f040 80f8 	bne.w	800d84e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d65e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d662:	2b20      	cmp	r3, #32
 800d664:	dc46      	bgt.n	800d6f4 <UART_SetConfig+0x850>
 800d666:	2b02      	cmp	r3, #2
 800d668:	db75      	blt.n	800d756 <UART_SetConfig+0x8b2>
 800d66a:	3b02      	subs	r3, #2
 800d66c:	2b1e      	cmp	r3, #30
 800d66e:	d872      	bhi.n	800d756 <UART_SetConfig+0x8b2>
 800d670:	a201      	add	r2, pc, #4	@ (adr r2, 800d678 <UART_SetConfig+0x7d4>)
 800d672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d676:	bf00      	nop
 800d678:	0800d6fb 	.word	0x0800d6fb
 800d67c:	0800d757 	.word	0x0800d757
 800d680:	0800d703 	.word	0x0800d703
 800d684:	0800d757 	.word	0x0800d757
 800d688:	0800d757 	.word	0x0800d757
 800d68c:	0800d757 	.word	0x0800d757
 800d690:	0800d713 	.word	0x0800d713
 800d694:	0800d757 	.word	0x0800d757
 800d698:	0800d757 	.word	0x0800d757
 800d69c:	0800d757 	.word	0x0800d757
 800d6a0:	0800d757 	.word	0x0800d757
 800d6a4:	0800d757 	.word	0x0800d757
 800d6a8:	0800d757 	.word	0x0800d757
 800d6ac:	0800d757 	.word	0x0800d757
 800d6b0:	0800d723 	.word	0x0800d723
 800d6b4:	0800d757 	.word	0x0800d757
 800d6b8:	0800d757 	.word	0x0800d757
 800d6bc:	0800d757 	.word	0x0800d757
 800d6c0:	0800d757 	.word	0x0800d757
 800d6c4:	0800d757 	.word	0x0800d757
 800d6c8:	0800d757 	.word	0x0800d757
 800d6cc:	0800d757 	.word	0x0800d757
 800d6d0:	0800d757 	.word	0x0800d757
 800d6d4:	0800d757 	.word	0x0800d757
 800d6d8:	0800d757 	.word	0x0800d757
 800d6dc:	0800d757 	.word	0x0800d757
 800d6e0:	0800d757 	.word	0x0800d757
 800d6e4:	0800d757 	.word	0x0800d757
 800d6e8:	0800d757 	.word	0x0800d757
 800d6ec:	0800d757 	.word	0x0800d757
 800d6f0:	0800d749 	.word	0x0800d749
 800d6f4:	2b40      	cmp	r3, #64	@ 0x40
 800d6f6:	d02a      	beq.n	800d74e <UART_SetConfig+0x8aa>
 800d6f8:	e02d      	b.n	800d756 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d6fa:	f7fb fdbb 	bl	8009274 <HAL_RCCEx_GetD3PCLK1Freq>
 800d6fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d700:	e02f      	b.n	800d762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d706:	4618      	mov	r0, r3
 800d708:	f7fb fdca 	bl	80092a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d70c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d710:	e027      	b.n	800d762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d712:	f107 0318 	add.w	r3, r7, #24
 800d716:	4618      	mov	r0, r3
 800d718:	f7fb ff16 	bl	8009548 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d720:	e01f      	b.n	800d762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d722:	4b21      	ldr	r3, [pc, #132]	@ (800d7a8 <UART_SetConfig+0x904>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0320 	and.w	r3, r3, #32
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d009      	beq.n	800d742 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d72e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7a8 <UART_SetConfig+0x904>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	08db      	lsrs	r3, r3, #3
 800d734:	f003 0303 	and.w	r3, r3, #3
 800d738:	4a1d      	ldr	r2, [pc, #116]	@ (800d7b0 <UART_SetConfig+0x90c>)
 800d73a:	fa22 f303 	lsr.w	r3, r2, r3
 800d73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d740:	e00f      	b.n	800d762 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d742:	4b1b      	ldr	r3, [pc, #108]	@ (800d7b0 <UART_SetConfig+0x90c>)
 800d744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d746:	e00c      	b.n	800d762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d748:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b4 <UART_SetConfig+0x910>)
 800d74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d74c:	e009      	b.n	800d762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d74e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d754:	e005      	b.n	800d762 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d756:	2300      	movs	r3, #0
 800d758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d75a:	2301      	movs	r3, #1
 800d75c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 81ee 	beq.w	800db46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76e:	4a12      	ldr	r2, [pc, #72]	@ (800d7b8 <UART_SetConfig+0x914>)
 800d770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d774:	461a      	mov	r2, r3
 800d776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d778:	fbb3 f3f2 	udiv	r3, r3, r2
 800d77c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	4613      	mov	r3, r2
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	4413      	add	r3, r2
 800d788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d305      	bcc.n	800d79a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d796:	429a      	cmp	r2, r3
 800d798:	d910      	bls.n	800d7bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d7a0:	e1d1      	b.n	800db46 <UART_SetConfig+0xca2>
 800d7a2:	bf00      	nop
 800d7a4:	40011c00 	.word	0x40011c00
 800d7a8:	58024400 	.word	0x58024400
 800d7ac:	58000c00 	.word	0x58000c00
 800d7b0:	03d09000 	.word	0x03d09000
 800d7b4:	003d0900 	.word	0x003d0900
 800d7b8:	0800f078 	.word	0x0800f078
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7be:	2200      	movs	r2, #0
 800d7c0:	60bb      	str	r3, [r7, #8]
 800d7c2:	60fa      	str	r2, [r7, #12]
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7c8:	4ac0      	ldr	r2, [pc, #768]	@ (800dacc <UART_SetConfig+0xc28>)
 800d7ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	603b      	str	r3, [r7, #0]
 800d7d4:	607a      	str	r2, [r7, #4]
 800d7d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d7de:	f7f2 fd97 	bl	8000310 <__aeabi_uldivmod>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	f04f 0200 	mov.w	r2, #0
 800d7ee:	f04f 0300 	mov.w	r3, #0
 800d7f2:	020b      	lsls	r3, r1, #8
 800d7f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d7f8:	0202      	lsls	r2, r0, #8
 800d7fa:	6979      	ldr	r1, [r7, #20]
 800d7fc:	6849      	ldr	r1, [r1, #4]
 800d7fe:	0849      	lsrs	r1, r1, #1
 800d800:	2000      	movs	r0, #0
 800d802:	460c      	mov	r4, r1
 800d804:	4605      	mov	r5, r0
 800d806:	eb12 0804 	adds.w	r8, r2, r4
 800d80a:	eb43 0905 	adc.w	r9, r3, r5
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	469a      	mov	sl, r3
 800d816:	4693      	mov	fp, r2
 800d818:	4652      	mov	r2, sl
 800d81a:	465b      	mov	r3, fp
 800d81c:	4640      	mov	r0, r8
 800d81e:	4649      	mov	r1, r9
 800d820:	f7f2 fd76 	bl	8000310 <__aeabi_uldivmod>
 800d824:	4602      	mov	r2, r0
 800d826:	460b      	mov	r3, r1
 800d828:	4613      	mov	r3, r2
 800d82a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d832:	d308      	bcc.n	800d846 <UART_SetConfig+0x9a2>
 800d834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d83a:	d204      	bcs.n	800d846 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d842:	60da      	str	r2, [r3, #12]
 800d844:	e17f      	b.n	800db46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d84c:	e17b      	b.n	800db46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	69db      	ldr	r3, [r3, #28]
 800d852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d856:	f040 80bd 	bne.w	800d9d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d85a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d85e:	2b20      	cmp	r3, #32
 800d860:	dc48      	bgt.n	800d8f4 <UART_SetConfig+0xa50>
 800d862:	2b00      	cmp	r3, #0
 800d864:	db7b      	blt.n	800d95e <UART_SetConfig+0xaba>
 800d866:	2b20      	cmp	r3, #32
 800d868:	d879      	bhi.n	800d95e <UART_SetConfig+0xaba>
 800d86a:	a201      	add	r2, pc, #4	@ (adr r2, 800d870 <UART_SetConfig+0x9cc>)
 800d86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d870:	0800d8fb 	.word	0x0800d8fb
 800d874:	0800d903 	.word	0x0800d903
 800d878:	0800d95f 	.word	0x0800d95f
 800d87c:	0800d95f 	.word	0x0800d95f
 800d880:	0800d90b 	.word	0x0800d90b
 800d884:	0800d95f 	.word	0x0800d95f
 800d888:	0800d95f 	.word	0x0800d95f
 800d88c:	0800d95f 	.word	0x0800d95f
 800d890:	0800d91b 	.word	0x0800d91b
 800d894:	0800d95f 	.word	0x0800d95f
 800d898:	0800d95f 	.word	0x0800d95f
 800d89c:	0800d95f 	.word	0x0800d95f
 800d8a0:	0800d95f 	.word	0x0800d95f
 800d8a4:	0800d95f 	.word	0x0800d95f
 800d8a8:	0800d95f 	.word	0x0800d95f
 800d8ac:	0800d95f 	.word	0x0800d95f
 800d8b0:	0800d92b 	.word	0x0800d92b
 800d8b4:	0800d95f 	.word	0x0800d95f
 800d8b8:	0800d95f 	.word	0x0800d95f
 800d8bc:	0800d95f 	.word	0x0800d95f
 800d8c0:	0800d95f 	.word	0x0800d95f
 800d8c4:	0800d95f 	.word	0x0800d95f
 800d8c8:	0800d95f 	.word	0x0800d95f
 800d8cc:	0800d95f 	.word	0x0800d95f
 800d8d0:	0800d95f 	.word	0x0800d95f
 800d8d4:	0800d95f 	.word	0x0800d95f
 800d8d8:	0800d95f 	.word	0x0800d95f
 800d8dc:	0800d95f 	.word	0x0800d95f
 800d8e0:	0800d95f 	.word	0x0800d95f
 800d8e4:	0800d95f 	.word	0x0800d95f
 800d8e8:	0800d95f 	.word	0x0800d95f
 800d8ec:	0800d95f 	.word	0x0800d95f
 800d8f0:	0800d951 	.word	0x0800d951
 800d8f4:	2b40      	cmp	r3, #64	@ 0x40
 800d8f6:	d02e      	beq.n	800d956 <UART_SetConfig+0xab2>
 800d8f8:	e031      	b.n	800d95e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8fa:	f7fa faef 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800d8fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d900:	e033      	b.n	800d96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d902:	f7fa fb01 	bl	8007f08 <HAL_RCC_GetPCLK2Freq>
 800d906:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d908:	e02f      	b.n	800d96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d90a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fb fcc6 	bl	80092a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d918:	e027      	b.n	800d96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d91a:	f107 0318 	add.w	r3, r7, #24
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fb fe12 	bl	8009548 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d928:	e01f      	b.n	800d96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d92a:	4b69      	ldr	r3, [pc, #420]	@ (800dad0 <UART_SetConfig+0xc2c>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f003 0320 	and.w	r3, r3, #32
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d936:	4b66      	ldr	r3, [pc, #408]	@ (800dad0 <UART_SetConfig+0xc2c>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	08db      	lsrs	r3, r3, #3
 800d93c:	f003 0303 	and.w	r3, r3, #3
 800d940:	4a64      	ldr	r2, [pc, #400]	@ (800dad4 <UART_SetConfig+0xc30>)
 800d942:	fa22 f303 	lsr.w	r3, r2, r3
 800d946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d948:	e00f      	b.n	800d96a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d94a:	4b62      	ldr	r3, [pc, #392]	@ (800dad4 <UART_SetConfig+0xc30>)
 800d94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d94e:	e00c      	b.n	800d96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d950:	4b61      	ldr	r3, [pc, #388]	@ (800dad8 <UART_SetConfig+0xc34>)
 800d952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d954:	e009      	b.n	800d96a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d95c:	e005      	b.n	800d96a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d95e:	2300      	movs	r3, #0
 800d960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d96a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 80ea 	beq.w	800db46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d976:	4a55      	ldr	r2, [pc, #340]	@ (800dacc <UART_SetConfig+0xc28>)
 800d978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d97c:	461a      	mov	r2, r3
 800d97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d980:	fbb3 f3f2 	udiv	r3, r3, r2
 800d984:	005a      	lsls	r2, r3, #1
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	085b      	lsrs	r3, r3, #1
 800d98c:	441a      	add	r2, r3
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	fbb2 f3f3 	udiv	r3, r2, r3
 800d996:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99a:	2b0f      	cmp	r3, #15
 800d99c:	d916      	bls.n	800d9cc <UART_SetConfig+0xb28>
 800d99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9a4:	d212      	bcs.n	800d9cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	f023 030f 	bic.w	r3, r3, #15
 800d9ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b2:	085b      	lsrs	r3, r3, #1
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	f003 0307 	and.w	r3, r3, #7
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d9c8:	60da      	str	r2, [r3, #12]
 800d9ca:	e0bc      	b.n	800db46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d9d2:	e0b8      	b.n	800db46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d9d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d9d8:	2b20      	cmp	r3, #32
 800d9da:	dc4b      	bgt.n	800da74 <UART_SetConfig+0xbd0>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f2c0 8087 	blt.w	800daf0 <UART_SetConfig+0xc4c>
 800d9e2:	2b20      	cmp	r3, #32
 800d9e4:	f200 8084 	bhi.w	800daf0 <UART_SetConfig+0xc4c>
 800d9e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d9f0 <UART_SetConfig+0xb4c>)
 800d9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ee:	bf00      	nop
 800d9f0:	0800da7b 	.word	0x0800da7b
 800d9f4:	0800da83 	.word	0x0800da83
 800d9f8:	0800daf1 	.word	0x0800daf1
 800d9fc:	0800daf1 	.word	0x0800daf1
 800da00:	0800da8b 	.word	0x0800da8b
 800da04:	0800daf1 	.word	0x0800daf1
 800da08:	0800daf1 	.word	0x0800daf1
 800da0c:	0800daf1 	.word	0x0800daf1
 800da10:	0800da9b 	.word	0x0800da9b
 800da14:	0800daf1 	.word	0x0800daf1
 800da18:	0800daf1 	.word	0x0800daf1
 800da1c:	0800daf1 	.word	0x0800daf1
 800da20:	0800daf1 	.word	0x0800daf1
 800da24:	0800daf1 	.word	0x0800daf1
 800da28:	0800daf1 	.word	0x0800daf1
 800da2c:	0800daf1 	.word	0x0800daf1
 800da30:	0800daab 	.word	0x0800daab
 800da34:	0800daf1 	.word	0x0800daf1
 800da38:	0800daf1 	.word	0x0800daf1
 800da3c:	0800daf1 	.word	0x0800daf1
 800da40:	0800daf1 	.word	0x0800daf1
 800da44:	0800daf1 	.word	0x0800daf1
 800da48:	0800daf1 	.word	0x0800daf1
 800da4c:	0800daf1 	.word	0x0800daf1
 800da50:	0800daf1 	.word	0x0800daf1
 800da54:	0800daf1 	.word	0x0800daf1
 800da58:	0800daf1 	.word	0x0800daf1
 800da5c:	0800daf1 	.word	0x0800daf1
 800da60:	0800daf1 	.word	0x0800daf1
 800da64:	0800daf1 	.word	0x0800daf1
 800da68:	0800daf1 	.word	0x0800daf1
 800da6c:	0800daf1 	.word	0x0800daf1
 800da70:	0800dae3 	.word	0x0800dae3
 800da74:	2b40      	cmp	r3, #64	@ 0x40
 800da76:	d037      	beq.n	800dae8 <UART_SetConfig+0xc44>
 800da78:	e03a      	b.n	800daf0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da7a:	f7fa fa2f 	bl	8007edc <HAL_RCC_GetPCLK1Freq>
 800da7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da80:	e03c      	b.n	800dafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da82:	f7fa fa41 	bl	8007f08 <HAL_RCC_GetPCLK2Freq>
 800da86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da88:	e038      	b.n	800dafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fb fc06 	bl	80092a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da98:	e030      	b.n	800dafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da9a:	f107 0318 	add.w	r3, r7, #24
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fb fd52 	bl	8009548 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa8:	e028      	b.n	800dafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800daaa:	4b09      	ldr	r3, [pc, #36]	@ (800dad0 <UART_SetConfig+0xc2c>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f003 0320 	and.w	r3, r3, #32
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d012      	beq.n	800dadc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dab6:	4b06      	ldr	r3, [pc, #24]	@ (800dad0 <UART_SetConfig+0xc2c>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	08db      	lsrs	r3, r3, #3
 800dabc:	f003 0303 	and.w	r3, r3, #3
 800dac0:	4a04      	ldr	r2, [pc, #16]	@ (800dad4 <UART_SetConfig+0xc30>)
 800dac2:	fa22 f303 	lsr.w	r3, r2, r3
 800dac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dac8:	e018      	b.n	800dafc <UART_SetConfig+0xc58>
 800daca:	bf00      	nop
 800dacc:	0800f078 	.word	0x0800f078
 800dad0:	58024400 	.word	0x58024400
 800dad4:	03d09000 	.word	0x03d09000
 800dad8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dadc:	4b24      	ldr	r3, [pc, #144]	@ (800db70 <UART_SetConfig+0xccc>)
 800dade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dae0:	e00c      	b.n	800dafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dae2:	4b24      	ldr	r3, [pc, #144]	@ (800db74 <UART_SetConfig+0xcd0>)
 800dae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dae6:	e009      	b.n	800dafc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dae8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800daec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daee:	e005      	b.n	800dafc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800daf0:	2300      	movs	r3, #0
 800daf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dafa:	bf00      	nop
    }

    if (pclk != 0U)
 800dafc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d021      	beq.n	800db46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db06:	4a1c      	ldr	r2, [pc, #112]	@ (800db78 <UART_SetConfig+0xcd4>)
 800db08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db0c:	461a      	mov	r2, r3
 800db0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db10:	fbb3 f2f2 	udiv	r2, r3, r2
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	085b      	lsrs	r3, r3, #1
 800db1a:	441a      	add	r2, r3
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	fbb2 f3f3 	udiv	r3, r2, r3
 800db24:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db28:	2b0f      	cmp	r3, #15
 800db2a:	d909      	bls.n	800db40 <UART_SetConfig+0xc9c>
 800db2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db32:	d205      	bcs.n	800db40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db36:	b29a      	uxth	r2, r3
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	60da      	str	r2, [r3, #12]
 800db3e:	e002      	b.n	800db46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	2201      	movs	r2, #1
 800db4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2201      	movs	r2, #1
 800db52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	2200      	movs	r2, #0
 800db5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	2200      	movs	r2, #0
 800db60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800db62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800db66:	4618      	mov	r0, r3
 800db68:	3748      	adds	r7, #72	@ 0x48
 800db6a:	46bd      	mov	sp, r7
 800db6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db70:	03d09000 	.word	0x03d09000
 800db74:	003d0900 	.word	0x003d0900
 800db78:	0800f078 	.word	0x0800f078

0800db7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db88:	f003 0308 	and.w	r3, r3, #8
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00a      	beq.n	800dba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	430a      	orrs	r2, r1
 800dba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00a      	beq.n	800dbc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	430a      	orrs	r2, r1
 800dbc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00a      	beq.n	800dbea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	430a      	orrs	r2, r1
 800dbe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbee:	f003 0304 	and.w	r3, r3, #4
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00a      	beq.n	800dc0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc10:	f003 0310 	and.w	r3, r3, #16
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00a      	beq.n	800dc2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	430a      	orrs	r2, r1
 800dc2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc32:	f003 0320 	and.w	r3, r3, #32
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	430a      	orrs	r2, r1
 800dc4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d01a      	beq.n	800dc92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc7a:	d10a      	bne.n	800dc92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00a      	beq.n	800dcb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	605a      	str	r2, [r3, #4]
  }
}
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b098      	sub	sp, #96	@ 0x60
 800dcc4:	af02      	add	r7, sp, #8
 800dcc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dcd0:	f7f6 f826 	bl	8003d20 <HAL_GetTick>
 800dcd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f003 0308 	and.w	r3, r3, #8
 800dce0:	2b08      	cmp	r3, #8
 800dce2:	d12f      	bne.n	800dd44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcec:	2200      	movs	r2, #0
 800dcee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f88e 	bl	800de14 <UART_WaitOnFlagUntilTimeout>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d022      	beq.n	800dd44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd06:	e853 3f00 	ldrex	r3, [r3]
 800dd0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd12:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	461a      	mov	r2, r3
 800dd1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd24:	e841 2300 	strex	r3, r2, [r1]
 800dd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1e6      	bne.n	800dcfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2220      	movs	r2, #32
 800dd34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e063      	b.n	800de0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f003 0304 	and.w	r3, r3, #4
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	d149      	bne.n	800dde6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 f857 	bl	800de14 <UART_WaitOnFlagUntilTimeout>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d03c      	beq.n	800dde6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd74:	e853 3f00 	ldrex	r3, [r3]
 800dd78:	623b      	str	r3, [r7, #32]
   return(result);
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	461a      	mov	r2, r3
 800dd88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd92:	e841 2300 	strex	r3, r2, [r1]
 800dd96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1e6      	bne.n	800dd6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	3308      	adds	r3, #8
 800dda4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	e853 3f00 	ldrex	r3, [r3]
 800ddac:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f023 0301 	bic.w	r3, r3, #1
 800ddb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	3308      	adds	r3, #8
 800ddbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddbe:	61fa      	str	r2, [r7, #28]
 800ddc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc2:	69b9      	ldr	r1, [r7, #24]
 800ddc4:	69fa      	ldr	r2, [r7, #28]
 800ddc6:	e841 2300 	strex	r3, r2, [r1]
 800ddca:	617b      	str	r3, [r7, #20]
   return(result);
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1e5      	bne.n	800dd9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2220      	movs	r2, #32
 800ddd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dde2:	2303      	movs	r3, #3
 800dde4:	e012      	b.n	800de0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2220      	movs	r2, #32
 800ddea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2220      	movs	r2, #32
 800ddf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3758      	adds	r7, #88	@ 0x58
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	603b      	str	r3, [r7, #0]
 800de20:	4613      	mov	r3, r2
 800de22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de24:	e04f      	b.n	800dec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de2c:	d04b      	beq.n	800dec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de2e:	f7f5 ff77 	bl	8003d20 <HAL_GetTick>
 800de32:	4602      	mov	r2, r0
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	1ad3      	subs	r3, r2, r3
 800de38:	69ba      	ldr	r2, [r7, #24]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d302      	bcc.n	800de44 <UART_WaitOnFlagUntilTimeout+0x30>
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d101      	bne.n	800de48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800de44:	2303      	movs	r3, #3
 800de46:	e04e      	b.n	800dee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 0304 	and.w	r3, r3, #4
 800de52:	2b00      	cmp	r3, #0
 800de54:	d037      	beq.n	800dec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	2b80      	cmp	r3, #128	@ 0x80
 800de5a:	d034      	beq.n	800dec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b40      	cmp	r3, #64	@ 0x40
 800de60:	d031      	beq.n	800dec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	69db      	ldr	r3, [r3, #28]
 800de68:	f003 0308 	and.w	r3, r3, #8
 800de6c:	2b08      	cmp	r3, #8
 800de6e:	d110      	bne.n	800de92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2208      	movs	r2, #8
 800de76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de78:	68f8      	ldr	r0, [r7, #12]
 800de7a:	f000 f879 	bl	800df70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2208      	movs	r2, #8
 800de82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e029      	b.n	800dee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	69db      	ldr	r3, [r3, #28]
 800de98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dea0:	d111      	bne.n	800dec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800deaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f85f 	bl	800df70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2220      	movs	r2, #32
 800deb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	2200      	movs	r2, #0
 800debe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dec2:	2303      	movs	r3, #3
 800dec4:	e00f      	b.n	800dee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	69da      	ldr	r2, [r3, #28]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	4013      	ands	r3, r2
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	bf0c      	ite	eq
 800ded6:	2301      	moveq	r3, #1
 800ded8:	2300      	movne	r3, #0
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	461a      	mov	r2, r3
 800dede:	79fb      	ldrb	r3, [r7, #7]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d0a0      	beq.n	800de26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800deee:	b480      	push	{r7}
 800def0:	b08f      	sub	sp, #60	@ 0x3c
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	e853 3f00 	ldrex	r3, [r3]
 800df02:	61fb      	str	r3, [r7, #28]
   return(result);
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800df0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	461a      	mov	r2, r3
 800df12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df1c:	e841 2300 	strex	r3, r2, [r1]
 800df20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1e6      	bne.n	800def6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	3308      	adds	r3, #8
 800df2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	e853 3f00 	ldrex	r3, [r3]
 800df36:	60bb      	str	r3, [r7, #8]
   return(result);
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800df3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3308      	adds	r3, #8
 800df46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df48:	61ba      	str	r2, [r7, #24]
 800df4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4c:	6979      	ldr	r1, [r7, #20]
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	e841 2300 	strex	r3, r2, [r1]
 800df54:	613b      	str	r3, [r7, #16]
   return(result);
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1e5      	bne.n	800df28 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2220      	movs	r2, #32
 800df60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800df64:	bf00      	nop
 800df66:	373c      	adds	r7, #60	@ 0x3c
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df70:	b480      	push	{r7}
 800df72:	b095      	sub	sp, #84	@ 0x54
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df80:	e853 3f00 	ldrex	r3, [r3]
 800df84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	461a      	mov	r2, r3
 800df94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df96:	643b      	str	r3, [r7, #64]	@ 0x40
 800df98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df9e:	e841 2300 	strex	r3, r2, [r1]
 800dfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1e6      	bne.n	800df78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb2:	6a3b      	ldr	r3, [r7, #32]
 800dfb4:	e853 3f00 	ldrex	r3, [r3]
 800dfb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfba:	69fa      	ldr	r2, [r7, #28]
 800dfbc:	4b1e      	ldr	r3, [pc, #120]	@ (800e038 <UART_EndRxTransfer+0xc8>)
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfd2:	e841 2300 	strex	r3, r2, [r1]
 800dfd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1e5      	bne.n	800dfaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d118      	bne.n	800e018 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e853 3f00 	ldrex	r3, [r3]
 800dff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	f023 0310 	bic.w	r3, r3, #16
 800dffa:	647b      	str	r3, [r7, #68]	@ 0x44
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	461a      	mov	r2, r3
 800e002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e008:	6979      	ldr	r1, [r7, #20]
 800e00a:	69ba      	ldr	r2, [r7, #24]
 800e00c:	e841 2300 	strex	r3, r2, [r1]
 800e010:	613b      	str	r3, [r7, #16]
   return(result);
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1e6      	bne.n	800dfe6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2220      	movs	r2, #32
 800e01c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e02c:	bf00      	nop
 800e02e:	3754      	adds	r7, #84	@ 0x54
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	effffffe 	.word	0xeffffffe

0800e03c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b090      	sub	sp, #64	@ 0x40
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e048:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	69db      	ldr	r3, [r3, #28]
 800e04e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e052:	d037      	beq.n	800e0c4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e056:	2200      	movs	r2, #0
 800e058:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	3308      	adds	r3, #8
 800e062:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e066:	e853 3f00 	ldrex	r3, [r3]
 800e06a:	623b      	str	r3, [r7, #32]
   return(result);
 800e06c:	6a3b      	ldr	r3, [r7, #32]
 800e06e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e072:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	3308      	adds	r3, #8
 800e07a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e07c:	633a      	str	r2, [r7, #48]	@ 0x30
 800e07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e084:	e841 2300 	strex	r3, r2, [r1]
 800e088:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d1e5      	bne.n	800e05c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	e853 3f00 	ldrex	r3, [r3]
 800e09c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ae:	61fb      	str	r3, [r7, #28]
 800e0b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b2:	69b9      	ldr	r1, [r7, #24]
 800e0b4:	69fa      	ldr	r2, [r7, #28]
 800e0b6:	e841 2300 	strex	r3, r2, [r1]
 800e0ba:	617b      	str	r3, [r7, #20]
   return(result);
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1e6      	bne.n	800e090 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e0c2:	e002      	b.n	800e0ca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e0c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e0c6:	f7f3 fdcd 	bl	8001c64 <HAL_UART_TxCpltCallback>
}
 800e0ca:	bf00      	nop
 800e0cc:	3740      	adds	r7, #64	@ 0x40
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f7fe febf 	bl	800ce64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0e6:	bf00      	nop
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b086      	sub	sp, #24
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e102:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e116:	2b80      	cmp	r3, #128	@ 0x80
 800e118:	d109      	bne.n	800e12e <UART_DMAError+0x40>
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2b21      	cmp	r3, #33	@ 0x21
 800e11e:	d106      	bne.n	800e12e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2200      	movs	r2, #0
 800e124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e128:	6978      	ldr	r0, [r7, #20]
 800e12a:	f7ff fee0 	bl	800deee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e138:	2b40      	cmp	r3, #64	@ 0x40
 800e13a:	d109      	bne.n	800e150 <UART_DMAError+0x62>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b22      	cmp	r3, #34	@ 0x22
 800e140:	d106      	bne.n	800e150 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2200      	movs	r2, #0
 800e146:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e14a:	6978      	ldr	r0, [r7, #20]
 800e14c:	f7ff ff10 	bl	800df70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e156:	f043 0210 	orr.w	r2, r3, #16
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e160:	6978      	ldr	r0, [r7, #20]
 800e162:	f7fe fe89 	bl	800ce78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e166:	bf00      	nop
 800e168:	3718      	adds	r7, #24
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e16e:	b580      	push	{r7, lr}
 800e170:	b084      	sub	sp, #16
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7fe fe73 	bl	800ce78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e192:	bf00      	nop
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b088      	sub	sp, #32
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	e853 3f00 	ldrex	r3, [r3]
 800e1ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	61bb      	str	r3, [r7, #24]
 800e1c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c4:	6979      	ldr	r1, [r7, #20]
 800e1c6:	69ba      	ldr	r2, [r7, #24]
 800e1c8:	e841 2300 	strex	r3, r2, [r1]
 800e1cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1e6      	bne.n	800e1a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7f3 fd3e 	bl	8001c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1e8:	bf00      	nop
 800e1ea:	3720      	adds	r7, #32
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e1f8:	bf00      	nop
 800e1fa:	370c      	adds	r7, #12
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d101      	bne.n	800e242 <HAL_UARTEx_DisableFifoMode+0x16>
 800e23e:	2302      	movs	r3, #2
 800e240:	e027      	b.n	800e292 <HAL_UARTEx_DisableFifoMode+0x66>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2224      	movs	r2, #36	@ 0x24
 800e24e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f022 0201 	bic.w	r2, r2, #1
 800e268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2220      	movs	r2, #32
 800e284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d101      	bne.n	800e2b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	e02d      	b.n	800e312 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2224      	movs	r2, #36	@ 0x24
 800e2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f022 0201 	bic.w	r2, r2, #1
 800e2dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	689b      	ldr	r3, [r3, #8]
 800e2e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f850 	bl	800e398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2220      	movs	r2, #32
 800e304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b084      	sub	sp, #16
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
 800e322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e32e:	2302      	movs	r3, #2
 800e330:	e02d      	b.n	800e38e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2224      	movs	r2, #36	@ 0x24
 800e33e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f022 0201 	bic.w	r2, r2, #1
 800e358:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	430a      	orrs	r2, r1
 800e36c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f812 	bl	800e398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2220      	movs	r2, #32
 800e380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
	...

0800e398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d108      	bne.n	800e3ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e3b8:	e031      	b.n	800e41e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e3ba:	2310      	movs	r3, #16
 800e3bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e3be:	2310      	movs	r3, #16
 800e3c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	0e5b      	lsrs	r3, r3, #25
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	f003 0307 	and.w	r3, r3, #7
 800e3d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	0f5b      	lsrs	r3, r3, #29
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	f003 0307 	and.w	r3, r3, #7
 800e3e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3e2:	7bbb      	ldrb	r3, [r7, #14]
 800e3e4:	7b3a      	ldrb	r2, [r7, #12]
 800e3e6:	4911      	ldr	r1, [pc, #68]	@ (800e42c <UARTEx_SetNbDataToProcess+0x94>)
 800e3e8:	5c8a      	ldrb	r2, [r1, r2]
 800e3ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e3ee:	7b3a      	ldrb	r2, [r7, #12]
 800e3f0:	490f      	ldr	r1, [pc, #60]	@ (800e430 <UARTEx_SetNbDataToProcess+0x98>)
 800e3f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e3f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	7b7a      	ldrb	r2, [r7, #13]
 800e404:	4909      	ldr	r1, [pc, #36]	@ (800e42c <UARTEx_SetNbDataToProcess+0x94>)
 800e406:	5c8a      	ldrb	r2, [r1, r2]
 800e408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e40c:	7b7a      	ldrb	r2, [r7, #13]
 800e40e:	4908      	ldr	r1, [pc, #32]	@ (800e430 <UARTEx_SetNbDataToProcess+0x98>)
 800e410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e412:	fb93 f3f2 	sdiv	r3, r3, r2
 800e416:	b29a      	uxth	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e41e:	bf00      	nop
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	0800f090 	.word	0x0800f090
 800e430:	0800f098 	.word	0x0800f098

0800e434 <malloc>:
 800e434:	4b02      	ldr	r3, [pc, #8]	@ (800e440 <malloc+0xc>)
 800e436:	4601      	mov	r1, r0
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f000 b82d 	b.w	800e498 <_malloc_r>
 800e43e:	bf00      	nop
 800e440:	2400001c 	.word	0x2400001c

0800e444 <free>:
 800e444:	4b02      	ldr	r3, [pc, #8]	@ (800e450 <free+0xc>)
 800e446:	4601      	mov	r1, r0
 800e448:	6818      	ldr	r0, [r3, #0]
 800e44a:	f000 b8f5 	b.w	800e638 <_free_r>
 800e44e:	bf00      	nop
 800e450:	2400001c 	.word	0x2400001c

0800e454 <sbrk_aligned>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	4e0f      	ldr	r6, [pc, #60]	@ (800e494 <sbrk_aligned+0x40>)
 800e458:	460c      	mov	r4, r1
 800e45a:	6831      	ldr	r1, [r6, #0]
 800e45c:	4605      	mov	r5, r0
 800e45e:	b911      	cbnz	r1, 800e466 <sbrk_aligned+0x12>
 800e460:	f000 f8ae 	bl	800e5c0 <_sbrk_r>
 800e464:	6030      	str	r0, [r6, #0]
 800e466:	4621      	mov	r1, r4
 800e468:	4628      	mov	r0, r5
 800e46a:	f000 f8a9 	bl	800e5c0 <_sbrk_r>
 800e46e:	1c43      	adds	r3, r0, #1
 800e470:	d103      	bne.n	800e47a <sbrk_aligned+0x26>
 800e472:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e476:	4620      	mov	r0, r4
 800e478:	bd70      	pop	{r4, r5, r6, pc}
 800e47a:	1cc4      	adds	r4, r0, #3
 800e47c:	f024 0403 	bic.w	r4, r4, #3
 800e480:	42a0      	cmp	r0, r4
 800e482:	d0f8      	beq.n	800e476 <sbrk_aligned+0x22>
 800e484:	1a21      	subs	r1, r4, r0
 800e486:	4628      	mov	r0, r5
 800e488:	f000 f89a 	bl	800e5c0 <_sbrk_r>
 800e48c:	3001      	adds	r0, #1
 800e48e:	d1f2      	bne.n	800e476 <sbrk_aligned+0x22>
 800e490:	e7ef      	b.n	800e472 <sbrk_aligned+0x1e>
 800e492:	bf00      	nop
 800e494:	240008b8 	.word	0x240008b8

0800e498 <_malloc_r>:
 800e498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e49c:	1ccd      	adds	r5, r1, #3
 800e49e:	f025 0503 	bic.w	r5, r5, #3
 800e4a2:	3508      	adds	r5, #8
 800e4a4:	2d0c      	cmp	r5, #12
 800e4a6:	bf38      	it	cc
 800e4a8:	250c      	movcc	r5, #12
 800e4aa:	2d00      	cmp	r5, #0
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	db01      	blt.n	800e4b4 <_malloc_r+0x1c>
 800e4b0:	42a9      	cmp	r1, r5
 800e4b2:	d904      	bls.n	800e4be <_malloc_r+0x26>
 800e4b4:	230c      	movs	r3, #12
 800e4b6:	6033      	str	r3, [r6, #0]
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e594 <_malloc_r+0xfc>
 800e4c2:	f000 f869 	bl	800e598 <__malloc_lock>
 800e4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ca:	461c      	mov	r4, r3
 800e4cc:	bb44      	cbnz	r4, 800e520 <_malloc_r+0x88>
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	f7ff ffbf 	bl	800e454 <sbrk_aligned>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	4604      	mov	r4, r0
 800e4da:	d158      	bne.n	800e58e <_malloc_r+0xf6>
 800e4dc:	f8d8 4000 	ldr.w	r4, [r8]
 800e4e0:	4627      	mov	r7, r4
 800e4e2:	2f00      	cmp	r7, #0
 800e4e4:	d143      	bne.n	800e56e <_malloc_r+0xd6>
 800e4e6:	2c00      	cmp	r4, #0
 800e4e8:	d04b      	beq.n	800e582 <_malloc_r+0xea>
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	4639      	mov	r1, r7
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	eb04 0903 	add.w	r9, r4, r3
 800e4f4:	f000 f864 	bl	800e5c0 <_sbrk_r>
 800e4f8:	4581      	cmp	r9, r0
 800e4fa:	d142      	bne.n	800e582 <_malloc_r+0xea>
 800e4fc:	6821      	ldr	r1, [r4, #0]
 800e4fe:	1a6d      	subs	r5, r5, r1
 800e500:	4629      	mov	r1, r5
 800e502:	4630      	mov	r0, r6
 800e504:	f7ff ffa6 	bl	800e454 <sbrk_aligned>
 800e508:	3001      	adds	r0, #1
 800e50a:	d03a      	beq.n	800e582 <_malloc_r+0xea>
 800e50c:	6823      	ldr	r3, [r4, #0]
 800e50e:	442b      	add	r3, r5
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	f8d8 3000 	ldr.w	r3, [r8]
 800e516:	685a      	ldr	r2, [r3, #4]
 800e518:	bb62      	cbnz	r2, 800e574 <_malloc_r+0xdc>
 800e51a:	f8c8 7000 	str.w	r7, [r8]
 800e51e:	e00f      	b.n	800e540 <_malloc_r+0xa8>
 800e520:	6822      	ldr	r2, [r4, #0]
 800e522:	1b52      	subs	r2, r2, r5
 800e524:	d420      	bmi.n	800e568 <_malloc_r+0xd0>
 800e526:	2a0b      	cmp	r2, #11
 800e528:	d917      	bls.n	800e55a <_malloc_r+0xc2>
 800e52a:	1961      	adds	r1, r4, r5
 800e52c:	42a3      	cmp	r3, r4
 800e52e:	6025      	str	r5, [r4, #0]
 800e530:	bf18      	it	ne
 800e532:	6059      	strne	r1, [r3, #4]
 800e534:	6863      	ldr	r3, [r4, #4]
 800e536:	bf08      	it	eq
 800e538:	f8c8 1000 	streq.w	r1, [r8]
 800e53c:	5162      	str	r2, [r4, r5]
 800e53e:	604b      	str	r3, [r1, #4]
 800e540:	4630      	mov	r0, r6
 800e542:	f000 f82f 	bl	800e5a4 <__malloc_unlock>
 800e546:	f104 000b 	add.w	r0, r4, #11
 800e54a:	1d23      	adds	r3, r4, #4
 800e54c:	f020 0007 	bic.w	r0, r0, #7
 800e550:	1ac2      	subs	r2, r0, r3
 800e552:	bf1c      	itt	ne
 800e554:	1a1b      	subne	r3, r3, r0
 800e556:	50a3      	strne	r3, [r4, r2]
 800e558:	e7af      	b.n	800e4ba <_malloc_r+0x22>
 800e55a:	6862      	ldr	r2, [r4, #4]
 800e55c:	42a3      	cmp	r3, r4
 800e55e:	bf0c      	ite	eq
 800e560:	f8c8 2000 	streq.w	r2, [r8]
 800e564:	605a      	strne	r2, [r3, #4]
 800e566:	e7eb      	b.n	800e540 <_malloc_r+0xa8>
 800e568:	4623      	mov	r3, r4
 800e56a:	6864      	ldr	r4, [r4, #4]
 800e56c:	e7ae      	b.n	800e4cc <_malloc_r+0x34>
 800e56e:	463c      	mov	r4, r7
 800e570:	687f      	ldr	r7, [r7, #4]
 800e572:	e7b6      	b.n	800e4e2 <_malloc_r+0x4a>
 800e574:	461a      	mov	r2, r3
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	42a3      	cmp	r3, r4
 800e57a:	d1fb      	bne.n	800e574 <_malloc_r+0xdc>
 800e57c:	2300      	movs	r3, #0
 800e57e:	6053      	str	r3, [r2, #4]
 800e580:	e7de      	b.n	800e540 <_malloc_r+0xa8>
 800e582:	230c      	movs	r3, #12
 800e584:	6033      	str	r3, [r6, #0]
 800e586:	4630      	mov	r0, r6
 800e588:	f000 f80c 	bl	800e5a4 <__malloc_unlock>
 800e58c:	e794      	b.n	800e4b8 <_malloc_r+0x20>
 800e58e:	6005      	str	r5, [r0, #0]
 800e590:	e7d6      	b.n	800e540 <_malloc_r+0xa8>
 800e592:	bf00      	nop
 800e594:	240008bc 	.word	0x240008bc

0800e598 <__malloc_lock>:
 800e598:	4801      	ldr	r0, [pc, #4]	@ (800e5a0 <__malloc_lock+0x8>)
 800e59a:	f000 b84b 	b.w	800e634 <__retarget_lock_acquire_recursive>
 800e59e:	bf00      	nop
 800e5a0:	240009f8 	.word	0x240009f8

0800e5a4 <__malloc_unlock>:
 800e5a4:	4801      	ldr	r0, [pc, #4]	@ (800e5ac <__malloc_unlock+0x8>)
 800e5a6:	f000 b846 	b.w	800e636 <__retarget_lock_release_recursive>
 800e5aa:	bf00      	nop
 800e5ac:	240009f8 	.word	0x240009f8

0800e5b0 <memset>:
 800e5b0:	4402      	add	r2, r0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d100      	bne.n	800e5ba <memset+0xa>
 800e5b8:	4770      	bx	lr
 800e5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e5be:	e7f9      	b.n	800e5b4 <memset+0x4>

0800e5c0 <_sbrk_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4d06      	ldr	r5, [pc, #24]	@ (800e5dc <_sbrk_r+0x1c>)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	602b      	str	r3, [r5, #0]
 800e5cc:	f7f5 f934 	bl	8003838 <_sbrk>
 800e5d0:	1c43      	adds	r3, r0, #1
 800e5d2:	d102      	bne.n	800e5da <_sbrk_r+0x1a>
 800e5d4:	682b      	ldr	r3, [r5, #0]
 800e5d6:	b103      	cbz	r3, 800e5da <_sbrk_r+0x1a>
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	240009fc 	.word	0x240009fc

0800e5e0 <__errno>:
 800e5e0:	4b01      	ldr	r3, [pc, #4]	@ (800e5e8 <__errno+0x8>)
 800e5e2:	6818      	ldr	r0, [r3, #0]
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	2400001c 	.word	0x2400001c

0800e5ec <__libc_init_array>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	4d0d      	ldr	r5, [pc, #52]	@ (800e624 <__libc_init_array+0x38>)
 800e5f0:	4c0d      	ldr	r4, [pc, #52]	@ (800e628 <__libc_init_array+0x3c>)
 800e5f2:	1b64      	subs	r4, r4, r5
 800e5f4:	10a4      	asrs	r4, r4, #2
 800e5f6:	2600      	movs	r6, #0
 800e5f8:	42a6      	cmp	r6, r4
 800e5fa:	d109      	bne.n	800e610 <__libc_init_array+0x24>
 800e5fc:	4d0b      	ldr	r5, [pc, #44]	@ (800e62c <__libc_init_array+0x40>)
 800e5fe:	4c0c      	ldr	r4, [pc, #48]	@ (800e630 <__libc_init_array+0x44>)
 800e600:	f000 fd22 	bl	800f048 <_init>
 800e604:	1b64      	subs	r4, r4, r5
 800e606:	10a4      	asrs	r4, r4, #2
 800e608:	2600      	movs	r6, #0
 800e60a:	42a6      	cmp	r6, r4
 800e60c:	d105      	bne.n	800e61a <__libc_init_array+0x2e>
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	f855 3b04 	ldr.w	r3, [r5], #4
 800e614:	4798      	blx	r3
 800e616:	3601      	adds	r6, #1
 800e618:	e7ee      	b.n	800e5f8 <__libc_init_array+0xc>
 800e61a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e61e:	4798      	blx	r3
 800e620:	3601      	adds	r6, #1
 800e622:	e7f2      	b.n	800e60a <__libc_init_array+0x1e>
 800e624:	080111f8 	.word	0x080111f8
 800e628:	080111f8 	.word	0x080111f8
 800e62c:	080111f8 	.word	0x080111f8
 800e630:	080111fc 	.word	0x080111fc

0800e634 <__retarget_lock_acquire_recursive>:
 800e634:	4770      	bx	lr

0800e636 <__retarget_lock_release_recursive>:
 800e636:	4770      	bx	lr

0800e638 <_free_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4605      	mov	r5, r0
 800e63c:	2900      	cmp	r1, #0
 800e63e:	d041      	beq.n	800e6c4 <_free_r+0x8c>
 800e640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e644:	1f0c      	subs	r4, r1, #4
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfb8      	it	lt
 800e64a:	18e4      	addlt	r4, r4, r3
 800e64c:	f7ff ffa4 	bl	800e598 <__malloc_lock>
 800e650:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c8 <_free_r+0x90>)
 800e652:	6813      	ldr	r3, [r2, #0]
 800e654:	b933      	cbnz	r3, 800e664 <_free_r+0x2c>
 800e656:	6063      	str	r3, [r4, #4]
 800e658:	6014      	str	r4, [r2, #0]
 800e65a:	4628      	mov	r0, r5
 800e65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e660:	f7ff bfa0 	b.w	800e5a4 <__malloc_unlock>
 800e664:	42a3      	cmp	r3, r4
 800e666:	d908      	bls.n	800e67a <_free_r+0x42>
 800e668:	6820      	ldr	r0, [r4, #0]
 800e66a:	1821      	adds	r1, r4, r0
 800e66c:	428b      	cmp	r3, r1
 800e66e:	bf01      	itttt	eq
 800e670:	6819      	ldreq	r1, [r3, #0]
 800e672:	685b      	ldreq	r3, [r3, #4]
 800e674:	1809      	addeq	r1, r1, r0
 800e676:	6021      	streq	r1, [r4, #0]
 800e678:	e7ed      	b.n	800e656 <_free_r+0x1e>
 800e67a:	461a      	mov	r2, r3
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	b10b      	cbz	r3, 800e684 <_free_r+0x4c>
 800e680:	42a3      	cmp	r3, r4
 800e682:	d9fa      	bls.n	800e67a <_free_r+0x42>
 800e684:	6811      	ldr	r1, [r2, #0]
 800e686:	1850      	adds	r0, r2, r1
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d10b      	bne.n	800e6a4 <_free_r+0x6c>
 800e68c:	6820      	ldr	r0, [r4, #0]
 800e68e:	4401      	add	r1, r0
 800e690:	1850      	adds	r0, r2, r1
 800e692:	4283      	cmp	r3, r0
 800e694:	6011      	str	r1, [r2, #0]
 800e696:	d1e0      	bne.n	800e65a <_free_r+0x22>
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	6053      	str	r3, [r2, #4]
 800e69e:	4408      	add	r0, r1
 800e6a0:	6010      	str	r0, [r2, #0]
 800e6a2:	e7da      	b.n	800e65a <_free_r+0x22>
 800e6a4:	d902      	bls.n	800e6ac <_free_r+0x74>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	602b      	str	r3, [r5, #0]
 800e6aa:	e7d6      	b.n	800e65a <_free_r+0x22>
 800e6ac:	6820      	ldr	r0, [r4, #0]
 800e6ae:	1821      	adds	r1, r4, r0
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	bf04      	itt	eq
 800e6b4:	6819      	ldreq	r1, [r3, #0]
 800e6b6:	685b      	ldreq	r3, [r3, #4]
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	bf04      	itt	eq
 800e6bc:	1809      	addeq	r1, r1, r0
 800e6be:	6021      	streq	r1, [r4, #0]
 800e6c0:	6054      	str	r4, [r2, #4]
 800e6c2:	e7ca      	b.n	800e65a <_free_r+0x22>
 800e6c4:	bd38      	pop	{r3, r4, r5, pc}
 800e6c6:	bf00      	nop
 800e6c8:	240008bc 	.word	0x240008bc
 800e6cc:	00000000 	.word	0x00000000

0800e6d0 <log>:
 800e6d0:	b4f0      	push	{r4, r5, r6, r7}
 800e6d2:	ee10 0a90 	vmov	r0, s1
 800e6d6:	ee10 3a10 	vmov	r3, s0
 800e6da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e6de:	429c      	cmp	r4, r3
 800e6e0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 800e6e4:	4c70      	ldr	r4, [pc, #448]	@ (800e8a8 <log+0x1d8>)
 800e6e6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800e6ea:	418c      	sbcs	r4, r1
 800e6ec:	ed2d 8b02 	vpush	{d8}
 800e6f0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e6f4:	d35a      	bcc.n	800e7ac <log+0xdc>
 800e6f6:	4a6d      	ldr	r2, [pc, #436]	@ (800e8ac <log+0x1dc>)
 800e6f8:	4290      	cmp	r0, r2
 800e6fa:	bf08      	it	eq
 800e6fc:	2b00      	cmpeq	r3, #0
 800e6fe:	f000 80c4 	beq.w	800e88a <log+0x1ba>
 800e702:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e706:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e70a:	4b69      	ldr	r3, [pc, #420]	@ (800e8b0 <log+0x1e0>)
 800e70c:	ee20 2b00 	vmul.f64	d2, d0, d0
 800e710:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800e714:	ee20 4b02 	vmul.f64	d4, d0, d2
 800e718:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800e71c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800e720:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800e724:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800e728:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e72c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800e730:	eea5 6b00 	vfma.f64	d6, d5, d0
 800e734:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 800e738:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800e73c:	eea5 6b02 	vfma.f64	d6, d5, d2
 800e740:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800e744:	eea3 5b00 	vfma.f64	d5, d3, d0
 800e748:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800e74c:	eea3 5b02 	vfma.f64	d5, d3, d2
 800e750:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 800e754:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e758:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e75c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800e760:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e764:	eeb0 2b47 	vmov.f64	d2, d7
 800e768:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 800e890 <log+0x1c0>
 800e76c:	eeb0 6b40 	vmov.f64	d6, d0
 800e770:	eeb0 3b40 	vmov.f64	d3, d0
 800e774:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e778:	eea0 6b47 	vfms.f64	d6, d0, d7
 800e77c:	ee30 8b46 	vsub.f64	d8, d0, d6
 800e780:	ee26 1b06 	vmul.f64	d1, d6, d6
 800e784:	eea1 3b05 	vfma.f64	d3, d1, d5
 800e788:	ee30 7b43 	vsub.f64	d7, d0, d3
 800e78c:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e790:	eea1 7b05 	vfma.f64	d7, d1, d5
 800e794:	ee25 5b08 	vmul.f64	d5, d5, d8
 800e798:	eea5 7b00 	vfma.f64	d7, d5, d0
 800e79c:	eea2 7b04 	vfma.f64	d7, d2, d4
 800e7a0:	ee33 0b07 	vadd.f64	d0, d3, d7
 800e7a4:	ecbd 8b02 	vpop	{d8}
 800e7a8:	bcf0      	pop	{r4, r5, r6, r7}
 800e7aa:	4770      	bx	lr
 800e7ac:	f1a2 0410 	sub.w	r4, r2, #16
 800e7b0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 800e7b4:	428c      	cmp	r4, r1
 800e7b6:	d923      	bls.n	800e800 <log+0x130>
 800e7b8:	18d9      	adds	r1, r3, r3
 800e7ba:	eb40 0400 	adc.w	r4, r0, r0
 800e7be:	4321      	orrs	r1, r4
 800e7c0:	d105      	bne.n	800e7ce <log+0xfe>
 800e7c2:	ecbd 8b02 	vpop	{d8}
 800e7c6:	2001      	movs	r0, #1
 800e7c8:	bcf0      	pop	{r4, r5, r6, r7}
 800e7ca:	f000 bbf9 	b.w	800efc0 <__math_divzero>
 800e7ce:	4939      	ldr	r1, [pc, #228]	@ (800e8b4 <log+0x1e4>)
 800e7d0:	4288      	cmp	r0, r1
 800e7d2:	bf08      	it	eq
 800e7d4:	2b00      	cmpeq	r3, #0
 800e7d6:	d0e5      	beq.n	800e7a4 <log+0xd4>
 800e7d8:	0413      	lsls	r3, r2, #16
 800e7da:	d403      	bmi.n	800e7e4 <log+0x114>
 800e7dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800e7e0:	4393      	bics	r3, r2
 800e7e2:	d104      	bne.n	800e7ee <log+0x11e>
 800e7e4:	ecbd 8b02 	vpop	{d8}
 800e7e8:	bcf0      	pop	{r4, r5, r6, r7}
 800e7ea:	f000 bc01 	b.w	800eff0 <__math_invalid>
 800e7ee:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e898 <log+0x1c8>
 800e7f2:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e7f6:	ec53 2b17 	vmov	r2, r3, d7
 800e7fa:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800e7fe:	4613      	mov	r3, r2
 800e800:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 800e804:	492a      	ldr	r1, [pc, #168]	@ (800e8b0 <log+0x1e0>)
 800e806:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800e80a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800e80e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 800e812:	0d15      	lsrs	r5, r2, #20
 800e814:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 800e818:	052d      	lsls	r5, r5, #20
 800e81a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 800e81e:	1e1e      	subs	r6, r3, #0
 800e820:	1b47      	subs	r7, r0, r5
 800e822:	ec47 6b16 	vmov	d6, r6, r7
 800e826:	1512      	asrs	r2, r2, #20
 800e828:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e82c:	ee07 2a90 	vmov	s15, r2
 800e830:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e834:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e838:	ed91 4b00 	vldr	d4, [r1]
 800e83c:	ee25 1b02 	vmul.f64	d1, d5, d2
 800e840:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 800e844:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e848:	ee35 4b07 	vadd.f64	d4, d5, d7
 800e84c:	ee37 0b44 	vsub.f64	d0, d7, d4
 800e850:	ed91 7b02 	vldr	d7, [r1, #8]
 800e854:	ee30 0b05 	vadd.f64	d0, d0, d5
 800e858:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e85c:	ed91 7b04 	vldr	d7, [r1, #16]
 800e860:	ed91 6b08 	vldr	d6, [r1, #32]
 800e864:	eea7 0b02 	vfma.f64	d0, d7, d2
 800e868:	ed91 7b06 	vldr	d7, [r1, #24]
 800e86c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 800e870:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e874:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 800e878:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e87c:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e880:	eea1 0b07 	vfma.f64	d0, d1, d7
 800e884:	ee30 0b04 	vadd.f64	d0, d0, d4
 800e888:	e78c      	b.n	800e7a4 <log+0xd4>
 800e88a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800e8a0 <log+0x1d0>
 800e88e:	e789      	b.n	800e7a4 <log+0xd4>
 800e890:	00000000 	.word	0x00000000
 800e894:	41a00000 	.word	0x41a00000
 800e898:	00000000 	.word	0x00000000
 800e89c:	43300000 	.word	0x43300000
	...
 800e8a8:	000308ff 	.word	0x000308ff
 800e8ac:	3ff00000 	.word	0x3ff00000
 800e8b0:	0800f0a0 	.word	0x0800f0a0
 800e8b4:	7ff00000 	.word	0x7ff00000

0800e8b8 <log10>:
 800e8b8:	b508      	push	{r3, lr}
 800e8ba:	ed2d 8b02 	vpush	{d8}
 800e8be:	eeb0 8b40 	vmov.f64	d8, d0
 800e8c2:	f000 fadd 	bl	800ee80 <__ieee754_log10>
 800e8c6:	eeb4 8b48 	vcmp.f64	d8, d8
 800e8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ce:	d60f      	bvs.n	800e8f0 <log10+0x38>
 800e8d0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d8:	d80a      	bhi.n	800e8f0 <log10+0x38>
 800e8da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e2:	d108      	bne.n	800e8f6 <log10+0x3e>
 800e8e4:	f7ff fe7c 	bl	800e5e0 <__errno>
 800e8e8:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 800e910 <log10+0x58>
 800e8ec:	2322      	movs	r3, #34	@ 0x22
 800e8ee:	6003      	str	r3, [r0, #0]
 800e8f0:	ecbd 8b02 	vpop	{d8}
 800e8f4:	bd08      	pop	{r3, pc}
 800e8f6:	f7ff fe73 	bl	800e5e0 <__errno>
 800e8fa:	ecbd 8b02 	vpop	{d8}
 800e8fe:	2321      	movs	r3, #33	@ 0x21
 800e900:	6003      	str	r3, [r0, #0]
 800e902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e906:	4804      	ldr	r0, [pc, #16]	@ (800e918 <log10+0x60>)
 800e908:	f000 bab2 	b.w	800ee70 <nan>
 800e90c:	f3af 8000 	nop.w
 800e910:	00000000 	.word	0x00000000
 800e914:	fff00000 	.word	0xfff00000
 800e918:	0800f930 	.word	0x0800f930

0800e91c <checkint>:
 800e91c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e920:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800e924:	429a      	cmp	r2, r3
 800e926:	b570      	push	{r4, r5, r6, lr}
 800e928:	dd2a      	ble.n	800e980 <checkint+0x64>
 800e92a:	f240 4333 	movw	r3, #1075	@ 0x433
 800e92e:	429a      	cmp	r2, r3
 800e930:	dc24      	bgt.n	800e97c <checkint+0x60>
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	f1a3 0620 	sub.w	r6, r3, #32
 800e938:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e93c:	fa02 f403 	lsl.w	r4, r2, r3
 800e940:	fa02 f606 	lsl.w	r6, r2, r6
 800e944:	f1c3 0520 	rsb	r5, r3, #32
 800e948:	fa22 f505 	lsr.w	r5, r2, r5
 800e94c:	4334      	orrs	r4, r6
 800e94e:	432c      	orrs	r4, r5
 800e950:	409a      	lsls	r2, r3
 800e952:	ea20 0202 	bic.w	r2, r0, r2
 800e956:	ea21 0404 	bic.w	r4, r1, r4
 800e95a:	4322      	orrs	r2, r4
 800e95c:	f1a3 0420 	sub.w	r4, r3, #32
 800e960:	f1c3 0220 	rsb	r2, r3, #32
 800e964:	d10c      	bne.n	800e980 <checkint+0x64>
 800e966:	40d8      	lsrs	r0, r3
 800e968:	fa01 f302 	lsl.w	r3, r1, r2
 800e96c:	4318      	orrs	r0, r3
 800e96e:	40e1      	lsrs	r1, r4
 800e970:	4308      	orrs	r0, r1
 800e972:	f000 0001 	and.w	r0, r0, #1
 800e976:	f1d0 0002 	rsbs	r0, r0, #2
 800e97a:	bd70      	pop	{r4, r5, r6, pc}
 800e97c:	2002      	movs	r0, #2
 800e97e:	e7fc      	b.n	800e97a <checkint+0x5e>
 800e980:	2000      	movs	r0, #0
 800e982:	e7fa      	b.n	800e97a <checkint+0x5e>
 800e984:	0000      	movs	r0, r0
	...

0800e988 <pow>:
 800e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e98c:	ee10 4a90 	vmov	r4, s1
 800e990:	ed2d 8b0a 	vpush	{d8-d12}
 800e994:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800e998:	ee11 aa90 	vmov	sl, s3
 800e99c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800e9a0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	ee10 5a10 	vmov	r5, s0
 800e9aa:	ee11 0a10 	vmov	r0, s2
 800e9ae:	b087      	sub	sp, #28
 800e9b0:	46c4      	mov	ip, r8
 800e9b2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800e9b6:	d806      	bhi.n	800e9c6 <pow+0x3e>
 800e9b8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800e9bc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800e9c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9c2:	f240 8157 	bls.w	800ec74 <pow+0x2ec>
 800e9c6:	1802      	adds	r2, r0, r0
 800e9c8:	eb4a 010a 	adc.w	r1, sl, sl
 800e9cc:	f06f 0b01 	mvn.w	fp, #1
 800e9d0:	1e57      	subs	r7, r2, #1
 800e9d2:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 800e9d6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800e9da:	45bb      	cmp	fp, r7
 800e9dc:	eb7e 0303 	sbcs.w	r3, lr, r3
 800e9e0:	d242      	bcs.n	800ea68 <pow+0xe0>
 800e9e2:	ea52 0301 	orrs.w	r3, r2, r1
 800e9e6:	f04f 0300 	mov.w	r3, #0
 800e9ea:	d10c      	bne.n	800ea06 <pow+0x7e>
 800e9ec:	196d      	adds	r5, r5, r5
 800e9ee:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800e9f2:	4164      	adcs	r4, r4
 800e9f4:	42ab      	cmp	r3, r5
 800e9f6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e9fa:	41a3      	sbcs	r3, r4
 800e9fc:	f0c0 808f 	bcc.w	800eb1e <pow+0x196>
 800ea00:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ea04:	e02b      	b.n	800ea5e <pow+0xd6>
 800ea06:	4ed4      	ldr	r6, [pc, #848]	@ (800ed58 <pow+0x3d0>)
 800ea08:	42b4      	cmp	r4, r6
 800ea0a:	bf08      	it	eq
 800ea0c:	429d      	cmpeq	r5, r3
 800ea0e:	d109      	bne.n	800ea24 <pow+0x9c>
 800ea10:	1800      	adds	r0, r0, r0
 800ea12:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800ea16:	eb4a 0a0a 	adc.w	sl, sl, sl
 800ea1a:	4283      	cmp	r3, r0
 800ea1c:	4bcf      	ldr	r3, [pc, #828]	@ (800ed5c <pow+0x3d4>)
 800ea1e:	eb73 030a 	sbcs.w	r3, r3, sl
 800ea22:	e7eb      	b.n	800e9fc <pow+0x74>
 800ea24:	196d      	adds	r5, r5, r5
 800ea26:	48ce      	ldr	r0, [pc, #824]	@ (800ed60 <pow+0x3d8>)
 800ea28:	4164      	adcs	r4, r4
 800ea2a:	42ab      	cmp	r3, r5
 800ea2c:	eb70 0604 	sbcs.w	r6, r0, r4
 800ea30:	d375      	bcc.n	800eb1e <pow+0x196>
 800ea32:	4281      	cmp	r1, r0
 800ea34:	bf08      	it	eq
 800ea36:	429a      	cmpeq	r2, r3
 800ea38:	d171      	bne.n	800eb1e <pow+0x196>
 800ea3a:	4aca      	ldr	r2, [pc, #808]	@ (800ed64 <pow+0x3dc>)
 800ea3c:	4294      	cmp	r4, r2
 800ea3e:	bf08      	it	eq
 800ea40:	429d      	cmpeq	r5, r3
 800ea42:	d0dd      	beq.n	800ea00 <pow+0x78>
 800ea44:	4294      	cmp	r4, r2
 800ea46:	ea6f 0a0a 	mvn.w	sl, sl
 800ea4a:	bf34      	ite	cc
 800ea4c:	2400      	movcc	r4, #0
 800ea4e:	2401      	movcs	r4, #1
 800ea50:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800ea54:	4554      	cmp	r4, sl
 800ea56:	f040 81dc 	bne.w	800ee12 <pow+0x48a>
 800ea5a:	ee21 0b01 	vmul.f64	d0, d1, d1
 800ea5e:	b007      	add	sp, #28
 800ea60:	ecbd 8b0a 	vpop	{d8-d12}
 800ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea68:	196f      	adds	r7, r5, r5
 800ea6a:	eb44 0904 	adc.w	r9, r4, r4
 800ea6e:	1e7a      	subs	r2, r7, #1
 800ea70:	f169 0300 	sbc.w	r3, r9, #0
 800ea74:	4593      	cmp	fp, r2
 800ea76:	eb7e 0303 	sbcs.w	r3, lr, r3
 800ea7a:	d225      	bcs.n	800eac8 <pow+0x140>
 800ea7c:	ee20 0b00 	vmul.f64	d0, d0, d0
 800ea80:	2c00      	cmp	r4, #0
 800ea82:	da13      	bge.n	800eaac <pow+0x124>
 800ea84:	4651      	mov	r1, sl
 800ea86:	f7ff ff49 	bl	800e91c <checkint>
 800ea8a:	2801      	cmp	r0, #1
 800ea8c:	d10e      	bne.n	800eaac <pow+0x124>
 800ea8e:	eeb1 0b40 	vneg.f64	d0, d0
 800ea92:	ea57 0909 	orrs.w	r9, r7, r9
 800ea96:	d10b      	bne.n	800eab0 <pow+0x128>
 800ea98:	f1ba 0f00 	cmp.w	sl, #0
 800ea9c:	dadf      	bge.n	800ea5e <pow+0xd6>
 800ea9e:	b007      	add	sp, #28
 800eaa0:	ecbd 8b0a 	vpop	{d8-d12}
 800eaa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa8:	f000 ba8a 	b.w	800efc0 <__math_divzero>
 800eaac:	2000      	movs	r0, #0
 800eaae:	e7f0      	b.n	800ea92 <pow+0x10a>
 800eab0:	f1ba 0f00 	cmp.w	sl, #0
 800eab4:	dad3      	bge.n	800ea5e <pow+0xd6>
 800eab6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800eaba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800eabe:	ed8d 7b00 	vstr	d7, [sp]
 800eac2:	ed9d 0b00 	vldr	d0, [sp]
 800eac6:	e7ca      	b.n	800ea5e <pow+0xd6>
 800eac8:	2c00      	cmp	r4, #0
 800eaca:	da2b      	bge.n	800eb24 <pow+0x19c>
 800eacc:	4651      	mov	r1, sl
 800eace:	f7ff ff25 	bl	800e91c <checkint>
 800ead2:	b930      	cbnz	r0, 800eae2 <pow+0x15a>
 800ead4:	b007      	add	sp, #28
 800ead6:	ecbd 8b0a 	vpop	{d8-d12}
 800eada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eade:	f000 ba87 	b.w	800eff0 <__math_invalid>
 800eae2:	1e41      	subs	r1, r0, #1
 800eae4:	4248      	negs	r0, r1
 800eae6:	4148      	adcs	r0, r1
 800eae8:	0480      	lsls	r0, r0, #18
 800eaea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800eaee:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800eaf2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800eaf6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800eafa:	2b7f      	cmp	r3, #127	@ 0x7f
 800eafc:	d92d      	bls.n	800eb5a <pow+0x1d2>
 800eafe:	4b96      	ldr	r3, [pc, #600]	@ (800ed58 <pow+0x3d0>)
 800eb00:	2000      	movs	r0, #0
 800eb02:	429c      	cmp	r4, r3
 800eb04:	bf08      	it	eq
 800eb06:	4285      	cmpeq	r5, r0
 800eb08:	f43f af7a 	beq.w	800ea00 <pow+0x78>
 800eb0c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800eb10:	428a      	cmp	r2, r1
 800eb12:	d80c      	bhi.n	800eb2e <pow+0x1a6>
 800eb14:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800eb18:	42a8      	cmp	r0, r5
 800eb1a:	41a3      	sbcs	r3, r4
 800eb1c:	d204      	bcs.n	800eb28 <pow+0x1a0>
 800eb1e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800eb22:	e79c      	b.n	800ea5e <pow+0xd6>
 800eb24:	2000      	movs	r0, #0
 800eb26:	e7e4      	b.n	800eaf2 <pow+0x16a>
 800eb28:	ee30 0b41 	vsub.f64	d0, d0, d1
 800eb2c:	e797      	b.n	800ea5e <pow+0xd6>
 800eb2e:	2d01      	cmp	r5, #1
 800eb30:	eb74 0303 	sbcs.w	r3, r4, r3
 800eb34:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800eb38:	bf34      	ite	cc
 800eb3a:	2301      	movcc	r3, #1
 800eb3c:	2300      	movcs	r3, #0
 800eb3e:	4296      	cmp	r6, r2
 800eb40:	bf8c      	ite	hi
 800eb42:	2600      	movhi	r6, #0
 800eb44:	2601      	movls	r6, #1
 800eb46:	42b3      	cmp	r3, r6
 800eb48:	f000 809c 	beq.w	800ec84 <pow+0x2fc>
 800eb4c:	b007      	add	sp, #28
 800eb4e:	ecbd 8b0a 	vpop	{d8-d12}
 800eb52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb56:	f000 ba2b 	b.w	800efb0 <__math_oflow>
 800eb5a:	f1bc 0f00 	cmp.w	ip, #0
 800eb5e:	d10a      	bne.n	800eb76 <pow+0x1ee>
 800eb60:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800ed48 <pow+0x3c0>
 800eb64:	ee20 7b07 	vmul.f64	d7, d0, d7
 800eb68:	ec53 2b17 	vmov	r2, r3, d7
 800eb6c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800eb70:	4615      	mov	r5, r2
 800eb72:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800eb76:	4a7c      	ldr	r2, [pc, #496]	@ (800ed68 <pow+0x3e0>)
 800eb78:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800eb7c:	4422      	add	r2, r4
 800eb7e:	1513      	asrs	r3, r2, #20
 800eb80:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800eb84:	ee03 3a10 	vmov	s6, r3
 800eb88:	0d12      	lsrs	r2, r2, #20
 800eb8a:	4b78      	ldr	r3, [pc, #480]	@ (800ed6c <pow+0x3e4>)
 800eb8c:	0512      	lsls	r2, r2, #20
 800eb8e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800eb92:	1aa7      	subs	r7, r4, r2
 800eb94:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800eb98:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800eb9c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800eba0:	1e2e      	subs	r6, r5, #0
 800eba2:	ec47 6b14 	vmov	d4, r6, r7
 800eba6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800ebaa:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ebae:	ed93 5b00 	vldr	d5, [r3]
 800ebb2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ebb6:	eea3 2b05 	vfma.f64	d2, d3, d5
 800ebba:	ed93 5b02 	vldr	d5, [r3, #8]
 800ebbe:	ee36 4b02 	vadd.f64	d4, d6, d2
 800ebc2:	ee32 2b44 	vsub.f64	d2, d2, d4
 800ebc6:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ebca:	ed93 5b04 	vldr	d5, [r3, #16]
 800ebce:	ee32 2b06 	vadd.f64	d2, d2, d6
 800ebd2:	ee37 7b02 	vadd.f64	d7, d7, d2
 800ebd6:	ee26 5b05 	vmul.f64	d5, d6, d5
 800ebda:	ee26 0b05 	vmul.f64	d0, d6, d5
 800ebde:	ee34 8b00 	vadd.f64	d8, d4, d0
 800ebe2:	eeb0 9b40 	vmov.f64	d9, d0
 800ebe6:	ee34 4b48 	vsub.f64	d4, d4, d8
 800ebea:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800ebee:	ee34 ab00 	vadd.f64	d10, d4, d0
 800ebf2:	ed93 5b06 	vldr	d5, [r3, #24]
 800ebf6:	ee26 bb00 	vmul.f64	d11, d6, d0
 800ebfa:	ee37 7b09 	vadd.f64	d7, d7, d9
 800ebfe:	ed93 4b08 	vldr	d4, [r3, #32]
 800ec02:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800ec06:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800ec0a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800ec0e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800ec12:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800ec16:	eea6 4b03 	vfma.f64	d4, d6, d3
 800ec1a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800ec1e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800ec22:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ec26:	eea0 5b04 	vfma.f64	d5, d0, d4
 800ec2a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800ec2e:	ee38 4b07 	vadd.f64	d4, d8, d7
 800ec32:	ee21 6b04 	vmul.f64	d6, d1, d4
 800ec36:	ee16 3a90 	vmov	r3, s13
 800ec3a:	eeb0 5b46 	vmov.f64	d5, d6
 800ec3e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800ec42:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800ec46:	18b2      	adds	r2, r6, r2
 800ec48:	2a3e      	cmp	r2, #62	@ 0x3e
 800ec4a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800ec4e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800ec52:	ee38 8b07 	vadd.f64	d8, d8, d7
 800ec56:	eea1 5b08 	vfma.f64	d5, d1, d8
 800ec5a:	d91b      	bls.n	800ec94 <pow+0x30c>
 800ec5c:	2a00      	cmp	r2, #0
 800ec5e:	da0b      	bge.n	800ec78 <pow+0x2f0>
 800ec60:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ec64:	ee36 0b00 	vadd.f64	d0, d6, d0
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	f43f aef8 	beq.w	800ea5e <pow+0xd6>
 800ec6e:	eeb1 0b40 	vneg.f64	d0, d0
 800ec72:	e6f4      	b.n	800ea5e <pow+0xd6>
 800ec74:	2000      	movs	r0, #0
 800ec76:	e77e      	b.n	800eb76 <pow+0x1ee>
 800ec78:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800ec7c:	d909      	bls.n	800ec92 <pow+0x30a>
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f6bf af64 	bge.w	800eb4c <pow+0x1c4>
 800ec84:	b007      	add	sp, #28
 800ec86:	ecbd 8b0a 	vpop	{d8-d12}
 800ec8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8e:	f000 b987 	b.w	800efa0 <__math_uflow>
 800ec92:	2600      	movs	r6, #0
 800ec94:	4936      	ldr	r1, [pc, #216]	@ (800ed70 <pow+0x3e8>)
 800ec96:	ed91 4b02 	vldr	d4, [r1, #8]
 800ec9a:	ed91 3b00 	vldr	d3, [r1]
 800ec9e:	eeb0 7b44 	vmov.f64	d7, d4
 800eca2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800eca6:	ee17 5a10 	vmov	r5, s14
 800ecaa:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ecae:	ed91 4b04 	vldr	d4, [r1, #16]
 800ecb2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800ecb6:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ecba:	ed91 4b06 	vldr	d4, [r1, #24]
 800ecbe:	18dc      	adds	r4, r3, r3
 800ecc0:	f104 030f 	add.w	r3, r4, #15
 800ecc4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ecc8:	eea7 6b04 	vfma.f64	d6, d7, d4
 800eccc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800ecd0:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ecd4:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ecd8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800ecdc:	ed91 4b08 	vldr	d4, [r1, #32]
 800ece0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ece4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ece8:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ecec:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800ecf0:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ecf4:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ecf8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800ecfc:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ed00:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ed04:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ed08:	1940      	adds	r0, r0, r5
 800ed0a:	2700      	movs	r7, #0
 800ed0c:	eb17 020c 	adds.w	r2, r7, ip
 800ed10:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ed14:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ed18:	2e00      	cmp	r6, #0
 800ed1a:	d175      	bne.n	800ee08 <pow+0x480>
 800ed1c:	42bd      	cmp	r5, r7
 800ed1e:	db29      	blt.n	800ed74 <pow+0x3ec>
 800ed20:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800ed24:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800ed28:	4610      	mov	r0, r2
 800ed2a:	ec41 0b10 	vmov	d0, r0, r1
 800ed2e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ed32:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ed50 <pow+0x3c8>
 800ed36:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ed3a:	b007      	add	sp, #28
 800ed3c:	ecbd 8b0a 	vpop	{d8-d12}
 800ed40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed44:	f000 b96c 	b.w	800f020 <__math_check_oflow>
 800ed48:	00000000 	.word	0x00000000
 800ed4c:	43300000 	.word	0x43300000
 800ed50:	00000000 	.word	0x00000000
 800ed54:	7f000000 	.word	0x7f000000
 800ed58:	3ff00000 	.word	0x3ff00000
 800ed5c:	fff00000 	.word	0xfff00000
 800ed60:	ffe00000 	.word	0xffe00000
 800ed64:	7fe00000 	.word	0x7fe00000
 800ed68:	c0196aab 	.word	0xc0196aab
 800ed6c:	0800f938 	.word	0x0800f938
 800ed70:	08010980 	.word	0x08010980
 800ed74:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ed78:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800ed7c:	4610      	mov	r0, r2
 800ed7e:	ec41 0b15 	vmov	d5, r0, r1
 800ed82:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800ed86:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ed8a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800ed8e:	eeb0 4bc7 	vabs.f64	d4, d7
 800ed92:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800ed96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800ee18 <pow+0x490>
 800ed9e:	d52a      	bpl.n	800edf6 <pow+0x46e>
 800eda0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800eda4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800eda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edac:	ee35 5b06 	vadd.f64	d5, d5, d6
 800edb0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800edb4:	bf58      	it	pl
 800edb6:	eeb0 4b43 	vmovpl.f64	d4, d3
 800edba:	ee37 3b04 	vadd.f64	d3, d7, d4
 800edbe:	ee34 6b43 	vsub.f64	d6, d4, d3
 800edc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800edc6:	ee36 6b05 	vadd.f64	d6, d6, d5
 800edca:	ee36 6b03 	vadd.f64	d6, d6, d3
 800edce:	ee36 7b44 	vsub.f64	d7, d6, d4
 800edd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800edd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edda:	d104      	bne.n	800ede6 <pow+0x45e>
 800eddc:	4632      	mov	r2, r6
 800edde:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ede2:	ec43 2b17 	vmov	d7, r2, r3
 800ede6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800edea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800edee:	ee26 6b00 	vmul.f64	d6, d6, d0
 800edf2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800edf6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800edfa:	b007      	add	sp, #28
 800edfc:	ecbd 8b0a 	vpop	{d8-d12}
 800ee00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	f000 b903 	b.w	800f00e <__math_check_uflow>
 800ee08:	ec43 2b10 	vmov	d0, r2, r3
 800ee0c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ee10:	e625      	b.n	800ea5e <pow+0xd6>
 800ee12:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800ee20 <pow+0x498>
 800ee16:	e622      	b.n	800ea5e <pow+0xd6>
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	00100000 	.word	0x00100000
	...

0800ee28 <sqrt>:
 800ee28:	b508      	push	{r3, lr}
 800ee2a:	ed2d 8b04 	vpush	{d8-d9}
 800ee2e:	eeb0 8b40 	vmov.f64	d8, d0
 800ee32:	f000 f819 	bl	800ee68 <__ieee754_sqrt>
 800ee36:	eeb4 8b48 	vcmp.f64	d8, d8
 800ee3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3e:	d60c      	bvs.n	800ee5a <sqrt+0x32>
 800ee40:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800ee60 <sqrt+0x38>
 800ee44:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ee48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4c:	d505      	bpl.n	800ee5a <sqrt+0x32>
 800ee4e:	f7ff fbc7 	bl	800e5e0 <__errno>
 800ee52:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ee56:	2321      	movs	r3, #33	@ 0x21
 800ee58:	6003      	str	r3, [r0, #0]
 800ee5a:	ecbd 8b04 	vpop	{d8-d9}
 800ee5e:	bd08      	pop	{r3, pc}
	...

0800ee68 <__ieee754_sqrt>:
 800ee68:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ee6c:	4770      	bx	lr
	...

0800ee70 <nan>:
 800ee70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ee78 <nan+0x8>
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	7ff80000 	.word	0x7ff80000

0800ee80 <__ieee754_log10>:
 800ee80:	b510      	push	{r4, lr}
 800ee82:	ee10 3a90 	vmov	r3, s1
 800ee86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ee8a:	ed2d 8b02 	vpush	{d8}
 800ee8e:	da21      	bge.n	800eed4 <__ieee754_log10+0x54>
 800ee90:	ee10 1a10 	vmov	r1, s0
 800ee94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ee98:	430a      	orrs	r2, r1
 800ee9a:	d108      	bne.n	800eeae <__ieee754_log10+0x2e>
 800ee9c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 800ef28 <__ieee754_log10+0xa8>
 800eea0:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 800ef30 <__ieee754_log10+0xb0>
 800eea4:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800eea8:	ecbd 8b02 	vpop	{d8}
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	da02      	bge.n	800eeb8 <__ieee754_log10+0x38>
 800eeb2:	ee30 6b40 	vsub.f64	d6, d0, d0
 800eeb6:	e7f3      	b.n	800eea0 <__ieee754_log10+0x20>
 800eeb8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800ef38 <__ieee754_log10+0xb8>
 800eebc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eec0:	ee10 3a90 	vmov	r3, s1
 800eec4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800eec8:	4923      	ldr	r1, [pc, #140]	@ (800ef58 <__ieee754_log10+0xd8>)
 800eeca:	428b      	cmp	r3, r1
 800eecc:	dd04      	ble.n	800eed8 <__ieee754_log10+0x58>
 800eece:	ee30 0b00 	vadd.f64	d0, d0, d0
 800eed2:	e7e9      	b.n	800eea8 <__ieee754_log10+0x28>
 800eed4:	2200      	movs	r2, #0
 800eed6:	e7f7      	b.n	800eec8 <__ieee754_log10+0x48>
 800eed8:	1518      	asrs	r0, r3, #20
 800eeda:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800eede:	4410      	add	r0, r2
 800eee0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800eee4:	f240 34ff 	movw	r4, #1023	@ 0x3ff
 800eee8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800eeec:	ee08 3a10 	vmov	s16, r3
 800eef0:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 800eef4:	ec53 2b10 	vmov	r2, r3, d0
 800eef8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800eefc:	ec43 2b10 	vmov	d0, r2, r3
 800ef00:	f7ff fbe6 	bl	800e6d0 <log>
 800ef04:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ef40 <__ieee754_log10+0xc0>
 800ef08:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ef48 <__ieee754_log10+0xc8>
 800ef10:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 800ef14:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ef18:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ef50 <__ieee754_log10+0xd0>
 800ef1c:	eea8 0b07 	vfma.f64	d0, d8, d7
 800ef20:	e7c2      	b.n	800eea8 <__ieee754_log10+0x28>
 800ef22:	bf00      	nop
 800ef24:	f3af 8000 	nop.w
 800ef28:	00000000 	.word	0x00000000
 800ef2c:	c3500000 	.word	0xc3500000
	...
 800ef3c:	43500000 	.word	0x43500000
 800ef40:	1526e50e 	.word	0x1526e50e
 800ef44:	3fdbcb7b 	.word	0x3fdbcb7b
 800ef48:	11f12b36 	.word	0x11f12b36
 800ef4c:	3d59fef3 	.word	0x3d59fef3
 800ef50:	509f6000 	.word	0x509f6000
 800ef54:	3fd34413 	.word	0x3fd34413
 800ef58:	7fefffff 	.word	0x7fefffff

0800ef5c <with_errno>:
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	ed2d 8b02 	vpush	{d8}
 800ef62:	eeb0 8b40 	vmov.f64	d8, d0
 800ef66:	4604      	mov	r4, r0
 800ef68:	f7ff fb3a 	bl	800e5e0 <__errno>
 800ef6c:	eeb0 0b48 	vmov.f64	d0, d8
 800ef70:	ecbd 8b02 	vpop	{d8}
 800ef74:	6004      	str	r4, [r0, #0]
 800ef76:	bd10      	pop	{r4, pc}

0800ef78 <xflow>:
 800ef78:	b082      	sub	sp, #8
 800ef7a:	b158      	cbz	r0, 800ef94 <xflow+0x1c>
 800ef7c:	eeb1 7b40 	vneg.f64	d7, d0
 800ef80:	ed8d 7b00 	vstr	d7, [sp]
 800ef84:	ed9d 7b00 	vldr	d7, [sp]
 800ef88:	2022      	movs	r0, #34	@ 0x22
 800ef8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef8e:	b002      	add	sp, #8
 800ef90:	f7ff bfe4 	b.w	800ef5c <with_errno>
 800ef94:	eeb0 7b40 	vmov.f64	d7, d0
 800ef98:	e7f2      	b.n	800ef80 <xflow+0x8>
 800ef9a:	0000      	movs	r0, r0
 800ef9c:	0000      	movs	r0, r0
	...

0800efa0 <__math_uflow>:
 800efa0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800efa8 <__math_uflow+0x8>
 800efa4:	f7ff bfe8 	b.w	800ef78 <xflow>
 800efa8:	00000000 	.word	0x00000000
 800efac:	10000000 	.word	0x10000000

0800efb0 <__math_oflow>:
 800efb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800efb8 <__math_oflow+0x8>
 800efb4:	f7ff bfe0 	b.w	800ef78 <xflow>
 800efb8:	00000000 	.word	0x00000000
 800efbc:	70000000 	.word	0x70000000

0800efc0 <__math_divzero>:
 800efc0:	b082      	sub	sp, #8
 800efc2:	2800      	cmp	r0, #0
 800efc4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800efc8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800efcc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800efd0:	ed8d 7b00 	vstr	d7, [sp]
 800efd4:	ed9d 0b00 	vldr	d0, [sp]
 800efd8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800efe8 <__math_divzero+0x28>
 800efdc:	2022      	movs	r0, #34	@ 0x22
 800efde:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800efe2:	b002      	add	sp, #8
 800efe4:	f7ff bfba 	b.w	800ef5c <with_errno>
	...

0800eff0 <__math_invalid>:
 800eff0:	eeb0 7b40 	vmov.f64	d7, d0
 800eff4:	eeb4 7b47 	vcmp.f64	d7, d7
 800eff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f000:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f004:	d602      	bvs.n	800f00c <__math_invalid+0x1c>
 800f006:	2021      	movs	r0, #33	@ 0x21
 800f008:	f7ff bfa8 	b.w	800ef5c <with_errno>
 800f00c:	4770      	bx	lr

0800f00e <__math_check_uflow>:
 800f00e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f016:	d102      	bne.n	800f01e <__math_check_uflow+0x10>
 800f018:	2022      	movs	r0, #34	@ 0x22
 800f01a:	f7ff bf9f 	b.w	800ef5c <with_errno>
 800f01e:	4770      	bx	lr

0800f020 <__math_check_oflow>:
 800f020:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800f040 <__math_check_oflow+0x20>
 800f024:	eeb0 7bc0 	vabs.f64	d7, d0
 800f028:	eeb4 7b46 	vcmp.f64	d7, d6
 800f02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f030:	dd02      	ble.n	800f038 <__math_check_oflow+0x18>
 800f032:	2022      	movs	r0, #34	@ 0x22
 800f034:	f7ff bf92 	b.w	800ef5c <with_errno>
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	f3af 8000 	nop.w
 800f040:	ffffffff 	.word	0xffffffff
 800f044:	7fefffff 	.word	0x7fefffff

0800f048 <_init>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	bf00      	nop
 800f04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f04e:	bc08      	pop	{r3}
 800f050:	469e      	mov	lr, r3
 800f052:	4770      	bx	lr

0800f054 <_fini>:
 800f054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f056:	bf00      	nop
 800f058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f05a:	bc08      	pop	{r3}
 800f05c:	469e      	mov	lr, r3
 800f05e:	4770      	bx	lr
